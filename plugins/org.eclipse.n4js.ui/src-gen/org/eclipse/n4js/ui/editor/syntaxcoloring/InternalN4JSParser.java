package org.eclipse.n4js.ui.editor.syntaxcoloring;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.n4js.services.N4JSGrammarAccess;
import org.eclipse.n4js.ui.editor.syntaxcoloring.AbstractInternalHighlightingAntlrParser;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
/**
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@SuppressWarnings("all")
public class InternalN4JSParser extends AbstractInternalHighlightingAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "EqualsSignGreaterThanSign", "QuestionMarkFullStop", "QuestionMarkQuestionMark", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_HEX_INT", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_IDENTIFIER_PART", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_IDENTIFIER", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_VERSION", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=21;
    public static final int Enum=45;
    public static final int RULE_REGEX_CHAR=134;
    public static final int Import=23;
    public static final int EqualsSignGreaterThanSign=77;
    public static final int Var=64;
    public static final int RULE_ACTUAL_TEMPLATE_END=141;
    public static final int Break=32;
    public static final int False=36;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_VERSION=164;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=138;
    public static final int Throw=38;
    public static final int Private=19;
    public static final int Extends=17;
    public static final int RULE_REGEX_TAIL=137;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=53;
    public static final int GreaterThanSign=104;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=131;
    public static final int RULE_TEMPLATE_HEAD=139;
    public static final int RULE_EOL=152;
    public static final int RULE_STRUCTMODSUFFIX=146;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=140;
    public static final int Out=61;
    public static final int RULE_ZWNJ=161;
    public static final int EqualsSignEqualsSign=76;
    public static final int Project=20;
    public static final int RULE_OCTAL_INT=121;
    public static final int Switch=27;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=148;
    public static final int Get=58;
    public static final int RULE_ML_COMMENT=150;
    public static final int LeftSquareBracket=107;
    public static final int If=84;
    public static final int LessThanSignLessThanSign=74;
    public static final int RULE_REGEX_START=136;
    public static final int Finally=18;
    public static final int Intersection=4;
    public static final int QuestionMarkQuestionMark=79;
    public static final int Set=62;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=156;
    public static final int In=85;
    public static final int Catch=33;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=124;
    public static final int RULE_TEMPLATE_MIDDLE=142;
    public static final int RULE_EXPONENT_PART=115;
    public static final int Union=39;
    public static final int Case=43;
    public static final int QuestionMarkFullStop=78;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=133;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=167;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int Target=28;
    public static final int RULE_IDENTIFIER_PART=123;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=166;
    public static final int Export=22;
    public static final int CommercialAtCommercialAt=80;
    public static final int LessThanSignEqualsSign=75;
    public static final int RightCurlyBracket=112;
    public static final int Solidus=99;
    public static final int PercentSignEqualsSign=66;
    public static final int RULE_HEX_INT=119;
    public static final int FullStop=98;
    public static final int Abstract=11;
    public static final int Constructor=5;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=125;
    public static final int Default=16;
    public static final int CommercialAt=106;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=130;
    public static final int Semicolon=101;
    public static final int Type=50;
    public static final int PlusSignPlusSign=70;
    public static final int QuestionMark=105;
    public static final int Else=44;
    public static final int RULE_HEX_DIGIT=155;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=160;
    public static final int Yield=41;
    public static final int ExclamationMarkEqualsSign=65;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=144;
    public static final int HyphenMinusHyphenMinus=72;
    public static final int New=60;
    public static final int Null=47;
    public static final int AmpersandEqualsSign=68;
    public static final int Typeof=29;
    public static final int SolidusEqualsSign=73;
    public static final int True=49;
    public static final int FullStopFullStopFullStop=54;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=147;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=153;
    public static final int Super=37;
    public static final int Async=30;
    public static final int This=42;
    public static final int Ampersand=91;
    public static final int Try=63;
    public static final int AsteriskEqualsSign=69;
    public static final int VerticalLineEqualsSign=87;
    public static final int Void=51;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=120;
    public static final int Protected=10;
    public static final int Const=35;
    public static final int RULE_ACTUAL_REGEX_TAIL=135;
    public static final int For=57;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=158;
    public static final int Do=83;
    public static final int Public=24;
    public static final int RULE_DOUBLE_STRING_CHAR=127;
    public static final int RULE_LEGACY_OCTAL_INT=122;
    public static final int EqualsSignEqualsSignEqualsSign=56;
    public static final int RULE_TEMPLATE_END=143;
    public static final int This_1=48;
    public static final int RULE_DOT_DOT=163;
    public static final int RULE_NO_LINE_TERMINATOR=145;
    public static final int External=14;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=34;
    public static final int Static=26;
    public static final int Debugger=13;
    public static final int RULE_SINGLE_STRING_CHAR=128;
    public static final int LessThanSignLessThanSignEqualsSign=55;
    public static final int RULE_INT_SUFFIX=118;
    public static final int RULE_IDENTIFIER=126;
    public static final int RULE_ML_COMMENT_FRAGMENT=149;
    public static final int RULE_STRING=129;
    public static final int Continue=12;
    public static final int RULE_SL_COMMENT=151;
    public static final int With=52;
    public static final int EqualsSign=103;
    public static final int Function=15;
    public static final int RULE_ZWJ=162;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=159;
    public static final int AmpersandAmpersand=67;
    public static final int RULE_DOUBLE=117;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int RULE_BACKSLASH_SEQUENCE=132;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=71;
    public static final int Return=25;
    public static final int RULE_WS=154;
    public static final int RULE_BOM=165;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int From=46;
    public static final int RULE_ANY_OTHER=168;
    public static final int While=40;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=157;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=114;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=116;
    public static final int Let=59;
    public static final int Await=31;
        public InternalN4JSParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    public String[] getTokenNames() { return InternalN4JSParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSParser.g"; }
     	private N4JSGrammarAccess grammarAccess;
        public InternalN4JSParser(TokenStream input, N4JSGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
        }
    	protected boolean forcedRewind(int position) { return true; } // overridden in subtype
    	protected void promoteEOL() {} // overridden in subtype
    	protected boolean hasDisallowedEOL() { return false; } // overridden in subtype
    	protected boolean isTypeRefNoTrailingLineBreak() { return true; } // overridden in subtype
    	protected void setInRegularExpression() {} // overridden in subtype
    	protected void setInTemplateSegment() {} // overridden in subtype
    	protected void announce(Token token, AbstractElement element) {} // overridden in subtype
    	protected void announce(Token start, Token stop, AbstractElement element) {} // overridden in subtype
    public final void entryRuleScript() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScript();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleScript() throws RecognitionException {
        InternalN4JSParser.ruleScriptAnnotation_return AnnotationsScriptAnnotationParserRuleCall_1_0_0 = null;
        InternalN4JSParser.ruleScriptElement_return ScriptElementsScriptElementParserRuleCall_1_1_0 = null;
        try {
            {
            {
            loop1:
            do {
                int alt1=3;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==CommercialAtCommercialAt) ) {
                    alt1=1;
                }
                else if ( ((LA1_0>=Intersection && LA1_0<=Implements)||(LA1_0>=Promisify && LA1_0<=Function)||(LA1_0>=Private && LA1_0<=Break)||(LA1_0>=Class && LA1_0<=This)||(LA1_0>=Enum && LA1_0<=With)||(LA1_0>=For && LA1_0<=Var)||LA1_0==PlusSignPlusSign||(LA1_0>=HyphenMinusHyphenMinus && LA1_0<=SolidusEqualsSign)||(LA1_0>=As && LA1_0<=If)||LA1_0==Of||LA1_0==ExclamationMark||LA1_0==LeftParenthesis||LA1_0==PlusSign||LA1_0==HyphenMinus||LA1_0==Solidus||(LA1_0>=Semicolon && LA1_0<=LessThanSign)||(LA1_0>=CommercialAt && LA1_0<=LeftSquareBracket)||LA1_0==LeftCurlyBracket||LA1_0==Tilde||LA1_0==RULE_DOUBLE||(LA1_0>=RULE_HEX_INT && LA1_0<=RULE_LEGACY_OCTAL_INT)||LA1_0==RULE_SCIENTIFIC_INT||LA1_0==RULE_IDENTIFIER||LA1_0==RULE_STRING||(LA1_0>=RULE_TEMPLATE_HEAD && LA1_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA1_0==RULE_INT) ) {
                    alt1=2;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    AnnotationsScriptAnnotationParserRuleCall_1_0_0=ruleScriptAnnotation();
            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	      					announce((AnnotationsScriptAnnotationParserRuleCall_1_0_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0_0.start):null), (AnnotationsScriptAnnotationParserRuleCall_1_0_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0_0.stop):null), grammarAccess.getScriptAccess().getAnnotationsAssignment_1_0());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	case 2 :
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    ScriptElementsScriptElementParserRuleCall_1_1_0=ruleScriptElement();
            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	      					announce((ScriptElementsScriptElementParserRuleCall_1_1_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_1_1_0.start):null), (ScriptElementsScriptElementParserRuleCall_1_1_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_1_1_0.stop):null), grammarAccess.getScriptAccess().getScriptElementsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScriptElement_return ruleScriptElement() throws RecognitionException {
        InternalN4JSParser.ruleScriptElement_return retval = new InternalN4JSParser.ruleScriptElement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotatedScriptElement_return AnnotatedScriptElementParserRuleCall_0 = null;
        InternalN4JSParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;
        InternalN4JSParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;
        InternalN4JSParser.ruleImportDeclaration_return ImportDeclarationParserRuleCall_4 = null;
        InternalN4JSParser.ruleExportDeclaration_return ExportDeclarationParserRuleCall_5 = null;
        InternalN4JSParser.ruleRootStatement_return RootStatementParserRuleCall_6 = null;
        try {
            {
            int alt2=7;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedScriptElementParserRuleCall_0=ruleAnnotatedScriptElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.start):null), (AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.stop):null), grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationParserRuleCall_4=ruleImportDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.start):null), (ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.stop):null), grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_4()); 
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationParserRuleCall_5=ruleExportDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.start):null), (ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.stop):null), grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_6=ruleRootStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.start):null), (RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.stop):null), grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_6()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedScriptElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotatedScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedScriptElement_return ruleAnnotatedScriptElement() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedScriptElement_return retval = new InternalN4JSParser.ruleAnnotatedScriptElement_return();
        retval.start = input.LT(1);
        Token ClassKeyword_1_3_0_0_2=null;
        Token InterfaceKeyword_1_3_0_1_2=null;
        Token EnumKeyword_1_4_2=null;
        Token LeftCurlyBracketKeyword_1_4_5=null;
        Token CommaKeyword_1_4_7_0=null;
        Token RightCurlyBracketKeyword_1_4_8=null;
        InternalN4JSParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1_0_1 = null;
        InternalN4JSParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1_1_1 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1 = null;
        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_2_1_0_2 = null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_0_4_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_1_3_0_0_5 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_6 = null;
        InternalN4JSParser.ruleClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_1_3_0_0_7 = null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_1_4_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_1_3_0_1_5 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_1_6 = null;
        InternalN4JSParser.ruleInterfaceExtendsList_return InterfaceExtendsListParserRuleCall_1_3_0_1_7 = null;
        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_3_1 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_4_3_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_1_4_4 = null;
        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_6_0 = null;
        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_4);
            AnnotationListParserRuleCall_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0()); 
            }
            }
            int alt18=5;
            alt18 = dfa18.predict(input);
            switch (alt18) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationImplParserRuleCall_1_0_1=ruleExportDeclarationImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.start):null), (ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationImplParserRuleCall_1_1_1=ruleImportDeclarationImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.start):null), (ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop3:
                    do {
                        int alt3=2;
                        int LA3_0 = input.LA(1);
                        if ( ((LA3_0>=Protected && LA3_0<=Abstract)||LA3_0==External||(LA3_0>=Private && LA3_0<=Project)||LA3_0==Public||LA3_0==Static||LA3_0==Const) ) {
                            alt3=1;
                        }
                        switch (alt3) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_5);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop3;
                        }
                    } while (true);
                    pushFollow(FOLLOW_5);
                    AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1=ruleAsyncNoTrailingLineBreak();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_2_1_0_2=ruleFunctionImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.start):null), (FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2()); 
                    }
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    int alt14=2;
                    alt14 = dfa14.predict(input);
                    switch (alt14) {
                        case 1 :
                            {
                            {
                            loop4:
                            do {
                                int alt4=2;
                                int LA4_0 = input.LA(1);
                                if ( ((LA4_0>=Protected && LA4_0<=Abstract)||LA4_0==External||(LA4_0>=Private && LA4_0<=Project)||LA4_0==Public||LA4_0==Static||LA4_0==Const) ) {
                                    alt4=1;
                                }
                                switch (alt4) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_6);
                            	    ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop4;
                                }
                            } while (true);
                            ClassKeyword_1_3_0_0_2=(Token)match(input,Class,FOLLOW_7); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(ClassKeyword_1_3_0_0_2, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2());
                            }
                            int alt5=2;
                            int LA5_0 = input.LA(1);
                            if ( (LA5_0==Tilde) ) {
                                alt5=1;
                            }
                            switch (alt5) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_8);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_0_3());
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            pushFollow(FOLLOW_9);
                            NameBindingIdentifierParserRuleCall_1_3_0_0_4_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_0_4());
                            }
                            }
                            }
                            int alt6=2;
                            int LA6_0 = input.LA(1);
                            if ( (LA6_0==RULE_VERSION) ) {
                                alt6=1;
                            }
                            switch (alt6) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    VersionDeclarationParserRuleCall_1_3_0_0_5=ruleVersionDeclaration();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VersionDeclarationParserRuleCall_1_3_0_0_5!=null?((Token)VersionDeclarationParserRuleCall_1_3_0_0_5.start):null), (VersionDeclarationParserRuleCall_1_3_0_0_5!=null?((Token)VersionDeclarationParserRuleCall_1_3_0_0_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getVersionDeclarationParserRuleCall_1_3_0_0_5()); 
                                    }
                                    }
                                    break;
                            }
                            int alt7=2;
                            int LA7_0 = input.LA(1);
                            if ( (LA7_0==LessThanSign) ) {
                                alt7=1;
                            }
                            switch (alt7) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypeVariablesParserRuleCall_1_3_0_0_6=ruleTypeVariables();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_0_6!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_6.start):null), (TypeVariablesParserRuleCall_1_3_0_0_6!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_0_6()); 
                                    }
                                    }
                                    break;
                            }
                            int alt8=2;
                            int LA8_0 = input.LA(1);
                            if ( (LA8_0==Implements||LA8_0==Extends) ) {
                                alt8=1;
                            }
                            switch (alt8) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    ClassExtendsImplementsParserRuleCall_1_3_0_0_7=ruleClassExtendsImplements();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsImplementsParserRuleCall_1_3_0_0_7!=null?((Token)ClassExtendsImplementsParserRuleCall_1_3_0_0_7.start):null), (ClassExtendsImplementsParserRuleCall_1_3_0_0_7!=null?((Token)ClassExtendsImplementsParserRuleCall_1_3_0_0_7.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsImplementsParserRuleCall_1_3_0_0_7()); 
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            loop9:
                            do {
                                int alt9=2;
                                int LA9_0 = input.LA(1);
                                if ( ((LA9_0>=Protected && LA9_0<=Abstract)||LA9_0==External||(LA9_0>=Private && LA9_0<=Project)||LA9_0==Public||LA9_0==Static||LA9_0==Const) ) {
                                    alt9=1;
                                }
                                switch (alt9) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_10);
                            	    ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop9;
                                }
                            } while (true);
                            InterfaceKeyword_1_3_0_1_2=(Token)match(input,Interface,FOLLOW_7); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(InterfaceKeyword_1_3_0_1_2, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2());
                            }
                            int alt10=2;
                            int LA10_0 = input.LA(1);
                            if ( (LA10_0==Tilde) ) {
                                alt10=1;
                            }
                            switch (alt10) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_8);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_1_3());
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            pushFollow(FOLLOW_9);
                            NameBindingIdentifierParserRuleCall_1_3_0_1_4_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_1_4());
                            }
                            }
                            }
                            int alt11=2;
                            int LA11_0 = input.LA(1);
                            if ( (LA11_0==RULE_VERSION) ) {
                                alt11=1;
                            }
                            switch (alt11) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    VersionDeclarationParserRuleCall_1_3_0_1_5=ruleVersionDeclaration();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VersionDeclarationParserRuleCall_1_3_0_1_5!=null?((Token)VersionDeclarationParserRuleCall_1_3_0_1_5.start):null), (VersionDeclarationParserRuleCall_1_3_0_1_5!=null?((Token)VersionDeclarationParserRuleCall_1_3_0_1_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getVersionDeclarationParserRuleCall_1_3_0_1_5()); 
                                    }
                                    }
                                    break;
                            }
                            int alt12=2;
                            int LA12_0 = input.LA(1);
                            if ( (LA12_0==LessThanSign) ) {
                                alt12=1;
                            }
                            switch (alt12) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypeVariablesParserRuleCall_1_3_0_1_6=ruleTypeVariables();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_1_6!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_6.start):null), (TypeVariablesParserRuleCall_1_3_0_1_6!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_1_6()); 
                                    }
                                    }
                                    break;
                            }
                            int alt13=2;
                            int LA13_0 = input.LA(1);
                            if ( (LA13_0==Implements||LA13_0==Extends) ) {
                                alt13=1;
                            }
                            switch (alt13) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    InterfaceExtendsListParserRuleCall_1_3_0_1_7=ruleInterfaceExtendsList();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceExtendsListParserRuleCall_1_3_0_1_7!=null?((Token)InterfaceExtendsListParserRuleCall_1_3_0_1_7.start):null), (InterfaceExtendsListParserRuleCall_1_3_0_1_7!=null?((Token)InterfaceExtendsListParserRuleCall_1_3_0_1_7.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getInterfaceExtendsListParserRuleCall_1_3_0_1_7()); 
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_3_1=ruleMembers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.start):null), (MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    loop15:
                    do {
                        int alt15=2;
                        int LA15_0 = input.LA(1);
                        if ( ((LA15_0>=Protected && LA15_0<=Abstract)||LA15_0==External||(LA15_0>=Private && LA15_0<=Project)||LA15_0==Public||LA15_0==Static||LA15_0==Const) ) {
                            alt15=1;
                        }
                        switch (alt15) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_11);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop15;
                        }
                    } while (true);
                    EnumKeyword_1_4_2=(Token)match(input,Enum,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EnumKeyword_1_4_2, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    NameBindingIdentifierParserRuleCall_1_4_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_4_3());
                    }
                    }
                    }
                    int alt16=2;
                    int LA16_0 = input.LA(1);
                    if ( (LA16_0==RULE_VERSION) ) {
                        alt16=1;
                    }
                    switch (alt16) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_13);
                            VersionDeclarationParserRuleCall_1_4_4=ruleVersionDeclaration();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((VersionDeclarationParserRuleCall_1_4_4!=null?((Token)VersionDeclarationParserRuleCall_1_4_4.start):null), (VersionDeclarationParserRuleCall_1_4_4!=null?((Token)VersionDeclarationParserRuleCall_1_4_4.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getVersionDeclarationParserRuleCall_1_4_4()); 
                            }
                            }
                            break;
                    }
                    LeftCurlyBracketKeyword_1_4_5=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftCurlyBracketKeyword_1_4_5, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_5());
                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_1_4_6_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((LiteralsN4EnumLiteralParserRuleCall_1_4_6_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_6_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_6());
                    }
                    }
                    }
                    loop17:
                    do {
                        int alt17=2;
                        int LA17_0 = input.LA(1);
                        if ( (LA17_0==Comma) ) {
                            alt17=1;
                        }
                        switch (alt17) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_4_7_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(CommaKeyword_1_4_7_0, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_7_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_7_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop17;
                        }
                    } while (true);
                    RightCurlyBracketKeyword_1_4_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightCurlyBracketKeyword_1_4_8, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_8());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportDeclaration_return ruleExportDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleExportDeclaration_return retval = new InternalN4JSParser.ruleExportDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ExportDeclarationImplParserRuleCall_1=ruleExportDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.start):null), (ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleExportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportDeclarationImpl_return ruleExportDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleExportDeclarationImpl_return retval = new InternalN4JSParser.ruleExportDeclarationImpl_return();
        retval.start = input.LT(1);
        Token ExportKeyword_0=null;
        Token WildcardExportAsteriskKeyword_1_0_0_0=null;
        Token DefaultExportDefaultKeyword_1_3_0_0=null;
        InternalN4JSParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_0_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_0_2 = null;
        InternalN4JSParser.ruleExportClause_return ExportClauseParserRuleCall_1_1_0 = null;
        InternalN4JSParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_1_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_1_2 = null;
        InternalN4JSParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_2_0 = null;
        InternalN4JSParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_3_1_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_3_1_1_1 = null;
        try {
            {
            {
            ExportKeyword_0=(Token)match(input,Export,FOLLOW_16); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ExportKeyword_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0());
            }
            int alt21=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt21=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt21=2;
                }
                break;
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt21=3;
                }
                break;
            case Default:
                {
                alt21=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);
                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    {
                    {
                    {
                    {
                    WildcardExportAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_17); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(WildcardExportAsteriskKeyword_1_0_0_0, grammarAccess.getExportDeclarationImplAccess().getWildcardExportAsteriskKeyword_1_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_18);
                    ExportFromClauseParserRuleCall_1_0_1=ruleExportFromClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.start):null), (ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_0_2=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.start):null), (SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_19);
                    ExportClauseParserRuleCall_1_1_0=ruleExportClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.start):null), (ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportClauseParserRuleCall_1_1_0()); 
                    }
                    int alt19=2;
                    int LA19_0 = input.LA(1);
                    if ( (LA19_0==From) && (synpred9_InternalN4JSParser())) {
                        alt19=1;
                    }
                    switch (alt19) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_18);
                            ExportFromClauseParserRuleCall_1_1_1=ruleExportFromClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.start):null), (ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1()); 
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_2=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.start):null), (SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedElementExportableElementParserRuleCall_1_2_0=ruleExportableElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.start):null), (ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_2());
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    DefaultExportDefaultKeyword_1_3_0_0=(Token)match(input,Default,FOLLOW_20); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(DefaultExportDefaultKeyword_1_3_0_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0());
                    }
                    }
                    }
                    int alt20=2;
                    alt20 = dfa20.predict(input);
                    switch (alt20) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExportedElementExportableElementParserRuleCall_1_3_1_0_0=ruleExportableElement();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              							announce((ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.start):null), (ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_3_1_0());
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_18);
                            DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.start):null), (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignment_1_3_1_1_0());
                            }
                            }
                            }
                            pushFollow(FOLLOW_2);
                            SemiParserRuleCall_1_3_1_1_1=ruleSemi();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.start):null), (SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1()); 
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleExportFromClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportFromClause_return ruleExportFromClause() throws RecognitionException {
        InternalN4JSParser.ruleExportFromClause_return retval = new InternalN4JSParser.ruleExportFromClause_return();
        retval.start = input.LT(1);
        Token FromKeyword_0=null;
        InternalN4JSParser.ruleModuleSpecifier_return ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1 = null;
        try {
            {
            {
            FromKeyword_0=(Token)match(input,From,FOLLOW_21); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FromKeyword_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1=ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.start):null), (ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.stop):null), grammarAccess.getExportFromClauseAccess().getReexportedFromAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleExportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportClause_return ruleExportClause() throws RecognitionException {
        InternalN4JSParser.ruleExportClause_return retval = new InternalN4JSParser.ruleExportClause_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token CommaKeyword_1_2=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_0_0 = null;
        InternalN4JSParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_22); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getExportClauseAccess().getLeftCurlyBracketKeyword_0());
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( ((LA24_0>=Intersection && LA24_0<=Implements)||(LA24_0>=Promisify && LA24_0<=Abstract)||LA24_0==External||(LA24_0>=Private && LA24_0<=Project)||LA24_0==Public||LA24_0==Static||LA24_0==Target||(LA24_0>=Async && LA24_0<=Await)||LA24_0==Union||(LA24_0>=Yield && LA24_0<=This)||LA24_0==From||LA24_0==Type||(LA24_0>=Get && LA24_0<=Let)||(LA24_0>=Out && LA24_0<=Set)||LA24_0==As||LA24_0==Of||LA24_0==RULE_IDENTIFIER) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    NamedExportsExportSpecifierParserRuleCall_1_0_0=ruleExportSpecifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_0());
                    }
                    }
                    }
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);
                        if ( (LA22_0==Comma) ) {
                            int LA22_1 = input.LA(2);
                            if ( ((LA22_1>=Intersection && LA22_1<=Implements)||(LA22_1>=Promisify && LA22_1<=Abstract)||LA22_1==External||(LA22_1>=Private && LA22_1<=Project)||LA22_1==Public||LA22_1==Static||LA22_1==Target||(LA22_1>=Async && LA22_1<=Await)||LA22_1==Union||(LA22_1>=Yield && LA22_1<=This)||LA22_1==From||LA22_1==Type||(LA22_1>=Get && LA22_1<=Let)||(LA22_1>=Out && LA22_1<=Set)||LA22_1==As||LA22_1==Of||LA22_1==RULE_IDENTIFIER) ) {
                                alt22=1;
                            }
                        }
                        switch (alt22) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_1_0, grammarAccess.getExportClauseAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    NamedExportsExportSpecifierParserRuleCall_1_1_1_0=ruleExportSpecifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop22;
                        }
                    } while (true);
                    int alt23=2;
                    int LA23_0 = input.LA(1);
                    if ( (LA23_0==Comma) ) {
                        alt23=1;
                    }
                    switch (alt23) {
                        case 1 :
                            {
                            CommaKeyword_1_2=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(CommaKeyword_1_2, grammarAccess.getExportClauseAccess().getCommaKeyword_1_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getExportClauseAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportSpecifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportSpecifier_return ruleExportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleExportSpecifier_return retval = new InternalN4JSParser.ruleExportSpecifier_return();
        retval.start = input.LT(1);
        Token AsKeyword_1_0=null;
        InternalN4JSParser.ruleIdentifierRef_return ElementIdentifierRefParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleIdentifierName_return AliasIdentifierNameParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_24);
            ElementIdentifierRefParserRuleCall_0_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.start):null), (ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.stop):null), grammarAccess.getExportSpecifierAccess().getElementAssignment_0());
            }
            }
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==As) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    AsKeyword_1_0=(Token)match(input,As,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(AsKeyword_1_0, grammarAccess.getExportSpecifierAccess().getAsKeyword_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasIdentifierNameParserRuleCall_1_1_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.start):null), (AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.stop):null), grammarAccess.getExportSpecifierAccess().getAliasAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportableElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportableElement_return ruleExportableElement() throws RecognitionException {
        InternalN4JSParser.ruleExportableElement_return retval = new InternalN4JSParser.ruleExportableElement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotatedExportableElement_return AnnotatedExportableElementParserRuleCall_0 = null;
        InternalN4JSParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;
        InternalN4JSParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;
        InternalN4JSParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall_4 = null;
        InternalN4JSParser.ruleExportedVariableStatement_return ExportedVariableStatementParserRuleCall_5 = null;
        try {
            {
            int alt26=6;
            alt26 = dfa26.predict(input);
            switch (alt26) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExportableElementParserRuleCall_0=ruleAnnotatedExportableElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.start):null), (AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.stop):null), grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_4=ruleFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_4!=null?((Token)FunctionDeclarationParserRuleCall_4.start):null), (FunctionDeclarationParserRuleCall_4!=null?((Token)FunctionDeclarationParserRuleCall_4.stop):null), grammarAccess.getExportableElementAccess().getFunctionDeclarationParserRuleCall_4()); 
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableStatementParserRuleCall_5=ruleExportedVariableStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.start):null), (ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.stop):null), grammarAccess.getExportableElementAccess().getExportedVariableStatementParserRuleCall_5()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExportableElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotatedExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedExportableElement_return ruleAnnotatedExportableElement() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedExportableElement_return retval = new InternalN4JSParser.ruleAnnotatedExportableElement_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_1_4_0=null;
        Token ClassKeyword_1_2_0_0_2=null;
        Token InterfaceKeyword_1_2_0_1_2=null;
        Token EnumKeyword_1_3_2=null;
        Token LeftCurlyBracketKeyword_1_3_4=null;
        Token CommaKeyword_1_3_6_0=null;
        Token RightCurlyBracketKeyword_1_3_7=null;
        InternalN4JSParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_0_2 = null;
        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_0_3 = null;
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0 = null;
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_1_5 = null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_0_4_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_5 = null;
        InternalN4JSParser.ruleClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_1_2_0_0_6 = null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_1_4_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_1_5 = null;
        InternalN4JSParser.ruleInterfaceExtendsList_return InterfaceExtendsListParserRuleCall_1_2_0_1_6 = null;
        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_2_1 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_3_0 = null;
        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_5_0 = null;
        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_25);
            AnnotationListParserRuleCall_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0()); 
            }
            }
            int alt41=4;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    {
                    {
                    loop27:
                    do {
                        int alt27=2;
                        int LA27_0 = input.LA(1);
                        if ( ((LA27_0>=Protected && LA27_0<=Abstract)||LA27_0==External||(LA27_0>=Private && LA27_0<=Project)||LA27_0==Public||LA27_0==Static||LA27_0==Const) ) {
                            alt27=1;
                        }
                        switch (alt27) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_5);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop27;
                        }
                    } while (true);
                    pushFollow(FOLLOW_5);
                    AsyncNoTrailingLineBreakParserRuleCall_1_0_2=ruleAsyncNoTrailingLineBreak();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_0_3=ruleFunctionImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.start):null), (FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    loop28:
                    do {
                        int alt28=2;
                        alt28 = dfa28.predict(input);
                        switch (alt28) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_26);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop28;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_27);
                    ruleVariableStatementKeyword();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_28);
                    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0=ruleExportedVariableDeclarationOrBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_3());
                    }
                    }
                    }
                    loop29:
                    do {
                        int alt29=2;
                        int LA29_0 = input.LA(1);
                        if ( (LA29_0==Comma) ) {
                            alt29=1;
                        }
                        switch (alt29) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_4_0=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(CommaKeyword_1_1_4_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_28);
                    	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0=ruleExportedVariableDeclarationOrBinding();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_4_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop29;
                        }
                    } while (true);
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_5=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.start):null), (SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    int alt38=2;
                    alt38 = dfa38.predict(input);
                    switch (alt38) {
                        case 1 :
                            {
                            {
                            loop30:
                            do {
                                int alt30=2;
                                int LA30_0 = input.LA(1);
                                if ( ((LA30_0>=Protected && LA30_0<=Abstract)||LA30_0==External||(LA30_0>=Private && LA30_0<=Project)||LA30_0==Public||LA30_0==Static||LA30_0==Const) ) {
                                    alt30=1;
                                }
                                switch (alt30) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_6);
                            	    ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop30;
                                }
                            } while (true);
                            ClassKeyword_1_2_0_0_2=(Token)match(input,Class,FOLLOW_7); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(ClassKeyword_1_2_0_0_2, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2());
                            }
                            int alt31=2;
                            int LA31_0 = input.LA(1);
                            if ( (LA31_0==Tilde) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_8);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_0_3());
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            pushFollow(FOLLOW_9);
                            NameBindingIdentifierParserRuleCall_1_2_0_0_4_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_0_4());
                            }
                            }
                            }
                            int alt32=2;
                            int LA32_0 = input.LA(1);
                            if ( (LA32_0==LessThanSign) ) {
                                alt32=1;
                            }
                            switch (alt32) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypeVariablesParserRuleCall_1_2_0_0_5=ruleTypeVariables();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.start):null), (TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_0_5()); 
                                    }
                                    }
                                    break;
                            }
                            int alt33=2;
                            int LA33_0 = input.LA(1);
                            if ( (LA33_0==Implements||LA33_0==Extends) ) {
                                alt33=1;
                            }
                            switch (alt33) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    ClassExtendsImplementsParserRuleCall_1_2_0_0_6=ruleClassExtendsImplements();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsImplementsParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsImplementsParserRuleCall_1_2_0_0_6.start):null), (ClassExtendsImplementsParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsImplementsParserRuleCall_1_2_0_0_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsImplementsParserRuleCall_1_2_0_0_6()); 
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            loop34:
                            do {
                                int alt34=2;
                                int LA34_0 = input.LA(1);
                                if ( ((LA34_0>=Protected && LA34_0<=Abstract)||LA34_0==External||(LA34_0>=Private && LA34_0<=Project)||LA34_0==Public||LA34_0==Static||LA34_0==Const) ) {
                                    alt34=1;
                                }
                                switch (alt34) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_10);
                            	    ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop34;
                                }
                            } while (true);
                            InterfaceKeyword_1_2_0_1_2=(Token)match(input,Interface,FOLLOW_7); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(InterfaceKeyword_1_2_0_1_2, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2());
                            }
                            int alt35=2;
                            int LA35_0 = input.LA(1);
                            if ( (LA35_0==Tilde) ) {
                                alt35=1;
                            }
                            switch (alt35) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_8);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_1_3());
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            pushFollow(FOLLOW_9);
                            NameBindingIdentifierParserRuleCall_1_2_0_1_4_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_1_4());
                            }
                            }
                            }
                            int alt36=2;
                            int LA36_0 = input.LA(1);
                            if ( (LA36_0==LessThanSign) ) {
                                alt36=1;
                            }
                            switch (alt36) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypeVariablesParserRuleCall_1_2_0_1_5=ruleTypeVariables();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.start):null), (TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_1_5()); 
                                    }
                                    }
                                    break;
                            }
                            int alt37=2;
                            int LA37_0 = input.LA(1);
                            if ( (LA37_0==Implements||LA37_0==Extends) ) {
                                alt37=1;
                            }
                            switch (alt37) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    InterfaceExtendsListParserRuleCall_1_2_0_1_6=ruleInterfaceExtendsList();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceExtendsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceExtendsListParserRuleCall_1_2_0_1_6.start):null), (InterfaceExtendsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceExtendsListParserRuleCall_1_2_0_1_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getInterfaceExtendsListParserRuleCall_1_2_0_1_6()); 
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_2_1=ruleMembers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.start):null), (MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);
                        if ( ((LA39_0>=Protected && LA39_0<=Abstract)||LA39_0==External||(LA39_0>=Private && LA39_0<=Project)||LA39_0==Public||LA39_0==Static||LA39_0==Const) ) {
                            alt39=1;
                        }
                        switch (alt39) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_11);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop39;
                        }
                    } while (true);
                    EnumKeyword_1_3_2=(Token)match(input,Enum,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EnumKeyword_1_3_2, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_13);
                    NameBindingIdentifierParserRuleCall_1_3_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_3_3());
                    }
                    }
                    }
                    LeftCurlyBracketKeyword_1_3_4=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftCurlyBracketKeyword_1_3_4, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4());
                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_1_3_5_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_5());
                    }
                    }
                    }
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);
                        if ( (LA40_0==Comma) ) {
                            alt40=1;
                        }
                        switch (alt40) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_6_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(CommaKeyword_1_3_6_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_6_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop40;
                        }
                    } while (true);
                    RightCurlyBracketKeyword_1_3_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightCurlyBracketKeyword_1_3_7, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleImportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleImportDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleImportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportDeclaration_return ruleImportDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleImportDeclaration_return retval = new InternalN4JSParser.ruleImportDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ImportDeclarationImplParserRuleCall_1=ruleImportDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.start):null), (ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleImportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportDeclarationImpl_return ruleImportDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleImportDeclarationImpl_return retval = new InternalN4JSParser.ruleImportDeclarationImpl_return();
        retval.start = input.LT(1);
        Token ImportKeyword_0=null;
        Token ImportFromFromKeyword_1_1_0=null;
        InternalN4JSParser.ruleImportClause_return ImportClauseParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleModuleSpecifier_return ModuleTModuleModuleSpecifierParserRuleCall_2_0_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            ImportKeyword_0=(Token)match(input,Import,FOLLOW_29); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ImportKeyword_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0());
            }
            int alt42=2;
            int LA42_0 = input.LA(1);
            if ( ((LA42_0>=Intersection && LA42_0<=Implements)||(LA42_0>=Promisify && LA42_0<=Abstract)||LA42_0==External||(LA42_0>=Private && LA42_0<=Project)||LA42_0==Public||LA42_0==Static||LA42_0==Target||(LA42_0>=Async && LA42_0<=Await)||LA42_0==Union||(LA42_0>=Yield && LA42_0<=This)||LA42_0==From||LA42_0==Type||(LA42_0>=Get && LA42_0<=Let)||(LA42_0>=Out && LA42_0<=Set)||LA42_0==As||LA42_0==Of||LA42_0==Asterisk||LA42_0==LeftCurlyBracket||LA42_0==RULE_IDENTIFIER) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    {
                    pushFollow(FOLLOW_17);
                    ImportClauseParserRuleCall_1_0=ruleImportClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.start):null), (ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.stop):null), grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0()); 
                    }
                    {
                    {
                    ImportFromFromKeyword_1_1_0=(Token)match(input,From,FOLLOW_21); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(ImportFromFromKeyword_1_1_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0());
                    }
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_18);
            ModuleTModuleModuleSpecifierParserRuleCall_2_0_1=ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.start):null), (ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.stop):null), grammarAccess.getImportDeclarationImplAccess().getModuleAssignment_2());
            }
            }
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleImportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportClause_return ruleImportClause() throws RecognitionException {
        InternalN4JSParser.ruleImportClause_return retval = new InternalN4JSParser.ruleImportClause_return();
        retval.start = input.LT(1);
        Token CommaKeyword_0_1_0=null;
        InternalN4JSParser.ruleDefaultImportSpecifier_return ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0 = null;
        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_0_1_1 = null;
        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_1 = null;
        try {
            {
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( ((LA44_0>=Intersection && LA44_0<=Implements)||(LA44_0>=Promisify && LA44_0<=Abstract)||LA44_0==External||(LA44_0>=Private && LA44_0<=Project)||LA44_0==Public||LA44_0==Static||LA44_0==Target||(LA44_0>=Async && LA44_0<=Await)||LA44_0==Union||(LA44_0>=Yield && LA44_0<=This)||LA44_0==From||LA44_0==Type||(LA44_0>=Get && LA44_0<=Let)||(LA44_0>=Out && LA44_0<=Set)||LA44_0==As||LA44_0==Of||LA44_0==RULE_IDENTIFIER) ) {
                alt44=1;
            }
            else if ( (LA44_0==Asterisk||LA44_0==LeftCurlyBracket) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);
                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_30);
                    ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0=ruleDefaultImportSpecifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.start):null), (ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersAssignment_0_0());
                    }
                    }
                    }
                    int alt43=2;
                    int LA43_0 = input.LA(1);
                    if ( (LA43_0==Comma) ) {
                        alt43=1;
                    }
                    switch (alt43) {
                        case 1 :
                            {
                            CommaKeyword_0_1_0=(Token)match(input,Comma,FOLLOW_31); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(CommaKeyword_0_1_0, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            ImportSpecifiersExceptDefaultParserRuleCall_0_1_1=ruleImportSpecifiersExceptDefault();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersExceptDefaultParserRuleCall_1=ruleImportSpecifiersExceptDefault();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleImportSpecifiersExceptDefault_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ruleImportSpecifiersExceptDefault() throws RecognitionException {
        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return retval = new InternalN4JSParser.ruleImportSpecifiersExceptDefault_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token CommaKeyword_1_1_2=null;
        Token RightCurlyBracketKeyword_1_2=null;
        InternalN4JSParser.ruleNamespaceImportSpecifier_return ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0 = null;
        InternalN4JSParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            int alt48=2;
            int LA48_0 = input.LA(1);
            if ( (LA48_0==Asterisk) ) {
                alt48=1;
            }
            else if ( (LA48_0==LeftCurlyBracket) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);
                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0=ruleNamespaceImportSpecifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.start):null), (ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    LeftCurlyBracketKeyword_1_0=(Token)match(input,LeftCurlyBracket,FOLLOW_32); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LeftCurlyBracketKeyword_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0());
                    }
                    int alt47=2;
                    int LA47_0 = input.LA(1);
                    if ( ((LA47_0>=Intersection && LA47_0<=With)||(LA47_0>=For && LA47_0<=Var)||(LA47_0>=As && LA47_0<=Of)||LA47_0==RULE_IDENTIFIER) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_15);
                            ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0=ruleNamedImportSpecifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_0());
                            }
                            }
                            }
                            loop45:
                            do {
                                int alt45=2;
                                int LA45_0 = input.LA(1);
                                if ( (LA45_0==Comma) ) {
                                    int LA45_1 = input.LA(2);
                                    if ( ((LA45_1>=Intersection && LA45_1<=With)||(LA45_1>=For && LA45_1<=Var)||(LA45_1>=As && LA45_1<=Of)||LA45_1==RULE_IDENTIFIER) ) {
                                        alt45=1;
                                    }
                                }
                                switch (alt45) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      					announce(CommaKeyword_1_1_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0());
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_15);
                            	    ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0=ruleNamedImportSpecifier();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      							announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_1_1());
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop45;
                                }
                            } while (true);
                            int alt46=2;
                            int LA46_0 = input.LA(1);
                            if ( (LA46_0==Comma) ) {
                                alt46=1;
                            }
                            switch (alt46) {
                                case 1 :
                                    {
                                    CommaKeyword_1_1_2=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      					announce(CommaKeyword_1_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2());
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    RightCurlyBracketKeyword_1_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightCurlyBracketKeyword_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2());
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNamedImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamedImportSpecifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleNamedImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNamedImportSpecifier_return ruleNamedImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleNamedImportSpecifier_return retval = new InternalN4JSParser.ruleNamedImportSpecifier_return();
        retval.start = input.LT(1);
        Token AsKeyword_1_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleIdentifierName_return ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1 = null;
        InternalN4JSParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_1_2_0 = null;
        try {
            {
            int alt49=2;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.start):null), (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_1_0());
                    }
                    }
                    }
                    AsKeyword_1_1=(Token)match(input,As,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(AsKeyword_1_1, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasBindingIdentifierParserRuleCall_1_2_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.start):null), (AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.stop):null), grammarAccess.getNamedImportSpecifierAccess().getAliasAssignment_1_2());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultImportSpecifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleDefaultImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDefaultImportSpecifier_return ruleDefaultImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleDefaultImportSpecifier_return retval = new InternalN4JSParser.ruleDefaultImportSpecifier_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getDefaultImportSpecifierAccess().getImportedElementAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNamespaceImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamespaceImportSpecifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleNamespaceImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNamespaceImportSpecifier_return ruleNamespaceImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleNamespaceImportSpecifier_return retval = new InternalN4JSParser.ruleNamespaceImportSpecifier_return();
        retval.start = input.LT(1);
        Token AsteriskKeyword_1=null;
        Token AsKeyword_2=null;
        Token DeclaredDynamicPlusSignKeyword_4_0=null;
        InternalN4JSParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_3_0 = null;
        try {
            {
            {
            AsteriskKeyword_1=(Token)match(input,Asterisk,FOLLOW_33); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(AsteriskKeyword_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1());
            }
            AsKeyword_2=(Token)match(input,As,FOLLOW_8); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(AsKeyword_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_34);
            AliasBindingIdentifierParserRuleCall_3_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.start):null), (AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.stop):null), grammarAccess.getNamespaceImportSpecifierAccess().getAliasAssignment_3());
            }
            }
            }
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==PlusSign) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    {
                    DeclaredDynamicPlusSignKeyword_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredDynamicPlusSignKeyword_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleModuleSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleModuleSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleModuleSpecifier_return ruleModuleSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleModuleSpecifier_return retval = new InternalN4JSParser.ruleModuleSpecifier_return();
        retval.start = input.LT(1);
        try {
            {
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionDeclaration_return ruleFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleFunctionDeclaration_return retval = new InternalN4JSParser.ruleFunctionDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;
        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;
        try {
            {
            {
            {
            {
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);
                if ( ((LA51_0>=Protected && LA51_0<=Abstract)||LA51_0==External||(LA51_0>=Private && LA51_0<=Project)||LA51_0==Public||LA51_0==Static||LA51_0==Const) ) {
                    alt51=1;
                }
                switch (alt51) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_5);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop51;
                }
            } while (true);
            pushFollow(FOLLOW_5);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_35);
            FunctionImplParserRuleCall_0_0_3=ruleFunctionImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }
            }
            }
            }
            int alt52=2;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_FunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionDeclaration_return norm1_FunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionDeclaration_return retval = new InternalN4JSParser.norm1_FunctionDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;
        InternalN4JSParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;
        try {
            {
            {
            {
            {
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);
                if ( ((LA53_0>=Protected && LA53_0<=Abstract)||LA53_0==External||(LA53_0>=Private && LA53_0<=Project)||LA53_0==Public||LA53_0==Static||LA53_0==Const) ) {
                    alt53=1;
                }
                switch (alt53) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_5);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop53;
                }
            } while (true);
            pushFollow(FOLLOW_36);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_35);
            FunctionImplParserRuleCall_0_0_3=norm3_FunctionImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }
            }
            }
            }
            int alt54=2;
            int LA54_0 = input.LA(1);
            if ( (LA54_0==Semicolon) ) {
                int LA54_1 = input.LA(2);
                if ( (synpred22_InternalN4JSParser()) ) {
                    alt54=1;
                }
            }
            else if ( (LA54_0==EOF) && (synpred22_InternalN4JSParser())) {
                alt54=1;
            }
            else if ( (LA54_0==RULE_EOL) && (synpred22_InternalN4JSParser())) {
                alt54=1;
            }
            else if ( (LA54_0==RULE_ML_COMMENT) && (synpred22_InternalN4JSParser())) {
                alt54=1;
            }
            else if ( (LA54_0==RightCurlyBracket) ) {
                int LA54_5 = input.LA(2);
                if ( (synpred22_InternalN4JSParser()) ) {
                    alt54=1;
                }
            }
            switch (alt54) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleAsyncNoTrailingLineBreak_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return ruleAsyncNoTrailingLineBreak() throws RecognitionException {
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return retval = new InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return();
        retval.start = input.LT(1);
        Token DeclaredAsyncAsyncKeyword_0_0=null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_1 = null;
        try {
            {
            int alt55=2;
            int LA55_0 = input.LA(1);
            if ( (LA55_0==Async) ) {
                int LA55_1 = input.LA(2);
                if ( ((LA55_1>=Intersection && LA55_1<=With)||(LA55_1>=For && LA55_1<=Var)||(LA55_1>=As && LA55_1<=Of)||LA55_1==LeftSquareBracket||LA55_1==RULE_DOUBLE||(LA55_1>=RULE_HEX_INT && LA55_1<=RULE_OCTAL_INT)||LA55_1==RULE_SCIENTIFIC_INT||LA55_1==RULE_IDENTIFIER||LA55_1==RULE_STRING||LA55_1==RULE_NO_LINE_TERMINATOR||LA55_1==RULE_INT) ) {
                    alt55=1;
                }
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0=(Token)match(input,Async,FOLLOW_37); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredAsyncAsyncKeyword_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_2);
                    NoLineTerminatorParserRuleCall_1=ruleNoLineTerminator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.start):null), (NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.stop):null), grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleFunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionImpl_return ruleFunctionImpl() throws RecognitionException {
        InternalN4JSParser.ruleFunctionImpl_return retval = new InternalN4JSParser.ruleFunctionImpl_return();
        retval.start = input.LT(1);
        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSParser.norm2_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;
        InternalN4JSParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;
        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;
        InternalN4JSParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==Asterisk) ) {
                alt56=1;
            }
            else if ( ((LA56_0>=Intersection && LA56_0<=Implements)||(LA56_0>=Promisify && LA56_0<=Abstract)||LA56_0==External||(LA56_0>=Private && LA56_0<=Project)||LA56_0==Public||LA56_0==Static||LA56_0==Target||(LA56_0>=Async && LA56_0<=Await)||LA56_0==Union||(LA56_0>=Yield && LA56_0<=This)||LA56_0==From||LA56_0==Type||(LA56_0>=Get && LA56_0<=Let)||(LA56_0>=Out && LA56_0<=Set)||LA56_0==As||LA56_0==Of||LA56_0==LeftParenthesis||LA56_0==LessThanSign||LA56_0==RULE_IDENTIFIER||LA56_0==RULE_VERSION) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);
                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0_1=norm2_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionImpl_return norm3_FunctionImpl() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionImpl_return retval = new InternalN4JSParser.norm3_FunctionImpl_return();
        retval.start = input.LT(1);
        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;
        InternalN4JSParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;
        InternalN4JSParser.norm1_FunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;
        InternalN4JSParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==Asterisk) ) {
                alt57=1;
            }
            else if ( ((LA57_0>=Intersection && LA57_0<=Implements)||(LA57_0>=Promisify && LA57_0<=Abstract)||LA57_0==External||(LA57_0>=Private && LA57_0<=Project)||LA57_0==Public||LA57_0==Static||LA57_0==Target||(LA57_0>=Async && LA57_0<=Await)||LA57_0==Union||LA57_0==This||LA57_0==From||LA57_0==Type||(LA57_0>=Get && LA57_0<=Let)||(LA57_0>=Out && LA57_0<=Set)||LA57_0==As||LA57_0==Of||LA57_0==LeftParenthesis||LA57_0==LessThanSign||LA57_0==RULE_IDENTIFIER||LA57_0==RULE_VERSION) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);
                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_1_0=norm1_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm6_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_FunctionImpl_return norm6_FunctionImpl() throws RecognitionException {
        InternalN4JSParser.norm6_FunctionImpl_return retval = new InternalN4JSParser.norm6_FunctionImpl_return();
        retval.start = input.LT(1);
        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;
        InternalN4JSParser.norm3_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;
        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;
        InternalN4JSParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==Asterisk) ) {
                alt58=1;
            }
            else if ( ((LA58_0>=Intersection && LA58_0<=Implements)||(LA58_0>=Promisify && LA58_0<=Abstract)||LA58_0==External||(LA58_0>=Private && LA58_0<=Project)||LA58_0==Public||LA58_0==Static||LA58_0==Target||(LA58_0>=Async && LA58_0<=Await)||LA58_0==Union||(LA58_0>=Yield && LA58_0<=This)||LA58_0==From||LA58_0==Type||(LA58_0>=Get && LA58_0<=Let)||(LA58_0>=Out && LA58_0<=Set)||LA58_0==As||LA58_0==Of||LA58_0==LeftParenthesis||LA58_0==LessThanSign||LA58_0==RULE_IDENTIFIER||LA58_0==RULE_VERSION) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);
                throw nvae;
            }
            switch (alt58) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm3_FunctionBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=norm2_FunctionBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleFunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionHeader_return ruleFunctionHeader() throws RecognitionException {
        InternalN4JSParser.ruleFunctionHeader_return retval = new InternalN4JSParser.ruleFunctionHeader_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_3 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_4 = null;
        try {
            {
            {
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==LessThanSign) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    pushFollow(FOLLOW_40);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }
                    }
                    break;
            }
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( ((LA60_0>=Intersection && LA60_0<=Implements)||(LA60_0>=Promisify && LA60_0<=Abstract)||LA60_0==External||(LA60_0>=Private && LA60_0<=Project)||LA60_0==Public||LA60_0==Static||LA60_0==Target||(LA60_0>=Async && LA60_0<=Await)||LA60_0==Union||(LA60_0>=Yield && LA60_0<=This)||LA60_0==From||LA60_0==Type||(LA60_0>=Get && LA60_0<=Let)||(LA60_0>=Out && LA60_0<=Set)||LA60_0==As||LA60_0==Of||LA60_0==RULE_IDENTIFIER) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_41);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                    }
                    }
                    }
                    break;
            }
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==RULE_VERSION) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    pushFollow(FOLLOW_42);
                    VersionDeclarationParserRuleCall_2=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.start):null), (VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_43);
            StrictFormalParametersParserRuleCall_3=ruleStrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.start):null), (StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3()); 
            }
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==Colon) && (synpred23_InternalN4JSParser())) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepReturnTypeRefParserRuleCall_4=ruleColonSepReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepReturnTypeRefParserRuleCall_4.start):null), (ColonSepReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepReturnTypeRefParserRuleCall_4.stop):null), grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionHeader_return norm1_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionHeader_return retval = new InternalN4JSParser.norm1_FunctionHeader_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_3 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_4 = null;
        try {
            {
            {
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==LessThanSign) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    pushFollow(FOLLOW_40);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }
                    }
                    break;
            }
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( ((LA64_0>=Intersection && LA64_0<=Implements)||(LA64_0>=Promisify && LA64_0<=Abstract)||LA64_0==External||(LA64_0>=Private && LA64_0<=Project)||LA64_0==Public||LA64_0==Static||LA64_0==Target||(LA64_0>=Async && LA64_0<=Await)||LA64_0==Union||LA64_0==This||LA64_0==From||LA64_0==Type||(LA64_0>=Get && LA64_0<=Let)||(LA64_0>=Out && LA64_0<=Set)||LA64_0==As||LA64_0==Of||LA64_0==RULE_IDENTIFIER) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_41);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                    }
                    }
                    }
                    break;
            }
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==RULE_VERSION) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    pushFollow(FOLLOW_42);
                    VersionDeclarationParserRuleCall_2=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.start):null), (VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_43);
            StrictFormalParametersParserRuleCall_3=ruleStrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.start):null), (StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3()); 
            }
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==Colon) && (synpred24_InternalN4JSParser())) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepReturnTypeRefParserRuleCall_4=ruleColonSepReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepReturnTypeRefParserRuleCall_4.start):null), (ColonSepReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepReturnTypeRefParserRuleCall_4.stop):null), grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_FunctionHeader_return norm2_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm2_FunctionHeader_return retval = new InternalN4JSParser.norm2_FunctionHeader_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_3 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_4 = null;
        try {
            {
            {
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==LessThanSign) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    pushFollow(FOLLOW_39);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }
                    }
                    break;
            }
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( ((LA68_0>=Intersection && LA68_0<=Implements)||(LA68_0>=Promisify && LA68_0<=Abstract)||LA68_0==External||(LA68_0>=Private && LA68_0<=Project)||LA68_0==Public||LA68_0==Static||LA68_0==Target||(LA68_0>=Async && LA68_0<=Await)||LA68_0==Union||(LA68_0>=Yield && LA68_0<=This)||LA68_0==From||LA68_0==Type||(LA68_0>=Get && LA68_0<=Let)||(LA68_0>=Out && LA68_0<=Set)||LA68_0==As||LA68_0==Of||LA68_0==RULE_IDENTIFIER) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_39);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                    }
                    }
                    }
                    break;
            }
            int alt69=2;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==RULE_VERSION) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    pushFollow(FOLLOW_39);
                    VersionDeclarationParserRuleCall_2=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.start):null), (VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_43);
            StrictFormalParametersParserRuleCall_3=norm1_StrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.start):null), (StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3()); 
            }
            int alt70=2;
            int LA70_0 = input.LA(1);
            if ( (LA70_0==Colon) && (synpred25_InternalN4JSParser())) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepReturnTypeRefParserRuleCall_4=ruleColonSepReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepReturnTypeRefParserRuleCall_4.start):null), (ColonSepReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepReturnTypeRefParserRuleCall_4.stop):null), grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionHeader_return norm3_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionHeader_return retval = new InternalN4JSParser.norm3_FunctionHeader_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_3 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_4 = null;
        try {
            {
            {
            int alt71=2;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==LessThanSign) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    pushFollow(FOLLOW_39);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }
                    }
                    break;
            }
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( ((LA72_0>=Intersection && LA72_0<=Implements)||(LA72_0>=Promisify && LA72_0<=Abstract)||LA72_0==External||(LA72_0>=Private && LA72_0<=Project)||LA72_0==Public||LA72_0==Static||LA72_0==Target||(LA72_0>=Async && LA72_0<=Await)||LA72_0==Union||LA72_0==This||LA72_0==From||LA72_0==Type||(LA72_0>=Get && LA72_0<=Let)||(LA72_0>=Out && LA72_0<=Set)||LA72_0==As||LA72_0==Of||LA72_0==RULE_IDENTIFIER) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_39);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                    }
                    }
                    }
                    break;
            }
            int alt73=2;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==RULE_VERSION) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    pushFollow(FOLLOW_39);
                    VersionDeclarationParserRuleCall_2=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.start):null), (VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_43);
            StrictFormalParametersParserRuleCall_3=norm1_StrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.start):null), (StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3()); 
            }
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==Colon) && (synpred26_InternalN4JSParser())) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepReturnTypeRefParserRuleCall_4=ruleColonSepReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepReturnTypeRefParserRuleCall_4.start):null), (ColonSepReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepReturnTypeRefParserRuleCall_4.stop):null), grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleFunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionBody_return ruleFunctionBody() throws RecognitionException {
        InternalN4JSParser.ruleFunctionBody_return retval = new InternalN4JSParser.ruleFunctionBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0_0 = null;
        try {
            {
            int alt75=2;
            alt75 = dfa75.predict(input);
            switch (alt75) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0());
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionBody_return norm1_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionBody_return retval = new InternalN4JSParser.norm1_FunctionBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0_0 = null;
        try {
            {
            int alt76=2;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0());
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_FunctionBody_return norm2_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm2_FunctionBody_return retval = new InternalN4JSParser.norm2_FunctionBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_0_0_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionBody_return norm3_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionBody_return retval = new InternalN4JSParser.norm3_FunctionBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_0_0_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=norm1_Block();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedFunctionDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return retval = new InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;
        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_5);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0());
            }
            }
            }
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);
                if ( ((LA77_0>=Protected && LA77_0<=Abstract)||LA77_0==External||(LA77_0>=Private && LA77_0<=Project)||LA77_0==Public||LA77_0==Static||LA77_0==Const) ) {
                    alt77=1;
                }
                switch (alt77) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_5);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop77;
                }
            } while (true);
            pushFollow(FOLLOW_5);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=ruleFunctionImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return retval = new InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;
        InternalN4JSParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_5);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0());
            }
            }
            }
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);
                if ( ((LA78_0>=Protected && LA78_0<=Abstract)||LA78_0==External||(LA78_0>=Private && LA78_0<=Project)||LA78_0==Public||LA78_0==Static||LA78_0==Const) ) {
                    alt78=1;
                }
                switch (alt78) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_5);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop78;
                }
            } while (true);
            pushFollow(FOLLOW_36);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=norm3_FunctionImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionExpression_return ruleFunctionExpression() throws RecognitionException {
        InternalN4JSParser.ruleFunctionExpression_return retval = new InternalN4JSParser.ruleFunctionExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_1=norm6_FunctionImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.start):null), (FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.stop):null), grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAsyncFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAsyncFunctionExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAsyncFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAsyncFunctionExpression_return ruleAsyncFunctionExpression() throws RecognitionException {
        InternalN4JSParser.ruleAsyncFunctionExpression_return retval = new InternalN4JSParser.ruleAsyncFunctionExpression_return();
        retval.start = input.LT(1);
        Token DeclaredAsyncAsyncKeyword_0_0_0_0=null;
        Token FunctionKeyword_0_0_2=null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1 = null;
        InternalN4JSParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_2 = null;
        try {
            {
            {
            {
            {
            {
            {
            DeclaredAsyncAsyncKeyword_0_0_0_0=(Token)match(input,Async,FOLLOW_44); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce(DeclaredAsyncAsyncKeyword_0_0_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0());
            }
            }
            }
            pushFollow(FOLLOW_45);
            NoLineTerminatorParserRuleCall_0_0_1=ruleNoLineTerminator();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1()); 
            }
            FunctionKeyword_0_0_2=(Token)match(input,Function,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(FunctionKeyword_0_0_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2());
            }
            }
            }
            pushFollow(FOLLOW_13);
            FunctionHeaderParserRuleCall_1=ruleFunctionHeader();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.start):null), (FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionHeaderParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            FunctionBodyParserRuleCall_2=norm2_FunctionBody();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.start):null), (FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionBodyParserRuleCall_2()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrowExpression_return ruleArrowExpression() throws RecognitionException {
        InternalN4JSParser.ruleArrowExpression_return retval = new InternalN4JSParser.ruleArrowExpression_return();
        retval.start = input.LT(1);
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1 = null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1 = null;
        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;
        InternalN4JSParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            int alt81=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt81=1;
                }
                break;
            case Async:
                {
                int LA81_2 = input.LA(2);
                if ( (LA81_2==EqualsSignGreaterThanSign) ) {
                    alt81=3;
                }
                else if ( (LA81_2==RULE_NO_LINE_TERMINATOR) && (synpred37_InternalN4JSParser())) {
                    alt81=2;
                }
                else if ( (LA81_2==LeftParenthesis) && (synpred37_InternalN4JSParser())) {
                    alt81=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt81=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);
                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_46);
                    StrictFormalParametersParserRuleCall_0_0_0_0_0=ruleStrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.start):null), (StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0()); 
                    }
                    int alt79=2;
                    int LA79_0 = input.LA(1);
                    if ( (LA79_0==Colon) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_47);
                            ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1=ruleColonSepReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1.start):null), (ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_48); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_42);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_46);
                    StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2=ruleStrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.start):null), (StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2()); 
                    }
                    }
                    }
                    }
                    int alt80=2;
                    int LA80_0 = input.LA(1);
                    if ( (LA80_0==Colon) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_47);
                            ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1=ruleColonSepReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1.start):null), (ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_47);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                    }
                    }
                    }
                    }
                    break;
            }
            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
            }
            }
            }
            int alt82=2;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_23);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                    }
                    }
                    }
                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrowExpression_return norm1_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ArrowExpression_return retval = new InternalN4JSParser.norm1_ArrowExpression_return();
        retval.start = input.LT(1);
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1 = null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1 = null;
        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;
        InternalN4JSParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            int alt85=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt85=1;
                }
                break;
            case Async:
                {
                int LA85_2 = input.LA(2);
                if ( (LA85_2==EqualsSignGreaterThanSign) ) {
                    alt85=3;
                }
                else if ( (LA85_2==RULE_NO_LINE_TERMINATOR) && (synpred43_InternalN4JSParser())) {
                    alt85=2;
                }
                else if ( (LA85_2==LeftParenthesis) && (synpred43_InternalN4JSParser())) {
                    alt85=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt85=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);
                throw nvae;
            }
            switch (alt85) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_46);
                    StrictFormalParametersParserRuleCall_0_0_0_0_0=ruleStrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.start):null), (StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0()); 
                    }
                    int alt83=2;
                    int LA83_0 = input.LA(1);
                    if ( (LA83_0==Colon) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_47);
                            ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1=ruleColonSepReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1.start):null), (ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_48); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_42);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_46);
                    StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2=ruleStrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.start):null), (StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2()); 
                    }
                    }
                    }
                    }
                    int alt84=2;
                    int LA84_0 = input.LA(1);
                    if ( (LA84_0==Colon) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_47);
                            ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1=ruleColonSepReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1.start):null), (ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_47);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                    }
                    }
                    }
                    }
                    break;
            }
            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
            }
            }
            }
            int alt86=2;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_23);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                    }
                    }
                    }
                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_ArrowExpression_return norm2_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm2_ArrowExpression_return retval = new InternalN4JSParser.norm2_ArrowExpression_return();
        retval.start = input.LT(1);
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1 = null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1 = null;
        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;
        InternalN4JSParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            int alt89=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt89=1;
                }
                break;
            case Async:
                {
                int LA89_2 = input.LA(2);
                if ( (LA89_2==EqualsSignGreaterThanSign) ) {
                    alt89=3;
                }
                else if ( (LA89_2==RULE_NO_LINE_TERMINATOR) && (synpred49_InternalN4JSParser())) {
                    alt89=2;
                }
                else if ( (LA89_2==LeftParenthesis) && (synpred49_InternalN4JSParser())) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt89=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);
                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_46);
                    StrictFormalParametersParserRuleCall_0_0_0_0_0=norm1_StrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.start):null), (StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0()); 
                    }
                    int alt87=2;
                    int LA87_0 = input.LA(1);
                    if ( (LA87_0==Colon) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_47);
                            ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1=ruleColonSepReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1.start):null), (ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_39);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_46);
                    StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2=norm1_StrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.start):null), (StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2()); 
                    }
                    }
                    }
                    }
                    int alt88=2;
                    int LA88_0 = input.LA(1);
                    if ( (LA88_0==Colon) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_47);
                            ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1=ruleColonSepReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1.start):null), (ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_47);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                    }
                    }
                    }
                    }
                    break;
            }
            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
            }
            }
            }
            int alt90=2;
            alt90 = dfa90.predict(input);
            switch (alt90) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_23);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                    }
                    }
                    }
                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_ArrowExpression_return norm3_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm3_ArrowExpression_return retval = new InternalN4JSParser.norm3_ArrowExpression_return();
        retval.start = input.LT(1);
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1 = null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1 = null;
        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;
        InternalN4JSParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            int alt93=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt93=1;
                }
                break;
            case Async:
                {
                int LA93_2 = input.LA(2);
                if ( (LA93_2==EqualsSignGreaterThanSign) ) {
                    alt93=3;
                }
                else if ( (LA93_2==RULE_NO_LINE_TERMINATOR) && (synpred55_InternalN4JSParser())) {
                    alt93=2;
                }
                else if ( (LA93_2==LeftParenthesis) && (synpred55_InternalN4JSParser())) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt93=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);
                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_46);
                    StrictFormalParametersParserRuleCall_0_0_0_0_0=norm1_StrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.start):null), (StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0()); 
                    }
                    int alt91=2;
                    int LA91_0 = input.LA(1);
                    if ( (LA91_0==Colon) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_47);
                            ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1=ruleColonSepReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1.start):null), (ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_39);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_46);
                    StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2=norm1_StrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.start):null), (StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2()); 
                    }
                    }
                    }
                    }
                    int alt92=2;
                    int LA92_0 = input.LA(1);
                    if ( (LA92_0==Colon) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_47);
                            ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1=ruleColonSepReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1.start):null), (ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_0_0_0_1_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_47);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                    }
                    }
                    }
                    }
                    break;
            }
            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
            }
            }
            }
            int alt94=2;
            alt94 = dfa94.predict(input);
            switch (alt94) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_23);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                    }
                    }
                    }
                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleStrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStrictFormalParameters_return ruleStrictFormalParameters() throws RecognitionException {
        InternalN4JSParser.ruleStrictFormalParameters_return retval = new InternalN4JSParser.ruleStrictFormalParameters_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;
        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
            }
            int alt96=2;
            int LA96_0 = input.LA(1);
            if ( ((LA96_0>=Intersection && LA96_0<=Implements)||(LA96_0>=Promisify && LA96_0<=Abstract)||LA96_0==External||(LA96_0>=Private && LA96_0<=Project)||LA96_0==Public||LA96_0==Static||LA96_0==Target||(LA96_0>=Async && LA96_0<=Await)||LA96_0==Union||(LA96_0>=Yield && LA96_0<=This)||LA96_0==From||LA96_0==Type||LA96_0==FullStopFullStopFullStop||(LA96_0>=Get && LA96_0<=Let)||(LA96_0>=Out && LA96_0<=Set)||LA96_0==As||LA96_0==Of||(LA96_0>=CommercialAt && LA96_0<=LeftSquareBracket)||LA96_0==LeftCurlyBracket||LA96_0==RULE_IDENTIFIER) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_54);
                    FparsFormalParameterParserRuleCall_1_0_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0());
                    }
                    }
                    }
                    loop95:
                    do {
                        int alt95=2;
                        int LA95_0 = input.LA(1);
                        if ( (LA95_0==Comma) ) {
                            alt95=1;
                        }
                        switch (alt95) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_55); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_54);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=ruleFormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop95;
                        }
                    } while (true);
                    }
                    break;
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_StrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_StrictFormalParameters_return norm1_StrictFormalParameters() throws RecognitionException {
        InternalN4JSParser.norm1_StrictFormalParameters_return retval = new InternalN4JSParser.norm1_StrictFormalParameters_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;
        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
            }
            int alt98=2;
            int LA98_0 = input.LA(1);
            if ( ((LA98_0>=Intersection && LA98_0<=Implements)||(LA98_0>=Promisify && LA98_0<=Abstract)||LA98_0==External||(LA98_0>=Private && LA98_0<=Project)||LA98_0==Public||LA98_0==Static||LA98_0==Target||(LA98_0>=Async && LA98_0<=Await)||LA98_0==Union||LA98_0==This||LA98_0==From||LA98_0==Type||LA98_0==FullStopFullStopFullStop||(LA98_0>=Get && LA98_0<=Let)||(LA98_0>=Out && LA98_0<=Set)||LA98_0==As||LA98_0==Of||(LA98_0>=CommercialAt && LA98_0<=LeftSquareBracket)||LA98_0==LeftCurlyBracket||LA98_0==RULE_IDENTIFIER) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_54);
                    FparsFormalParameterParserRuleCall_1_0_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0());
                    }
                    }
                    }
                    loop97:
                    do {
                        int alt97=2;
                        int LA97_0 = input.LA(1);
                        if ( (LA97_0==Comma) ) {
                            alt97=1;
                        }
                        switch (alt97) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_55); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_54);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=norm1_FormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop97;
                        }
                    } while (true);
                    }
                    break;
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsFormalParameter();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return retval = new InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return retval = new InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBlockMinusBraces() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlockMinusBraces();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBlockMinusBraces_return ruleBlockMinusBraces() throws RecognitionException {
        InternalN4JSParser.ruleBlockMinusBraces_return retval = new InternalN4JSParser.ruleBlockMinusBraces_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);
                if ( ((LA99_0>=Intersection && LA99_0<=Implements)||(LA99_0>=Promisify && LA99_0<=Function)||(LA99_0>=Private && LA99_0<=Delete)||(LA99_0>=Import && LA99_0<=Break)||(LA99_0>=Class && LA99_0<=This)||(LA99_0>=From && LA99_0<=With)||(LA99_0>=For && LA99_0<=Var)||LA99_0==PlusSignPlusSign||(LA99_0>=HyphenMinusHyphenMinus && LA99_0<=SolidusEqualsSign)||(LA99_0>=As && LA99_0<=If)||LA99_0==Of||LA99_0==ExclamationMark||LA99_0==LeftParenthesis||LA99_0==PlusSign||LA99_0==HyphenMinus||LA99_0==Solidus||(LA99_0>=Semicolon && LA99_0<=LessThanSign)||(LA99_0>=CommercialAt && LA99_0<=LeftSquareBracket)||LA99_0==LeftCurlyBracket||LA99_0==Tilde||LA99_0==RULE_DOUBLE||(LA99_0>=RULE_HEX_INT && LA99_0<=RULE_LEGACY_OCTAL_INT)||LA99_0==RULE_SCIENTIFIC_INT||LA99_0==RULE_IDENTIFIER||LA99_0==RULE_STRING||(LA99_0>=RULE_TEMPLATE_HEAD && LA99_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA99_0==RULE_INT) ) {
                    alt99=1;
                }
                switch (alt99) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop99;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BlockMinusBraces_return norm1_BlockMinusBraces() throws RecognitionException {
        InternalN4JSParser.norm1_BlockMinusBraces_return retval = new InternalN4JSParser.norm1_BlockMinusBraces_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);
                if ( ((LA100_0>=Intersection && LA100_0<=Implements)||(LA100_0>=Promisify && LA100_0<=Function)||(LA100_0>=Private && LA100_0<=Delete)||(LA100_0>=Import && LA100_0<=Break)||(LA100_0>=Class && LA100_0<=This)||(LA100_0>=From && LA100_0<=With)||(LA100_0>=For && LA100_0<=Var)||LA100_0==PlusSignPlusSign||(LA100_0>=HyphenMinusHyphenMinus && LA100_0<=SolidusEqualsSign)||(LA100_0>=As && LA100_0<=If)||LA100_0==Of||LA100_0==ExclamationMark||LA100_0==LeftParenthesis||LA100_0==PlusSign||LA100_0==HyphenMinus||LA100_0==Solidus||(LA100_0>=Semicolon && LA100_0<=LessThanSign)||(LA100_0>=CommercialAt && LA100_0<=LeftSquareBracket)||LA100_0==LeftCurlyBracket||LA100_0==Tilde||LA100_0==RULE_DOUBLE||(LA100_0>=RULE_HEX_INT && LA100_0<=RULE_LEGACY_OCTAL_INT)||LA100_0==RULE_SCIENTIFIC_INT||LA100_0==RULE_IDENTIFIER||LA100_0==RULE_STRING||(LA100_0>=RULE_TEMPLATE_HEAD && LA100_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA100_0==RULE_INT) ) {
                    alt100=1;
                }
                switch (alt100) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_56);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop100;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionDisguisedAsBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionDisguisedAsBlock();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionDisguisedAsBlock_return ruleExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSParser.ruleExpressionDisguisedAsBlock_return retval = new InternalN4JSParser.ruleExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=ruleAssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return norm1_ExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return retval = new InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=norm1_AssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentExpressionStatement_return ruleAssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentExpressionStatement_return retval = new InternalN4JSParser.ruleAssignmentExpressionStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AssignmentExpressionStatement_return norm1_AssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSParser.norm1_AssignmentExpressionStatement_return retval = new InternalN4JSParser.norm1_AssignmentExpressionStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedExpression_return ruleAnnotatedExpression() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedExpression_return retval = new InternalN4JSParser.ruleAnnotatedExpression_return();
        retval.start = input.LT(1);
        Token ClassKeyword_1_0_1=null;
        InternalN4JSParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;
        InternalN4JSParser.ruleClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_1_0_3 = null;
        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_0_4 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;
        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;
        try {
            {
            {
            pushFollow(FOLLOW_57);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt103=2;
            int LA103_0 = input.LA(1);
            if ( (LA103_0==Class) ) {
                alt103=1;
            }
            else if ( (LA103_0==Function||LA103_0==Async) ) {
                alt103=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);
                throw nvae;
            }
            switch (alt103) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                    }
                    int alt101=2;
                    int LA101_0 = input.LA(1);
                    if ( ((LA101_0>=Intersection && LA101_0<=Constructor)||(LA101_0>=Promisify && LA101_0<=Abstract)||LA101_0==External||(LA101_0>=Private && LA101_0<=Project)||LA101_0==Public||LA101_0==Static||LA101_0==Target||(LA101_0>=Async && LA101_0<=Await)||LA101_0==Union||(LA101_0>=Yield && LA101_0<=This)||LA101_0==From||LA101_0==Type||(LA101_0>=Get && LA101_0<=Let)||(LA101_0>=Out && LA101_0<=Set)||LA101_0==As||LA101_0==Of||LA101_0==RULE_IDENTIFIER) ) {
                        alt101=1;
                    }
                    else if ( (LA101_0==Implements) ) {
                        int LA101_2 = input.LA(2);
                        if ( (LA101_2==Implements||LA101_2==Extends||LA101_2==LeftCurlyBracket) ) {
                            alt101=1;
                        }
                    }
                    switch (alt101) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_9);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2());
                            }
                            }
                            }
                            break;
                    }
                    int alt102=2;
                    int LA102_0 = input.LA(1);
                    if ( (LA102_0==Implements||LA102_0==Extends) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_9);
                            ClassExtendsImplementsParserRuleCall_1_0_3=ruleClassExtendsImplements();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsImplementsParserRuleCall_1_0_3!=null?((Token)ClassExtendsImplementsParserRuleCall_1_0_3.start):null), (ClassExtendsImplementsParserRuleCall_1_0_3!=null?((Token)ClassExtendsImplementsParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3()); 
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=ruleMembers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_45);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedExpression_return norm1_AnnotatedExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedExpression_return retval = new InternalN4JSParser.norm1_AnnotatedExpression_return();
        retval.start = input.LT(1);
        Token ClassKeyword_1_0_1=null;
        InternalN4JSParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;
        InternalN4JSParser.norm1_ClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_1_0_3 = null;
        InternalN4JSParser.norm1_Members_return MembersParserRuleCall_1_0_4 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;
        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;
        try {
            {
            {
            pushFollow(FOLLOW_57);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt106=2;
            int LA106_0 = input.LA(1);
            if ( (LA106_0==Class) ) {
                alt106=1;
            }
            else if ( (LA106_0==Function||LA106_0==Async) ) {
                alt106=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);
                throw nvae;
            }
            switch (alt106) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_59); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                    }
                    int alt104=2;
                    int LA104_0 = input.LA(1);
                    if ( ((LA104_0>=Intersection && LA104_0<=Constructor)||(LA104_0>=Promisify && LA104_0<=Abstract)||LA104_0==External||(LA104_0>=Private && LA104_0<=Project)||LA104_0==Public||LA104_0==Static||LA104_0==Target||(LA104_0>=Async && LA104_0<=Await)||LA104_0==Union||LA104_0==This||LA104_0==From||LA104_0==Type||(LA104_0>=Get && LA104_0<=Let)||(LA104_0>=Out && LA104_0<=Set)||LA104_0==As||LA104_0==Of||LA104_0==RULE_IDENTIFIER) ) {
                        alt104=1;
                    }
                    else if ( (LA104_0==Implements) ) {
                        int LA104_2 = input.LA(2);
                        if ( (LA104_2==Implements||LA104_2==Extends||LA104_2==LeftCurlyBracket) ) {
                            alt104=1;
                        }
                    }
                    switch (alt104) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_59);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=norm1_BindingIdentifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2());
                            }
                            }
                            }
                            break;
                    }
                    int alt105=2;
                    int LA105_0 = input.LA(1);
                    if ( (LA105_0==Implements||LA105_0==Extends) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_59);
                            ClassExtendsImplementsParserRuleCall_1_0_3=norm1_ClassExtendsImplements();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsImplementsParserRuleCall_1_0_3!=null?((Token)ClassExtendsImplementsParserRuleCall_1_0_3.start):null), (ClassExtendsImplementsParserRuleCall_1_0_3!=null?((Token)ClassExtendsImplementsParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3()); 
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=norm1_Members();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_45);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeVariable();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeVariable_return ruleTypeVariable() throws RecognitionException {
        InternalN4JSParser.ruleTypeVariable_return retval = new InternalN4JSParser.ruleTypeVariable_return();
        retval.start = input.LT(1);
        Token DeclaredCovariantOutKeyword_0_0_0=null;
        Token DeclaredContravariantInKeyword_0_1_0=null;
        Token ExtendsKeyword_2_0=null;
        InternalN4JSParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_2_1_0 = null;
        try {
            {
            {
            int alt107=3;
            int LA107_0 = input.LA(1);
            if ( (LA107_0==Out) ) {
                alt107=1;
            }
            else if ( (LA107_0==In) ) {
                alt107=2;
            }
            switch (alt107) {
                case 1 :
                    {
                    {
                    {
                    DeclaredCovariantOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(DeclaredCovariantOutKeyword_0_0_0, grammarAccess.getTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    DeclaredContravariantInKeyword_0_1_0=(Token)match(input,In,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(DeclaredContravariantInKeyword_0_1_0, grammarAccess.getTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0());
                    }
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_61);
            NameIdentifierOrThisParserRuleCall_1_0=ruleIdentifierOrThis();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.start):null), (NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariableAccess().getNameAssignment_1());
            }
            }
            }
            int alt108=2;
            int LA108_0 = input.LA(1);
            if ( (LA108_0==Extends) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    {
                    ExtendsKeyword_2_0=(Token)match(input,Extends,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ExtendsKeyword_2_0, grammarAccess.getTypeVariableAccess().getExtendsKeyword_2_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_2_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundAssignment_2_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFormalParameter();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFormalParameter_return ruleFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleFormalParameter_return retval = new InternalN4JSParser.ruleFormalParameter_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=ruleBindingElementFragment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_FormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FormalParameter_return norm1_FormalParameter() throws RecognitionException {
        InternalN4JSParser.norm1_FormalParameter_return retval = new InternalN4JSParser.norm1_FormalParameter_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=norm1_BindingElementFragment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleBindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingElementFragment_return ruleBindingElementFragment() throws RecognitionException {
        InternalN4JSParser.ruleBindingElementFragment_return retval = new InternalN4JSParser.ruleBindingElementFragment_return();
        retval.start = input.LT(1);
        Token VariadicFullStopFullStopFullStopKeyword_0_1_1_0=null;
        Token HasInitializerAssignmentEqualsSignKeyword_1_0_0=null;
        InternalN4JSParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_2_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_0_1_3 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            int alt112=2;
            int LA112_0 = input.LA(1);
            if ( (LA112_0==LeftCurlyBracket) && (synpred58_InternalN4JSParser())) {
                alt112=1;
            }
            else if ( (LA112_0==LeftSquareBracket) && (synpred58_InternalN4JSParser())) {
                alt112=1;
            }
            else if ( ((LA112_0>=Intersection && LA112_0<=Implements)||(LA112_0>=Promisify && LA112_0<=Abstract)||LA112_0==External||(LA112_0>=Private && LA112_0<=Project)||LA112_0==Public||LA112_0==Static||LA112_0==Target||(LA112_0>=Async && LA112_0<=Await)||LA112_0==Union||(LA112_0>=Yield && LA112_0<=This)||LA112_0==From||LA112_0==Type||LA112_0==FullStopFullStopFullStop||(LA112_0>=Get && LA112_0<=Let)||(LA112_0>=Out && LA112_0<=Set)||LA112_0==As||LA112_0==Of||LA112_0==CommercialAt||LA112_0==RULE_IDENTIFIER) ) {
                alt112=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);
                throw nvae;
            }
            switch (alt112) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_63);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);
                        if ( (LA109_0==CommercialAt) ) {
                            alt109=1;
                        }
                        switch (alt109) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_64);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop109;
                        }
                    } while (true);
                    int alt110=2;
                    int LA110_0 = input.LA(1);
                    if ( (LA110_0==FullStopFullStopFullStop) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(VariadicFullStopFullStopFullStopKeyword_0_1_1_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_1_0());
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    pushFollow(FOLLOW_65);
                    NameBindingIdentifierParserRuleCall_0_1_2_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_0_1_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_2_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_2_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_2());
                    }
                    }
                    }
                    int alt111=2;
                    int LA111_0 = input.LA(1);
                    if ( (LA111_0==Colon) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_63);
                            ColonSepDeclaredTypeRefParserRuleCall_0_1_3=ruleColonSepDeclaredTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepDeclaredTypeRefParserRuleCall_0_1_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_0_1_3.start):null), (ColonSepDeclaredTypeRefParserRuleCall_0_1_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_0_1_3.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_3()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            int alt114=2;
            int LA114_0 = input.LA(1);
            if ( (LA114_0==EqualsSign) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    {
                    {
                    {
                    HasInitializerAssignmentEqualsSignKeyword_1_0_0=(Token)match(input,EqualsSign,FOLLOW_66); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(HasInitializerAssignmentEqualsSignKeyword_1_0_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                    }
                    }
                    }
                    int alt113=2;
                    int LA113_0 = input.LA(1);
                    if ( ((LA113_0>=Intersection && LA113_0<=Implements)||(LA113_0>=Promisify && LA113_0<=Abstract)||(LA113_0>=External && LA113_0<=Function)||(LA113_0>=Private && LA113_0<=Delete)||(LA113_0>=Import && LA113_0<=Public)||LA113_0==Static||(LA113_0>=Target && LA113_0<=Await)||LA113_0==Class||(LA113_0>=False && LA113_0<=Super)||LA113_0==Union||(LA113_0>=Yield && LA113_0<=This)||(LA113_0>=From && LA113_0<=Void)||(LA113_0>=Get && LA113_0<=Set)||LA113_0==PlusSignPlusSign||(LA113_0>=HyphenMinusHyphenMinus && LA113_0<=SolidusEqualsSign)||LA113_0==As||LA113_0==Of||LA113_0==ExclamationMark||LA113_0==LeftParenthesis||LA113_0==PlusSign||LA113_0==HyphenMinus||LA113_0==Solidus||LA113_0==LessThanSign||(LA113_0>=CommercialAt && LA113_0<=LeftSquareBracket)||LA113_0==LeftCurlyBracket||LA113_0==Tilde||LA113_0==RULE_DOUBLE||(LA113_0>=RULE_HEX_INT && LA113_0<=RULE_LEGACY_OCTAL_INT)||LA113_0==RULE_SCIENTIFIC_INT||LA113_0==RULE_IDENTIFIER||LA113_0==RULE_STRING||(LA113_0>=RULE_TEMPLATE_HEAD && LA113_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA113_0==RULE_INT) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            InitializerAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1());
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingElementFragment_return norm1_BindingElementFragment() throws RecognitionException {
        InternalN4JSParser.norm1_BindingElementFragment_return retval = new InternalN4JSParser.norm1_BindingElementFragment_return();
        retval.start = input.LT(1);
        Token VariadicFullStopFullStopFullStopKeyword_0_1_1_0=null;
        Token HasInitializerAssignmentEqualsSignKeyword_1_0_0=null;
        InternalN4JSParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_2_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_0_1_3 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            int alt118=2;
            int LA118_0 = input.LA(1);
            if ( (LA118_0==LeftCurlyBracket) && (synpred59_InternalN4JSParser())) {
                alt118=1;
            }
            else if ( (LA118_0==LeftSquareBracket) && (synpred59_InternalN4JSParser())) {
                alt118=1;
            }
            else if ( ((LA118_0>=Intersection && LA118_0<=Implements)||(LA118_0>=Promisify && LA118_0<=Abstract)||LA118_0==External||(LA118_0>=Private && LA118_0<=Project)||LA118_0==Public||LA118_0==Static||LA118_0==Target||(LA118_0>=Async && LA118_0<=Await)||LA118_0==Union||LA118_0==This||LA118_0==From||LA118_0==Type||LA118_0==FullStopFullStopFullStop||(LA118_0>=Get && LA118_0<=Let)||(LA118_0>=Out && LA118_0<=Set)||LA118_0==As||LA118_0==Of||LA118_0==CommercialAt||LA118_0==RULE_IDENTIFIER) ) {
                alt118=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);
                throw nvae;
            }
            switch (alt118) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_63);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    loop115:
                    do {
                        int alt115=2;
                        int LA115_0 = input.LA(1);
                        if ( (LA115_0==CommercialAt) ) {
                            alt115=1;
                        }
                        switch (alt115) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_64);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop115;
                        }
                    } while (true);
                    int alt116=2;
                    int LA116_0 = input.LA(1);
                    if ( (LA116_0==FullStopFullStopFullStop) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(VariadicFullStopFullStopFullStopKeyword_0_1_1_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_1_0());
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    pushFollow(FOLLOW_65);
                    NameBindingIdentifierParserRuleCall_0_1_2_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_0_1_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_2_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_2_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_2());
                    }
                    }
                    }
                    int alt117=2;
                    int LA117_0 = input.LA(1);
                    if ( (LA117_0==Colon) ) {
                        alt117=1;
                    }
                    switch (alt117) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_63);
                            ColonSepDeclaredTypeRefParserRuleCall_0_1_3=ruleColonSepDeclaredTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepDeclaredTypeRefParserRuleCall_0_1_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_0_1_3.start):null), (ColonSepDeclaredTypeRefParserRuleCall_0_1_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_0_1_3.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_3()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            int alt120=2;
            int LA120_0 = input.LA(1);
            if ( (LA120_0==EqualsSign) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    {
                    {
                    {
                    HasInitializerAssignmentEqualsSignKeyword_1_0_0=(Token)match(input,EqualsSign,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(HasInitializerAssignmentEqualsSignKeyword_1_0_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                    }
                    }
                    }
                    int alt119=2;
                    int LA119_0 = input.LA(1);
                    if ( ((LA119_0>=Intersection && LA119_0<=Implements)||(LA119_0>=Promisify && LA119_0<=Abstract)||(LA119_0>=External && LA119_0<=Function)||(LA119_0>=Private && LA119_0<=Delete)||(LA119_0>=Import && LA119_0<=Public)||LA119_0==Static||(LA119_0>=Target && LA119_0<=Await)||LA119_0==Class||(LA119_0>=False && LA119_0<=Super)||LA119_0==Union||(LA119_0>=Yield && LA119_0<=This)||(LA119_0>=From && LA119_0<=Void)||(LA119_0>=Get && LA119_0<=Set)||LA119_0==PlusSignPlusSign||(LA119_0>=HyphenMinusHyphenMinus && LA119_0<=SolidusEqualsSign)||LA119_0==As||LA119_0==Of||LA119_0==ExclamationMark||LA119_0==LeftParenthesis||LA119_0==PlusSign||LA119_0==HyphenMinus||LA119_0==Solidus||LA119_0==LessThanSign||(LA119_0>=CommercialAt && LA119_0<=LeftSquareBracket)||LA119_0==LeftCurlyBracket||LA119_0==Tilde||LA119_0==RULE_DOUBLE||(LA119_0>=RULE_HEX_INT && LA119_0<=RULE_LEGACY_OCTAL_INT)||LA119_0==RULE_SCIENTIFIC_INT||LA119_0==RULE_IDENTIFIER||LA119_0==RULE_STRING||(LA119_0>=RULE_TEMPLATE_HEAD && LA119_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA119_0==RULE_INT) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            InitializerAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1());
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlock();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBlock_return ruleBlock() throws RecognitionException {
        InternalN4JSParser.ruleBlock_return retval = new InternalN4JSParser.ruleBlock_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
            }
            }
            }
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);
                if ( ((LA121_0>=Intersection && LA121_0<=Implements)||(LA121_0>=Promisify && LA121_0<=Function)||(LA121_0>=Private && LA121_0<=Delete)||(LA121_0>=Import && LA121_0<=Break)||(LA121_0>=Class && LA121_0<=This)||(LA121_0>=From && LA121_0<=With)||(LA121_0>=For && LA121_0<=Var)||LA121_0==PlusSignPlusSign||(LA121_0>=HyphenMinusHyphenMinus && LA121_0<=SolidusEqualsSign)||(LA121_0>=As && LA121_0<=If)||LA121_0==Of||LA121_0==ExclamationMark||LA121_0==LeftParenthesis||LA121_0==PlusSign||LA121_0==HyphenMinus||LA121_0==Solidus||(LA121_0>=Semicolon && LA121_0<=LessThanSign)||(LA121_0>=CommercialAt && LA121_0<=LeftSquareBracket)||LA121_0==LeftCurlyBracket||LA121_0==Tilde||LA121_0==RULE_DOUBLE||(LA121_0>=RULE_HEX_INT && LA121_0<=RULE_LEGACY_OCTAL_INT)||LA121_0==RULE_SCIENTIFIC_INT||LA121_0==RULE_IDENTIFIER||LA121_0==RULE_STRING||(LA121_0>=RULE_TEMPLATE_HEAD && LA121_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA121_0==RULE_INT) ) {
                    alt121=1;
                }
                switch (alt121) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_50);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop121;
                }
            } while (true);
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_Block_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Block_return norm1_Block() throws RecognitionException {
        InternalN4JSParser.norm1_Block_return retval = new InternalN4JSParser.norm1_Block_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
            }
            }
            }
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);
                if ( ((LA122_0>=Intersection && LA122_0<=Implements)||(LA122_0>=Promisify && LA122_0<=Function)||(LA122_0>=Private && LA122_0<=Delete)||(LA122_0>=Import && LA122_0<=Break)||(LA122_0>=Class && LA122_0<=This)||(LA122_0>=From && LA122_0<=With)||(LA122_0>=For && LA122_0<=Var)||LA122_0==PlusSignPlusSign||(LA122_0>=HyphenMinusHyphenMinus && LA122_0<=SolidusEqualsSign)||(LA122_0>=As && LA122_0<=If)||LA122_0==Of||LA122_0==ExclamationMark||LA122_0==LeftParenthesis||LA122_0==PlusSign||LA122_0==HyphenMinus||LA122_0==Solidus||(LA122_0>=Semicolon && LA122_0<=LessThanSign)||(LA122_0>=CommercialAt && LA122_0<=LeftSquareBracket)||LA122_0==LeftCurlyBracket||LA122_0==Tilde||LA122_0==RULE_DOUBLE||(LA122_0>=RULE_HEX_INT && LA122_0<=RULE_LEGACY_OCTAL_INT)||LA122_0==RULE_SCIENTIFIC_INT||LA122_0==RULE_IDENTIFIER||LA122_0==RULE_STRING||(LA122_0>=RULE_TEMPLATE_HEAD && LA122_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA122_0==RULE_INT) ) {
                    alt122=1;
                }
                switch (alt122) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_52);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop122;
                }
            } while (true);
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRootStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRootStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleRootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRootStatement_return ruleRootStatement() throws RecognitionException {
        InternalN4JSParser.ruleRootStatement_return retval = new InternalN4JSParser.ruleRootStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBlock_return BlockParserRuleCall_0 = null;
        InternalN4JSParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;
        InternalN4JSParser.norm1_VariableStatement_return VariableStatementParserRuleCall_2 = null;
        InternalN4JSParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;
        InternalN4JSParser.ruleLabelledStatement_return LabelledStatementParserRuleCall_4 = null;
        InternalN4JSParser.ruleExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;
        InternalN4JSParser.ruleIfStatement_return IfStatementParserRuleCall_6 = null;
        InternalN4JSParser.ruleIterationStatement_return IterationStatementParserRuleCall_7 = null;
        InternalN4JSParser.ruleContinueStatement_return ContinueStatementParserRuleCall_8 = null;
        InternalN4JSParser.ruleBreakStatement_return BreakStatementParserRuleCall_9 = null;
        InternalN4JSParser.ruleReturnStatement_return ReturnStatementParserRuleCall_10 = null;
        InternalN4JSParser.ruleWithStatement_return WithStatementParserRuleCall_11 = null;
        InternalN4JSParser.ruleSwitchStatement_return SwitchStatementParserRuleCall_12 = null;
        InternalN4JSParser.ruleThrowStatement_return ThrowStatementParserRuleCall_13 = null;
        InternalN4JSParser.ruleTryStatement_return TryStatementParserRuleCall_14 = null;
        InternalN4JSParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;
        try {
            {
            int alt123=16;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=ruleFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm1_VariableStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=ruleLabelledStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=ruleExpressionStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=ruleIfStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=ruleIterationStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }
                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=ruleContinueStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }
                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=ruleBreakStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }
                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=ruleReturnStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }
                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=ruleWithStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }
                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=ruleSwitchStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }
                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=ruleThrowStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }
                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=ruleTryStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }
                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_RootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RootStatement_return norm1_RootStatement() throws RecognitionException {
        InternalN4JSParser.norm1_RootStatement_return retval = new InternalN4JSParser.norm1_RootStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_Block_return BlockParserRuleCall_0 = null;
        InternalN4JSParser.norm1_FunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;
        InternalN4JSParser.norm3_VariableStatement_return VariableStatementParserRuleCall_2 = null;
        InternalN4JSParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;
        InternalN4JSParser.norm1_LabelledStatement_return LabelledStatementParserRuleCall_4 = null;
        InternalN4JSParser.norm1_ExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;
        InternalN4JSParser.norm1_IfStatement_return IfStatementParserRuleCall_6 = null;
        InternalN4JSParser.norm1_IterationStatement_return IterationStatementParserRuleCall_7 = null;
        InternalN4JSParser.norm1_ContinueStatement_return ContinueStatementParserRuleCall_8 = null;
        InternalN4JSParser.norm1_BreakStatement_return BreakStatementParserRuleCall_9 = null;
        InternalN4JSParser.norm1_ReturnStatement_return ReturnStatementParserRuleCall_10 = null;
        InternalN4JSParser.norm1_WithStatement_return WithStatementParserRuleCall_11 = null;
        InternalN4JSParser.norm1_SwitchStatement_return SwitchStatementParserRuleCall_12 = null;
        InternalN4JSParser.norm1_ThrowStatement_return ThrowStatementParserRuleCall_13 = null;
        InternalN4JSParser.norm1_TryStatement_return TryStatementParserRuleCall_14 = null;
        InternalN4JSParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;
        try {
            {
            int alt124=16;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=norm1_FunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm3_VariableStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=norm1_LabelledStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=norm1_ExpressionStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=norm1_IfStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=norm1_IterationStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }
                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=norm1_ContinueStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }
                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=norm1_BreakStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }
                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=norm1_ReturnStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }
                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=norm1_WithStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }
                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=norm1_SwitchStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }
                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=norm1_ThrowStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }
                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=norm1_TryStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }
                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStatement_return ruleStatement() throws RecognitionException {
        InternalN4JSParser.ruleStatement_return retval = new InternalN4JSParser.ruleStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;
        InternalN4JSParser.ruleRootStatement_return RootStatementParserRuleCall_1 = null;
        try {
            {
            int alt125=2;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=ruleAnnotatedFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=ruleRootStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_Statement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Statement_return norm1_Statement() throws RecognitionException {
        InternalN4JSParser.norm1_Statement_return retval = new InternalN4JSParser.norm1_Statement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;
        InternalN4JSParser.norm1_RootStatement_return RootStatementParserRuleCall_1 = null;
        try {
            {
            int alt126=2;
            alt126 = dfa126.predict(input);
            switch (alt126) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=norm1_AnnotatedFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=norm1_RootStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableStatement_return norm1_VariableStatement() throws RecognitionException {
        InternalN4JSParser.norm1_VariableStatement_return retval = new InternalN4JSParser.norm1_VariableStatement_return();
        retval.start = input.LT(1);
        Token CommaKeyword_2_0=null;
        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;
        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_27);
            ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return retval;
            }
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_28);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm1_VariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1());
            }
            }
            }
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);
                if ( (LA127_0==Comma) ) {
                    alt127=1;
                }
                switch (alt127) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_28);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm1_VariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop127;
                }
            } while (true);
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableStatement_return norm3_VariableStatement() throws RecognitionException {
        InternalN4JSParser.norm3_VariableStatement_return retval = new InternalN4JSParser.norm3_VariableStatement_return();
        retval.start = input.LT(1);
        Token CommaKeyword_2_0=null;
        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;
        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_27);
            ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return retval;
            }
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_28);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm3_VariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1());
            }
            }
            }
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);
                if ( (LA128_0==Comma) ) {
                    alt128=1;
                }
                switch (alt128) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_28);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm3_VariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop128;
                }
            } while (true);
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportedVariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableStatement_return ruleExportedVariableStatement() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableStatement_return retval = new InternalN4JSParser.ruleExportedVariableStatement_return();
        retval.start = input.LT(1);
        Token CommaKeyword_4_0=null;
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_5 = null;
        try {
            {
            {
            loop129:
            do {
                int alt129=2;
                alt129 = dfa129.predict(input);
                switch (alt129) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_26);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop129;
                }
            } while (true);
            {
            {
            pushFollow(FOLLOW_27);
            ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return retval;
            }
            }
            {
            {
            pushFollow(FOLLOW_28);
            VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0=ruleExportedVariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_3());
            }
            }
            }
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);
                if ( (LA130_0==Comma) ) {
                    alt130=1;
                }
                switch (alt130) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_4_0, grammarAccess.getExportedVariableStatementAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_28);
            	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0=ruleExportedVariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_4_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop130;
                }
            } while (true);
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getExportedVariableStatementAccess().getSemiParserRuleCall_5()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVariableDeclarationOrBinding_return ruleVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.ruleVariableDeclarationOrBinding_return retval = new InternalN4JSParser.ruleVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleVariableBinding_return VariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt131=2;
            int LA131_0 = input.LA(1);
            if ( (LA131_0==LeftCurlyBracket) && (synpred74_InternalN4JSParser())) {
                alt131=1;
            }
            else if ( (LA131_0==LeftSquareBracket) && (synpred74_InternalN4JSParser())) {
                alt131=1;
            }
            else if ( ((LA131_0>=Intersection && LA131_0<=Implements)||(LA131_0>=Promisify && LA131_0<=Abstract)||LA131_0==External||(LA131_0>=Private && LA131_0<=Project)||LA131_0==Public||LA131_0==Static||LA131_0==Target||(LA131_0>=Async && LA131_0<=Await)||LA131_0==Union||(LA131_0>=Yield && LA131_0<=This)||LA131_0==From||LA131_0==Type||(LA131_0>=Get && LA131_0<=Let)||(LA131_0>=Out && LA131_0<=Set)||LA131_0==As||LA131_0==Of||LA131_0==CommercialAt||LA131_0==RULE_IDENTIFIER) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);
                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=ruleVariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclarationOrBinding_return norm1_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm1_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_VariableBinding_return VariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm5_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt132=2;
            int LA132_0 = input.LA(1);
            if ( (LA132_0==LeftCurlyBracket) && (synpred75_InternalN4JSParser())) {
                alt132=1;
            }
            else if ( (LA132_0==LeftSquareBracket) && (synpred75_InternalN4JSParser())) {
                alt132=1;
            }
            else if ( ((LA132_0>=Intersection && LA132_0<=Implements)||(LA132_0>=Promisify && LA132_0<=Abstract)||LA132_0==External||(LA132_0>=Private && LA132_0<=Project)||LA132_0==Public||LA132_0==Static||LA132_0==Target||(LA132_0>=Async && LA132_0<=Await)||LA132_0==Union||(LA132_0>=Yield && LA132_0<=This)||LA132_0==From||LA132_0==Type||(LA132_0>=Get && LA132_0<=Let)||(LA132_0>=Out && LA132_0<=Set)||LA132_0==As||LA132_0==Of||LA132_0==CommercialAt||LA132_0==RULE_IDENTIFIER) ) {
                alt132=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);
                throw nvae;
            }
            switch (alt132) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm1_VariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm5_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_VariableDeclarationOrBinding_return norm2_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm2_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm2_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_VariableBinding_return VariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt133=2;
            int LA133_0 = input.LA(1);
            if ( (LA133_0==LeftCurlyBracket) && (synpred76_InternalN4JSParser())) {
                alt133=1;
            }
            else if ( (LA133_0==LeftSquareBracket) && (synpred76_InternalN4JSParser())) {
                alt133=1;
            }
            else if ( ((LA133_0>=Intersection && LA133_0<=Implements)||(LA133_0>=Promisify && LA133_0<=Abstract)||LA133_0==External||(LA133_0>=Private && LA133_0<=Project)||LA133_0==Public||LA133_0==Static||LA133_0==Target||(LA133_0>=Async && LA133_0<=Await)||LA133_0==Union||LA133_0==This||LA133_0==From||LA133_0==Type||(LA133_0>=Get && LA133_0<=Let)||(LA133_0>=Out && LA133_0<=Set)||LA133_0==As||LA133_0==Of||LA133_0==CommercialAt||LA133_0==RULE_IDENTIFIER) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);
                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm2_VariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclarationOrBinding_return norm3_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm3_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_VariableBinding_return VariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm7_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt134=2;
            int LA134_0 = input.LA(1);
            if ( (LA134_0==LeftCurlyBracket) && (synpred77_InternalN4JSParser())) {
                alt134=1;
            }
            else if ( (LA134_0==LeftSquareBracket) && (synpred77_InternalN4JSParser())) {
                alt134=1;
            }
            else if ( ((LA134_0>=Intersection && LA134_0<=Implements)||(LA134_0>=Promisify && LA134_0<=Abstract)||LA134_0==External||(LA134_0>=Private && LA134_0<=Project)||LA134_0==Public||LA134_0==Static||LA134_0==Target||(LA134_0>=Async && LA134_0<=Await)||LA134_0==Union||LA134_0==This||LA134_0==From||LA134_0==Type||(LA134_0>=Get && LA134_0<=Let)||(LA134_0>=Out && LA134_0<=Set)||LA134_0==As||LA134_0==Of||LA134_0==CommercialAt||LA134_0==RULE_IDENTIFIER) ) {
                alt134=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);
                throw nvae;
            }
            switch (alt134) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm3_VariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm7_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm4_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclarationOrBinding_return norm4_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm4_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm4_VariableBinding_return VariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt135=2;
            int LA135_0 = input.LA(1);
            if ( (LA135_0==LeftCurlyBracket) && (synpred78_InternalN4JSParser())) {
                alt135=1;
            }
            else if ( (LA135_0==LeftSquareBracket) && (synpred78_InternalN4JSParser())) {
                alt135=1;
            }
            else if ( ((LA135_0>=Intersection && LA135_0<=Implements)||(LA135_0>=Promisify && LA135_0<=Abstract)||LA135_0==External||(LA135_0>=Private && LA135_0<=Project)||LA135_0==Public||LA135_0==Static||LA135_0==Target||(LA135_0>=Async && LA135_0<=Await)||LA135_0==Union||(LA135_0>=Yield && LA135_0<=This)||LA135_0==From||LA135_0==Type||(LA135_0>=Get && LA135_0<=Let)||(LA135_0>=Out && LA135_0<=Set)||LA135_0==As||LA135_0==Of||LA135_0==CommercialAt||LA135_0==RULE_IDENTIFIER) ) {
                alt135=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);
                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm4_VariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm6_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclarationOrBinding_return norm6_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm6_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm6_VariableBinding_return VariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt136=2;
            int LA136_0 = input.LA(1);
            if ( (LA136_0==LeftCurlyBracket) && (synpred79_InternalN4JSParser())) {
                alt136=1;
            }
            else if ( (LA136_0==LeftSquareBracket) && (synpred79_InternalN4JSParser())) {
                alt136=1;
            }
            else if ( ((LA136_0>=Intersection && LA136_0<=Implements)||(LA136_0>=Promisify && LA136_0<=Abstract)||LA136_0==External||(LA136_0>=Private && LA136_0<=Project)||LA136_0==Public||LA136_0==Static||LA136_0==Target||(LA136_0>=Async && LA136_0<=Await)||LA136_0==Union||LA136_0==This||LA136_0==From||LA136_0==Type||(LA136_0>=Get && LA136_0<=Let)||(LA136_0>=Out && LA136_0<=Set)||LA136_0==As||LA136_0==Of||LA136_0==CommercialAt||LA136_0==RULE_IDENTIFIER) ) {
                alt136=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);
                throw nvae;
            }
            switch (alt136) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm6_VariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableBinding();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVariableBinding_return ruleVariableBinding() throws RecognitionException {
        InternalN4JSParser.ruleVariableBinding_return retval = new InternalN4JSParser.ruleVariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_68);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
            }
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableBinding_return norm1_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm1_VariableBinding_return retval = new InternalN4JSParser.norm1_VariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_68);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
            }
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_VariableBinding_return norm2_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm2_VariableBinding_return retval = new InternalN4JSParser.norm2_VariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_68);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
            }
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableBinding_return norm3_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm3_VariableBinding_return retval = new InternalN4JSParser.norm3_VariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_68);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
            }
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm4_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableBinding_return norm4_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm4_VariableBinding_return retval = new InternalN4JSParser.norm4_VariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_63);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            int alt137=2;
            int LA137_0 = input.LA(1);
            if ( (LA137_0==EqualsSign) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm5_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_63);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            int alt138=2;
            int LA138_0 = input.LA(1);
            if ( (LA138_0==EqualsSign) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class norm6_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableBinding_return norm6_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm6_VariableBinding_return retval = new InternalN4JSParser.norm6_VariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_63);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            int alt139=2;
            int LA139_0 = input.LA(1);
            if ( (LA139_0==EqualsSign) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm7_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_63);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            int alt140=2;
            int LA140_0 = input.LA(1);
            if ( (LA140_0==EqualsSign) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_69); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class norm1_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclaration_return norm1_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclaration_return retval = new InternalN4JSParser.norm1_VariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm1_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclaration_return norm3_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclaration_return retval = new InternalN4JSParser.norm3_VariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm3_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm4_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclaration_return norm4_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclaration_return retval = new InternalN4JSParser.norm4_VariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm4_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm4_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm5_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm5_VariableDeclaration_return norm5_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclaration_return retval = new InternalN4JSParser.norm5_VariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm6_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclaration_return norm6_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclaration_return retval = new InternalN4JSParser.norm6_VariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm6_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm6_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm7_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm7_VariableDeclaration_return norm7_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclaration_return retval = new InternalN4JSParser.norm7_VariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void ruleVariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            {
            loop141:
            do {
                int alt141=2;
                alt141 = dfa141.predict(input);
                switch (alt141) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_70);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop141;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_63);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
            }
            }
            }
            }
            int alt142=2;
            int LA142_0 = input.LA(1);
            if ( (LA142_0==EqualsSign) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class norm1_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclarationImpl_return norm1_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm1_VariableDeclarationImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            {
            loop143:
            do {
                int alt143=2;
                alt143 = dfa143.predict(input);
                switch (alt143) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_70);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop143;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_63);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
            }
            }
            }
            }
            int alt144=2;
            int LA144_0 = input.LA(1);
            if ( (LA144_0==EqualsSign) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm2_VariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            {
            loop145:
            do {
                int alt145=2;
                alt145 = dfa145.predict(input);
                switch (alt145) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_70);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop145;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_63);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
            }
            }
            }
            }
            int alt146=2;
            int LA146_0 = input.LA(1);
            if ( (LA146_0==EqualsSign) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_69); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class norm3_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclarationImpl_return norm3_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm3_VariableDeclarationImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            {
            loop147:
            do {
                int alt147=2;
                alt147 = dfa147.predict(input);
                switch (alt147) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_70);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop147;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_63);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
            }
            }
            }
            }
            int alt148=2;
            int LA148_0 = input.LA(1);
            if ( (LA148_0==EqualsSign) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm4_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclarationImpl_return norm4_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm4_VariableDeclarationImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1 = null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;
        try {
            {
            {
            loop149:
            do {
                int alt149=2;
                alt149 = dfa149.predict(input);
                switch (alt149) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_70);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop149;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_65);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
            }
            }
            }
            int alt150=2;
            int LA150_0 = input.LA(1);
            if ( (LA150_0==Colon) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    {
                    pushFollow(FOLLOW_63);
                    ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1()); 
                    }
                    }
                    break;
            }
            }
            }
            int alt151=2;
            int LA151_0 = input.LA(1);
            if ( (LA151_0==EqualsSign) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm5_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm5_VariableDeclarationImpl_return norm5_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm5_VariableDeclarationImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;
        try {
            {
            {
            loop152:
            do {
                int alt152=2;
                alt152 = dfa152.predict(input);
                switch (alt152) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_70);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop152;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_65);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
            }
            }
            }
            int alt153=2;
            int LA153_0 = input.LA(1);
            if ( (LA153_0==Colon) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    {
                    pushFollow(FOLLOW_63);
                    ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1()); 
                    }
                    }
                    break;
            }
            }
            }
            int alt154=2;
            int LA154_0 = input.LA(1);
            if ( (LA154_0==EqualsSign) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm6_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclarationImpl_return norm6_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm6_VariableDeclarationImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;
        try {
            {
            {
            loop155:
            do {
                int alt155=2;
                alt155 = dfa155.predict(input);
                switch (alt155) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_70);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop155;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_65);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
            }
            }
            }
            int alt156=2;
            int LA156_0 = input.LA(1);
            if ( (LA156_0==Colon) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    {
                    pushFollow(FOLLOW_63);
                    ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1()); 
                    }
                    }
                    break;
            }
            }
            }
            int alt157=2;
            int LA157_0 = input.LA(1);
            if ( (LA157_0==EqualsSign) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm7_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm7_VariableDeclarationImpl_return norm7_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm7_VariableDeclarationImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;
        try {
            {
            {
            loop158:
            do {
                int alt158=2;
                alt158 = dfa158.predict(input);
                switch (alt158) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_70);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop158;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_65);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
            }
            }
            }
            int alt159=2;
            int LA159_0 = input.LA(1);
            if ( (LA159_0==Colon) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    {
                    pushFollow(FOLLOW_63);
                    ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1()); 
                    }
                    }
                    break;
            }
            }
            }
            int alt160=2;
            int LA160_0 = input.LA(1);
            if ( (LA160_0==EqualsSign) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportedVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return ruleExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return retval = new InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.ruleExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt161=2;
            int LA161_0 = input.LA(1);
            if ( (LA161_0==LeftCurlyBracket) && (synpred96_InternalN4JSParser())) {
                alt161=1;
            }
            else if ( (LA161_0==LeftSquareBracket) && (synpred96_InternalN4JSParser())) {
                alt161=1;
            }
            else if ( ((LA161_0>=Intersection && LA161_0<=Implements)||(LA161_0>=Promisify && LA161_0<=Abstract)||LA161_0==External||(LA161_0>=Private && LA161_0<=Project)||LA161_0==Public||LA161_0==Static||LA161_0==Target||(LA161_0>=Async && LA161_0<=Await)||LA161_0==Union||(LA161_0>=Yield && LA161_0<=This)||LA161_0==From||LA161_0==Type||(LA161_0>=Get && LA161_0<=Let)||(LA161_0>=Out && LA161_0<=Set)||LA161_0==As||LA161_0==Of||LA161_0==CommercialAt||LA161_0==RULE_IDENTIFIER) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);
                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=ruleExportedVariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=ruleExportedVariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm1_ExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm1_ExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt162=2;
            int LA162_0 = input.LA(1);
            if ( (LA162_0==LeftCurlyBracket) && (synpred97_InternalN4JSParser())) {
                alt162=1;
            }
            else if ( (LA162_0==LeftSquareBracket) && (synpred97_InternalN4JSParser())) {
                alt162=1;
            }
            else if ( ((LA162_0>=Intersection && LA162_0<=Implements)||(LA162_0>=Promisify && LA162_0<=Abstract)||LA162_0==External||(LA162_0>=Private && LA162_0<=Project)||LA162_0==Public||LA162_0==Static||LA162_0==Target||(LA162_0>=Async && LA162_0<=Await)||LA162_0==Union||LA162_0==This||LA162_0==From||LA162_0==Type||(LA162_0>=Get && LA162_0<=Let)||(LA162_0>=Out && LA162_0<=Set)||LA162_0==As||LA162_0==Of||LA162_0==CommercialAt||LA162_0==RULE_IDENTIFIER) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);
                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=norm1_ExportedVariableBinding();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=norm1_ExportedVariableDeclaration();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleExportedVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableBinding();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableBinding_return ruleExportedVariableBinding() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableBinding_return retval = new InternalN4JSParser.ruleExportedVariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_68);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExportedVariableBinding_return norm1_ExportedVariableBinding() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableBinding_return retval = new InternalN4JSParser.norm1_ExportedVariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_68);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableDeclaration_return ruleExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableDeclaration_return retval = new InternalN4JSParser.ruleExportedVariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExportedVariableDeclaration_return norm1_ExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableDeclaration_return retval = new InternalN4JSParser.norm1_ExportedVariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleEmptyStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEmptyStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleEmptyStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleEmptyStatement_return ruleEmptyStatement() throws RecognitionException {
        InternalN4JSParser.ruleEmptyStatement_return retval = new InternalN4JSParser.ruleEmptyStatement_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_1=null;
        try {
            {
            {
            SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(SemicolonKeyword_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionStatement_return ruleExpressionStatement() throws RecognitionException {
        InternalN4JSParser.ruleExpressionStatement_return retval = new InternalN4JSParser.ruleExpressionStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_18);
            ExpressionExpressionParserRuleCall_0_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0());
            }
            }
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExpressionStatement_return norm1_ExpressionStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ExpressionStatement_return retval = new InternalN4JSParser.norm1_ExpressionStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_18);
            ExpressionExpressionParserRuleCall_0_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0());
            }
            }
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIfStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIfStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIfStatement_return ruleIfStatement() throws RecognitionException {
        InternalN4JSParser.ruleIfStatement_return retval = new InternalN4JSParser.ruleIfStatement_return();
        retval.start = input.LT(1);
        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleStatement_return IfStmtStatementParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleStatement_return ElseStmtStatementParserRuleCall_5_1_0 = null;
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_71);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_72); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_73);
            IfStmtStatementParserRuleCall_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4());
            }
            }
            }
            int alt163=2;
            int LA163_0 = input.LA(1);
            if ( (LA163_0==Else) ) {
                int LA163_1 = input.LA(2);
                if ( (synpred100_InternalN4JSParser()) ) {
                    alt163=1;
                }
            }
            switch (alt163) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_72); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=ruleStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_IfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IfStatement_return norm1_IfStatement() throws RecognitionException {
        InternalN4JSParser.norm1_IfStatement_return retval = new InternalN4JSParser.norm1_IfStatement_return();
        retval.start = input.LT(1);
        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_Statement_return IfStmtStatementParserRuleCall_4_0 = null;
        InternalN4JSParser.norm1_Statement_return ElseStmtStatementParserRuleCall_5_1_0 = null;
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_71);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_73);
            IfStmtStatementParserRuleCall_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4());
            }
            }
            }
            int alt164=2;
            int LA164_0 = input.LA(1);
            if ( (LA164_0==Else) ) {
                int LA164_1 = input.LA(2);
                if ( (synpred101_InternalN4JSParser()) ) {
                    alt164=1;
                }
            }
            switch (alt164) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_74); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=norm1_Statement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIterationStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIterationStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIterationStatement_return ruleIterationStatement() throws RecognitionException {
        InternalN4JSParser.ruleIterationStatement_return retval = new InternalN4JSParser.ruleIterationStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleDoStatement_return DoStatementParserRuleCall_0 = null;
        InternalN4JSParser.ruleWhileStatement_return WhileStatementParserRuleCall_1 = null;
        InternalN4JSParser.ruleForStatement_return ForStatementParserRuleCall_2 = null;
        try {
            {
            int alt165=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt165=1;
                }
                break;
            case While:
                {
                alt165=2;
                }
                break;
            case For:
                {
                alt165=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);
                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=ruleDoStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=ruleWhileStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=ruleForStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_IterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IterationStatement_return norm1_IterationStatement() throws RecognitionException {
        InternalN4JSParser.norm1_IterationStatement_return retval = new InternalN4JSParser.norm1_IterationStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_DoStatement_return DoStatementParserRuleCall_0 = null;
        InternalN4JSParser.norm1_WhileStatement_return WhileStatementParserRuleCall_1 = null;
        InternalN4JSParser.norm1_ForStatement_return ForStatementParserRuleCall_2 = null;
        try {
            {
            int alt166=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt166=1;
                }
                break;
            case While:
                {
                alt166=2;
                }
                break;
            case For:
                {
                alt166=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);
                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=norm1_DoStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=norm1_WhileStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=norm1_ForStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDoStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleDoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDoStatement_return ruleDoStatement() throws RecognitionException {
        InternalN4JSParser.ruleDoStatement_return retval = new InternalN4JSParser.ruleDoStatement_return();
        retval.start = input.LT(1);
        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_6 = null;
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_72); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_75);
            StatementStatementParserRuleCall_1_0=ruleStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1());
            }
            }
            }
            WhileKeyword_2=(Token)match(input,While,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_71);
            ExpressionExpressionParserRuleCall_4_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4());
            }
            }
            }
            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_35); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
            }
            int alt167=2;
            alt167 = dfa167.predict(input);
            switch (alt167) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_DoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_DoStatement_return norm1_DoStatement() throws RecognitionException {
        InternalN4JSParser.norm1_DoStatement_return retval = new InternalN4JSParser.norm1_DoStatement_return();
        retval.start = input.LT(1);
        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_6 = null;
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_75);
            StatementStatementParserRuleCall_1_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1());
            }
            }
            }
            WhileKeyword_2=(Token)match(input,While,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_71);
            ExpressionExpressionParserRuleCall_4_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4());
            }
            }
            }
            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_35); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
            }
            int alt168=2;
            int LA168_0 = input.LA(1);
            if ( (LA168_0==Semicolon) ) {
                int LA168_1 = input.LA(2);
                if ( (synpred103_InternalN4JSParser()) ) {
                    alt168=1;
                }
            }
            else if ( (LA168_0==EOF) && (synpred103_InternalN4JSParser())) {
                alt168=1;
            }
            else if ( (LA168_0==RULE_EOL) && (synpred103_InternalN4JSParser())) {
                alt168=1;
            }
            else if ( (LA168_0==RULE_ML_COMMENT) && (synpred103_InternalN4JSParser())) {
                alt168=1;
            }
            else if ( (LA168_0==RightCurlyBracket) ) {
                int LA168_5 = input.LA(2);
                if ( (synpred103_InternalN4JSParser()) ) {
                    alt168=1;
                }
            }
            switch (alt168) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWhileStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWhileStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleWhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWhileStatement_return ruleWhileStatement() throws RecognitionException {
        InternalN4JSParser.ruleWhileStatement_return retval = new InternalN4JSParser.ruleWhileStatement_return();
        retval.start = input.LT(1);
        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_71);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_72); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_WhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_WhileStatement_return norm1_WhileStatement() throws RecognitionException {
        InternalN4JSParser.norm1_WhileStatement_return retval = new InternalN4JSParser.norm1_WhileStatement_return();
        retval.start = input.LT(1);
        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_71);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleForStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleForStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleForStatement_return ruleForStatement() throws RecognitionException {
        InternalN4JSParser.ruleForStatement_return retval = new InternalN4JSParser.ruleForStatement_return();
        retval.start = input.LT(1);
        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;
        InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;
        InternalN4JSParser.norm4_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;
        InternalN4JSParser.ruleVariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;
        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;
        InternalN4JSParser.ruleExpression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;
        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;
        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;
        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1());
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2());
            }
            int alt186=2;
            alt186 = dfa186.predict(input);
            switch (alt186) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_77);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_71);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2());
                    }
                    }
                    }
                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_72); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    int alt185=3;
                    alt185 = dfa185.predict(input);
                    switch (alt185) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_27);
                            ruleVariableStatementKeyword();
                            state._fsp--;
                            if (state.failed) return retval;
                            }
                            }
                            int alt177=2;
                            alt177 = dfa177.predict(input);
                            switch (alt177) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_78);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=ruleBindingIdentifierAsVariableDeclaration();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      											announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0());
                                    }
                                    }
                                    }
                                    int alt169=2;
                                    int LA169_0 = input.LA(1);
                                    if ( (LA169_0==In) ) {
                                        alt169=1;
                                    }
                                    else if ( (LA169_0==Of) ) {
                                        alt169=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 169, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt169) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_79); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0());
                                            }
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_79); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0());
                                            }
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    int alt170=2;
                                    alt170 = dfa170.predict(input);
                                    switch (alt170) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_71);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm1_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              											announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_80);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm4_VariableDeclarationOrBinding();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      										announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0());
                                    }
                                    }
                                    }
                                    int alt176=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt176=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt176=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt176=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 176, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt176) {
                                        case 1 :
                                            {
                                            {
                                            loop171:
                                            do {
                                                int alt171=2;
                                                int LA171_0 = input.LA(1);
                                                if ( (LA171_0==Comma) ) {
                                                    alt171=1;
                                                }
                                                switch (alt171) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	      											announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0());
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_81);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=ruleVariableDeclarationOrBinding();
                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	      													announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1());
                                            	    }
                                            	    }
                                            	    }
                                            	    }
                                            	    break;
                                            	default :
                                            	    break loop171;
                                                }
                                            } while (true);
                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1());
                                            }
                                            int alt172=2;
                                            int LA172_0 = input.LA(1);
                                            if ( ((LA172_0>=Intersection && LA172_0<=Implements)||(LA172_0>=Promisify && LA172_0<=Abstract)||(LA172_0>=External && LA172_0<=Function)||(LA172_0>=Private && LA172_0<=Delete)||(LA172_0>=Import && LA172_0<=Public)||LA172_0==Static||(LA172_0>=Target && LA172_0<=Await)||LA172_0==Class||(LA172_0>=False && LA172_0<=Super)||LA172_0==Union||(LA172_0>=Yield && LA172_0<=This)||(LA172_0>=From && LA172_0<=Void)||(LA172_0>=Get && LA172_0<=Set)||LA172_0==PlusSignPlusSign||(LA172_0>=HyphenMinusHyphenMinus && LA172_0<=SolidusEqualsSign)||LA172_0==As||LA172_0==Of||LA172_0==ExclamationMark||LA172_0==LeftParenthesis||LA172_0==PlusSign||LA172_0==HyphenMinus||LA172_0==Solidus||LA172_0==LessThanSign||(LA172_0>=CommercialAt && LA172_0<=LeftSquareBracket)||LA172_0==LeftCurlyBracket||LA172_0==Tilde||LA172_0==RULE_DOUBLE||(LA172_0>=RULE_HEX_INT && LA172_0<=RULE_LEGACY_OCTAL_INT)||LA172_0==RULE_SCIENTIFIC_INT||LA172_0==RULE_IDENTIFIER||LA172_0==RULE_STRING||(LA172_0>=RULE_TEMPLATE_HEAD && LA172_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA172_0==RULE_INT) ) {
                                                alt172=1;
                                            }
                                            switch (alt172) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_83);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_79); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3());
                                            }
                                            int alt173=2;
                                            int LA173_0 = input.LA(1);
                                            if ( ((LA173_0>=Intersection && LA173_0<=Implements)||(LA173_0>=Promisify && LA173_0<=Abstract)||(LA173_0>=External && LA173_0<=Function)||(LA173_0>=Private && LA173_0<=Delete)||(LA173_0>=Import && LA173_0<=Public)||LA173_0==Static||(LA173_0>=Target && LA173_0<=Await)||LA173_0==Class||(LA173_0>=False && LA173_0<=Super)||LA173_0==Union||(LA173_0>=Yield && LA173_0<=This)||(LA173_0>=From && LA173_0<=Void)||(LA173_0>=Get && LA173_0<=Set)||LA173_0==PlusSignPlusSign||(LA173_0>=HyphenMinusHyphenMinus && LA173_0<=SolidusEqualsSign)||LA173_0==As||LA173_0==Of||LA173_0==ExclamationMark||LA173_0==LeftParenthesis||LA173_0==PlusSign||LA173_0==HyphenMinus||LA173_0==Solidus||LA173_0==LessThanSign||(LA173_0>=CommercialAt && LA173_0<=LeftSquareBracket)||LA173_0==LeftCurlyBracket||LA173_0==Tilde||LA173_0==RULE_DOUBLE||(LA173_0>=RULE_HEX_INT && LA173_0<=RULE_LEGACY_OCTAL_INT)||LA173_0==RULE_SCIENTIFIC_INT||LA173_0==RULE_IDENTIFIER||LA173_0==RULE_STRING||(LA173_0>=RULE_TEMPLATE_HEAD && LA173_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA173_0==RULE_INT) ) {
                                                alt173=1;
                                            }
                                            switch (alt173) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_71);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_79); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0());
                                            }
                                            }
                                            }
                                            int alt174=2;
                                            int LA174_0 = input.LA(1);
                                            if ( ((LA174_0>=Intersection && LA174_0<=Implements)||(LA174_0>=Promisify && LA174_0<=Abstract)||(LA174_0>=External && LA174_0<=Function)||(LA174_0>=Private && LA174_0<=Delete)||(LA174_0>=Import && LA174_0<=Public)||LA174_0==Static||(LA174_0>=Target && LA174_0<=Await)||LA174_0==Class||(LA174_0>=False && LA174_0<=Super)||LA174_0==Union||(LA174_0>=Yield && LA174_0<=This)||(LA174_0>=From && LA174_0<=Void)||(LA174_0>=Get && LA174_0<=Set)||LA174_0==PlusSignPlusSign||(LA174_0>=HyphenMinusHyphenMinus && LA174_0<=SolidusEqualsSign)||LA174_0==As||LA174_0==Of||LA174_0==ExclamationMark||LA174_0==LeftParenthesis||LA174_0==PlusSign||LA174_0==HyphenMinus||LA174_0==Solidus||LA174_0==LessThanSign||(LA174_0>=CommercialAt && LA174_0<=LeftSquareBracket)||LA174_0==LeftCurlyBracket||LA174_0==Tilde||LA174_0==RULE_DOUBLE||(LA174_0>=RULE_HEX_INT && LA174_0<=RULE_LEGACY_OCTAL_INT)||LA174_0==RULE_SCIENTIFIC_INT||LA174_0==RULE_IDENTIFIER||LA174_0==RULE_STRING||(LA174_0>=RULE_TEMPLATE_HEAD && LA174_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA174_0==RULE_INT) ) {
                                                alt174=1;
                                            }
                                            switch (alt174) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_71);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_79); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0());
                                            }
                                            }
                                            }
                                            int alt175=2;
                                            int LA175_0 = input.LA(1);
                                            if ( ((LA175_0>=Intersection && LA175_0<=Implements)||(LA175_0>=Promisify && LA175_0<=Abstract)||(LA175_0>=External && LA175_0<=Function)||(LA175_0>=Private && LA175_0<=Delete)||(LA175_0>=Import && LA175_0<=Public)||LA175_0==Static||(LA175_0>=Target && LA175_0<=Await)||LA175_0==Class||(LA175_0>=False && LA175_0<=Super)||LA175_0==Union||(LA175_0>=Yield && LA175_0<=This)||(LA175_0>=From && LA175_0<=Void)||(LA175_0>=Get && LA175_0<=Set)||LA175_0==PlusSignPlusSign||(LA175_0>=HyphenMinusHyphenMinus && LA175_0<=SolidusEqualsSign)||LA175_0==As||LA175_0==Of||LA175_0==ExclamationMark||LA175_0==LeftParenthesis||LA175_0==PlusSign||LA175_0==HyphenMinus||LA175_0==Solidus||LA175_0==LessThanSign||(LA175_0>=CommercialAt && LA175_0<=LeftSquareBracket)||LA175_0==LeftCurlyBracket||LA175_0==Tilde||LA175_0==RULE_DOUBLE||(LA175_0>=RULE_HEX_INT && LA175_0<=RULE_LEGACY_OCTAL_INT)||LA175_0==RULE_SCIENTIFIC_INT||LA175_0==RULE_IDENTIFIER||LA175_0==RULE_STRING||(LA175_0>=RULE_TEMPLATE_HEAD && LA175_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA175_0==RULE_INT) ) {
                                                alt175=1;
                                            }
                                            switch (alt175) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_71);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm1_AssignmentExpression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_84);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=ruleExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0());
                            }
                            }
                            }
                            int alt182=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt182=1;
                                }
                                break;
                            case In:
                                {
                                alt182=2;
                                }
                                break;
                            case Of:
                                {
                                alt182=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 182, 0, input);
                                throw nvae;
                            }
                            switch (alt182) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0());
                                    }
                                    int alt178=2;
                                    int LA178_0 = input.LA(1);
                                    if ( ((LA178_0>=Intersection && LA178_0<=Implements)||(LA178_0>=Promisify && LA178_0<=Abstract)||(LA178_0>=External && LA178_0<=Function)||(LA178_0>=Private && LA178_0<=Delete)||(LA178_0>=Import && LA178_0<=Public)||LA178_0==Static||(LA178_0>=Target && LA178_0<=Await)||LA178_0==Class||(LA178_0>=False && LA178_0<=Super)||LA178_0==Union||(LA178_0>=Yield && LA178_0<=This)||(LA178_0>=From && LA178_0<=Void)||(LA178_0>=Get && LA178_0<=Set)||LA178_0==PlusSignPlusSign||(LA178_0>=HyphenMinusHyphenMinus && LA178_0<=SolidusEqualsSign)||LA178_0==As||LA178_0==Of||LA178_0==ExclamationMark||LA178_0==LeftParenthesis||LA178_0==PlusSign||LA178_0==HyphenMinus||LA178_0==Solidus||LA178_0==LessThanSign||(LA178_0>=CommercialAt && LA178_0<=LeftSquareBracket)||LA178_0==LeftCurlyBracket||LA178_0==Tilde||LA178_0==RULE_DOUBLE||(LA178_0>=RULE_HEX_INT && LA178_0<=RULE_LEGACY_OCTAL_INT)||LA178_0==RULE_SCIENTIFIC_INT||LA178_0==RULE_IDENTIFIER||LA178_0==RULE_STRING||(LA178_0>=RULE_TEMPLATE_HEAD && LA178_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA178_0==RULE_INT) ) {
                                        alt178=1;
                                    }
                                    switch (alt178) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_83);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_79); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2());
                                    }
                                    int alt179=2;
                                    int LA179_0 = input.LA(1);
                                    if ( ((LA179_0>=Intersection && LA179_0<=Implements)||(LA179_0>=Promisify && LA179_0<=Abstract)||(LA179_0>=External && LA179_0<=Function)||(LA179_0>=Private && LA179_0<=Delete)||(LA179_0>=Import && LA179_0<=Public)||LA179_0==Static||(LA179_0>=Target && LA179_0<=Await)||LA179_0==Class||(LA179_0>=False && LA179_0<=Super)||LA179_0==Union||(LA179_0>=Yield && LA179_0<=This)||(LA179_0>=From && LA179_0<=Void)||(LA179_0>=Get && LA179_0<=Set)||LA179_0==PlusSignPlusSign||(LA179_0>=HyphenMinusHyphenMinus && LA179_0<=SolidusEqualsSign)||LA179_0==As||LA179_0==Of||LA179_0==ExclamationMark||LA179_0==LeftParenthesis||LA179_0==PlusSign||LA179_0==HyphenMinus||LA179_0==Solidus||LA179_0==LessThanSign||(LA179_0>=CommercialAt && LA179_0<=LeftSquareBracket)||LA179_0==LeftCurlyBracket||LA179_0==Tilde||LA179_0==RULE_DOUBLE||(LA179_0>=RULE_HEX_INT && LA179_0<=RULE_LEGACY_OCTAL_INT)||LA179_0==RULE_SCIENTIFIC_INT||LA179_0==RULE_IDENTIFIER||LA179_0==RULE_STRING||(LA179_0>=RULE_TEMPLATE_HEAD && LA179_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA179_0==RULE_INT) ) {
                                        alt179=1;
                                    }
                                    switch (alt179) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_71);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_79); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      										announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0());
                                    }
                                    }
                                    }
                                    int alt180=2;
                                    int LA180_0 = input.LA(1);
                                    if ( ((LA180_0>=Intersection && LA180_0<=Implements)||(LA180_0>=Promisify && LA180_0<=Abstract)||(LA180_0>=External && LA180_0<=Function)||(LA180_0>=Private && LA180_0<=Delete)||(LA180_0>=Import && LA180_0<=Public)||LA180_0==Static||(LA180_0>=Target && LA180_0<=Await)||LA180_0==Class||(LA180_0>=False && LA180_0<=Super)||LA180_0==Union||(LA180_0>=Yield && LA180_0<=This)||(LA180_0>=From && LA180_0<=Void)||(LA180_0>=Get && LA180_0<=Set)||LA180_0==PlusSignPlusSign||(LA180_0>=HyphenMinusHyphenMinus && LA180_0<=SolidusEqualsSign)||LA180_0==As||LA180_0==Of||LA180_0==ExclamationMark||LA180_0==LeftParenthesis||LA180_0==PlusSign||LA180_0==HyphenMinus||LA180_0==Solidus||LA180_0==LessThanSign||(LA180_0>=CommercialAt && LA180_0<=LeftSquareBracket)||LA180_0==LeftCurlyBracket||LA180_0==Tilde||LA180_0==RULE_DOUBLE||(LA180_0>=RULE_HEX_INT && LA180_0<=RULE_LEGACY_OCTAL_INT)||LA180_0==RULE_SCIENTIFIC_INT||LA180_0==RULE_IDENTIFIER||LA180_0==RULE_STRING||(LA180_0>=RULE_TEMPLATE_HEAD && LA180_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA180_0==RULE_INT) ) {
                                        alt180=1;
                                    }
                                    switch (alt180) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_71);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_79); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      										announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0());
                                    }
                                    }
                                    }
                                    int alt181=2;
                                    int LA181_0 = input.LA(1);
                                    if ( ((LA181_0>=Intersection && LA181_0<=Implements)||(LA181_0>=Promisify && LA181_0<=Abstract)||(LA181_0>=External && LA181_0<=Function)||(LA181_0>=Private && LA181_0<=Delete)||(LA181_0>=Import && LA181_0<=Public)||LA181_0==Static||(LA181_0>=Target && LA181_0<=Await)||LA181_0==Class||(LA181_0>=False && LA181_0<=Super)||LA181_0==Union||(LA181_0>=Yield && LA181_0<=This)||(LA181_0>=From && LA181_0<=Void)||(LA181_0>=Get && LA181_0<=Set)||LA181_0==PlusSignPlusSign||(LA181_0>=HyphenMinusHyphenMinus && LA181_0<=SolidusEqualsSign)||LA181_0==As||LA181_0==Of||LA181_0==ExclamationMark||LA181_0==LeftParenthesis||LA181_0==PlusSign||LA181_0==HyphenMinus||LA181_0==Solidus||LA181_0==LessThanSign||(LA181_0>=CommercialAt && LA181_0<=LeftSquareBracket)||LA181_0==LeftCurlyBracket||LA181_0==Tilde||LA181_0==RULE_DOUBLE||(LA181_0>=RULE_HEX_INT && LA181_0<=RULE_LEGACY_OCTAL_INT)||LA181_0==RULE_SCIENTIFIC_INT||LA181_0==RULE_IDENTIFIER||LA181_0==RULE_STRING||(LA181_0>=RULE_TEMPLATE_HEAD && LA181_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA181_0==RULE_INT) ) {
                                        alt181=1;
                                    }
                                    switch (alt181) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_71);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm1_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0());
                            }
                            int alt183=2;
                            int LA183_0 = input.LA(1);
                            if ( ((LA183_0>=Intersection && LA183_0<=Implements)||(LA183_0>=Promisify && LA183_0<=Abstract)||(LA183_0>=External && LA183_0<=Function)||(LA183_0>=Private && LA183_0<=Delete)||(LA183_0>=Import && LA183_0<=Public)||LA183_0==Static||(LA183_0>=Target && LA183_0<=Await)||LA183_0==Class||(LA183_0>=False && LA183_0<=Super)||LA183_0==Union||(LA183_0>=Yield && LA183_0<=This)||(LA183_0>=From && LA183_0<=Void)||(LA183_0>=Get && LA183_0<=Set)||LA183_0==PlusSignPlusSign||(LA183_0>=HyphenMinusHyphenMinus && LA183_0<=SolidusEqualsSign)||LA183_0==As||LA183_0==Of||LA183_0==ExclamationMark||LA183_0==LeftParenthesis||LA183_0==PlusSign||LA183_0==HyphenMinus||LA183_0==Solidus||LA183_0==LessThanSign||(LA183_0>=CommercialAt && LA183_0<=LeftSquareBracket)||LA183_0==LeftCurlyBracket||LA183_0==Tilde||LA183_0==RULE_DOUBLE||(LA183_0>=RULE_HEX_INT && LA183_0<=RULE_LEGACY_OCTAL_INT)||LA183_0==RULE_SCIENTIFIC_INT||LA183_0==RULE_IDENTIFIER||LA183_0==RULE_STRING||(LA183_0>=RULE_TEMPLATE_HEAD && LA183_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA183_0==RULE_INT) ) {
                                alt183=1;
                            }
                            switch (alt183) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_83);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm1_Expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1());
                                    }
                                    }
                                    }
                                    break;
                            }
                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_79); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2());
                            }
                            int alt184=2;
                            int LA184_0 = input.LA(1);
                            if ( ((LA184_0>=Intersection && LA184_0<=Implements)||(LA184_0>=Promisify && LA184_0<=Abstract)||(LA184_0>=External && LA184_0<=Function)||(LA184_0>=Private && LA184_0<=Delete)||(LA184_0>=Import && LA184_0<=Public)||LA184_0==Static||(LA184_0>=Target && LA184_0<=Await)||LA184_0==Class||(LA184_0>=False && LA184_0<=Super)||LA184_0==Union||(LA184_0>=Yield && LA184_0<=This)||(LA184_0>=From && LA184_0<=Void)||(LA184_0>=Get && LA184_0<=Set)||LA184_0==PlusSignPlusSign||(LA184_0>=HyphenMinusHyphenMinus && LA184_0<=SolidusEqualsSign)||LA184_0==As||LA184_0==Of||LA184_0==ExclamationMark||LA184_0==LeftParenthesis||LA184_0==PlusSign||LA184_0==HyphenMinus||LA184_0==Solidus||LA184_0==LessThanSign||(LA184_0>=CommercialAt && LA184_0<=LeftSquareBracket)||LA184_0==LeftCurlyBracket||LA184_0==Tilde||LA184_0==RULE_DOUBLE||(LA184_0>=RULE_HEX_INT && LA184_0<=RULE_LEGACY_OCTAL_INT)||LA184_0==RULE_SCIENTIFIC_INT||LA184_0==RULE_IDENTIFIER||LA184_0==RULE_STRING||(LA184_0>=RULE_TEMPLATE_HEAD && LA184_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA184_0==RULE_INT) ) {
                                alt184=1;
                            }
                            switch (alt184) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_71);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm1_Expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3());
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_72); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ForStatement_return norm1_ForStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ForStatement_return retval = new InternalN4JSParser.norm1_ForStatement_return();
        retval.start = input.LT(1);
        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;
        InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;
        InternalN4JSParser.norm6_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;
        InternalN4JSParser.norm2_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;
        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;
        InternalN4JSParser.norm2_Expression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;
        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;
        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;
        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1());
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_85); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2());
            }
            int alt204=2;
            alt204 = dfa204.predict(input);
            switch (alt204) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_77);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_71);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2());
                    }
                    }
                    }
                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    int alt203=3;
                    alt203 = dfa203.predict(input);
                    switch (alt203) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_27);
                            ruleVariableStatementKeyword();
                            state._fsp--;
                            if (state.failed) return retval;
                            }
                            }
                            int alt195=2;
                            alt195 = dfa195.predict(input);
                            switch (alt195) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_78);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=norm2_BindingIdentifierAsVariableDeclaration();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      											announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0());
                                    }
                                    }
                                    }
                                    int alt187=2;
                                    int LA187_0 = input.LA(1);
                                    if ( (LA187_0==In) ) {
                                        alt187=1;
                                    }
                                    else if ( (LA187_0==Of) ) {
                                        alt187=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 187, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt187) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_86); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0());
                                            }
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_86); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0());
                                            }
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    int alt188=2;
                                    alt188 = dfa188.predict(input);
                                    switch (alt188) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_71);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm3_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              											announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_80);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm6_VariableDeclarationOrBinding();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      										announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0());
                                    }
                                    }
                                    }
                                    int alt194=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt194=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt194=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt194=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 194, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt194) {
                                        case 1 :
                                            {
                                            {
                                            loop189:
                                            do {
                                                int alt189=2;
                                                int LA189_0 = input.LA(1);
                                                if ( (LA189_0==Comma) ) {
                                                    alt189=1;
                                                }
                                                switch (alt189) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	      											announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0());
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_81);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=norm2_VariableDeclarationOrBinding();
                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	      													announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1());
                                            	    }
                                            	    }
                                            	    }
                                            	    }
                                            	    break;
                                            	default :
                                            	    break loop189;
                                                }
                                            } while (true);
                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_87); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1());
                                            }
                                            int alt190=2;
                                            int LA190_0 = input.LA(1);
                                            if ( ((LA190_0>=Intersection && LA190_0<=Implements)||(LA190_0>=Promisify && LA190_0<=Abstract)||(LA190_0>=External && LA190_0<=Function)||(LA190_0>=Private && LA190_0<=Delete)||(LA190_0>=Import && LA190_0<=Public)||LA190_0==Static||(LA190_0>=Target && LA190_0<=Await)||LA190_0==Class||(LA190_0>=False && LA190_0<=Super)||LA190_0==Union||(LA190_0>=Yield && LA190_0<=This)||(LA190_0>=From && LA190_0<=Void)||(LA190_0>=Get && LA190_0<=Set)||LA190_0==PlusSignPlusSign||(LA190_0>=HyphenMinusHyphenMinus && LA190_0<=SolidusEqualsSign)||LA190_0==As||LA190_0==Of||LA190_0==ExclamationMark||LA190_0==LeftParenthesis||LA190_0==PlusSign||LA190_0==HyphenMinus||LA190_0==Solidus||LA190_0==LessThanSign||(LA190_0>=CommercialAt && LA190_0<=LeftSquareBracket)||LA190_0==LeftCurlyBracket||LA190_0==Tilde||LA190_0==RULE_DOUBLE||(LA190_0>=RULE_HEX_INT && LA190_0<=RULE_LEGACY_OCTAL_INT)||LA190_0==RULE_SCIENTIFIC_INT||LA190_0==RULE_IDENTIFIER||LA190_0==RULE_STRING||(LA190_0>=RULE_TEMPLATE_HEAD && LA190_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA190_0==RULE_INT) ) {
                                                alt190=1;
                                            }
                                            switch (alt190) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_83);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_86); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3());
                                            }
                                            int alt191=2;
                                            int LA191_0 = input.LA(1);
                                            if ( ((LA191_0>=Intersection && LA191_0<=Implements)||(LA191_0>=Promisify && LA191_0<=Abstract)||(LA191_0>=External && LA191_0<=Function)||(LA191_0>=Private && LA191_0<=Delete)||(LA191_0>=Import && LA191_0<=Public)||LA191_0==Static||(LA191_0>=Target && LA191_0<=Await)||LA191_0==Class||(LA191_0>=False && LA191_0<=Super)||LA191_0==Union||(LA191_0>=Yield && LA191_0<=This)||(LA191_0>=From && LA191_0<=Void)||(LA191_0>=Get && LA191_0<=Set)||LA191_0==PlusSignPlusSign||(LA191_0>=HyphenMinusHyphenMinus && LA191_0<=SolidusEqualsSign)||LA191_0==As||LA191_0==Of||LA191_0==ExclamationMark||LA191_0==LeftParenthesis||LA191_0==PlusSign||LA191_0==HyphenMinus||LA191_0==Solidus||LA191_0==LessThanSign||(LA191_0>=CommercialAt && LA191_0<=LeftSquareBracket)||LA191_0==LeftCurlyBracket||LA191_0==Tilde||LA191_0==RULE_DOUBLE||(LA191_0>=RULE_HEX_INT && LA191_0<=RULE_LEGACY_OCTAL_INT)||LA191_0==RULE_SCIENTIFIC_INT||LA191_0==RULE_IDENTIFIER||LA191_0==RULE_STRING||(LA191_0>=RULE_TEMPLATE_HEAD && LA191_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA191_0==RULE_INT) ) {
                                                alt191=1;
                                            }
                                            switch (alt191) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_71);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_86); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0());
                                            }
                                            }
                                            }
                                            int alt192=2;
                                            int LA192_0 = input.LA(1);
                                            if ( ((LA192_0>=Intersection && LA192_0<=Implements)||(LA192_0>=Promisify && LA192_0<=Abstract)||(LA192_0>=External && LA192_0<=Function)||(LA192_0>=Private && LA192_0<=Delete)||(LA192_0>=Import && LA192_0<=Public)||LA192_0==Static||(LA192_0>=Target && LA192_0<=Await)||LA192_0==Class||(LA192_0>=False && LA192_0<=Super)||LA192_0==Union||(LA192_0>=Yield && LA192_0<=This)||(LA192_0>=From && LA192_0<=Void)||(LA192_0>=Get && LA192_0<=Set)||LA192_0==PlusSignPlusSign||(LA192_0>=HyphenMinusHyphenMinus && LA192_0<=SolidusEqualsSign)||LA192_0==As||LA192_0==Of||LA192_0==ExclamationMark||LA192_0==LeftParenthesis||LA192_0==PlusSign||LA192_0==HyphenMinus||LA192_0==Solidus||LA192_0==LessThanSign||(LA192_0>=CommercialAt && LA192_0<=LeftSquareBracket)||LA192_0==LeftCurlyBracket||LA192_0==Tilde||LA192_0==RULE_DOUBLE||(LA192_0>=RULE_HEX_INT && LA192_0<=RULE_LEGACY_OCTAL_INT)||LA192_0==RULE_SCIENTIFIC_INT||LA192_0==RULE_IDENTIFIER||LA192_0==RULE_STRING||(LA192_0>=RULE_TEMPLATE_HEAD && LA192_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA192_0==RULE_INT) ) {
                                                alt192=1;
                                            }
                                            switch (alt192) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_71);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_86); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0());
                                            }
                                            }
                                            }
                                            int alt193=2;
                                            int LA193_0 = input.LA(1);
                                            if ( ((LA193_0>=Intersection && LA193_0<=Implements)||(LA193_0>=Promisify && LA193_0<=Abstract)||(LA193_0>=External && LA193_0<=Function)||(LA193_0>=Private && LA193_0<=Delete)||(LA193_0>=Import && LA193_0<=Public)||LA193_0==Static||(LA193_0>=Target && LA193_0<=Await)||LA193_0==Class||(LA193_0>=False && LA193_0<=Super)||LA193_0==Union||(LA193_0>=Yield && LA193_0<=This)||(LA193_0>=From && LA193_0<=Void)||(LA193_0>=Get && LA193_0<=Set)||LA193_0==PlusSignPlusSign||(LA193_0>=HyphenMinusHyphenMinus && LA193_0<=SolidusEqualsSign)||LA193_0==As||LA193_0==Of||LA193_0==ExclamationMark||LA193_0==LeftParenthesis||LA193_0==PlusSign||LA193_0==HyphenMinus||LA193_0==Solidus||LA193_0==LessThanSign||(LA193_0>=CommercialAt && LA193_0<=LeftSquareBracket)||LA193_0==LeftCurlyBracket||LA193_0==Tilde||LA193_0==RULE_DOUBLE||(LA193_0>=RULE_HEX_INT && LA193_0<=RULE_LEGACY_OCTAL_INT)||LA193_0==RULE_SCIENTIFIC_INT||LA193_0==RULE_IDENTIFIER||LA193_0==RULE_STRING||(LA193_0>=RULE_TEMPLATE_HEAD && LA193_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA193_0==RULE_INT) ) {
                                                alt193=1;
                                            }
                                            switch (alt193) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_71);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm3_AssignmentExpression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_84);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=norm2_Expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0());
                            }
                            }
                            }
                            int alt200=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt200=1;
                                }
                                break;
                            case In:
                                {
                                alt200=2;
                                }
                                break;
                            case Of:
                                {
                                alt200=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 200, 0, input);
                                throw nvae;
                            }
                            switch (alt200) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_87); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0());
                                    }
                                    int alt196=2;
                                    int LA196_0 = input.LA(1);
                                    if ( ((LA196_0>=Intersection && LA196_0<=Implements)||(LA196_0>=Promisify && LA196_0<=Abstract)||(LA196_0>=External && LA196_0<=Function)||(LA196_0>=Private && LA196_0<=Delete)||(LA196_0>=Import && LA196_0<=Public)||LA196_0==Static||(LA196_0>=Target && LA196_0<=Await)||LA196_0==Class||(LA196_0>=False && LA196_0<=Super)||LA196_0==Union||(LA196_0>=Yield && LA196_0<=This)||(LA196_0>=From && LA196_0<=Void)||(LA196_0>=Get && LA196_0<=Set)||LA196_0==PlusSignPlusSign||(LA196_0>=HyphenMinusHyphenMinus && LA196_0<=SolidusEqualsSign)||LA196_0==As||LA196_0==Of||LA196_0==ExclamationMark||LA196_0==LeftParenthesis||LA196_0==PlusSign||LA196_0==HyphenMinus||LA196_0==Solidus||LA196_0==LessThanSign||(LA196_0>=CommercialAt && LA196_0<=LeftSquareBracket)||LA196_0==LeftCurlyBracket||LA196_0==Tilde||LA196_0==RULE_DOUBLE||(LA196_0>=RULE_HEX_INT && LA196_0<=RULE_LEGACY_OCTAL_INT)||LA196_0==RULE_SCIENTIFIC_INT||LA196_0==RULE_IDENTIFIER||LA196_0==RULE_STRING||(LA196_0>=RULE_TEMPLATE_HEAD && LA196_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA196_0==RULE_INT) ) {
                                        alt196=1;
                                    }
                                    switch (alt196) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_83);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_86); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2());
                                    }
                                    int alt197=2;
                                    int LA197_0 = input.LA(1);
                                    if ( ((LA197_0>=Intersection && LA197_0<=Implements)||(LA197_0>=Promisify && LA197_0<=Abstract)||(LA197_0>=External && LA197_0<=Function)||(LA197_0>=Private && LA197_0<=Delete)||(LA197_0>=Import && LA197_0<=Public)||LA197_0==Static||(LA197_0>=Target && LA197_0<=Await)||LA197_0==Class||(LA197_0>=False && LA197_0<=Super)||LA197_0==Union||(LA197_0>=Yield && LA197_0<=This)||(LA197_0>=From && LA197_0<=Void)||(LA197_0>=Get && LA197_0<=Set)||LA197_0==PlusSignPlusSign||(LA197_0>=HyphenMinusHyphenMinus && LA197_0<=SolidusEqualsSign)||LA197_0==As||LA197_0==Of||LA197_0==ExclamationMark||LA197_0==LeftParenthesis||LA197_0==PlusSign||LA197_0==HyphenMinus||LA197_0==Solidus||LA197_0==LessThanSign||(LA197_0>=CommercialAt && LA197_0<=LeftSquareBracket)||LA197_0==LeftCurlyBracket||LA197_0==Tilde||LA197_0==RULE_DOUBLE||(LA197_0>=RULE_HEX_INT && LA197_0<=RULE_LEGACY_OCTAL_INT)||LA197_0==RULE_SCIENTIFIC_INT||LA197_0==RULE_IDENTIFIER||LA197_0==RULE_STRING||(LA197_0>=RULE_TEMPLATE_HEAD && LA197_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA197_0==RULE_INT) ) {
                                        alt197=1;
                                    }
                                    switch (alt197) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_71);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_86); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      										announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0());
                                    }
                                    }
                                    }
                                    int alt198=2;
                                    int LA198_0 = input.LA(1);
                                    if ( ((LA198_0>=Intersection && LA198_0<=Implements)||(LA198_0>=Promisify && LA198_0<=Abstract)||(LA198_0>=External && LA198_0<=Function)||(LA198_0>=Private && LA198_0<=Delete)||(LA198_0>=Import && LA198_0<=Public)||LA198_0==Static||(LA198_0>=Target && LA198_0<=Await)||LA198_0==Class||(LA198_0>=False && LA198_0<=Super)||LA198_0==Union||(LA198_0>=Yield && LA198_0<=This)||(LA198_0>=From && LA198_0<=Void)||(LA198_0>=Get && LA198_0<=Set)||LA198_0==PlusSignPlusSign||(LA198_0>=HyphenMinusHyphenMinus && LA198_0<=SolidusEqualsSign)||LA198_0==As||LA198_0==Of||LA198_0==ExclamationMark||LA198_0==LeftParenthesis||LA198_0==PlusSign||LA198_0==HyphenMinus||LA198_0==Solidus||LA198_0==LessThanSign||(LA198_0>=CommercialAt && LA198_0<=LeftSquareBracket)||LA198_0==LeftCurlyBracket||LA198_0==Tilde||LA198_0==RULE_DOUBLE||(LA198_0>=RULE_HEX_INT && LA198_0<=RULE_LEGACY_OCTAL_INT)||LA198_0==RULE_SCIENTIFIC_INT||LA198_0==RULE_IDENTIFIER||LA198_0==RULE_STRING||(LA198_0>=RULE_TEMPLATE_HEAD && LA198_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA198_0==RULE_INT) ) {
                                        alt198=1;
                                    }
                                    switch (alt198) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_71);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_86); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      										announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0());
                                    }
                                    }
                                    }
                                    int alt199=2;
                                    int LA199_0 = input.LA(1);
                                    if ( ((LA199_0>=Intersection && LA199_0<=Implements)||(LA199_0>=Promisify && LA199_0<=Abstract)||(LA199_0>=External && LA199_0<=Function)||(LA199_0>=Private && LA199_0<=Delete)||(LA199_0>=Import && LA199_0<=Public)||LA199_0==Static||(LA199_0>=Target && LA199_0<=Await)||LA199_0==Class||(LA199_0>=False && LA199_0<=Super)||LA199_0==Union||(LA199_0>=Yield && LA199_0<=This)||(LA199_0>=From && LA199_0<=Void)||(LA199_0>=Get && LA199_0<=Set)||LA199_0==PlusSignPlusSign||(LA199_0>=HyphenMinusHyphenMinus && LA199_0<=SolidusEqualsSign)||LA199_0==As||LA199_0==Of||LA199_0==ExclamationMark||LA199_0==LeftParenthesis||LA199_0==PlusSign||LA199_0==HyphenMinus||LA199_0==Solidus||LA199_0==LessThanSign||(LA199_0>=CommercialAt && LA199_0<=LeftSquareBracket)||LA199_0==LeftCurlyBracket||LA199_0==Tilde||LA199_0==RULE_DOUBLE||(LA199_0>=RULE_HEX_INT && LA199_0<=RULE_LEGACY_OCTAL_INT)||LA199_0==RULE_SCIENTIFIC_INT||LA199_0==RULE_IDENTIFIER||LA199_0==RULE_STRING||(LA199_0>=RULE_TEMPLATE_HEAD && LA199_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA199_0==RULE_INT) ) {
                                        alt199=1;
                                    }
                                    switch (alt199) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_71);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm3_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_87); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0());
                            }
                            int alt201=2;
                            int LA201_0 = input.LA(1);
                            if ( ((LA201_0>=Intersection && LA201_0<=Implements)||(LA201_0>=Promisify && LA201_0<=Abstract)||(LA201_0>=External && LA201_0<=Function)||(LA201_0>=Private && LA201_0<=Delete)||(LA201_0>=Import && LA201_0<=Public)||LA201_0==Static||(LA201_0>=Target && LA201_0<=Await)||LA201_0==Class||(LA201_0>=False && LA201_0<=Super)||LA201_0==Union||(LA201_0>=Yield && LA201_0<=This)||(LA201_0>=From && LA201_0<=Void)||(LA201_0>=Get && LA201_0<=Set)||LA201_0==PlusSignPlusSign||(LA201_0>=HyphenMinusHyphenMinus && LA201_0<=SolidusEqualsSign)||LA201_0==As||LA201_0==Of||LA201_0==ExclamationMark||LA201_0==LeftParenthesis||LA201_0==PlusSign||LA201_0==HyphenMinus||LA201_0==Solidus||LA201_0==LessThanSign||(LA201_0>=CommercialAt && LA201_0<=LeftSquareBracket)||LA201_0==LeftCurlyBracket||LA201_0==Tilde||LA201_0==RULE_DOUBLE||(LA201_0>=RULE_HEX_INT && LA201_0<=RULE_LEGACY_OCTAL_INT)||LA201_0==RULE_SCIENTIFIC_INT||LA201_0==RULE_IDENTIFIER||LA201_0==RULE_STRING||(LA201_0>=RULE_TEMPLATE_HEAD && LA201_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA201_0==RULE_INT) ) {
                                alt201=1;
                            }
                            switch (alt201) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_83);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm3_Expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1());
                                    }
                                    }
                                    }
                                    break;
                            }
                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_86); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2());
                            }
                            int alt202=2;
                            int LA202_0 = input.LA(1);
                            if ( ((LA202_0>=Intersection && LA202_0<=Implements)||(LA202_0>=Promisify && LA202_0<=Abstract)||(LA202_0>=External && LA202_0<=Function)||(LA202_0>=Private && LA202_0<=Delete)||(LA202_0>=Import && LA202_0<=Public)||LA202_0==Static||(LA202_0>=Target && LA202_0<=Await)||LA202_0==Class||(LA202_0>=False && LA202_0<=Super)||LA202_0==Union||(LA202_0>=Yield && LA202_0<=This)||(LA202_0>=From && LA202_0<=Void)||(LA202_0>=Get && LA202_0<=Set)||LA202_0==PlusSignPlusSign||(LA202_0>=HyphenMinusHyphenMinus && LA202_0<=SolidusEqualsSign)||LA202_0==As||LA202_0==Of||LA202_0==ExclamationMark||LA202_0==LeftParenthesis||LA202_0==PlusSign||LA202_0==HyphenMinus||LA202_0==Solidus||LA202_0==LessThanSign||(LA202_0>=CommercialAt && LA202_0<=LeftSquareBracket)||LA202_0==LeftCurlyBracket||LA202_0==Tilde||LA202_0==RULE_DOUBLE||(LA202_0>=RULE_HEX_INT && LA202_0<=RULE_LEGACY_OCTAL_INT)||LA202_0==RULE_SCIENTIFIC_INT||LA202_0==RULE_IDENTIFIER||LA202_0==RULE_STRING||(LA202_0>=RULE_TEMPLATE_HEAD && LA202_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA202_0==RULE_INT) ) {
                                alt202=1;
                            }
                            switch (alt202) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_71);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm3_Expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3());
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLetIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetIdentifierRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLetIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLetIdentifierRef_return ruleLetIdentifierRef() throws RecognitionException {
        InternalN4JSParser.ruleLetIdentifierRef_return retval = new InternalN4JSParser.ruleLetIdentifierRef_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleLetAsIdentifier_return IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1=ruleLetAsIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getLetIdentifierRefAccess().getIdAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLetAsIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetAsIdentifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLetAsIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLetAsIdentifier_return ruleLetAsIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleLetAsIdentifier_return retval = new InternalN4JSParser.ruleLetAsIdentifier_return();
        retval.start = input.LT(1);
        Token LetKeyword=null;
        try {
            {
            LetKeyword=(Token)match(input,Let,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(LetKeyword, grammarAccess.getLetAsIdentifierAccess().getLetKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsVariableDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_BindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleContinueStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleContinueStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleContinueStatement_return ruleContinueStatement() throws RecognitionException {
        InternalN4JSParser.ruleContinueStatement_return retval = new InternalN4JSParser.ruleContinueStatement_return();
        retval.start = input.LT(1);
        Token ContinueKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
            }
            int alt205=2;
            int LA205_0 = input.LA(1);
            if ( ((LA205_0>=Intersection && LA205_0<=Implements)||(LA205_0>=Promisify && LA205_0<=Abstract)||LA205_0==External||(LA205_0>=Private && LA205_0<=Project)||LA205_0==Public||LA205_0==Static||LA205_0==Target||(LA205_0>=Async && LA205_0<=Await)||LA205_0==Union||(LA205_0>=Yield && LA205_0<=This)||LA205_0==From||LA205_0==Type||(LA205_0>=Get && LA205_0<=Let)||(LA205_0>=Out && LA205_0<=Set)||LA205_0==As||LA205_0==Of||LA205_0==RULE_IDENTIFIER) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_18);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ContinueStatement_return norm1_ContinueStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ContinueStatement_return retval = new InternalN4JSParser.norm1_ContinueStatement_return();
        retval.start = input.LT(1);
        Token ContinueKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
            }
            int alt206=2;
            int LA206_0 = input.LA(1);
            if ( ((LA206_0>=Intersection && LA206_0<=Implements)||(LA206_0>=Promisify && LA206_0<=Abstract)||LA206_0==External||(LA206_0>=Private && LA206_0<=Project)||LA206_0==Public||LA206_0==Static||LA206_0==Target||(LA206_0>=Async && LA206_0<=Await)||LA206_0==Union||LA206_0==This||LA206_0==From||LA206_0==Type||(LA206_0>=Get && LA206_0<=Let)||(LA206_0>=Out && LA206_0<=Set)||LA206_0==As||LA206_0==Of||LA206_0==RULE_IDENTIFIER) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_18);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBreakStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBreakStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBreakStatement_return ruleBreakStatement() throws RecognitionException {
        InternalN4JSParser.ruleBreakStatement_return retval = new InternalN4JSParser.ruleBreakStatement_return();
        retval.start = input.LT(1);
        Token BreakKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
            }
            int alt207=2;
            int LA207_0 = input.LA(1);
            if ( ((LA207_0>=Intersection && LA207_0<=Implements)||(LA207_0>=Promisify && LA207_0<=Abstract)||LA207_0==External||(LA207_0>=Private && LA207_0<=Project)||LA207_0==Public||LA207_0==Static||LA207_0==Target||(LA207_0>=Async && LA207_0<=Await)||LA207_0==Union||(LA207_0>=Yield && LA207_0<=This)||LA207_0==From||LA207_0==Type||(LA207_0>=Get && LA207_0<=Let)||(LA207_0>=Out && LA207_0<=Set)||LA207_0==As||LA207_0==Of||LA207_0==RULE_IDENTIFIER) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_18);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BreakStatement_return norm1_BreakStatement() throws RecognitionException {
        InternalN4JSParser.norm1_BreakStatement_return retval = new InternalN4JSParser.norm1_BreakStatement_return();
        retval.start = input.LT(1);
        Token BreakKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
            }
            int alt208=2;
            int LA208_0 = input.LA(1);
            if ( ((LA208_0>=Intersection && LA208_0<=Implements)||(LA208_0>=Promisify && LA208_0<=Abstract)||LA208_0==External||(LA208_0>=Private && LA208_0<=Project)||LA208_0==Public||LA208_0==Static||LA208_0==Target||(LA208_0>=Async && LA208_0<=Await)||LA208_0==Union||LA208_0==This||LA208_0==From||LA208_0==Type||(LA208_0>=Get && LA208_0<=Let)||(LA208_0>=Out && LA208_0<=Set)||LA208_0==As||LA208_0==Of||LA208_0==RULE_IDENTIFIER) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_18);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleReturnStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReturnStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleReturnStatement_return ruleReturnStatement() throws RecognitionException {
        InternalN4JSParser.ruleReturnStatement_return retval = new InternalN4JSParser.ruleReturnStatement_return();
        retval.start = input.LT(1);
        Token ReturnKeyword_1=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_89); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
            }
            int alt209=2;
            int LA209_0 = input.LA(1);
            if ( ((LA209_0>=Intersection && LA209_0<=Implements)||(LA209_0>=Promisify && LA209_0<=Abstract)||(LA209_0>=External && LA209_0<=Function)||(LA209_0>=Private && LA209_0<=Delete)||(LA209_0>=Import && LA209_0<=Public)||LA209_0==Static||(LA209_0>=Target && LA209_0<=Await)||LA209_0==Class||(LA209_0>=False && LA209_0<=Super)||LA209_0==Union||(LA209_0>=Yield && LA209_0<=This)||(LA209_0>=From && LA209_0<=Void)||(LA209_0>=Get && LA209_0<=Set)||LA209_0==PlusSignPlusSign||(LA209_0>=HyphenMinusHyphenMinus && LA209_0<=SolidusEqualsSign)||LA209_0==As||LA209_0==Of||LA209_0==ExclamationMark||LA209_0==LeftParenthesis||LA209_0==PlusSign||LA209_0==HyphenMinus||LA209_0==Solidus||LA209_0==LessThanSign||(LA209_0>=CommercialAt && LA209_0<=LeftSquareBracket)||LA209_0==LeftCurlyBracket||LA209_0==Tilde||LA209_0==RULE_DOUBLE||(LA209_0>=RULE_HEX_INT && LA209_0<=RULE_LEGACY_OCTAL_INT)||LA209_0==RULE_SCIENTIFIC_INT||LA209_0==RULE_IDENTIFIER||LA209_0==RULE_STRING||(LA209_0>=RULE_TEMPLATE_HEAD && LA209_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA209_0==RULE_INT) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_18);
                    ExpressionExpressionParserRuleCall_2_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ReturnStatement_return norm1_ReturnStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ReturnStatement_return retval = new InternalN4JSParser.norm1_ReturnStatement_return();
        retval.start = input.LT(1);
        Token ReturnKeyword_1=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
            }
            int alt210=2;
            int LA210_0 = input.LA(1);
            if ( ((LA210_0>=Intersection && LA210_0<=Implements)||(LA210_0>=Promisify && LA210_0<=Abstract)||(LA210_0>=External && LA210_0<=Function)||(LA210_0>=Private && LA210_0<=Delete)||(LA210_0>=Import && LA210_0<=Public)||LA210_0==Static||(LA210_0>=Target && LA210_0<=Await)||LA210_0==Class||(LA210_0>=False && LA210_0<=Super)||LA210_0==Union||(LA210_0>=Yield && LA210_0<=This)||(LA210_0>=From && LA210_0<=Void)||(LA210_0>=Get && LA210_0<=Set)||LA210_0==PlusSignPlusSign||(LA210_0>=HyphenMinusHyphenMinus && LA210_0<=SolidusEqualsSign)||LA210_0==As||LA210_0==Of||LA210_0==ExclamationMark||LA210_0==LeftParenthesis||LA210_0==PlusSign||LA210_0==HyphenMinus||LA210_0==Solidus||LA210_0==LessThanSign||(LA210_0>=CommercialAt && LA210_0<=LeftSquareBracket)||LA210_0==LeftCurlyBracket||LA210_0==Tilde||LA210_0==RULE_DOUBLE||(LA210_0>=RULE_HEX_INT && LA210_0<=RULE_LEGACY_OCTAL_INT)||LA210_0==RULE_SCIENTIFIC_INT||LA210_0==RULE_IDENTIFIER||LA210_0==RULE_STRING||(LA210_0>=RULE_TEMPLATE_HEAD && LA210_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA210_0==RULE_INT) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_18);
                    ExpressionExpressionParserRuleCall_2_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWithStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWithStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleWithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWithStatement_return ruleWithStatement() throws RecognitionException {
        InternalN4JSParser.ruleWithStatement_return retval = new InternalN4JSParser.ruleWithStatement_return();
        retval.start = input.LT(1);
        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_71);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_72); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_WithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_WithStatement_return norm1_WithStatement() throws RecognitionException {
        InternalN4JSParser.norm1_WithStatement_return retval = new InternalN4JSParser.norm1_WithStatement_return();
        retval.start = input.LT(1);
        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_71);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSwitchStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSwitchStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleSwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSwitchStatement_return ruleSwitchStatement() throws RecognitionException {
        InternalN4JSParser.ruleSwitchStatement_return retval = new InternalN4JSParser.ruleSwitchStatement_return();
        retval.start = input.LT(1);
        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;
        InternalN4JSParser.ruleDefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;
        InternalN4JSParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_71);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_91); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
            }
            loop211:
            do {
                int alt211=2;
                int LA211_0 = input.LA(1);
                if ( (LA211_0==Case) ) {
                    alt211=1;
                }
                switch (alt211) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_91);
            	    CasesCaseClauseParserRuleCall_5_0=ruleCaseClause();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop211;
                }
            } while (true);
            int alt213=2;
            int LA213_0 = input.LA(1);
            if ( (LA213_0==Default) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    CasesDefaultClauseParserRuleCall_6_0_0=ruleDefaultClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0());
                    }
                    }
                    }
                    loop212:
                    do {
                        int alt212=2;
                        int LA212_0 = input.LA(1);
                        if ( (LA212_0==Case) ) {
                            alt212=1;
                        }
                        switch (alt212) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_92);
                    	    CasesCaseClauseParserRuleCall_6_1_0=ruleCaseClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop212;
                        }
                    } while (true);
                    }
                    break;
            }
            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_SwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_SwitchStatement_return norm1_SwitchStatement() throws RecognitionException {
        InternalN4JSParser.norm1_SwitchStatement_return retval = new InternalN4JSParser.norm1_SwitchStatement_return();
        retval.start = input.LT(1);
        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;
        InternalN4JSParser.norm1_DefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;
        InternalN4JSParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_71);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_91); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
            }
            loop214:
            do {
                int alt214=2;
                int LA214_0 = input.LA(1);
                if ( (LA214_0==Case) ) {
                    alt214=1;
                }
                switch (alt214) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_91);
            	    CasesCaseClauseParserRuleCall_5_0=norm1_CaseClause();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop214;
                }
            } while (true);
            int alt216=2;
            int LA216_0 = input.LA(1);
            if ( (LA216_0==Default) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    CasesDefaultClauseParserRuleCall_6_0_0=norm1_DefaultClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0());
                    }
                    }
                    }
                    loop215:
                    do {
                        int alt215=2;
                        int LA215_0 = input.LA(1);
                        if ( (LA215_0==Case) ) {
                            alt215=1;
                        }
                        switch (alt215) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_92);
                    	    CasesCaseClauseParserRuleCall_6_1_0=norm1_CaseClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop215;
                        }
                    } while (true);
                    }
                    break;
            }
            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCaseClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCaseClause();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleCaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCaseClause_return ruleCaseClause() throws RecognitionException {
        InternalN4JSParser.ruleCaseClause_return retval = new InternalN4JSParser.ruleCaseClause_return();
        retval.start = input.LT(1);
        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_93);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1());
            }
            }
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
            }
            loop217:
            do {
                int alt217=2;
                int LA217_0 = input.LA(1);
                if ( ((LA217_0>=Intersection && LA217_0<=Implements)||(LA217_0>=Promisify && LA217_0<=Function)||(LA217_0>=Private && LA217_0<=Delete)||(LA217_0>=Import && LA217_0<=Break)||(LA217_0>=Class && LA217_0<=This)||(LA217_0>=From && LA217_0<=With)||(LA217_0>=For && LA217_0<=Var)||LA217_0==PlusSignPlusSign||(LA217_0>=HyphenMinusHyphenMinus && LA217_0<=SolidusEqualsSign)||(LA217_0>=As && LA217_0<=If)||LA217_0==Of||LA217_0==ExclamationMark||LA217_0==LeftParenthesis||LA217_0==PlusSign||LA217_0==HyphenMinus||LA217_0==Solidus||(LA217_0>=Semicolon && LA217_0<=LessThanSign)||(LA217_0>=CommercialAt && LA217_0<=LeftSquareBracket)||LA217_0==LeftCurlyBracket||LA217_0==Tilde||LA217_0==RULE_DOUBLE||(LA217_0>=RULE_HEX_INT && LA217_0<=RULE_LEGACY_OCTAL_INT)||LA217_0==RULE_SCIENTIFIC_INT||LA217_0==RULE_IDENTIFIER||LA217_0==RULE_STRING||(LA217_0>=RULE_TEMPLATE_HEAD && LA217_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA217_0==RULE_INT) ) {
                    alt217=1;
                }
                switch (alt217) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop217;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_CaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CaseClause_return norm1_CaseClause() throws RecognitionException {
        InternalN4JSParser.norm1_CaseClause_return retval = new InternalN4JSParser.norm1_CaseClause_return();
        retval.start = input.LT(1);
        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_93);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1());
            }
            }
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_56); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
            }
            loop218:
            do {
                int alt218=2;
                int LA218_0 = input.LA(1);
                if ( ((LA218_0>=Intersection && LA218_0<=Implements)||(LA218_0>=Promisify && LA218_0<=Function)||(LA218_0>=Private && LA218_0<=Delete)||(LA218_0>=Import && LA218_0<=Break)||(LA218_0>=Class && LA218_0<=This)||(LA218_0>=From && LA218_0<=With)||(LA218_0>=For && LA218_0<=Var)||LA218_0==PlusSignPlusSign||(LA218_0>=HyphenMinusHyphenMinus && LA218_0<=SolidusEqualsSign)||(LA218_0>=As && LA218_0<=If)||LA218_0==Of||LA218_0==ExclamationMark||LA218_0==LeftParenthesis||LA218_0==PlusSign||LA218_0==HyphenMinus||LA218_0==Solidus||(LA218_0>=Semicolon && LA218_0<=LessThanSign)||(LA218_0>=CommercialAt && LA218_0<=LeftSquareBracket)||LA218_0==LeftCurlyBracket||LA218_0==Tilde||LA218_0==RULE_DOUBLE||(LA218_0>=RULE_HEX_INT && LA218_0<=RULE_LEGACY_OCTAL_INT)||LA218_0==RULE_SCIENTIFIC_INT||LA218_0==RULE_IDENTIFIER||LA218_0==RULE_STRING||(LA218_0>=RULE_TEMPLATE_HEAD && LA218_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA218_0==RULE_INT) ) {
                    alt218=1;
                }
                switch (alt218) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_56);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop218;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultClause();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleDefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDefaultClause_return ruleDefaultClause() throws RecognitionException {
        InternalN4JSParser.ruleDefaultClause_return retval = new InternalN4JSParser.ruleDefaultClause_return();
        retval.start = input.LT(1);
        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_93); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
            }
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);
                if ( ((LA219_0>=Intersection && LA219_0<=Implements)||(LA219_0>=Promisify && LA219_0<=Function)||(LA219_0>=Private && LA219_0<=Delete)||(LA219_0>=Import && LA219_0<=Break)||(LA219_0>=Class && LA219_0<=This)||(LA219_0>=From && LA219_0<=With)||(LA219_0>=For && LA219_0<=Var)||LA219_0==PlusSignPlusSign||(LA219_0>=HyphenMinusHyphenMinus && LA219_0<=SolidusEqualsSign)||(LA219_0>=As && LA219_0<=If)||LA219_0==Of||LA219_0==ExclamationMark||LA219_0==LeftParenthesis||LA219_0==PlusSign||LA219_0==HyphenMinus||LA219_0==Solidus||(LA219_0>=Semicolon && LA219_0<=LessThanSign)||(LA219_0>=CommercialAt && LA219_0<=LeftSquareBracket)||LA219_0==LeftCurlyBracket||LA219_0==Tilde||LA219_0==RULE_DOUBLE||(LA219_0>=RULE_HEX_INT && LA219_0<=RULE_LEGACY_OCTAL_INT)||LA219_0==RULE_SCIENTIFIC_INT||LA219_0==RULE_IDENTIFIER||LA219_0==RULE_STRING||(LA219_0>=RULE_TEMPLATE_HEAD && LA219_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA219_0==RULE_INT) ) {
                    alt219=1;
                }
                switch (alt219) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop219;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_DefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_DefaultClause_return norm1_DefaultClause() throws RecognitionException {
        InternalN4JSParser.norm1_DefaultClause_return retval = new InternalN4JSParser.norm1_DefaultClause_return();
        retval.start = input.LT(1);
        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_93); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_56); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
            }
            loop220:
            do {
                int alt220=2;
                int LA220_0 = input.LA(1);
                if ( ((LA220_0>=Intersection && LA220_0<=Implements)||(LA220_0>=Promisify && LA220_0<=Function)||(LA220_0>=Private && LA220_0<=Delete)||(LA220_0>=Import && LA220_0<=Break)||(LA220_0>=Class && LA220_0<=This)||(LA220_0>=From && LA220_0<=With)||(LA220_0>=For && LA220_0<=Var)||LA220_0==PlusSignPlusSign||(LA220_0>=HyphenMinusHyphenMinus && LA220_0<=SolidusEqualsSign)||(LA220_0>=As && LA220_0<=If)||LA220_0==Of||LA220_0==ExclamationMark||LA220_0==LeftParenthesis||LA220_0==PlusSign||LA220_0==HyphenMinus||LA220_0==Solidus||(LA220_0>=Semicolon && LA220_0<=LessThanSign)||(LA220_0>=CommercialAt && LA220_0<=LeftSquareBracket)||LA220_0==LeftCurlyBracket||LA220_0==Tilde||LA220_0==RULE_DOUBLE||(LA220_0>=RULE_HEX_INT && LA220_0<=RULE_LEGACY_OCTAL_INT)||LA220_0==RULE_SCIENTIFIC_INT||LA220_0==RULE_IDENTIFIER||LA220_0==RULE_STRING||(LA220_0>=RULE_TEMPLATE_HEAD && LA220_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA220_0==RULE_INT) ) {
                    alt220=1;
                }
                switch (alt220) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_56);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop220;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLabelledStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLabelledStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLabelledStatement_return ruleLabelledStatement() throws RecognitionException {
        InternalN4JSParser.ruleLabelledStatement_return retval = new InternalN4JSParser.ruleLabelledStatement_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0_0_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;
        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_93);
            NameBindingIdentifierParserRuleCall_0_0_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0());
            }
            }
            }
            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_72); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=ruleStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_LabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LabelledStatement_return norm1_LabelledStatement() throws RecognitionException {
        InternalN4JSParser.norm1_LabelledStatement_return retval = new InternalN4JSParser.norm1_LabelledStatement_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0_0_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;
        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_93);
            NameBindingIdentifierParserRuleCall_0_0_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0());
            }
            }
            }
            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThrowStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThrowStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThrowStatement_return ruleThrowStatement() throws RecognitionException {
        InternalN4JSParser.ruleThrowStatement_return retval = new InternalN4JSParser.ruleThrowStatement_return();
        retval.start = input.LT(1);
        Token ThrowKeyword_0=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_18);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1());
            }
            }
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ThrowStatement_return norm1_ThrowStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ThrowStatement_return retval = new InternalN4JSParser.norm1_ThrowStatement_return();
        retval.start = input.LT(1);
        Token ThrowKeyword_0=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_18);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1());
            }
            }
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTryStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTryStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTryStatement_return ruleTryStatement() throws RecognitionException {
        InternalN4JSParser.ruleTryStatement_return retval = new InternalN4JSParser.ruleTryStatement_return();
        retval.start = input.LT(1);
        Token TryKeyword_0=null;
        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleCatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;
        InternalN4JSParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;
        InternalN4JSParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_94);
            BlockBlockParserRuleCall_1_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1());
            }
            }
            }
            int alt222=2;
            int LA222_0 = input.LA(1);
            if ( (LA222_0==Catch) ) {
                alt222=1;
            }
            else if ( (LA222_0==Finally) ) {
                alt222=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);
                throw nvae;
            }
            switch (alt222) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_95);
                    CatchCatchBlockParserRuleCall_2_0_0_0=ruleCatchBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0());
                    }
                    }
                    }
                    int alt221=2;
                    int LA221_0 = input.LA(1);
                    if ( (LA221_0==Finally) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=ruleFinallyBlock();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1());
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=ruleFinallyBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_TryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_TryStatement_return norm1_TryStatement() throws RecognitionException {
        InternalN4JSParser.norm1_TryStatement_return retval = new InternalN4JSParser.norm1_TryStatement_return();
        retval.start = input.LT(1);
        Token TryKeyword_0=null;
        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_1_0 = null;
        InternalN4JSParser.norm1_CatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;
        InternalN4JSParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;
        InternalN4JSParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_94);
            BlockBlockParserRuleCall_1_0=norm1_Block();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1());
            }
            }
            }
            int alt224=2;
            int LA224_0 = input.LA(1);
            if ( (LA224_0==Catch) ) {
                alt224=1;
            }
            else if ( (LA224_0==Finally) ) {
                alt224=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);
                throw nvae;
            }
            switch (alt224) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_95);
                    CatchCatchBlockParserRuleCall_2_0_0_0=norm1_CatchBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0());
                    }
                    }
                    }
                    int alt223=2;
                    int LA223_0 = input.LA(1);
                    if ( (LA223_0==Finally) ) {
                        alt223=1;
                    }
                    switch (alt223) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=norm1_FinallyBlock();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1());
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=norm1_FinallyBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchBlock();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleCatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCatchBlock_return ruleCatchBlock() throws RecognitionException {
        InternalN4JSParser.ruleCatchBlock_return retval = new InternalN4JSParser.ruleCatchBlock_return();
        retval.start = input.LT(1);
        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleCatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_5_0 = null;
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_71);
            CatchVariableCatchVariableParserRuleCall_3_0=ruleCatchVariable();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_CatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CatchBlock_return norm1_CatchBlock() throws RecognitionException {
        InternalN4JSParser.norm1_CatchBlock_return retval = new InternalN4JSParser.norm1_CatchBlock_return();
        retval.start = input.LT(1);
        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.norm1_CatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;
        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_5_0 = null;
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_71);
            CatchVariableCatchVariableParserRuleCall_3_0=norm1_CatchVariable();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=norm1_Block();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchVariable();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleCatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCatchVariable_return ruleCatchVariable() throws RecognitionException {
        InternalN4JSParser.ruleCatchVariable_return retval = new InternalN4JSParser.ruleCatchVariable_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_1_0_1 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;
        try {
            {
            int alt225=3;
            alt225 = dfa225.predict(input);
            switch (alt225) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_93);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepDeclaredTypeRefParserRuleCall_1_0_1=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_1.start):null), (ColonSepDeclaredTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1()); 
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_CatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CatchVariable_return norm1_CatchVariable() throws RecognitionException {
        InternalN4JSParser.norm1_CatchVariable_return retval = new InternalN4JSParser.norm1_CatchVariable_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_1_0_1 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;
        try {
            {
            int alt226=3;
            alt226 = dfa226.predict(input);
            switch (alt226) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_93);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepDeclaredTypeRefParserRuleCall_1_0_1=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_1.start):null), (ColonSepDeclaredTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1()); 
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFinallyBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFinallyBlock();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleFinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFinallyBlock_return ruleFinallyBlock() throws RecognitionException {
        InternalN4JSParser.ruleFinallyBlock_return retval = new InternalN4JSParser.ruleFinallyBlock_return();
        retval.start = input.LT(1);
        Token FinallyKeyword_1=null;
        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_2_0 = null;
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_FinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FinallyBlock_return norm1_FinallyBlock() throws RecognitionException {
        InternalN4JSParser.norm1_FinallyBlock_return retval = new InternalN4JSParser.norm1_FinallyBlock_return();
        retval.start = input.LT(1);
        Token FinallyKeyword_1=null;
        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_2_0 = null;
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=norm1_Block();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDebuggerStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDebuggerStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleDebuggerStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDebuggerStatement_return ruleDebuggerStatement() throws RecognitionException {
        InternalN4JSParser.ruleDebuggerStatement_return retval = new InternalN4JSParser.ruleDebuggerStatement_return();
        retval.start = input.LT(1);
        Token DebuggerKeyword_1=null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;
        try {
            {
            {
            DebuggerKeyword_1=(Token)match(input,Debugger,FOLLOW_18); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(DebuggerKeyword_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1());
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePrimaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePrimaryExpression_return rulePrimaryExpression() throws RecognitionException {
        InternalN4JSParser.rulePrimaryExpression_return retval = new InternalN4JSParser.rulePrimaryExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;
        InternalN4JSParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;
        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_2 = null;
        InternalN4JSParser.ruleJSXFragment_return JSXFragmentParserRuleCall_3 = null;
        InternalN4JSParser.ruleJSXElement_return JSXElementParserRuleCall_4 = null;
        InternalN4JSParser.ruleImportCallExpression_return ImportCallExpressionParserRuleCall_5 = null;
        InternalN4JSParser.ruleParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_6 = null;
        InternalN4JSParser.ruleLiteral_return LiteralParserRuleCall_7 = null;
        InternalN4JSParser.ruleArrayLiteral_return ArrayLiteralParserRuleCall_8 = null;
        InternalN4JSParser.ruleObjectLiteral_return ObjectLiteralParserRuleCall_9 = null;
        InternalN4JSParser.ruleParenExpression_return ParenExpressionParserRuleCall_10 = null;
        InternalN4JSParser.ruleAnnotatedExpression_return AnnotatedExpressionParserRuleCall_11 = null;
        InternalN4JSParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_12 = null;
        InternalN4JSParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_13 = null;
        InternalN4JSParser.ruleN4ClassExpression_return N4ClassExpressionParserRuleCall_14 = null;
        InternalN4JSParser.ruleTemplateLiteral_return TemplateLiteralParserRuleCall_15 = null;
        try {
            {
            int alt227=16;
            alt227 = dfa227.predict(input);
            switch (alt227) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=ruleIdentifierRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXFragmentParserRuleCall_3=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXFragmentParserRuleCall_3!=null?((Token)JSXFragmentParserRuleCall_3.start):null), (JSXFragmentParserRuleCall_3!=null?((Token)JSXFragmentParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXFragmentParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_4=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_4!=null?((Token)JSXElementParserRuleCall_4.start):null), (JSXElementParserRuleCall_4!=null?((Token)JSXElementParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_4()); 
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportCallExpressionParserRuleCall_5=ruleImportCallExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportCallExpressionParserRuleCall_5!=null?((Token)ImportCallExpressionParserRuleCall_5.start):null), (ImportCallExpressionParserRuleCall_5!=null?((Token)ImportCallExpressionParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getImportCallExpressionParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_6=ruleParameterizedCallExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_6!=null?((Token)ParameterizedCallExpressionParserRuleCall_6.start):null), (ParameterizedCallExpressionParserRuleCall_6!=null?((Token)ParameterizedCallExpressionParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_6()); 
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_7=ruleLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_7!=null?((Token)LiteralParserRuleCall_7.start):null), (LiteralParserRuleCall_7!=null?((Token)LiteralParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_7()); 
                    }
                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_8=ruleArrayLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_8!=null?((Token)ArrayLiteralParserRuleCall_8.start):null), (ArrayLiteralParserRuleCall_8!=null?((Token)ArrayLiteralParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_8()); 
                    }
                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_9=ruleObjectLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_9!=null?((Token)ObjectLiteralParserRuleCall_9.start):null), (ObjectLiteralParserRuleCall_9!=null?((Token)ObjectLiteralParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_9()); 
                    }
                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_10=ruleParenExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_10!=null?((Token)ParenExpressionParserRuleCall_10.start):null), (ParenExpressionParserRuleCall_10!=null?((Token)ParenExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_10()); 
                    }
                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_11=ruleAnnotatedExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_11!=null?((Token)AnnotatedExpressionParserRuleCall_11.start):null), (AnnotatedExpressionParserRuleCall_11!=null?((Token)AnnotatedExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_11()); 
                    }
                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_12=ruleFunctionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_12!=null?((Token)FunctionExpressionParserRuleCall_12.start):null), (FunctionExpressionParserRuleCall_12!=null?((Token)FunctionExpressionParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_12()); 
                    }
                    }
                    break;
                case 14 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_13=ruleAsyncFunctionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_13!=null?((Token)AsyncFunctionExpressionParserRuleCall_13.start):null), (AsyncFunctionExpressionParserRuleCall_13!=null?((Token)AsyncFunctionExpressionParserRuleCall_13.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_13()); 
                    }
                    }
                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_14=ruleN4ClassExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_14!=null?((Token)N4ClassExpressionParserRuleCall_14.start):null), (N4ClassExpressionParserRuleCall_14!=null?((Token)N4ClassExpressionParserRuleCall_14.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_14()); 
                    }
                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_15=ruleTemplateLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_15!=null?((Token)TemplateLiteralParserRuleCall_15.start):null), (TemplateLiteralParserRuleCall_15!=null?((Token)TemplateLiteralParserRuleCall_15.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_15()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PrimaryExpression_return norm1_PrimaryExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PrimaryExpression_return retval = new InternalN4JSParser.norm1_PrimaryExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;
        InternalN4JSParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;
        InternalN4JSParser.norm1_IdentifierRef_return IdentifierRefParserRuleCall_2 = null;
        InternalN4JSParser.ruleJSXFragment_return JSXFragmentParserRuleCall_3 = null;
        InternalN4JSParser.ruleJSXElement_return JSXElementParserRuleCall_4 = null;
        InternalN4JSParser.norm1_ImportCallExpression_return ImportCallExpressionParserRuleCall_5 = null;
        InternalN4JSParser.norm1_ParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_6 = null;
        InternalN4JSParser.ruleLiteral_return LiteralParserRuleCall_7 = null;
        InternalN4JSParser.norm1_ArrayLiteral_return ArrayLiteralParserRuleCall_8 = null;
        InternalN4JSParser.norm1_ObjectLiteral_return ObjectLiteralParserRuleCall_9 = null;
        InternalN4JSParser.norm1_ParenExpression_return ParenExpressionParserRuleCall_10 = null;
        InternalN4JSParser.norm1_AnnotatedExpression_return AnnotatedExpressionParserRuleCall_11 = null;
        InternalN4JSParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_12 = null;
        InternalN4JSParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_13 = null;
        InternalN4JSParser.norm1_N4ClassExpression_return N4ClassExpressionParserRuleCall_14 = null;
        InternalN4JSParser.norm1_TemplateLiteral_return TemplateLiteralParserRuleCall_15 = null;
        try {
            {
            int alt228=16;
            alt228 = dfa228.predict(input);
            switch (alt228) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=norm1_IdentifierRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXFragmentParserRuleCall_3=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXFragmentParserRuleCall_3!=null?((Token)JSXFragmentParserRuleCall_3.start):null), (JSXFragmentParserRuleCall_3!=null?((Token)JSXFragmentParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXFragmentParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_4=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_4!=null?((Token)JSXElementParserRuleCall_4.start):null), (JSXElementParserRuleCall_4!=null?((Token)JSXElementParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_4()); 
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportCallExpressionParserRuleCall_5=norm1_ImportCallExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportCallExpressionParserRuleCall_5!=null?((Token)ImportCallExpressionParserRuleCall_5.start):null), (ImportCallExpressionParserRuleCall_5!=null?((Token)ImportCallExpressionParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getImportCallExpressionParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_6=norm1_ParameterizedCallExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_6!=null?((Token)ParameterizedCallExpressionParserRuleCall_6.start):null), (ParameterizedCallExpressionParserRuleCall_6!=null?((Token)ParameterizedCallExpressionParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_6()); 
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_7=ruleLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_7!=null?((Token)LiteralParserRuleCall_7.start):null), (LiteralParserRuleCall_7!=null?((Token)LiteralParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_7()); 
                    }
                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_8=norm1_ArrayLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_8!=null?((Token)ArrayLiteralParserRuleCall_8.start):null), (ArrayLiteralParserRuleCall_8!=null?((Token)ArrayLiteralParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_8()); 
                    }
                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_9=norm1_ObjectLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_9!=null?((Token)ObjectLiteralParserRuleCall_9.start):null), (ObjectLiteralParserRuleCall_9!=null?((Token)ObjectLiteralParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_9()); 
                    }
                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_10=norm1_ParenExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_10!=null?((Token)ParenExpressionParserRuleCall_10.start):null), (ParenExpressionParserRuleCall_10!=null?((Token)ParenExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_10()); 
                    }
                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_11=norm1_AnnotatedExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_11!=null?((Token)AnnotatedExpressionParserRuleCall_11.start):null), (AnnotatedExpressionParserRuleCall_11!=null?((Token)AnnotatedExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_11()); 
                    }
                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_12=ruleFunctionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_12!=null?((Token)FunctionExpressionParserRuleCall_12.start):null), (FunctionExpressionParserRuleCall_12!=null?((Token)FunctionExpressionParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_12()); 
                    }
                    }
                    break;
                case 14 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_13=ruleAsyncFunctionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_13!=null?((Token)AsyncFunctionExpressionParserRuleCall_13.start):null), (AsyncFunctionExpressionParserRuleCall_13!=null?((Token)AsyncFunctionExpressionParserRuleCall_13.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_13()); 
                    }
                    }
                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_14=norm1_N4ClassExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_14!=null?((Token)N4ClassExpressionParserRuleCall_14.start):null), (N4ClassExpressionParserRuleCall_14!=null?((Token)N4ClassExpressionParserRuleCall_14.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_14()); 
                    }
                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_15=norm1_TemplateLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_15!=null?((Token)TemplateLiteralParserRuleCall_15.start):null), (TemplateLiteralParserRuleCall_15!=null?((Token)TemplateLiteralParserRuleCall_15.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_15()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParenExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParenExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParenExpression_return ruleParenExpression() throws RecognitionException {
        InternalN4JSParser.ruleParenExpression_return retval = new InternalN4JSParser.ruleParenExpression_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_71);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParenExpression_return norm1_ParenExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ParenExpression_return retval = new InternalN4JSParser.norm1_ParenExpression_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_71);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierRef_return ruleIdentifierRef() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierRef_return retval = new InternalN4JSParser.ruleIdentifierRef_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleBindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1 = null;
        InternalN4JSParser.ruleVersionRequest_return VersionRequestParserRuleCall_1_2 = null;
        try {
            {
            int alt229=2;
            alt229 = dfa229.predict(input);
            switch (alt229) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment_1_1());
                    }
                    }
                    }
                    pushFollow(FOLLOW_2);
                    VersionRequestParserRuleCall_1_2=ruleVersionRequest();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionRequestParserRuleCall_1_2!=null?((Token)VersionRequestParserRuleCall_1_2.start):null), (VersionRequestParserRuleCall_1_2!=null?((Token)VersionRequestParserRuleCall_1_2.stop):null), grammarAccess.getIdentifierRefAccess().getVersionRequestParserRuleCall_1_2()); 
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_IdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IdentifierRef_return norm1_IdentifierRef() throws RecognitionException {
        InternalN4JSParser.norm1_IdentifierRef_return retval = new InternalN4JSParser.norm1_IdentifierRef_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1 = null;
        InternalN4JSParser.ruleVersionRequest_return VersionRequestParserRuleCall_1_2 = null;
        try {
            {
            int alt230=2;
            alt230 = dfa230.predict(input);
            switch (alt230) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment_1_1());
                    }
                    }
                    }
                    pushFollow(FOLLOW_2);
                    VersionRequestParserRuleCall_1_2=ruleVersionRequest();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionRequestParserRuleCall_1_2!=null?((Token)VersionRequestParserRuleCall_1_2.start):null), (VersionRequestParserRuleCall_1_2!=null?((Token)VersionRequestParserRuleCall_1_2.stop):null), grammarAccess.getIdentifierRefAccess().getVersionRequestParserRuleCall_1_2()); 
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSuperLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSuperLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleSuperLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSuperLiteral_return ruleSuperLiteral() throws RecognitionException {
        InternalN4JSParser.ruleSuperLiteral_return retval = new InternalN4JSParser.ruleSuperLiteral_return();
        retval.start = input.LT(1);
        Token SuperKeyword_1=null;
        try {
            {
            {
            SuperKeyword_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(SuperKeyword_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleThisLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisLiteral_return ruleThisLiteral() throws RecognitionException {
        InternalN4JSParser.ruleThisLiteral_return retval = new InternalN4JSParser.ruleThisLiteral_return();
        retval.start = input.LT(1);
        Token ThisKeyword_1=null;
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ThisKeyword_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayLiteral_return ruleArrayLiteral() throws RecognitionException {
        InternalN4JSParser.ruleArrayLiteral_return retval = new InternalN4JSParser.ruleArrayLiteral_return();
        retval.start = input.LT(1);
        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;
        InternalN4JSParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_98); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
            }
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);
                if ( (LA231_0==Comma) ) {
                    alt231=1;
                }
                switch (alt231) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_98);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop231;
                }
            } while (true);
            int alt236=2;
            int LA236_0 = input.LA(1);
            if ( ((LA236_0>=Intersection && LA236_0<=Implements)||(LA236_0>=Promisify && LA236_0<=Abstract)||(LA236_0>=External && LA236_0<=Function)||(LA236_0>=Private && LA236_0<=Delete)||(LA236_0>=Import && LA236_0<=Public)||LA236_0==Static||(LA236_0>=Target && LA236_0<=Await)||LA236_0==Class||(LA236_0>=False && LA236_0<=Super)||LA236_0==Union||(LA236_0>=Yield && LA236_0<=This)||(LA236_0>=From && LA236_0<=Void)||LA236_0==FullStopFullStopFullStop||(LA236_0>=Get && LA236_0<=Set)||LA236_0==PlusSignPlusSign||(LA236_0>=HyphenMinusHyphenMinus && LA236_0<=SolidusEqualsSign)||LA236_0==As||LA236_0==Of||LA236_0==ExclamationMark||LA236_0==LeftParenthesis||LA236_0==PlusSign||LA236_0==HyphenMinus||LA236_0==Solidus||LA236_0==LessThanSign||(LA236_0>=CommercialAt && LA236_0<=LeftSquareBracket)||LA236_0==LeftCurlyBracket||LA236_0==Tilde||LA236_0==RULE_DOUBLE||(LA236_0>=RULE_HEX_INT && LA236_0<=RULE_LEGACY_OCTAL_INT)||LA236_0==RULE_SCIENTIFIC_INT||LA236_0==RULE_IDENTIFIER||LA236_0==RULE_STRING||(LA236_0>=RULE_TEMPLATE_HEAD && LA236_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA236_0==RULE_INT) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_99);
                    ElementsArrayElementParserRuleCall_3_0_0=ruleArrayElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0());
                    }
                    }
                    }
                    loop233:
                    do {
                        int alt233=2;
                        alt233 = dfa233.predict(input);
                        switch (alt233) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_100); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop232:
                    	    do {
                    	        int alt232=2;
                    	        int LA232_0 = input.LA(1);
                    	        if ( (LA232_0==Comma) ) {
                    	            alt232=1;
                    	        }
                    	        switch (alt232) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_100);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      						announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1());
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop232;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=ruleArrayElement();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop233;
                        }
                    } while (true);
                    int alt235=2;
                    int LA235_0 = input.LA(1);
                    if ( (LA235_0==Comma) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_99); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                            }
                            }
                            }
                            loop234:
                            do {
                                int alt234=2;
                                int LA234_0 = input.LA(1);
                                if ( (LA234_0==Comma) ) {
                                    alt234=1;
                                }
                                switch (alt234) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_99);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      						announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1());
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop234;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayLiteral_return norm1_ArrayLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayLiteral_return retval = new InternalN4JSParser.norm1_ArrayLiteral_return();
        retval.start = input.LT(1);
        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;
        InternalN4JSParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_101); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
            }
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);
                if ( (LA237_0==Comma) ) {
                    alt237=1;
                }
                switch (alt237) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_101);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop237;
                }
            } while (true);
            int alt242=2;
            int LA242_0 = input.LA(1);
            if ( ((LA242_0>=Intersection && LA242_0<=Implements)||(LA242_0>=Promisify && LA242_0<=Abstract)||(LA242_0>=External && LA242_0<=Function)||(LA242_0>=Private && LA242_0<=Delete)||(LA242_0>=Import && LA242_0<=Public)||LA242_0==Static||(LA242_0>=Target && LA242_0<=Await)||LA242_0==Class||(LA242_0>=False && LA242_0<=Super)||LA242_0==Union||(LA242_0>=Yield && LA242_0<=This)||(LA242_0>=From && LA242_0<=Void)||LA242_0==FullStopFullStopFullStop||(LA242_0>=Get && LA242_0<=Set)||LA242_0==PlusSignPlusSign||(LA242_0>=HyphenMinusHyphenMinus && LA242_0<=SolidusEqualsSign)||LA242_0==As||LA242_0==Of||LA242_0==ExclamationMark||LA242_0==LeftParenthesis||LA242_0==PlusSign||LA242_0==HyphenMinus||LA242_0==Solidus||LA242_0==LessThanSign||(LA242_0>=CommercialAt && LA242_0<=LeftSquareBracket)||LA242_0==LeftCurlyBracket||LA242_0==Tilde||LA242_0==RULE_DOUBLE||(LA242_0>=RULE_HEX_INT && LA242_0<=RULE_LEGACY_OCTAL_INT)||LA242_0==RULE_SCIENTIFIC_INT||LA242_0==RULE_IDENTIFIER||LA242_0==RULE_STRING||(LA242_0>=RULE_TEMPLATE_HEAD && LA242_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA242_0==RULE_INT) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_99);
                    ElementsArrayElementParserRuleCall_3_0_0=norm1_ArrayElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0());
                    }
                    }
                    }
                    loop239:
                    do {
                        int alt239=2;
                        alt239 = dfa239.predict(input);
                        switch (alt239) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_102); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop238:
                    	    do {
                    	        int alt238=2;
                    	        int LA238_0 = input.LA(1);
                    	        if ( (LA238_0==Comma) ) {
                    	            alt238=1;
                    	        }
                    	        switch (alt238) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_102);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      						announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1());
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop238;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=norm1_ArrayElement();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop239;
                        }
                    } while (true);
                    int alt241=2;
                    int LA241_0 = input.LA(1);
                    if ( (LA241_0==Comma) ) {
                        alt241=1;
                    }
                    switch (alt241) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_99); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                            }
                            }
                            }
                            loop240:
                            do {
                                int alt240=2;
                                int LA240_0 = input.LA(1);
                                if ( (LA240_0==Comma) ) {
                                    alt240=1;
                                }
                                switch (alt240) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_99);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      						announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1());
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop240;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayPadding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayPadding();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrayPadding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayPadding_return ruleArrayPadding() throws RecognitionException {
        InternalN4JSParser.ruleArrayPadding_return retval = new InternalN4JSParser.ruleArrayPadding_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1=null;
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CommaKeyword_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayElement_return ruleArrayElement() throws RecognitionException {
        InternalN4JSParser.ruleArrayElement_return retval = new InternalN4JSParser.ruleArrayElement_return();
        retval.start = input.LT(1);
        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            int alt243=2;
            int LA243_0 = input.LA(1);
            if ( (LA243_0==FullStopFullStopFullStop) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayElement_return norm1_ArrayElement() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayElement_return retval = new InternalN4JSParser.norm1_ArrayElement_return();
        retval.start = input.LT(1);
        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            int alt244=2;
            int LA244_0 = input.LA(1);
            if ( (LA244_0==FullStopFullStopFullStop) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleObjectLiteral_return ruleObjectLiteral() throws RecognitionException {
        InternalN4JSParser.ruleObjectLiteral_return retval = new InternalN4JSParser.ruleObjectLiteral_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;
        InternalN4JSParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt247=2;
            int LA247_0 = input.LA(1);
            if ( ((LA247_0>=Intersection && LA247_0<=With)||LA247_0==FullStopFullStopFullStop||(LA247_0>=For && LA247_0<=Var)||(LA247_0>=As && LA247_0<=Of)||LA247_0==LeftParenthesis||LA247_0==Asterisk||LA247_0==LessThanSign||(LA247_0>=QuestionMark && LA247_0<=LeftSquareBracket)||LA247_0==LeftCurlyBracket||LA247_0==Tilde||LA247_0==RULE_DOUBLE||(LA247_0>=RULE_HEX_INT && LA247_0<=RULE_OCTAL_INT)||LA247_0==RULE_SCIENTIFIC_INT||LA247_0==RULE_IDENTIFIER||LA247_0==RULE_STRING||LA247_0==RULE_INT) ) {
                alt247=1;
            }
            switch (alt247) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=rulePropertyAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0());
                    }
                    }
                    }
                    loop245:
                    do {
                        int alt245=2;
                        int LA245_0 = input.LA(1);
                        if ( (LA245_0==Comma) ) {
                            int LA245_1 = input.LA(2);
                            if ( ((LA245_1>=Intersection && LA245_1<=With)||LA245_1==FullStopFullStopFullStop||(LA245_1>=For && LA245_1<=Var)||(LA245_1>=As && LA245_1<=Of)||LA245_1==LeftParenthesis||LA245_1==Asterisk||LA245_1==LessThanSign||(LA245_1>=QuestionMark && LA245_1<=LeftSquareBracket)||LA245_1==LeftCurlyBracket||LA245_1==Tilde||LA245_1==RULE_DOUBLE||(LA245_1>=RULE_HEX_INT && LA245_1<=RULE_OCTAL_INT)||LA245_1==RULE_SCIENTIFIC_INT||LA245_1==RULE_IDENTIFIER||LA245_1==RULE_STRING||LA245_1==RULE_INT) ) {
                                alt245=1;
                            }
                        }
                        switch (alt245) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_104); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=rulePropertyAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop245;
                        }
                    } while (true);
                    int alt246=2;
                    int LA246_0 = input.LA(1);
                    if ( (LA246_0==Comma) ) {
                        alt246=1;
                    }
                    switch (alt246) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ObjectLiteral_return norm1_ObjectLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_ObjectLiteral_return retval = new InternalN4JSParser.norm1_ObjectLiteral_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;
        InternalN4JSParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt250=2;
            int LA250_0 = input.LA(1);
            if ( ((LA250_0>=Intersection && LA250_0<=With)||LA250_0==FullStopFullStopFullStop||(LA250_0>=For && LA250_0<=Var)||(LA250_0>=As && LA250_0<=Of)||LA250_0==LeftParenthesis||LA250_0==Asterisk||LA250_0==LessThanSign||(LA250_0>=QuestionMark && LA250_0<=LeftSquareBracket)||LA250_0==LeftCurlyBracket||LA250_0==Tilde||LA250_0==RULE_DOUBLE||(LA250_0>=RULE_HEX_INT && LA250_0<=RULE_OCTAL_INT)||LA250_0==RULE_SCIENTIFIC_INT||LA250_0==RULE_IDENTIFIER||LA250_0==RULE_STRING||LA250_0==RULE_INT) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=norm1_PropertyAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0());
                    }
                    }
                    }
                    loop248:
                    do {
                        int alt248=2;
                        int LA248_0 = input.LA(1);
                        if ( (LA248_0==Comma) ) {
                            int LA248_1 = input.LA(2);
                            if ( ((LA248_1>=Intersection && LA248_1<=With)||LA248_1==FullStopFullStopFullStop||(LA248_1>=For && LA248_1<=Var)||(LA248_1>=As && LA248_1<=Of)||LA248_1==LeftParenthesis||LA248_1==Asterisk||LA248_1==LessThanSign||(LA248_1>=QuestionMark && LA248_1<=LeftSquareBracket)||LA248_1==LeftCurlyBracket||LA248_1==Tilde||LA248_1==RULE_DOUBLE||(LA248_1>=RULE_HEX_INT && LA248_1<=RULE_OCTAL_INT)||LA248_1==RULE_SCIENTIFIC_INT||LA248_1==RULE_IDENTIFIER||LA248_1==RULE_STRING||LA248_1==RULE_INT) ) {
                                alt248=1;
                            }
                        }
                        switch (alt248) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_104); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=norm1_PropertyAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop248;
                        }
                    } while (true);
                    int alt249=2;
                    int LA249_0 = input.LA(1);
                    if ( (LA249_0==Comma) ) {
                        alt249=1;
                    }
                    switch (alt249) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignment();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyAssignment_return rulePropertyAssignment() throws RecognitionException {
        InternalN4JSParser.rulePropertyAssignment_return retval = new InternalN4JSParser.rulePropertyAssignment_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;
        InternalN4JSParser.rulePropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;
        InternalN4JSParser.rulePropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.rulePropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;
        InternalN4JSParser.rulePropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;
        InternalN4JSParser.rulePropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;
        InternalN4JSParser.rulePropertySpread_return PropertySpreadParserRuleCall_6 = null;
        try {
            {
            int alt251=7;
            alt251 = dfa251.predict(input);
            switch (alt251) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=ruleAnnotatedPropertyAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=rulePropertyNameValuePair();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=rulePropertyGetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=rulePropertySetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=rulePropertyMethodDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=rulePropertyNameValuePairSingleName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertySpreadParserRuleCall_6=rulePropertySpread();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySpreadParserRuleCall_6!=null?((Token)PropertySpreadParserRuleCall_6.start):null), (PropertySpreadParserRuleCall_6!=null?((Token)PropertySpreadParserRuleCall_6.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySpreadParserRuleCall_6()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyAssignment_return norm1_PropertyAssignment() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyAssignment_return retval = new InternalN4JSParser.norm1_PropertyAssignment_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;
        InternalN4JSParser.norm1_PropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;
        InternalN4JSParser.norm1_PropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.norm1_PropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;
        InternalN4JSParser.norm1_PropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;
        InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;
        InternalN4JSParser.norm1_PropertySpread_return PropertySpreadParserRuleCall_6 = null;
        try {
            {
            int alt252=7;
            alt252 = dfa252.predict(input);
            switch (alt252) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=norm1_AnnotatedPropertyAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=norm1_PropertyNameValuePair();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=norm1_PropertyGetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=norm1_PropertySetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=norm1_PropertyMethodDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=norm1_PropertyNameValuePairSingleName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertySpreadParserRuleCall_6=norm1_PropertySpread();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySpreadParserRuleCall_6!=null?((Token)PropertySpreadParserRuleCall_6.start):null), (PropertySpreadParserRuleCall_6!=null?((Token)PropertySpreadParserRuleCall_6.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySpreadParserRuleCall_6()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedPropertyAssignment();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedPropertyAssignment_return ruleAnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedPropertyAssignment_return retval = new InternalN4JSParser.ruleAnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);
        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_2_1_0=null;
        Token LeftParenthesisKeyword_1_2_2=null;
        Token RightParenthesisKeyword_1_2_4=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token FullStopFullStopFullStopKeyword_1_5_1=null;
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;
        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_2_3_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_2_5_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;
        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;
        InternalN4JSParser.rulePropertyNameValuePairSingleNamePart_return ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_5_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_105);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt260=6;
            alt260 = dfa260.predict(input);
            switch (alt260) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt253=2;
                    alt253 = dfa253.predict(input);
                    switch (alt253) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_106);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1());
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2());
                    }
                    }
                    }
                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_13);
                    GetterHeaderParserRuleCall_1_1_0_0_1=ruleGetterHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_107);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2());
                    }
                    }
                    }
                    }
                    }
                    int alt254=2;
                    int LA254_0 = input.LA(1);
                    if ( (LA254_0==QuestionMark) ) {
                        alt254=1;
                    }
                    switch (alt254) {
                        case 1 :
                            {
                            {
                            DeclaredOptionalQuestionMarkKeyword_1_2_1_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(DeclaredOptionalQuestionMarkKeyword_1_2_1_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                            }
                            }
                            }
                            break;
                    }
                    LeftParenthesisKeyword_1_2_2=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftParenthesisKeyword_1_2_2, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_71);
                    FparFormalParameterParserRuleCall_1_2_3_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((FparFormalParameterParserRuleCall_1_2_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_3_0.start):null), (FparFormalParameterParserRuleCall_1_2_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_3_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_3());
                    }
                    }
                    }
                    RightParenthesisKeyword_1_2_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightParenthesisKeyword_1_2_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_5_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockParserRuleCall_1_2_5_0!=null?((Token)BodyBlockParserRuleCall_1_2_5_0.start):null), (BodyBlockParserRuleCall_1_2_5_0!=null?((Token)BodyBlockParserRuleCall_1_2_5_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_5());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt255=2;
                    int LA255_0 = input.LA(1);
                    if ( (LA255_0==LessThanSign) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_108);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }
                            }
                            break;
                    }
                    int alt256=2;
                    alt256 = dfa256.predict(input);
                    switch (alt256) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_108);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2());
                            }
                            }
                            }
                            break;
                    }
                    int alt257=2;
                    int LA257_0 = input.LA(1);
                    if ( (LA257_0==Asterisk) ) {
                        alt257=1;
                    }
                    else if ( ((LA257_0>=Intersection && LA257_0<=With)||(LA257_0>=For && LA257_0<=Var)||(LA257_0>=As && LA257_0<=Of)||LA257_0==LeftSquareBracket||LA257_0==RULE_DOUBLE||(LA257_0>=RULE_HEX_INT && LA257_0<=RULE_OCTAL_INT)||LA257_0==RULE_SCIENTIFIC_INT||LA257_0==RULE_IDENTIFIER||LA257_0==RULE_STRING||LA257_0==RULE_INT) ) {
                        alt257=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 257, 0, input);
                        throw nvae;
                    }
                    switch (alt257) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_106); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_39);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_109);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_42);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_109);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt258=2;
                    int LA258_0 = input.LA(1);
                    if ( (LA258_0==Semicolon) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    int alt259=2;
                    alt259 = dfa259.predict(input);
                    switch (alt259) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_110);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1());
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0=rulePropertyNameValuePairSingleNamePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0.start):null), (ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_2());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    FullStopFullStopFullStopKeyword_1_5_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(FullStopFullStopFullStopKeyword_1_5_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getFullStopFullStopFullStopKeyword_1_5_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_5_2_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_5_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_5_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_5_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_5_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_5_2());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return retval = new InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);
        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_2_1_0=null;
        Token LeftParenthesisKeyword_1_2_2=null;
        Token RightParenthesisKeyword_1_2_4=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token FullStopFullStopFullStopKeyword_1_5_1=null;
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;
        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_2_3_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_2_5_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;
        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;
        InternalN4JSParser.norm1_PropertyNameValuePairSingleNamePart_return ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_5_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_105);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt268=6;
            alt268 = dfa268.predict(input);
            switch (alt268) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt261=2;
                    alt261 = dfa261.predict(input);
                    switch (alt261) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_106);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1());
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2());
                    }
                    }
                    }
                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_13);
                    GetterHeaderParserRuleCall_1_1_0_0_1=norm1_GetterHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_107);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2());
                    }
                    }
                    }
                    }
                    }
                    int alt262=2;
                    int LA262_0 = input.LA(1);
                    if ( (LA262_0==QuestionMark) ) {
                        alt262=1;
                    }
                    switch (alt262) {
                        case 1 :
                            {
                            {
                            DeclaredOptionalQuestionMarkKeyword_1_2_1_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(DeclaredOptionalQuestionMarkKeyword_1_2_1_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                            }
                            }
                            }
                            break;
                    }
                    LeftParenthesisKeyword_1_2_2=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftParenthesisKeyword_1_2_2, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_71);
                    FparFormalParameterParserRuleCall_1_2_3_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((FparFormalParameterParserRuleCall_1_2_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_3_0.start):null), (FparFormalParameterParserRuleCall_1_2_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_3_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_3());
                    }
                    }
                    }
                    RightParenthesisKeyword_1_2_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightParenthesisKeyword_1_2_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_5_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockParserRuleCall_1_2_5_0!=null?((Token)BodyBlockParserRuleCall_1_2_5_0.start):null), (BodyBlockParserRuleCall_1_2_5_0!=null?((Token)BodyBlockParserRuleCall_1_2_5_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_5());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt263=2;
                    int LA263_0 = input.LA(1);
                    if ( (LA263_0==LessThanSign) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_108);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }
                            }
                            break;
                    }
                    int alt264=2;
                    alt264 = dfa264.predict(input);
                    switch (alt264) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_108);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2());
                            }
                            }
                            }
                            break;
                    }
                    int alt265=2;
                    int LA265_0 = input.LA(1);
                    if ( (LA265_0==Asterisk) ) {
                        alt265=1;
                    }
                    else if ( ((LA265_0>=Intersection && LA265_0<=With)||(LA265_0>=For && LA265_0<=Var)||(LA265_0>=As && LA265_0<=Of)||LA265_0==LeftSquareBracket||LA265_0==RULE_DOUBLE||(LA265_0>=RULE_HEX_INT && LA265_0<=RULE_OCTAL_INT)||LA265_0==RULE_SCIENTIFIC_INT||LA265_0==RULE_IDENTIFIER||LA265_0==RULE_STRING||LA265_0==RULE_INT) ) {
                        alt265=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 265, 0, input);
                        throw nvae;
                    }
                    switch (alt265) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_106); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_39);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_109);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_42);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_109);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt266=2;
                    int LA266_0 = input.LA(1);
                    if ( (LA266_0==Semicolon) ) {
                        alt266=1;
                    }
                    switch (alt266) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    int alt267=2;
                    alt267 = dfa267.predict(input);
                    switch (alt267) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_110);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1());
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0=norm1_PropertyNameValuePairSingleNamePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0.start):null), (ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_2());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    FullStopFullStopFullStopKeyword_1_5_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(FullStopFullStopFullStopKeyword_1_5_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getFullStopFullStopFullStopKeyword_1_5_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_5_2_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_5_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_5_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_5_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_5_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_5_2());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyMethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyMethodDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyMethodDeclaration_return rulePropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertyMethodDeclaration_return retval = new InternalN4JSParser.rulePropertyMethodDeclaration_return();
        retval.start = input.LT(1);
        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;
        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;
        try {
            {
            {
            {
            {
            int alt269=2;
            int LA269_0 = input.LA(1);
            if ( (LA269_0==LessThanSign) ) {
                alt269=1;
            }
            switch (alt269) {
                case 1 :
                    {
                    pushFollow(FOLLOW_108);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }
                    }
                    break;
            }
            int alt270=2;
            alt270 = dfa270.predict(input);
            switch (alt270) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_108);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2());
                    }
                    }
                    }
                    break;
            }
            int alt271=2;
            int LA271_0 = input.LA(1);
            if ( (LA271_0==Asterisk) ) {
                alt271=1;
            }
            else if ( ((LA271_0>=Intersection && LA271_0<=With)||(LA271_0>=For && LA271_0<=Var)||(LA271_0>=As && LA271_0<=Of)||LA271_0==LeftSquareBracket||LA271_0==RULE_DOUBLE||(LA271_0>=RULE_HEX_INT && LA271_0<=RULE_OCTAL_INT)||LA271_0==RULE_SCIENTIFIC_INT||LA271_0==RULE_IDENTIFIER||LA271_0==RULE_STRING||LA271_0==RULE_INT) ) {
                alt271=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);
                throw nvae;
            }
            switch (alt271) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_39);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_109);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_42);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_109);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt272=2;
            int LA272_0 = input.LA(1);
            if ( (LA272_0==Semicolon) ) {
                alt272=1;
            }
            switch (alt272) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyMethodDeclaration_return norm1_PropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyMethodDeclaration_return retval = new InternalN4JSParser.norm1_PropertyMethodDeclaration_return();
        retval.start = input.LT(1);
        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;
        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;
        try {
            {
            {
            {
            {
            int alt273=2;
            int LA273_0 = input.LA(1);
            if ( (LA273_0==LessThanSign) ) {
                alt273=1;
            }
            switch (alt273) {
                case 1 :
                    {
                    pushFollow(FOLLOW_108);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }
                    }
                    break;
            }
            int alt274=2;
            alt274 = dfa274.predict(input);
            switch (alt274) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_108);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2());
                    }
                    }
                    }
                    break;
            }
            int alt275=2;
            int LA275_0 = input.LA(1);
            if ( (LA275_0==Asterisk) ) {
                alt275=1;
            }
            else if ( ((LA275_0>=Intersection && LA275_0<=With)||(LA275_0>=For && LA275_0<=Var)||(LA275_0>=As && LA275_0<=Of)||LA275_0==LeftSquareBracket||LA275_0==RULE_DOUBLE||(LA275_0>=RULE_HEX_INT && LA275_0<=RULE_OCTAL_INT)||LA275_0==RULE_SCIENTIFIC_INT||LA275_0==RULE_IDENTIFIER||LA275_0==RULE_STRING||LA275_0==RULE_INT) ) {
                alt275=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 275, 0, input);
                throw nvae;
            }
            switch (alt275) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_39);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_109);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_42);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_109);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt276=2;
            int LA276_0 = input.LA(1);
            if ( (LA276_0==Semicolon) ) {
                alt276=1;
            }
            switch (alt276) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePair() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePair();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyNameValuePair_return rulePropertyNameValuePair() throws RecognitionException {
        InternalN4JSParser.rulePropertyNameValuePair_return retval = new InternalN4JSParser.rulePropertyNameValuePair_return();
        retval.start = input.LT(1);
        Token DeclaredOptionalQuestionMarkKeyword_0_0_3_0=null;
        Token ColonKeyword_0_0_4=null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            int alt277=2;
            alt277 = dfa277.predict(input);
            switch (alt277) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_106);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_111);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2());
            }
            }
            }
            int alt278=2;
            int LA278_0 = input.LA(1);
            if ( (LA278_0==QuestionMark) ) {
                alt278=1;
            }
            switch (alt278) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_0_0_3_0=(Token)match(input,QuestionMark,FOLLOW_93); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(DeclaredOptionalQuestionMarkKeyword_0_0_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                    }
                    }
                    }
                    break;
            }
            ColonKeyword_0_0_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ColonKeyword_0_0_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyNameValuePair_return norm1_PropertyNameValuePair() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyNameValuePair_return retval = new InternalN4JSParser.norm1_PropertyNameValuePair_return();
        retval.start = input.LT(1);
        Token DeclaredOptionalQuestionMarkKeyword_0_0_3_0=null;
        Token ColonKeyword_0_0_4=null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            int alt279=2;
            alt279 = dfa279.predict(input);
            switch (alt279) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_106);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_111);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2());
            }
            }
            }
            int alt280=2;
            int LA280_0 = input.LA(1);
            if ( (LA280_0==QuestionMark) ) {
                alt280=1;
            }
            switch (alt280) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_0_0_3_0=(Token)match(input,QuestionMark,FOLLOW_93); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(DeclaredOptionalQuestionMarkKeyword_0_0_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                    }
                    }
                    }
                    break;
            }
            ColonKeyword_0_0_4=(Token)match(input,Colon,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ColonKeyword_0_0_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePairSingleName();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyNameValuePairSingleName_return rulePropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSParser.rulePropertyNameValuePairSingleName_return retval = new InternalN4JSParser.rulePropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;
        InternalN4JSParser.rulePropertyNameValuePairSingleNamePart_return ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0 = null;
        try {
            {
            {
            int alt281=2;
            alt281 = dfa281.predict(input);
            switch (alt281) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_110);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0=rulePropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0.start):null), (ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return retval = new InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_PropertyNameValuePairSingleNamePart_return ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0 = null;
        try {
            {
            {
            int alt282=2;
            alt282 = dfa282.predict(input);
            switch (alt282) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_110);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0=norm1_PropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0.start):null), (ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePairSingleNamePart() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyNameValuePairSingleNamePart_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyNameValuePairSingleNamePart_return rulePropertyNameValuePairSingleNamePart() throws RecognitionException {
        InternalN4JSParser.rulePropertyNameValuePairSingleNamePart_return retval = new InternalN4JSParser.rulePropertyNameValuePairSingleNamePart_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_0 = null;
        InternalN4JSParser.ruleAssignmentOperatorOnlyAssign_return OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_1_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_63);
            IdentifierRefParserRuleCall_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.start):null), (IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getIdentifierRefParserRuleCall_0()); 
            }
            int alt283=2;
            int LA283_0 = input.LA(1);
            if ( (LA283_0==EqualsSign) ) {
                alt283=1;
            }
            switch (alt283) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_49);
                    OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0=ruleAssignmentOperatorOnlyAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0!=null?((Token)OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0.start):null), (OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0!=null?((Token)OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getOpAssignment_1_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    RhsAssignmentExpressionParserRuleCall_1_2_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((RhsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_1_2_0.start):null), (RhsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getRhsAssignment_1_2());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertyNameValuePairSingleNamePart_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyNameValuePairSingleNamePart_return norm1_PropertyNameValuePairSingleNamePart() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyNameValuePairSingleNamePart_return retval = new InternalN4JSParser.norm1_PropertyNameValuePairSingleNamePart_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_IdentifierRef_return IdentifierRefParserRuleCall_0 = null;
        InternalN4JSParser.ruleAssignmentOperatorOnlyAssign_return OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_1_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_63);
            IdentifierRefParserRuleCall_0=norm1_IdentifierRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.start):null), (IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getIdentifierRefParserRuleCall_0()); 
            }
            int alt284=2;
            int LA284_0 = input.LA(1);
            if ( (LA284_0==EqualsSign) ) {
                alt284=1;
            }
            switch (alt284) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_69);
                    OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0=ruleAssignmentOperatorOnlyAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0!=null?((Token)OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0.start):null), (OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0!=null?((Token)OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getOpAssignment_1_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    RhsAssignmentExpressionParserRuleCall_1_2_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((RhsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_1_2_0.start):null), (RhsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getRhsAssignment_1_2());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyGetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyGetterDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyGetterDeclaration_return rulePropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertyGetterDeclaration_return retval = new InternalN4JSParser.rulePropertyGetterDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_13);
            GetterHeaderParserRuleCall_0_0_1=ruleGetterHeader();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyGetterDeclaration_return norm1_PropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyGetterDeclaration_return retval = new InternalN4JSParser.norm1_PropertyGetterDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_13);
            GetterHeaderParserRuleCall_0_0_1=norm1_GetterHeader();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertySetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertySetterDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertySetterDeclaration_return rulePropertySetterDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertySetterDeclaration_return retval = new InternalN4JSParser.rulePropertySetterDeclaration_return();
        retval.start = input.LT(1);
        Token SetKeyword_0_0_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_5_0 = null;
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
            }
            {
            {
            pushFollow(FOLLOW_107);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2());
            }
            }
            }
            }
            }
            int alt285=2;
            int LA285_0 = input.LA(1);
            if ( (LA285_0==QuestionMark) ) {
                alt285=1;
            }
            switch (alt285) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_1_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_71);
            FparFormalParameterParserRuleCall_3_0=ruleFormalParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.start):null), (FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_5_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.start):null), (BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_5());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertySetterDeclaration_return norm1_PropertySetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertySetterDeclaration_return retval = new InternalN4JSParser.norm1_PropertySetterDeclaration_return();
        retval.start = input.LT(1);
        Token SetKeyword_0_0_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_5_0 = null;
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
            }
            {
            {
            pushFollow(FOLLOW_107);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2());
            }
            }
            }
            }
            }
            int alt286=2;
            int LA286_0 = input.LA(1);
            if ( (LA286_0==QuestionMark) ) {
                alt286=1;
            }
            switch (alt286) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_1_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_71);
            FparFormalParameterParserRuleCall_3_0=norm1_FormalParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.start):null), (FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_5_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.start):null), (BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_5());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertySpread() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertySpread();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertySpread_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertySpread_return rulePropertySpread() throws RecognitionException {
        InternalN4JSParser.rulePropertySpread_return retval = new InternalN4JSParser.rulePropertySpread_return();
        retval.start = input.LT(1);
        Token FullStopFullStopFullStopKeyword_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            FullStopFullStopFullStopKeyword_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FullStopFullStopFullStopKeyword_0, grammarAccess.getPropertySpreadAccess().getFullStopFullStopFullStopKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertySpreadAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertySpread_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertySpread_return norm1_PropertySpread() throws RecognitionException {
        InternalN4JSParser.norm1_PropertySpread_return retval = new InternalN4JSParser.norm1_PropertySpread_return();
        retval.start = input.LT(1);
        Token FullStopFullStopFullStopKeyword_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            FullStopFullStopFullStopKeyword_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FullStopFullStopFullStopKeyword_0, grammarAccess.getPropertySpreadAccess().getFullStopFullStopFullStopKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertySpreadAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedCallExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedCallExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedCallExpression_return ruleParameterizedCallExpression() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedCallExpression_return retval = new InternalN4JSParser.ruleParameterizedCallExpression_return();
        retval.start = input.LT(1);
        Token OptionalChainingQuestionMarkFullStopKeyword_2_0=null;
        InternalN4JSParser.ruleConcreteTypeArguments_return ConcreteTypeArgumentsParserRuleCall_0 = null;
        InternalN4JSParser.ruleIdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_3 = null;
        try {
            {
            {
            pushFollow(FOLLOW_8);
            ConcreteTypeArgumentsParserRuleCall_0=ruleConcreteTypeArguments();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ConcreteTypeArgumentsParserRuleCall_0!=null?((Token)ConcreteTypeArgumentsParserRuleCall_0.start):null), (ConcreteTypeArgumentsParserRuleCall_0!=null?((Token)ConcreteTypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_112);
            TargetIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1());
            }
            }
            }
            int alt287=2;
            int LA287_0 = input.LA(1);
            if ( (LA287_0==QuestionMarkFullStop) ) {
                alt287=1;
            }
            switch (alt287) {
                case 1 :
                    {
                    {
                    OptionalChainingQuestionMarkFullStopKeyword_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalChainingQuestionMarkFullStopKeyword_2_0, grammarAccess.getParameterizedCallExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_3=ruleArgumentsWithParentheses();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_3!=null?((Token)ArgumentsWithParenthesesParserRuleCall_3.start):null), (ArgumentsWithParenthesesParserRuleCall_3!=null?((Token)ArgumentsWithParenthesesParserRuleCall_3.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParameterizedCallExpression_return norm1_ParameterizedCallExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ParameterizedCallExpression_return retval = new InternalN4JSParser.norm1_ParameterizedCallExpression_return();
        retval.start = input.LT(1);
        Token OptionalChainingQuestionMarkFullStopKeyword_2_0=null;
        InternalN4JSParser.ruleConcreteTypeArguments_return ConcreteTypeArgumentsParserRuleCall_0 = null;
        InternalN4JSParser.norm1_IdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;
        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_3 = null;
        try {
            {
            {
            pushFollow(FOLLOW_8);
            ConcreteTypeArgumentsParserRuleCall_0=ruleConcreteTypeArguments();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ConcreteTypeArgumentsParserRuleCall_0!=null?((Token)ConcreteTypeArgumentsParserRuleCall_0.start):null), (ConcreteTypeArgumentsParserRuleCall_0!=null?((Token)ConcreteTypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_112);
            TargetIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1());
            }
            }
            }
            int alt288=2;
            int LA288_0 = input.LA(1);
            if ( (LA288_0==QuestionMarkFullStop) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    {
                    {
                    OptionalChainingQuestionMarkFullStopKeyword_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalChainingQuestionMarkFullStopKeyword_2_0, grammarAccess.getParameterizedCallExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_3=norm1_ArgumentsWithParentheses();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_3!=null?((Token)ArgumentsWithParenthesesParserRuleCall_3.start):null), (ArgumentsWithParenthesesParserRuleCall_3!=null?((Token)ArgumentsWithParenthesesParserRuleCall_3.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleConcreteTypeArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleConcreteTypeArguments_return ruleConcreteTypeArguments() throws RecognitionException {
        InternalN4JSParser.ruleConcreteTypeArguments_return retval = new InternalN4JSParser.ruleConcreteTypeArguments_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_2_1_0 = null;
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LessThanSignKeyword_0, grammarAccess.getConcreteTypeArgumentsAccess().getLessThanSignKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_113);
            TypeArgsTypeRefParserRuleCall_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.start):null), (TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsAssignment_1());
            }
            }
            }
            loop289:
            do {
                int alt289=2;
                int LA289_0 = input.LA(1);
                if ( (LA289_0==Comma) ) {
                    alt289=1;
                }
                switch (alt289) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_62); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getConcreteTypeArgumentsAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_113);
            	    TypeArgsTypeRefParserRuleCall_2_1_0=ruleTypeRef();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.start):null), (TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop289;
                }
            } while (true);
            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GreaterThanSignKeyword_3, grammarAccess.getConcreteTypeArgumentsAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleImportCallExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleImportCallExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleImportCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportCallExpression_return ruleImportCallExpression() throws RecognitionException {
        InternalN4JSParser.ruleImportCallExpression_return retval = new InternalN4JSParser.ruleImportCallExpression_return();
        retval.start = input.LT(1);
        Token ImportKeyword_0=null;
        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1 = null;
        try {
            {
            {
            ImportKeyword_0=(Token)match(input,Import,FOLLOW_112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ImportKeyword_0, grammarAccess.getImportCallExpressionAccess().getImportKeyword_0());
            }
            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_1=ruleArgumentsWithParentheses();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1.stop):null), grammarAccess.getImportCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ImportCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ImportCallExpression_return norm1_ImportCallExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ImportCallExpression_return retval = new InternalN4JSParser.norm1_ImportCallExpression_return();
        retval.start = input.LT(1);
        Token ImportKeyword_0=null;
        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1 = null;
        try {
            {
            {
            ImportKeyword_0=(Token)match(input,Import,FOLLOW_112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ImportKeyword_0, grammarAccess.getImportCallExpressionAccess().getImportKeyword_0());
            }
            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_1=norm1_ArgumentsWithParentheses();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1.stop):null), grammarAccess.getImportCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLeftHandSideExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLeftHandSideExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLeftHandSideExpression_return ruleLeftHandSideExpression() throws RecognitionException {
        InternalN4JSParser.ruleLeftHandSideExpression_return retval = new InternalN4JSParser.ruleLeftHandSideExpression_return();
        retval.start = input.LT(1);
        Token OptionalChainingQuestionMarkFullStopKeyword_1_1_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0=null;
        InternalN4JSParser.ruleMemberExpression_return MemberExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2 = null;
        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_3_0_2 = null;
        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_1_1 = null;
        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1 = null;
        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_114);
            MemberExpressionParserRuleCall_0=ruleMemberExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt294=2;
            int LA294_0 = input.LA(1);
            if ( (LA294_0==QuestionMarkFullStop||LA294_0==LeftParenthesis) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    {
                    int alt290=2;
                    int LA290_0 = input.LA(1);
                    if ( (LA290_0==QuestionMarkFullStop) ) {
                        alt290=1;
                    }
                    switch (alt290) {
                        case 1 :
                            {
                            {
                            OptionalChainingQuestionMarkFullStopKeyword_1_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_112); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(OptionalChainingQuestionMarkFullStopKeyword_1_1_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_1_0());
                            }
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_115);
                    ArgumentsWithParenthesesParserRuleCall_1_2=ruleArgumentsWithParentheses();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2()); 
                    }
                    loop293:
                    do {
                        int alt293=5;
                        int LA293_0 = input.LA(1);
                        if ( (LA293_0==QuestionMarkFullStop) ) {
                            int LA293_2 = input.LA(2);
                            if ( ((LA293_2>=Intersection && LA293_2<=With)||(LA293_2>=For && LA293_2<=Var)||(LA293_2>=As && LA293_2<=Of)||LA293_2==LessThanSign||LA293_2==RULE_IDENTIFIER) ) {
                                alt293=3;
                            }
                            else if ( (LA293_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred172_InternalN4JSParser())) {
                                alt293=4;
                            }
                            else if ( (LA293_2==RULE_TEMPLATE_HEAD) && (synpred172_InternalN4JSParser())) {
                                alt293=4;
                            }
                            else if ( (LA293_2==LeftParenthesis) ) {
                                alt293=1;
                            }
                            else if ( (LA293_2==LeftSquareBracket) ) {
                                alt293=2;
                            }
                        }
                        else if ( (LA293_0==LeftParenthesis) ) {
                            alt293=1;
                        }
                        else if ( (LA293_0==LeftSquareBracket) ) {
                            alt293=2;
                        }
                        else if ( (LA293_0==FullStop) ) {
                            alt293=3;
                        }
                        else if ( (LA293_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred172_InternalN4JSParser())) {
                            alt293=4;
                        }
                        else if ( (LA293_0==RULE_TEMPLATE_HEAD) && (synpred172_InternalN4JSParser())) {
                            alt293=4;
                        }
                        switch (alt293) {
                    	case 1 :
                    	    {
                    	    {
                    	    int alt291=2;
                    	    int LA291_0 = input.LA(1);
                    	    if ( (LA291_0==QuestionMarkFullStop) ) {
                    	        alt291=1;
                    	    }
                    	    switch (alt291) {
                    	        case 1 :
                    	            {
                    	            {
                    	            OptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_112); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              							announce(OptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    ArgumentsWithParenthesesParserRuleCall_1_3_0_2=ruleArgumentsWithParentheses();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_3_0_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_3_0_2.start):null), (ArgumentsWithParenthesesParserRuleCall_1_3_0_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_3_0_2.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_3_0_2()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_115);
                    	    IndexedAccessExpressionTailParserRuleCall_1_3_1_1=ruleIndexedAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_1_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_115);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1=ruleParameterizedPropertyAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    int alt292=2;
                    	    int LA292_0 = input.LA(1);
                    	    if ( (LA292_0==QuestionMarkFullStop) ) {
                    	        alt292=1;
                    	    }
                    	    switch (alt292) {
                    	        case 1 :
                    	            {
                    	            {
                    	            OptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              								announce(OptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_115);
                    	    TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0=ruleTemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      								announce((TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_3_3_0_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop293;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_LeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LeftHandSideExpression_return norm1_LeftHandSideExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LeftHandSideExpression_return retval = new InternalN4JSParser.norm1_LeftHandSideExpression_return();
        retval.start = input.LT(1);
        Token OptionalChainingQuestionMarkFullStopKeyword_1_1_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0=null;
        InternalN4JSParser.norm1_MemberExpression_return MemberExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2 = null;
        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_3_0_2 = null;
        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_1_1 = null;
        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1 = null;
        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_114);
            MemberExpressionParserRuleCall_0=norm1_MemberExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt299=2;
            int LA299_0 = input.LA(1);
            if ( (LA299_0==QuestionMarkFullStop||LA299_0==LeftParenthesis) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    {
                    int alt295=2;
                    int LA295_0 = input.LA(1);
                    if ( (LA295_0==QuestionMarkFullStop) ) {
                        alt295=1;
                    }
                    switch (alt295) {
                        case 1 :
                            {
                            {
                            OptionalChainingQuestionMarkFullStopKeyword_1_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_112); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(OptionalChainingQuestionMarkFullStopKeyword_1_1_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_1_0());
                            }
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_115);
                    ArgumentsWithParenthesesParserRuleCall_1_2=norm1_ArgumentsWithParentheses();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2()); 
                    }
                    loop298:
                    do {
                        int alt298=5;
                        int LA298_0 = input.LA(1);
                        if ( (LA298_0==QuestionMarkFullStop) ) {
                            int LA298_2 = input.LA(2);
                            if ( ((LA298_2>=Intersection && LA298_2<=With)||(LA298_2>=For && LA298_2<=Var)||(LA298_2>=As && LA298_2<=Of)||LA298_2==LessThanSign||LA298_2==RULE_IDENTIFIER) ) {
                                alt298=3;
                            }
                            else if ( (LA298_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred173_InternalN4JSParser())) {
                                alt298=4;
                            }
                            else if ( (LA298_2==RULE_TEMPLATE_HEAD) && (synpred173_InternalN4JSParser())) {
                                alt298=4;
                            }
                            else if ( (LA298_2==LeftParenthesis) ) {
                                alt298=1;
                            }
                            else if ( (LA298_2==LeftSquareBracket) ) {
                                alt298=2;
                            }
                        }
                        else if ( (LA298_0==LeftParenthesis) ) {
                            alt298=1;
                        }
                        else if ( (LA298_0==LeftSquareBracket) ) {
                            alt298=2;
                        }
                        else if ( (LA298_0==FullStop) ) {
                            alt298=3;
                        }
                        else if ( (LA298_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred173_InternalN4JSParser())) {
                            alt298=4;
                        }
                        else if ( (LA298_0==RULE_TEMPLATE_HEAD) && (synpred173_InternalN4JSParser())) {
                            alt298=4;
                        }
                        switch (alt298) {
                    	case 1 :
                    	    {
                    	    {
                    	    int alt296=2;
                    	    int LA296_0 = input.LA(1);
                    	    if ( (LA296_0==QuestionMarkFullStop) ) {
                    	        alt296=1;
                    	    }
                    	    switch (alt296) {
                    	        case 1 :
                    	            {
                    	            {
                    	            OptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_112); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              							announce(OptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    ArgumentsWithParenthesesParserRuleCall_1_3_0_2=norm1_ArgumentsWithParentheses();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_3_0_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_3_0_2.start):null), (ArgumentsWithParenthesesParserRuleCall_1_3_0_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_3_0_2.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_3_0_2()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_115);
                    	    IndexedAccessExpressionTailParserRuleCall_1_3_1_1=norm1_IndexedAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_1_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_115);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1=norm1_ParameterizedPropertyAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    int alt297=2;
                    	    int LA297_0 = input.LA(1);
                    	    if ( (LA297_0==QuestionMarkFullStop) ) {
                    	        alt297=1;
                    	    }
                    	    switch (alt297) {
                    	        case 1 :
                    	            {
                    	            {
                    	            OptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              								announce(OptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_115);
                    	    TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0=norm1_TemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      								announce((TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_3_3_0_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop298;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArgumentsWithParentheses_return ruleArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSParser.ruleArgumentsWithParentheses_return retval = new InternalN4JSParser.ruleArgumentsWithParentheses_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.ruleArguments_return ArgumentsParserRuleCall_1 = null;
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_117); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
            }
            int alt300=2;
            int LA300_0 = input.LA(1);
            if ( ((LA300_0>=Intersection && LA300_0<=Implements)||(LA300_0>=Promisify && LA300_0<=Abstract)||(LA300_0>=External && LA300_0<=Function)||(LA300_0>=Private && LA300_0<=Delete)||(LA300_0>=Import && LA300_0<=Public)||LA300_0==Static||(LA300_0>=Target && LA300_0<=Await)||LA300_0==Class||(LA300_0>=False && LA300_0<=Super)||LA300_0==Union||(LA300_0>=Yield && LA300_0<=This)||(LA300_0>=From && LA300_0<=Void)||LA300_0==FullStopFullStopFullStop||(LA300_0>=Get && LA300_0<=Set)||LA300_0==PlusSignPlusSign||(LA300_0>=HyphenMinusHyphenMinus && LA300_0<=SolidusEqualsSign)||LA300_0==As||LA300_0==Of||LA300_0==ExclamationMark||LA300_0==LeftParenthesis||LA300_0==PlusSign||LA300_0==HyphenMinus||LA300_0==Solidus||LA300_0==LessThanSign||(LA300_0>=CommercialAt && LA300_0<=LeftSquareBracket)||LA300_0==LeftCurlyBracket||LA300_0==Tilde||LA300_0==RULE_DOUBLE||(LA300_0>=RULE_HEX_INT && LA300_0<=RULE_LEGACY_OCTAL_INT)||LA300_0==RULE_SCIENTIFIC_INT||LA300_0==RULE_IDENTIFIER||LA300_0==RULE_STRING||(LA300_0>=RULE_TEMPLATE_HEAD && LA300_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA300_0==RULE_INT) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    {
                    pushFollow(FOLLOW_71);
                    ArgumentsParserRuleCall_1=ruleArguments();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArgumentsWithParentheses_return norm1_ArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSParser.norm1_ArgumentsWithParentheses_return retval = new InternalN4JSParser.norm1_ArgumentsWithParentheses_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_Arguments_return ArgumentsParserRuleCall_1 = null;
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_118); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
            }
            int alt301=2;
            int LA301_0 = input.LA(1);
            if ( ((LA301_0>=Intersection && LA301_0<=Implements)||(LA301_0>=Promisify && LA301_0<=Abstract)||(LA301_0>=External && LA301_0<=Function)||(LA301_0>=Private && LA301_0<=Delete)||(LA301_0>=Import && LA301_0<=Public)||LA301_0==Static||(LA301_0>=Target && LA301_0<=Await)||LA301_0==Class||(LA301_0>=False && LA301_0<=Super)||LA301_0==Union||(LA301_0>=Yield && LA301_0<=This)||(LA301_0>=From && LA301_0<=Void)||LA301_0==FullStopFullStopFullStop||(LA301_0>=Get && LA301_0<=Set)||LA301_0==PlusSignPlusSign||(LA301_0>=HyphenMinusHyphenMinus && LA301_0<=SolidusEqualsSign)||LA301_0==As||LA301_0==Of||LA301_0==ExclamationMark||LA301_0==LeftParenthesis||LA301_0==PlusSign||LA301_0==HyphenMinus||LA301_0==Solidus||LA301_0==LessThanSign||(LA301_0>=CommercialAt && LA301_0<=LeftSquareBracket)||LA301_0==LeftCurlyBracket||LA301_0==Tilde||LA301_0==RULE_DOUBLE||(LA301_0>=RULE_HEX_INT && LA301_0<=RULE_LEGACY_OCTAL_INT)||LA301_0==RULE_SCIENTIFIC_INT||LA301_0==RULE_IDENTIFIER||LA301_0==RULE_STRING||(LA301_0>=RULE_TEMPLATE_HEAD && LA301_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA301_0==RULE_INT) ) {
                alt301=1;
            }
            switch (alt301) {
                case 1 :
                    {
                    pushFollow(FOLLOW_71);
                    ArgumentsParserRuleCall_1=norm1_Arguments();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArguments_return ruleArguments() throws RecognitionException {
        InternalN4JSParser.ruleArguments_return retval = new InternalN4JSParser.ruleArguments_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_0=null;
        InternalN4JSParser.ruleArgument_return ArgumentsArgumentParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleArgument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_30);
            ArgumentsArgumentParserRuleCall_0_0=ruleArgument();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0());
            }
            }
            }
            loop302:
            do {
                int alt302=2;
                int LA302_0 = input.LA(1);
                if ( (LA302_0==Comma) ) {
                    alt302=1;
                }
                switch (alt302) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_119); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_30);
            	    ArgumentsArgumentParserRuleCall_1_1_0=ruleArgument();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop302;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_Arguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Arguments_return norm1_Arguments() throws RecognitionException {
        InternalN4JSParser.norm1_Arguments_return retval = new InternalN4JSParser.norm1_Arguments_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_0=null;
        InternalN4JSParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_30);
            ArgumentsArgumentParserRuleCall_0_0=norm1_Argument();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0());
            }
            }
            }
            loop303:
            do {
                int alt303=2;
                int LA303_0 = input.LA(1);
                if ( (LA303_0==Comma) ) {
                    alt303=1;
                }
                switch (alt303) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_120); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_30);
            	    ArgumentsArgumentParserRuleCall_1_1_0=norm1_Argument();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop303;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArgument();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArgument_return ruleArgument() throws RecognitionException {
        InternalN4JSParser.ruleArgument_return retval = new InternalN4JSParser.ruleArgument_return();
        retval.start = input.LT(1);
        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            int alt304=2;
            int LA304_0 = input.LA(1);
            if ( (LA304_0==FullStopFullStopFullStop) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_Argument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Argument_return norm1_Argument() throws RecognitionException {
        InternalN4JSParser.norm1_Argument_return retval = new InternalN4JSParser.norm1_Argument_return();
        retval.start = input.LT(1);
        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            int alt305=2;
            int LA305_0 = input.LA(1);
            if ( (LA305_0==FullStopFullStopFullStop) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleMemberExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMemberExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleMemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMemberExpression_return ruleMemberExpression() throws RecognitionException {
        InternalN4JSParser.ruleMemberExpression_return retval = new InternalN4JSParser.ruleMemberExpression_return();
        retval.start = input.LT(1);
        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0=null;
        InternalN4JSParser.ruleMemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;
        InternalN4JSParser.ruleConcreteTypeArguments_return ConcreteTypeArgumentsParserRuleCall_1_2 = null;
        InternalN4JSParser.ruleArguments_return ArgumentsParserRuleCall_1_3_1 = null;
        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;
        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;
        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0 = null;
        InternalN4JSParser.rulePrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;
        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;
        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_2_0 = null;
        try {
            {
            int alt313=3;
            alt313 = dfa313.predict(input);
            switch (alt313) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_122); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                    }
                    }
                    }
                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_123);
                    CalleeMemberExpressionParserRuleCall_1_1_0=ruleMemberExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1());
                    }
                    }
                    }
                    int alt306=2;
                    int LA306_0 = input.LA(1);
                    if ( (LA306_0==LessThanSign) ) {
                        int LA306_1 = input.LA(2);
                        if ( (synpred176_InternalN4JSParser()) ) {
                            alt306=1;
                        }
                    }
                    switch (alt306) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_124);
                            ConcreteTypeArgumentsParserRuleCall_1_2=ruleConcreteTypeArguments();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ConcreteTypeArgumentsParserRuleCall_1_2!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1_2.start):null), (ConcreteTypeArgumentsParserRuleCall_1_2!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2()); 
                            }
                            }
                            break;
                    }
                    int alt310=2;
                    int LA310_0 = input.LA(1);
                    if ( (LA310_0==LeftParenthesis) ) {
                        int LA310_1 = input.LA(2);
                        if ( (synpred177_InternalN4JSParser()) ) {
                            alt310=1;
                        }
                    }
                    switch (alt310) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_117); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                            }
                            }
                            }
                            int alt307=2;
                            int LA307_0 = input.LA(1);
                            if ( ((LA307_0>=Intersection && LA307_0<=Implements)||(LA307_0>=Promisify && LA307_0<=Abstract)||(LA307_0>=External && LA307_0<=Function)||(LA307_0>=Private && LA307_0<=Delete)||(LA307_0>=Import && LA307_0<=Public)||LA307_0==Static||(LA307_0>=Target && LA307_0<=Await)||LA307_0==Class||(LA307_0>=False && LA307_0<=Super)||LA307_0==Union||(LA307_0>=Yield && LA307_0<=This)||(LA307_0>=From && LA307_0<=Void)||LA307_0==FullStopFullStopFullStop||(LA307_0>=Get && LA307_0<=Set)||LA307_0==PlusSignPlusSign||(LA307_0>=HyphenMinusHyphenMinus && LA307_0<=SolidusEqualsSign)||LA307_0==As||LA307_0==Of||LA307_0==ExclamationMark||LA307_0==LeftParenthesis||LA307_0==PlusSign||LA307_0==HyphenMinus||LA307_0==Solidus||LA307_0==LessThanSign||(LA307_0>=CommercialAt && LA307_0<=LeftSquareBracket)||LA307_0==LeftCurlyBracket||LA307_0==Tilde||LA307_0==RULE_DOUBLE||(LA307_0>=RULE_HEX_INT && LA307_0<=RULE_LEGACY_OCTAL_INT)||LA307_0==RULE_SCIENTIFIC_INT||LA307_0==RULE_IDENTIFIER||LA307_0==RULE_STRING||(LA307_0>=RULE_TEMPLATE_HEAD && LA307_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA307_0==RULE_INT) ) {
                                alt307=1;
                            }
                            switch (alt307) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_71);
                                    ArgumentsParserRuleCall_1_3_1=ruleArguments();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }
                                    }
                                    break;
                            }
                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_115); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                            }
                            loop309:
                            do {
                                int alt309=4;
                                switch ( input.LA(1) ) {
                                case QuestionMarkFullStop:
                                    {
                                    switch ( input.LA(2) ) {
                                    case RULE_TEMPLATE_HEAD:
                                    case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                        {
                                        alt309=3;
                                        }
                                        break;
                                    case Intersection:
                                    case Constructor:
                                    case Implements:
                                    case Instanceof:
                                    case Promisify:
                                    case Interface:
                                    case Protected:
                                    case Abstract:
                                    case Continue:
                                    case Debugger:
                                    case External:
                                    case Function:
                                    case Default:
                                    case Extends:
                                    case Finally:
                                    case Private:
                                    case Project:
                                    case Delete:
                                    case Export:
                                    case Import:
                                    case Public:
                                    case Return:
                                    case Static:
                                    case Switch:
                                    case Target:
                                    case Typeof:
                                    case Async:
                                    case Await:
                                    case Break:
                                    case Catch:
                                    case Class:
                                    case Const:
                                    case False:
                                    case Super:
                                    case Throw:
                                    case Union:
                                    case While:
                                    case Yield:
                                    case This:
                                    case Case:
                                    case Else:
                                    case Enum:
                                    case From:
                                    case Null:
                                    case This_1:
                                    case True:
                                    case Type:
                                    case Void:
                                    case With:
                                    case For:
                                    case Get:
                                    case Let:
                                    case New:
                                    case Out:
                                    case Set:
                                    case Try:
                                    case Var:
                                    case As:
                                    case Do:
                                    case If:
                                    case In:
                                    case Of:
                                    case LessThanSign:
                                    case RULE_IDENTIFIER:
                                        {
                                        alt309=2;
                                        }
                                        break;
                                    case LeftSquareBracket:
                                        {
                                        alt309=1;
                                        }
                                        break;
                                    }
                                    }
                                    break;
                                case LeftSquareBracket:
                                    {
                                    alt309=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt309=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt309=3;
                                    }
                                    break;
                                }
                                switch (alt309) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_115);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=ruleIndexedAccessExpressionTail();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_115);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=ruleParameterizedPropertyAccessExpressionTail();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    int alt308=2;
                            	    int LA308_0 = input.LA(1);
                            	    if ( (LA308_0==QuestionMarkFullStop) ) {
                            	        alt308=1;
                            	    }
                            	    switch (alt308) {
                            	        case 1 :
                            	            {
                            	            {
                            	            OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) {
                            	              								announce(OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0());
                            	            }
                            	            }
                            	            }
                            	            break;
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_115);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0=ruleTemplateLiteral();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      								announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_2());
                            	    }
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop309;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_115);
                    PrimaryExpressionParserRuleCall_2_0=rulePrimaryExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop312:
                    do {
                        int alt312=4;
                        switch ( input.LA(1) ) {
                        case QuestionMarkFullStop:
                            {
                            switch ( input.LA(2) ) {
                            case RULE_TEMPLATE_HEAD:
                            case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                {
                                alt312=3;
                                }
                                break;
                            case Intersection:
                            case Constructor:
                            case Implements:
                            case Instanceof:
                            case Promisify:
                            case Interface:
                            case Protected:
                            case Abstract:
                            case Continue:
                            case Debugger:
                            case External:
                            case Function:
                            case Default:
                            case Extends:
                            case Finally:
                            case Private:
                            case Project:
                            case Delete:
                            case Export:
                            case Import:
                            case Public:
                            case Return:
                            case Static:
                            case Switch:
                            case Target:
                            case Typeof:
                            case Async:
                            case Await:
                            case Break:
                            case Catch:
                            case Class:
                            case Const:
                            case False:
                            case Super:
                            case Throw:
                            case Union:
                            case While:
                            case Yield:
                            case This:
                            case Case:
                            case Else:
                            case Enum:
                            case From:
                            case Null:
                            case This_1:
                            case True:
                            case Type:
                            case Void:
                            case With:
                            case For:
                            case Get:
                            case Let:
                            case New:
                            case Out:
                            case Set:
                            case Try:
                            case Var:
                            case As:
                            case Do:
                            case If:
                            case In:
                            case Of:
                            case LessThanSign:
                            case RULE_IDENTIFIER:
                                {
                                alt312=2;
                                }
                                break;
                            case LeftSquareBracket:
                                {
                                alt312=1;
                                }
                                break;
                            }
                            }
                            break;
                        case LeftSquareBracket:
                            {
                            alt312=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt312=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt312=3;
                            }
                            break;
                        }
                        switch (alt312) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_115);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=ruleIndexedAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_115);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=ruleParameterizedPropertyAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    int alt311=2;
                    	    int LA311_0 = input.LA(1);
                    	    if ( (LA311_0==QuestionMarkFullStop) ) {
                    	        alt311=1;
                    	    }
                    	    switch (alt311) {
                    	        case 1 :
                    	            {
                    	            {
                    	            OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              							announce(OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_115);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_2_0=ruleTemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((TemplateTemplateLiteralParserRuleCall_2_1_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_2_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop312;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_MemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MemberExpression_return norm1_MemberExpression() throws RecognitionException {
        InternalN4JSParser.norm1_MemberExpression_return retval = new InternalN4JSParser.norm1_MemberExpression_return();
        retval.start = input.LT(1);
        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0=null;
        InternalN4JSParser.norm1_MemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;
        InternalN4JSParser.ruleConcreteTypeArguments_return ConcreteTypeArgumentsParserRuleCall_1_2 = null;
        InternalN4JSParser.norm1_Arguments_return ArgumentsParserRuleCall_1_3_1 = null;
        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;
        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;
        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0 = null;
        InternalN4JSParser.norm1_PrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;
        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;
        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_2_0 = null;
        try {
            {
            int alt321=3;
            alt321 = dfa321.predict(input);
            switch (alt321) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_122); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                    }
                    }
                    }
                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_123);
                    CalleeMemberExpressionParserRuleCall_1_1_0=norm1_MemberExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1());
                    }
                    }
                    }
                    int alt314=2;
                    int LA314_0 = input.LA(1);
                    if ( (LA314_0==LessThanSign) ) {
                        int LA314_1 = input.LA(2);
                        if ( (synpred180_InternalN4JSParser()) ) {
                            alt314=1;
                        }
                    }
                    switch (alt314) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_124);
                            ConcreteTypeArgumentsParserRuleCall_1_2=ruleConcreteTypeArguments();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ConcreteTypeArgumentsParserRuleCall_1_2!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1_2.start):null), (ConcreteTypeArgumentsParserRuleCall_1_2!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2()); 
                            }
                            }
                            break;
                    }
                    int alt318=2;
                    int LA318_0 = input.LA(1);
                    if ( (LA318_0==LeftParenthesis) ) {
                        int LA318_1 = input.LA(2);
                        if ( (synpred181_InternalN4JSParser()) ) {
                            alt318=1;
                        }
                    }
                    switch (alt318) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_118); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                            }
                            }
                            }
                            int alt315=2;
                            int LA315_0 = input.LA(1);
                            if ( ((LA315_0>=Intersection && LA315_0<=Implements)||(LA315_0>=Promisify && LA315_0<=Abstract)||(LA315_0>=External && LA315_0<=Function)||(LA315_0>=Private && LA315_0<=Delete)||(LA315_0>=Import && LA315_0<=Public)||LA315_0==Static||(LA315_0>=Target && LA315_0<=Await)||LA315_0==Class||(LA315_0>=False && LA315_0<=Super)||LA315_0==Union||(LA315_0>=Yield && LA315_0<=This)||(LA315_0>=From && LA315_0<=Void)||LA315_0==FullStopFullStopFullStop||(LA315_0>=Get && LA315_0<=Set)||LA315_0==PlusSignPlusSign||(LA315_0>=HyphenMinusHyphenMinus && LA315_0<=SolidusEqualsSign)||LA315_0==As||LA315_0==Of||LA315_0==ExclamationMark||LA315_0==LeftParenthesis||LA315_0==PlusSign||LA315_0==HyphenMinus||LA315_0==Solidus||LA315_0==LessThanSign||(LA315_0>=CommercialAt && LA315_0<=LeftSquareBracket)||LA315_0==LeftCurlyBracket||LA315_0==Tilde||LA315_0==RULE_DOUBLE||(LA315_0>=RULE_HEX_INT && LA315_0<=RULE_LEGACY_OCTAL_INT)||LA315_0==RULE_SCIENTIFIC_INT||LA315_0==RULE_IDENTIFIER||LA315_0==RULE_STRING||(LA315_0>=RULE_TEMPLATE_HEAD && LA315_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA315_0==RULE_INT) ) {
                                alt315=1;
                            }
                            switch (alt315) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_71);
                                    ArgumentsParserRuleCall_1_3_1=norm1_Arguments();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }
                                    }
                                    break;
                            }
                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_115); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                            }
                            loop317:
                            do {
                                int alt317=4;
                                switch ( input.LA(1) ) {
                                case QuestionMarkFullStop:
                                    {
                                    switch ( input.LA(2) ) {
                                    case LeftSquareBracket:
                                        {
                                        alt317=1;
                                        }
                                        break;
                                    case Intersection:
                                    case Constructor:
                                    case Implements:
                                    case Instanceof:
                                    case Promisify:
                                    case Interface:
                                    case Protected:
                                    case Abstract:
                                    case Continue:
                                    case Debugger:
                                    case External:
                                    case Function:
                                    case Default:
                                    case Extends:
                                    case Finally:
                                    case Private:
                                    case Project:
                                    case Delete:
                                    case Export:
                                    case Import:
                                    case Public:
                                    case Return:
                                    case Static:
                                    case Switch:
                                    case Target:
                                    case Typeof:
                                    case Async:
                                    case Await:
                                    case Break:
                                    case Catch:
                                    case Class:
                                    case Const:
                                    case False:
                                    case Super:
                                    case Throw:
                                    case Union:
                                    case While:
                                    case Yield:
                                    case This:
                                    case Case:
                                    case Else:
                                    case Enum:
                                    case From:
                                    case Null:
                                    case This_1:
                                    case True:
                                    case Type:
                                    case Void:
                                    case With:
                                    case For:
                                    case Get:
                                    case Let:
                                    case New:
                                    case Out:
                                    case Set:
                                    case Try:
                                    case Var:
                                    case As:
                                    case Do:
                                    case If:
                                    case In:
                                    case Of:
                                    case LessThanSign:
                                    case RULE_IDENTIFIER:
                                        {
                                        alt317=2;
                                        }
                                        break;
                                    case RULE_TEMPLATE_HEAD:
                                    case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                        {
                                        alt317=3;
                                        }
                                        break;
                                    }
                                    }
                                    break;
                                case LeftSquareBracket:
                                    {
                                    alt317=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt317=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt317=3;
                                    }
                                    break;
                                }
                                switch (alt317) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_115);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=norm1_IndexedAccessExpressionTail();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_115);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=norm1_ParameterizedPropertyAccessExpressionTail();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    int alt316=2;
                            	    int LA316_0 = input.LA(1);
                            	    if ( (LA316_0==QuestionMarkFullStop) ) {
                            	        alt316=1;
                            	    }
                            	    switch (alt316) {
                            	        case 1 :
                            	            {
                            	            {
                            	            OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) {
                            	              								announce(OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0());
                            	            }
                            	            }
                            	            }
                            	            break;
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_115);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0=norm1_TemplateLiteral();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      								announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_2());
                            	    }
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop317;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_115);
                    PrimaryExpressionParserRuleCall_2_0=norm1_PrimaryExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop320:
                    do {
                        int alt320=4;
                        switch ( input.LA(1) ) {
                        case QuestionMarkFullStop:
                            {
                            switch ( input.LA(2) ) {
                            case LeftSquareBracket:
                                {
                                alt320=1;
                                }
                                break;
                            case Intersection:
                            case Constructor:
                            case Implements:
                            case Instanceof:
                            case Promisify:
                            case Interface:
                            case Protected:
                            case Abstract:
                            case Continue:
                            case Debugger:
                            case External:
                            case Function:
                            case Default:
                            case Extends:
                            case Finally:
                            case Private:
                            case Project:
                            case Delete:
                            case Export:
                            case Import:
                            case Public:
                            case Return:
                            case Static:
                            case Switch:
                            case Target:
                            case Typeof:
                            case Async:
                            case Await:
                            case Break:
                            case Catch:
                            case Class:
                            case Const:
                            case False:
                            case Super:
                            case Throw:
                            case Union:
                            case While:
                            case Yield:
                            case This:
                            case Case:
                            case Else:
                            case Enum:
                            case From:
                            case Null:
                            case This_1:
                            case True:
                            case Type:
                            case Void:
                            case With:
                            case For:
                            case Get:
                            case Let:
                            case New:
                            case Out:
                            case Set:
                            case Try:
                            case Var:
                            case As:
                            case Do:
                            case If:
                            case In:
                            case Of:
                            case LessThanSign:
                            case RULE_IDENTIFIER:
                                {
                                alt320=2;
                                }
                                break;
                            case RULE_TEMPLATE_HEAD:
                            case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                {
                                alt320=3;
                                }
                                break;
                            }
                            }
                            break;
                        case LeftSquareBracket:
                            {
                            alt320=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt320=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt320=3;
                            }
                            break;
                        }
                        switch (alt320) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_115);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=norm1_IndexedAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_115);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=norm1_ParameterizedPropertyAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    int alt319=2;
                    	    int LA319_0 = input.LA(1);
                    	    if ( (LA319_0==QuestionMarkFullStop) ) {
                    	        alt319=1;
                    	    }
                    	    switch (alt319) {
                    	        case 1 :
                    	            {
                    	            {
                    	            OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              							announce(OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_115);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_2_0=norm1_TemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((TemplateTemplateLiteralParserRuleCall_2_1_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_2_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop320;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleIndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIndexedAccessExpressionTail_return ruleIndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.ruleIndexedAccessExpressionTail_return retval = new InternalN4JSParser.ruleIndexedAccessExpressionTail_return();
        retval.start = input.LT(1);
        Token OptionalChainingQuestionMarkFullStopKeyword_0_0=null;
        Token LeftSquareBracketKeyword_1=null;
        Token RightSquareBracketKeyword_3=null;
        InternalN4JSParser.norm1_Expression_return IndexExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            int alt322=2;
            int LA322_0 = input.LA(1);
            if ( (LA322_0==QuestionMarkFullStop) ) {
                alt322=1;
            }
            switch (alt322) {
                case 1 :
                    {
                    {
                    OptionalChainingQuestionMarkFullStopKeyword_0_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalChainingQuestionMarkFullStopKeyword_0_0, grammarAccess.getIndexedAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftSquareBracketKeyword_1, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_126);
            IndexExpressionParserRuleCall_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((IndexExpressionParserRuleCall_2_0!=null?((Token)IndexExpressionParserRuleCall_2_0.start):null), (IndexExpressionParserRuleCall_2_0!=null?((Token)IndexExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_2());
            }
            }
            }
            RightSquareBracketKeyword_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_3, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_IndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IndexedAccessExpressionTail_return norm1_IndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return retval = new InternalN4JSParser.norm1_IndexedAccessExpressionTail_return();
        retval.start = input.LT(1);
        Token OptionalChainingQuestionMarkFullStopKeyword_0_0=null;
        Token LeftSquareBracketKeyword_1=null;
        Token RightSquareBracketKeyword_3=null;
        InternalN4JSParser.norm3_Expression_return IndexExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            int alt323=2;
            int LA323_0 = input.LA(1);
            if ( (LA323_0==QuestionMarkFullStop) ) {
                alt323=1;
            }
            switch (alt323) {
                case 1 :
                    {
                    {
                    OptionalChainingQuestionMarkFullStopKeyword_0_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalChainingQuestionMarkFullStopKeyword_0_0, grammarAccess.getIndexedAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftSquareBracketKeyword_1, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_126);
            IndexExpressionParserRuleCall_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((IndexExpressionParserRuleCall_2_0!=null?((Token)IndexExpressionParserRuleCall_2_0.start):null), (IndexExpressionParserRuleCall_2_0!=null?((Token)IndexExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_2());
            }
            }
            }
            RightSquareBracketKeyword_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_3, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ruleParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);
        Token FullStopKeyword_0_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_0_1_0=null;
        InternalN4JSParser.ruleConcreteTypeArguments_return ConcreteTypeArgumentsParserRuleCall_1 = null;
        InternalN4JSParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;
        try {
            {
            {
            int alt324=2;
            int LA324_0 = input.LA(1);
            if ( (LA324_0==FullStop) ) {
                alt324=1;
            }
            else if ( (LA324_0==QuestionMarkFullStop) ) {
                alt324=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 324, 0, input);
                throw nvae;
            }
            switch (alt324) {
                case 1 :
                    {
                    FullStopKeyword_0_0=(Token)match(input,FullStop,FOLLOW_127); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(FullStopKeyword_0_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    OptionalChainingQuestionMarkFullStopKeyword_0_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_127); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(OptionalChainingQuestionMarkFullStopKeyword_0_1_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_1_0());
                    }
                    }
                    }
                    }
                    break;
            }
            int alt325=2;
            int LA325_0 = input.LA(1);
            if ( (LA325_0==LessThanSign) ) {
                alt325=1;
            }
            switch (alt325) {
                case 1 :
                    {
                    pushFollow(FOLLOW_14);
                    ConcreteTypeArgumentsParserRuleCall_1=ruleConcreteTypeArguments();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConcreteTypeArgumentsParserRuleCall_1!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1.start):null), (ConcreteTypeArgumentsParserRuleCall_1!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return norm1_ParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);
        Token FullStopKeyword_0_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_0_1_0=null;
        InternalN4JSParser.ruleConcreteTypeArguments_return ConcreteTypeArgumentsParserRuleCall_1 = null;
        InternalN4JSParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;
        try {
            {
            {
            int alt326=2;
            int LA326_0 = input.LA(1);
            if ( (LA326_0==FullStop) ) {
                alt326=1;
            }
            else if ( (LA326_0==QuestionMarkFullStop) ) {
                alt326=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 326, 0, input);
                throw nvae;
            }
            switch (alt326) {
                case 1 :
                    {
                    FullStopKeyword_0_0=(Token)match(input,FullStop,FOLLOW_127); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(FullStopKeyword_0_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    OptionalChainingQuestionMarkFullStopKeyword_0_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_127); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(OptionalChainingQuestionMarkFullStopKeyword_0_1_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_1_0());
                    }
                    }
                    }
                    }
                    break;
            }
            int alt327=2;
            int LA327_0 = input.LA(1);
            if ( (LA327_0==LessThanSign) ) {
                alt327=1;
            }
            switch (alt327) {
                case 1 :
                    {
                    pushFollow(FOLLOW_14);
                    ConcreteTypeArgumentsParserRuleCall_1=ruleConcreteTypeArguments();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConcreteTypeArgumentsParserRuleCall_1!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1.start):null), (ConcreteTypeArgumentsParserRuleCall_1!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePostfixExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePostfixExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePostfixExpression_return rulePostfixExpression() throws RecognitionException {
        InternalN4JSParser.rulePostfixExpression_return retval = new InternalN4JSParser.rulePostfixExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleLeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LeftHandSideExpressionParserRuleCall_0=ruleLeftHandSideExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
            }
            int alt328=2;
            int LA328_0 = input.LA(1);
            if ( (LA328_0==PlusSignPlusSign) && (synpred182_InternalN4JSParser())) {
                alt328=1;
            }
            else if ( (LA328_0==HyphenMinusHyphenMinus) && (synpred182_InternalN4JSParser())) {
                alt328=1;
            }
            switch (alt328) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PostfixExpression_return norm1_PostfixExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PostfixExpression_return retval = new InternalN4JSParser.norm1_PostfixExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_LeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LeftHandSideExpressionParserRuleCall_0=norm1_LeftHandSideExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
            }
            int alt329=2;
            int LA329_0 = input.LA(1);
            if ( (LA329_0==PlusSignPlusSign) && (synpred183_InternalN4JSParser())) {
                alt329=1;
            }
            else if ( (LA329_0==HyphenMinusHyphenMinus) && (synpred183_InternalN4JSParser())) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCastExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCastExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleCastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCastExpression_return ruleCastExpression() throws RecognitionException {
        InternalN4JSParser.ruleCastExpression_return retval = new InternalN4JSParser.ruleCastExpression_return();
        retval.start = input.LT(1);
        Token AsKeyword_1_0_0_1=null;
        InternalN4JSParser.rulePostfixExpression_return PostfixExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleArrayTypeExpression_return TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_24);
            PostfixExpressionParserRuleCall_0=rulePostfixExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt330=2;
            int LA330_0 = input.LA(1);
            if ( (LA330_0==As) && (synpred184_InternalN4JSParser())) {
                alt330=1;
            }
            switch (alt330) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0=ruleArrayTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0!=null?((Token)TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0.start):null), (TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0!=null?((Token)TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_CastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CastExpression_return norm1_CastExpression() throws RecognitionException {
        InternalN4JSParser.norm1_CastExpression_return retval = new InternalN4JSParser.norm1_CastExpression_return();
        retval.start = input.LT(1);
        Token AsKeyword_1_0_0_1=null;
        InternalN4JSParser.norm1_PostfixExpression_return PostfixExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleArrayTypeExpression_return TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_24);
            PostfixExpressionParserRuleCall_0=norm1_PostfixExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt331=2;
            int LA331_0 = input.LA(1);
            if ( (LA331_0==As) && (synpred185_InternalN4JSParser())) {
                alt331=1;
            }
            switch (alt331) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0=ruleArrayTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0!=null?((Token)TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0.start):null), (TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0!=null?((Token)TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleUnaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnaryExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleUnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUnaryExpression_return ruleUnaryExpression() throws RecognitionException {
        InternalN4JSParser.ruleUnaryExpression_return retval = new InternalN4JSParser.ruleUnaryExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleCastExpression_return CastExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleUnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;
        try {
            {
            int alt332=2;
            int LA332_0 = input.LA(1);
            if ( ((LA332_0>=Intersection && LA332_0<=Implements)||(LA332_0>=Promisify && LA332_0<=Abstract)||(LA332_0>=External && LA332_0<=Function)||(LA332_0>=Private && LA332_0<=Project)||(LA332_0>=Import && LA332_0<=Public)||LA332_0==Static||LA332_0==Target||(LA332_0>=Async && LA332_0<=Await)||LA332_0==Class||(LA332_0>=False && LA332_0<=Super)||LA332_0==Union||(LA332_0>=Yield && LA332_0<=This)||(LA332_0>=From && LA332_0<=Type)||(LA332_0>=Get && LA332_0<=Set)||LA332_0==SolidusEqualsSign||LA332_0==As||LA332_0==Of||LA332_0==LeftParenthesis||LA332_0==Solidus||LA332_0==LessThanSign||(LA332_0>=CommercialAt && LA332_0<=LeftSquareBracket)||LA332_0==LeftCurlyBracket||LA332_0==RULE_DOUBLE||(LA332_0>=RULE_HEX_INT && LA332_0<=RULE_LEGACY_OCTAL_INT)||LA332_0==RULE_SCIENTIFIC_INT||LA332_0==RULE_IDENTIFIER||LA332_0==RULE_STRING||(LA332_0>=RULE_TEMPLATE_HEAD && LA332_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA332_0==RULE_INT) ) {
                alt332=1;
            }
            else if ( (LA332_0==Delete||LA332_0==Typeof||LA332_0==Void||LA332_0==PlusSignPlusSign||LA332_0==HyphenMinusHyphenMinus||LA332_0==ExclamationMark||LA332_0==PlusSign||LA332_0==HyphenMinus||LA332_0==Tilde) ) {
                alt332=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 332, 0, input);
                throw nvae;
            }
            switch (alt332) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=ruleCastExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_49);
                    ruleUnaryOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=ruleUnaryExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_UnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_UnaryExpression_return norm1_UnaryExpression() throws RecognitionException {
        InternalN4JSParser.norm1_UnaryExpression_return retval = new InternalN4JSParser.norm1_UnaryExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_CastExpression_return CastExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_UnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;
        try {
            {
            int alt333=2;
            int LA333_0 = input.LA(1);
            if ( ((LA333_0>=Intersection && LA333_0<=Implements)||(LA333_0>=Promisify && LA333_0<=Abstract)||(LA333_0>=External && LA333_0<=Function)||(LA333_0>=Private && LA333_0<=Project)||(LA333_0>=Import && LA333_0<=Public)||LA333_0==Static||LA333_0==Target||(LA333_0>=Async && LA333_0<=Await)||LA333_0==Class||(LA333_0>=False && LA333_0<=Super)||LA333_0==Union||LA333_0==This||(LA333_0>=From && LA333_0<=Type)||(LA333_0>=Get && LA333_0<=Set)||LA333_0==SolidusEqualsSign||LA333_0==As||LA333_0==Of||LA333_0==LeftParenthesis||LA333_0==Solidus||LA333_0==LessThanSign||(LA333_0>=CommercialAt && LA333_0<=LeftSquareBracket)||LA333_0==LeftCurlyBracket||LA333_0==RULE_DOUBLE||(LA333_0>=RULE_HEX_INT && LA333_0<=RULE_LEGACY_OCTAL_INT)||LA333_0==RULE_SCIENTIFIC_INT||LA333_0==RULE_IDENTIFIER||LA333_0==RULE_STRING||(LA333_0>=RULE_TEMPLATE_HEAD && LA333_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA333_0==RULE_INT) ) {
                alt333=1;
            }
            else if ( (LA333_0==Delete||LA333_0==Typeof||LA333_0==Void||LA333_0==PlusSignPlusSign||LA333_0==HyphenMinusHyphenMinus||LA333_0==ExclamationMark||LA333_0==PlusSign||LA333_0==HyphenMinus||LA333_0==Tilde) ) {
                alt333=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 333, 0, input);
                throw nvae;
            }
            switch (alt333) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=norm1_CastExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_69);
                    ruleUnaryOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=norm1_UnaryExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleMultiplicativeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMultiplicativeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleMultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMultiplicativeExpression_return ruleMultiplicativeExpression() throws RecognitionException {
        InternalN4JSParser.ruleMultiplicativeExpression_return retval = new InternalN4JSParser.ruleMultiplicativeExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleUnaryExpression_return UnaryExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleUnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_129);
            UnaryExpressionParserRuleCall_0=ruleUnaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop334:
            do {
                int alt334=2;
                int LA334_0 = input.LA(1);
                if ( (LA334_0==Asterisk) && (synpred186_InternalN4JSParser())) {
                    alt334=1;
                }
                else if ( (LA334_0==Solidus) && (synpred186_InternalN4JSParser())) {
                    alt334=1;
                }
                else if ( (LA334_0==PercentSign) && (synpred186_InternalN4JSParser())) {
                    alt334=1;
                }
                switch (alt334) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    ruleMultiplicativeOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_129);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=ruleUnaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop334;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_MultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MultiplicativeExpression_return norm1_MultiplicativeExpression() throws RecognitionException {
        InternalN4JSParser.norm1_MultiplicativeExpression_return retval = new InternalN4JSParser.norm1_MultiplicativeExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_UnaryExpression_return UnaryExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_UnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_129);
            UnaryExpressionParserRuleCall_0=norm1_UnaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop335:
            do {
                int alt335=2;
                int LA335_0 = input.LA(1);
                if ( (LA335_0==Asterisk) && (synpred187_InternalN4JSParser())) {
                    alt335=1;
                }
                else if ( (LA335_0==Solidus) && (synpred187_InternalN4JSParser())) {
                    alt335=1;
                }
                else if ( (LA335_0==PercentSign) && (synpred187_InternalN4JSParser())) {
                    alt335=1;
                }
                switch (alt335) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    ruleMultiplicativeOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_129);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=norm1_UnaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop335;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAdditiveExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAdditiveExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAdditiveExpression_return ruleAdditiveExpression() throws RecognitionException {
        InternalN4JSParser.ruleAdditiveExpression_return retval = new InternalN4JSParser.ruleAdditiveExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleMultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleMultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_130);
            MultiplicativeExpressionParserRuleCall_0=ruleMultiplicativeExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop336:
            do {
                int alt336=2;
                alt336 = dfa336.predict(input);
                switch (alt336) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    ruleAdditiveOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_130);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=ruleMultiplicativeExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop336;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AdditiveExpression_return norm1_AdditiveExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AdditiveExpression_return retval = new InternalN4JSParser.norm1_AdditiveExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_MultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_MultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_130);
            MultiplicativeExpressionParserRuleCall_0=norm1_MultiplicativeExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop337:
            do {
                int alt337=2;
                alt337 = dfa337.predict(input);
                switch (alt337) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    ruleAdditiveOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_130);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=norm1_MultiplicativeExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop337;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleShiftExpression_return ruleShiftExpression() throws RecognitionException {
        InternalN4JSParser.ruleShiftExpression_return retval = new InternalN4JSParser.ruleShiftExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleAdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_131);
            AdditiveExpressionParserRuleCall_0=ruleAdditiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop338:
            do {
                int alt338=2;
                alt338 = dfa338.predict(input);
                switch (alt338) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_131);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=ruleAdditiveExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop338;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ShiftExpression_return norm1_ShiftExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ShiftExpression_return retval = new InternalN4JSParser.norm1_ShiftExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_AdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_131);
            AdditiveExpressionParserRuleCall_0=norm1_AdditiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop339:
            do {
                int alt339=2;
                alt339 = dfa339.predict(input);
                switch (alt339) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_131);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=norm1_AdditiveExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop339;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleShiftOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleShiftOperator_return ruleShiftOperator() throws RecognitionException {
        InternalN4JSParser.ruleShiftOperator_return retval = new InternalN4JSParser.ruleShiftOperator_return();
        retval.start = input.LT(1);
        Token GreaterThanSignKeyword_0_0=null;
        Token GreaterThanSignKeyword_0_1=null;
        Token GreaterThanSignKeyword_0_2=null;
        Token LessThanSignLessThanSignKeyword_1=null;
        try {
            {
            int alt341=2;
            int LA341_0 = input.LA(1);
            if ( (LA341_0==GreaterThanSign) ) {
                alt341=1;
            }
            else if ( (LA341_0==LessThanSignLessThanSign) ) {
                alt341=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 341, 0, input);
                throw nvae;
            }
            switch (alt341) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_0_0=(Token)match(input,GreaterThanSign,FOLLOW_132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_0_0, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0());
                    }
                    GreaterThanSignKeyword_0_1=(Token)match(input,GreaterThanSign,FOLLOW_133); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_0_1, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1());
                    }
                    int alt340=2;
                    int LA340_0 = input.LA(1);
                    if ( (LA340_0==GreaterThanSign) ) {
                        alt340=1;
                    }
                    switch (alt340) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_0_2=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(GreaterThanSignKeyword_0_2, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    LessThanSignLessThanSignKeyword_1=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(LessThanSignLessThanSignKeyword_1, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1());
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleRelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRelationalExpression_return ruleRelationalExpression() throws RecognitionException {
        InternalN4JSParser.ruleRelationalExpression_return retval = new InternalN4JSParser.ruleRelationalExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_134);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop342:
            do {
                int alt342=2;
                alt342 = dfa342.predict(input);
                switch (alt342) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_134);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop342;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RelationalExpression_return norm1_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm1_RelationalExpression_return retval = new InternalN4JSParser.norm1_RelationalExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_135);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop343:
            do {
                int alt343=2;
                alt343 = dfa343.predict(input);
                switch (alt343) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_135);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop343;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_RelationalExpression_return norm2_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm2_RelationalExpression_return retval = new InternalN4JSParser.norm2_RelationalExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_134);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop344:
            do {
                int alt344=2;
                alt344 = dfa344.predict(input);
                switch (alt344) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_134);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop344;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_RelationalExpression_return norm3_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm3_RelationalExpression_return retval = new InternalN4JSParser.norm3_RelationalExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_135);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop345:
            do {
                int alt345=2;
                alt345 = dfa345.predict(input);
                switch (alt345) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_135);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop345;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleRelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRelationalOperator_return ruleRelationalOperator() throws RecognitionException {
        InternalN4JSParser.ruleRelationalOperator_return retval = new InternalN4JSParser.ruleRelationalOperator_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1_0=null;
        Token EqualsSignKeyword_1_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token InstanceofKeyword_3=null;
        try {
            {
            int alt347=4;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt347=1;
                }
                break;
            case GreaterThanSign:
                {
                alt347=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt347=3;
                }
                break;
            case Instanceof:
                {
                alt347=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 347, 0, input);
                throw nvae;
            }
            switch (alt347) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    GreaterThanSignKeyword_1_0=(Token)match(input,GreaterThanSign,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_1_0, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1_0());
                    }
                    int alt346=2;
                    int LA346_0 = input.LA(1);
                    if ( (LA346_0==EqualsSign) ) {
                        alt346=1;
                    }
                    switch (alt346) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_1=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(EqualsSignKeyword_1_1, grammarAccess.getRelationalOperatorAccess().getEqualsSignKeyword_1_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    InstanceofKeyword_3=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(InstanceofKeyword_3, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_3());
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_RelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RelationalOperator_return norm1_RelationalOperator() throws RecognitionException {
        InternalN4JSParser.norm1_RelationalOperator_return retval = new InternalN4JSParser.norm1_RelationalOperator_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1_0=null;
        Token EqualsSignKeyword_1_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token InstanceofKeyword_3=null;
        Token InKeyword_4_0=null;
        try {
            {
            int alt349=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt349=1;
                }
                break;
            case GreaterThanSign:
                {
                alt349=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt349=3;
                }
                break;
            case Instanceof:
                {
                alt349=4;
                }
                break;
            case In:
                {
                alt349=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 349, 0, input);
                throw nvae;
            }
            switch (alt349) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    GreaterThanSignKeyword_1_0=(Token)match(input,GreaterThanSign,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_1_0, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1_0());
                    }
                    int alt348=2;
                    int LA348_0 = input.LA(1);
                    if ( (LA348_0==EqualsSign) ) {
                        alt348=1;
                    }
                    switch (alt348) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_1=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(EqualsSignKeyword_1_1, grammarAccess.getRelationalOperatorAccess().getEqualsSignKeyword_1_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    InstanceofKeyword_3=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(InstanceofKeyword_3, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    InKeyword_4_0=(Token)match(input,In,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(InKeyword_4_0, grammarAccess.getRelationalOperatorAccess().getInKeyword_4_0());
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleEqualityExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEqualityExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleEqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleEqualityExpression_return ruleEqualityExpression() throws RecognitionException {
        InternalN4JSParser.ruleEqualityExpression_return retval = new InternalN4JSParser.ruleEqualityExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleRelationalExpression_return RelationalExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleRelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_136);
            RelationalExpressionParserRuleCall_0=ruleRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop350:
            do {
                int alt350=2;
                int LA350_0 = input.LA(1);
                if ( (LA350_0==EqualsSignEqualsSignEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt350=1;
                }
                else if ( (LA350_0==ExclamationMarkEqualsSignEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt350=1;
                }
                else if ( (LA350_0==EqualsSignEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt350=1;
                }
                else if ( (LA350_0==ExclamationMarkEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt350=1;
                }
                switch (alt350) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_136);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=ruleRelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop350;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_EqualityExpression_return norm1_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm1_EqualityExpression_return retval = new InternalN4JSParser.norm1_EqualityExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_136);
            RelationalExpressionParserRuleCall_0=norm1_RelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop351:
            do {
                int alt351=2;
                int LA351_0 = input.LA(1);
                if ( (LA351_0==EqualsSignEqualsSignEqualsSign) && (synpred203_InternalN4JSParser())) {
                    alt351=1;
                }
                else if ( (LA351_0==ExclamationMarkEqualsSignEqualsSign) && (synpred203_InternalN4JSParser())) {
                    alt351=1;
                }
                else if ( (LA351_0==EqualsSignEqualsSign) && (synpred203_InternalN4JSParser())) {
                    alt351=1;
                }
                else if ( (LA351_0==ExclamationMarkEqualsSign) && (synpred203_InternalN4JSParser())) {
                    alt351=1;
                }
                switch (alt351) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_136);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm1_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop351;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_EqualityExpression_return norm2_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm2_EqualityExpression_return retval = new InternalN4JSParser.norm2_EqualityExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm2_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_136);
            RelationalExpressionParserRuleCall_0=norm2_RelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop352:
            do {
                int alt352=2;
                int LA352_0 = input.LA(1);
                if ( (LA352_0==EqualsSignEqualsSignEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt352=1;
                }
                else if ( (LA352_0==ExclamationMarkEqualsSignEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt352=1;
                }
                else if ( (LA352_0==EqualsSignEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt352=1;
                }
                else if ( (LA352_0==ExclamationMarkEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt352=1;
                }
                switch (alt352) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_136);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm2_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop352;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_EqualityExpression_return norm3_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm3_EqualityExpression_return retval = new InternalN4JSParser.norm3_EqualityExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm3_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_136);
            RelationalExpressionParserRuleCall_0=norm3_RelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop353:
            do {
                int alt353=2;
                int LA353_0 = input.LA(1);
                if ( (LA353_0==EqualsSignEqualsSignEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt353=1;
                }
                else if ( (LA353_0==ExclamationMarkEqualsSignEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt353=1;
                }
                else if ( (LA353_0==EqualsSignEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt353=1;
                }
                else if ( (LA353_0==ExclamationMarkEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt353=1;
                }
                switch (alt353) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_136);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm3_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop353;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseANDExpression_return ruleBitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseANDExpression_return retval = new InternalN4JSParser.ruleBitwiseANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleEqualityExpression_return EqualityExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.ruleEqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_137);
            EqualityExpressionParserRuleCall_0=ruleEqualityExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop354:
            do {
                int alt354=2;
                int LA354_0 = input.LA(1);
                if ( (LA354_0==Ampersand) && (synpred206_InternalN4JSParser())) {
                    alt354=1;
                }
                switch (alt354) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_137);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=ruleEqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop354;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseANDExpression_return norm1_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseANDExpression_return retval = new InternalN4JSParser.norm1_BitwiseANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_137);
            EqualityExpressionParserRuleCall_0=norm1_EqualityExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop355:
            do {
                int alt355=2;
                int LA355_0 = input.LA(1);
                if ( (LA355_0==Ampersand) && (synpred207_InternalN4JSParser())) {
                    alt355=1;
                }
                switch (alt355) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_137);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm1_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop355;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseANDExpression_return norm2_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseANDExpression_return retval = new InternalN4JSParser.norm2_BitwiseANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm2_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_137);
            EqualityExpressionParserRuleCall_0=norm2_EqualityExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop356:
            do {
                int alt356=2;
                int LA356_0 = input.LA(1);
                if ( (LA356_0==Ampersand) && (synpred208_InternalN4JSParser())) {
                    alt356=1;
                }
                switch (alt356) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_137);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm2_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop356;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseANDExpression_return norm3_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseANDExpression_return retval = new InternalN4JSParser.norm3_BitwiseANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_137);
            EqualityExpressionParserRuleCall_0=norm3_EqualityExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop357:
            do {
                int alt357=2;
                int LA357_0 = input.LA(1);
                if ( (LA357_0==Ampersand) && (synpred209_InternalN4JSParser())) {
                    alt357=1;
                }
                switch (alt357) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_137);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm3_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop357;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBitwiseANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseANDOperator_return ruleBitwiseANDOperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseANDOperator_return retval = new InternalN4JSParser.ruleBitwiseANDOperator_return();
        retval.start = input.LT(1);
        Token AmpersandKeyword=null;
        try {
            {
            AmpersandKeyword=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(AmpersandKeyword, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXORExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseXORExpression_return ruleBitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseXORExpression_return retval = new InternalN4JSParser.ruleBitwiseXORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.ruleBitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_138);
            BitwiseANDExpressionParserRuleCall_0=ruleBitwiseANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop358:
            do {
                int alt358=2;
                int LA358_0 = input.LA(1);
                if ( (LA358_0==CircumflexAccent) && (synpred210_InternalN4JSParser())) {
                    alt358=1;
                }
                switch (alt358) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_138);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=ruleBitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop358;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseXORExpression_return norm1_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseXORExpression_return retval = new InternalN4JSParser.norm1_BitwiseXORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_138);
            BitwiseANDExpressionParserRuleCall_0=norm1_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop359:
            do {
                int alt359=2;
                int LA359_0 = input.LA(1);
                if ( (LA359_0==CircumflexAccent) && (synpred211_InternalN4JSParser())) {
                    alt359=1;
                }
                switch (alt359) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_138);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm1_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop359;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseXORExpression_return norm2_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseXORExpression_return retval = new InternalN4JSParser.norm2_BitwiseXORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm2_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_138);
            BitwiseANDExpressionParserRuleCall_0=norm2_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop360:
            do {
                int alt360=2;
                int LA360_0 = input.LA(1);
                if ( (LA360_0==CircumflexAccent) && (synpred212_InternalN4JSParser())) {
                    alt360=1;
                }
                switch (alt360) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_138);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm2_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop360;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseXORExpression_return norm3_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseXORExpression_return retval = new InternalN4JSParser.norm3_BitwiseXORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_138);
            BitwiseANDExpressionParserRuleCall_0=norm3_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop361:
            do {
                int alt361=2;
                int LA361_0 = input.LA(1);
                if ( (LA361_0==CircumflexAccent) && (synpred213_InternalN4JSParser())) {
                    alt361=1;
                }
                switch (alt361) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_138);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm3_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop361;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXOROperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBitwiseXOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseXOROperator_return ruleBitwiseXOROperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseXOROperator_return retval = new InternalN4JSParser.ruleBitwiseXOROperator_return();
        retval.start = input.LT(1);
        Token CircumflexAccentKeyword=null;
        try {
            {
            CircumflexAccentKeyword=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(CircumflexAccentKeyword, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseORExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseORExpression_return ruleBitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseORExpression_return retval = new InternalN4JSParser.ruleBitwiseORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.ruleBitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_139);
            BitwiseXORExpressionParserRuleCall_0=ruleBitwiseXORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop362:
            do {
                int alt362=2;
                int LA362_0 = input.LA(1);
                if ( (LA362_0==VerticalLine) && (synpred214_InternalN4JSParser())) {
                    alt362=1;
                }
                switch (alt362) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_139);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=ruleBitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop362;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseORExpression_return norm1_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseORExpression_return retval = new InternalN4JSParser.norm1_BitwiseORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_139);
            BitwiseXORExpressionParserRuleCall_0=norm1_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);
                if ( (LA363_0==VerticalLine) && (synpred215_InternalN4JSParser())) {
                    alt363=1;
                }
                switch (alt363) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_139);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm1_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop363;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseORExpression_return norm2_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseORExpression_return retval = new InternalN4JSParser.norm2_BitwiseORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm2_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_139);
            BitwiseXORExpressionParserRuleCall_0=norm2_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);
                if ( (LA364_0==VerticalLine) && (synpred216_InternalN4JSParser())) {
                    alt364=1;
                }
                switch (alt364) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_139);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm2_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop364;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseORExpression_return norm3_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseORExpression_return retval = new InternalN4JSParser.norm3_BitwiseORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_139);
            BitwiseXORExpressionParserRuleCall_0=norm3_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);
                if ( (LA365_0==VerticalLine) && (synpred217_InternalN4JSParser())) {
                    alt365=1;
                }
                switch (alt365) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_139);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm3_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop365;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseOROperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBitwiseOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseOROperator_return ruleBitwiseOROperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseOROperator_return retval = new InternalN4JSParser.ruleBitwiseOROperator_return();
        retval.start = input.LT(1);
        Token VerticalLineKeyword=null;
        try {
            {
            VerticalLineKeyword=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(VerticalLineKeyword, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalANDExpression_return ruleLogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.ruleLogicalANDExpression_return retval = new InternalN4JSParser.ruleLogicalANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.ruleBitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_140);
            BitwiseORExpressionParserRuleCall_0=ruleBitwiseORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);
                if ( (LA366_0==AmpersandAmpersand) && (synpred218_InternalN4JSParser())) {
                    alt366=1;
                }
                switch (alt366) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_140);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=ruleBitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop366;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LogicalANDExpression_return norm1_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LogicalANDExpression_return retval = new InternalN4JSParser.norm1_LogicalANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_140);
            BitwiseORExpressionParserRuleCall_0=norm1_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);
                if ( (LA367_0==AmpersandAmpersand) && (synpred219_InternalN4JSParser())) {
                    alt367=1;
                }
                switch (alt367) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_140);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm1_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop367;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_LogicalANDExpression_return norm2_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm2_LogicalANDExpression_return retval = new InternalN4JSParser.norm2_LogicalANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm2_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_140);
            BitwiseORExpressionParserRuleCall_0=norm2_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop368:
            do {
                int alt368=2;
                int LA368_0 = input.LA(1);
                if ( (LA368_0==AmpersandAmpersand) && (synpred220_InternalN4JSParser())) {
                    alt368=1;
                }
                switch (alt368) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_140);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm2_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop368;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_LogicalANDExpression_return norm3_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm3_LogicalANDExpression_return retval = new InternalN4JSParser.norm3_LogicalANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_140);
            BitwiseORExpressionParserRuleCall_0=norm3_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop369:
            do {
                int alt369=2;
                int LA369_0 = input.LA(1);
                if ( (LA369_0==AmpersandAmpersand) && (synpred221_InternalN4JSParser())) {
                    alt369=1;
                }
                switch (alt369) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_140);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm3_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop369;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLogicalANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalANDOperator_return ruleLogicalANDOperator() throws RecognitionException {
        InternalN4JSParser.ruleLogicalANDOperator_return retval = new InternalN4JSParser.ruleLogicalANDOperator_return();
        retval.start = input.LT(1);
        Token AmpersandAmpersandKeyword=null;
        try {
            {
            AmpersandAmpersandKeyword=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(AmpersandAmpersandKeyword, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalORExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalORExpression_return ruleLogicalORExpression() throws RecognitionException {
        InternalN4JSParser.ruleLogicalORExpression_return retval = new InternalN4JSParser.ruleLogicalORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleLogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.ruleLogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_141);
            LogicalANDExpressionParserRuleCall_0=ruleLogicalANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop370:
            do {
                int alt370=2;
                int LA370_0 = input.LA(1);
                if ( (LA370_0==VerticalLineVerticalLine) && (synpred222_InternalN4JSParser())) {
                    alt370=1;
                }
                switch (alt370) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=ruleLogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop370;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LogicalORExpression_return norm1_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LogicalORExpression_return retval = new InternalN4JSParser.norm1_LogicalORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_141);
            LogicalANDExpressionParserRuleCall_0=norm1_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop371:
            do {
                int alt371=2;
                int LA371_0 = input.LA(1);
                if ( (LA371_0==VerticalLineVerticalLine) && (synpred223_InternalN4JSParser())) {
                    alt371=1;
                }
                switch (alt371) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_49);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm1_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop371;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_LogicalORExpression_return norm2_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_LogicalORExpression_return retval = new InternalN4JSParser.norm2_LogicalORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm2_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_141);
            LogicalANDExpressionParserRuleCall_0=norm2_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop372:
            do {
                int alt372=2;
                int LA372_0 = input.LA(1);
                if ( (LA372_0==VerticalLineVerticalLine) && (synpred224_InternalN4JSParser())) {
                    alt372=1;
                }
                switch (alt372) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm2_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop372;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_LogicalORExpression_return norm3_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_LogicalORExpression_return retval = new InternalN4JSParser.norm3_LogicalORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_141);
            LogicalANDExpressionParserRuleCall_0=norm3_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop373:
            do {
                int alt373=2;
                int LA373_0 = input.LA(1);
                if ( (LA373_0==VerticalLineVerticalLine) && (synpred225_InternalN4JSParser())) {
                    alt373=1;
                }
                switch (alt373) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_69);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm3_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop373;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalOROperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLogicalOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalOROperator_return ruleLogicalOROperator() throws RecognitionException {
        InternalN4JSParser.ruleLogicalOROperator_return retval = new InternalN4JSParser.ruleLogicalOROperator_return();
        retval.start = input.LT(1);
        Token VerticalLineVerticalLineKeyword=null;
        try {
            {
            VerticalLineVerticalLineKeyword=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(VerticalLineVerticalLineKeyword, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCoalesceExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCoalesceExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleCoalesceExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCoalesceExpression_return ruleCoalesceExpression() throws RecognitionException {
        InternalN4JSParser.ruleCoalesceExpression_return retval = new InternalN4JSParser.ruleCoalesceExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkQuestionMarkKeyword_1_0_0_1=null;
        InternalN4JSParser.ruleLogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalORExpression_return DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_142);
            LogicalORExpressionParserRuleCall_0=ruleLogicalORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            loop374:
            do {
                int alt374=2;
                int LA374_0 = input.LA(1);
                if ( (LA374_0==QuestionMarkQuestionMark) && (synpred226_InternalN4JSParser())) {
                    alt374=1;
                }
                switch (alt374) {
            	case 1 :
            	    {
            	    {
            	    {
            	    QuestionMarkQuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_49); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce(QuestionMarkQuestionMarkKeyword_1_0_0_1, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0=ruleLogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.start):null), (DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop374;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_CoalesceExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CoalesceExpression_return norm1_CoalesceExpression() throws RecognitionException {
        InternalN4JSParser.norm1_CoalesceExpression_return retval = new InternalN4JSParser.norm1_CoalesceExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkQuestionMarkKeyword_1_0_0_1=null;
        InternalN4JSParser.norm1_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_LogicalORExpression_return DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_142);
            LogicalORExpressionParserRuleCall_0=norm1_LogicalORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            loop375:
            do {
                int alt375=2;
                int LA375_0 = input.LA(1);
                if ( (LA375_0==QuestionMarkQuestionMark) && (synpred227_InternalN4JSParser())) {
                    alt375=1;
                }
                switch (alt375) {
            	case 1 :
            	    {
            	    {
            	    {
            	    QuestionMarkQuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_49); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce(QuestionMarkQuestionMarkKeyword_1_0_0_1, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0=norm1_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.start):null), (DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop375;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_CoalesceExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_CoalesceExpression_return norm2_CoalesceExpression() throws RecognitionException {
        InternalN4JSParser.norm2_CoalesceExpression_return retval = new InternalN4JSParser.norm2_CoalesceExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkQuestionMarkKeyword_1_0_0_1=null;
        InternalN4JSParser.norm2_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm2_LogicalORExpression_return DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_142);
            LogicalORExpressionParserRuleCall_0=norm2_LogicalORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            loop376:
            do {
                int alt376=2;
                int LA376_0 = input.LA(1);
                if ( (LA376_0==QuestionMarkQuestionMark) && (synpred228_InternalN4JSParser())) {
                    alt376=1;
                }
                switch (alt376) {
            	case 1 :
            	    {
            	    {
            	    {
            	    QuestionMarkQuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_69); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce(QuestionMarkQuestionMarkKeyword_1_0_0_1, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0=norm2_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.start):null), (DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop376;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_CoalesceExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_CoalesceExpression_return norm3_CoalesceExpression() throws RecognitionException {
        InternalN4JSParser.norm3_CoalesceExpression_return retval = new InternalN4JSParser.norm3_CoalesceExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkQuestionMarkKeyword_1_0_0_1=null;
        InternalN4JSParser.norm3_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm3_LogicalORExpression_return DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_142);
            LogicalORExpressionParserRuleCall_0=norm3_LogicalORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            loop377:
            do {
                int alt377=2;
                int LA377_0 = input.LA(1);
                if ( (LA377_0==QuestionMarkQuestionMark) && (synpred229_InternalN4JSParser())) {
                    alt377=1;
                }
                switch (alt377) {
            	case 1 :
            	    {
            	    {
            	    {
            	    QuestionMarkQuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_69); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce(QuestionMarkQuestionMarkKeyword_1_0_0_1, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0=norm3_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.start):null), (DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop377;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleConditionalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleConditionalExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleConditionalExpression_return ruleConditionalExpression() throws RecognitionException {
        InternalN4JSParser.ruleConditionalExpression_return retval = new InternalN4JSParser.ruleConditionalExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.ruleCoalesceExpression_return CoalesceExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_143);
            CoalesceExpressionParserRuleCall_0=ruleCoalesceExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.start):null), (CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0()); 
            }
            int alt378=2;
            int LA378_0 = input.LA(1);
            if ( (LA378_0==QuestionMark) && (synpred230_InternalN4JSParser())) {
                alt378=1;
            }
            switch (alt378) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                    }
                    }
                    }
                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ConditionalExpression_return norm1_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ConditionalExpression_return retval = new InternalN4JSParser.norm1_ConditionalExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm1_CoalesceExpression_return CoalesceExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_143);
            CoalesceExpressionParserRuleCall_0=norm1_CoalesceExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.start):null), (CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0()); 
            }
            int alt379=2;
            int LA379_0 = input.LA(1);
            if ( (LA379_0==QuestionMark) && (synpred231_InternalN4JSParser())) {
                alt379=1;
            }
            switch (alt379) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                    }
                    }
                    }
                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_ConditionalExpression_return norm2_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm2_ConditionalExpression_return retval = new InternalN4JSParser.norm2_ConditionalExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm2_CoalesceExpression_return CoalesceExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_143);
            CoalesceExpressionParserRuleCall_0=norm2_CoalesceExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.start):null), (CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0()); 
            }
            int alt380=2;
            int LA380_0 = input.LA(1);
            if ( (LA380_0==QuestionMark) && (synpred232_InternalN4JSParser())) {
                alt380=1;
            }
            switch (alt380) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                    }
                    }
                    }
                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_ConditionalExpression_return norm3_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm3_ConditionalExpression_return retval = new InternalN4JSParser.norm3_ConditionalExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm3_CoalesceExpression_return CoalesceExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_143);
            CoalesceExpressionParserRuleCall_0=norm3_CoalesceExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.start):null), (CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0()); 
            }
            int alt381=2;
            int LA381_0 = input.LA(1);
            if ( (LA381_0==QuestionMark) && (synpred233_InternalN4JSParser())) {
                alt381=1;
            }
            switch (alt381) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                    }
                    }
                    }
                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentExpression_return ruleAssignmentExpression() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentExpression_return retval = new InternalN4JSParser.ruleAssignmentExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAwaitExpression_return AwaitExpressionParserRuleCall_0 = null;
        InternalN4JSParser.rulePromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;
        InternalN4JSParser.ruleArrowExpression_return ArrowExpressionParserRuleCall_2 = null;
        InternalN4JSParser.ruleConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;
        try {
            {
            int alt383=4;
            alt383 = dfa383.predict(input);
            switch (alt383) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=ruleAwaitExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=rulePromisifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=ruleArrowExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_144);
                    ConditionalExpressionParserRuleCall_4_0=ruleConditionalExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt382=2;
                    alt382 = dfa382.predict(input);
                    switch (alt382) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_49);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=ruleAssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AssignmentExpression_return norm1_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AssignmentExpression_return retval = new InternalN4JSParser.norm1_AssignmentExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;
        InternalN4JSParser.norm1_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;
        InternalN4JSParser.norm1_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;
        try {
            {
            int alt385=4;
            alt385 = dfa385.predict(input);
            switch (alt385) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm1_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm1_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm1_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_144);
                    ConditionalExpressionParserRuleCall_4_0=norm1_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt384=2;
                    alt384 = dfa384.predict(input);
                    switch (alt384) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_49);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_AssignmentExpression_return norm2_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm2_AssignmentExpression_return retval = new InternalN4JSParser.norm2_AssignmentExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm2_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;
        InternalN4JSParser.norm2_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;
        InternalN4JSParser.ruleYieldExpression_return YieldExpressionParserRuleCall_3_0 = null;
        InternalN4JSParser.norm2_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;
        try {
            {
            int alt387=5;
            alt387 = dfa387.predict(input);
            switch (alt387) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm2_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm2_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm2_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=ruleYieldExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_144);
                    ConditionalExpressionParserRuleCall_4_0=norm2_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt386=2;
                    alt386 = dfa386.predict(input);
                    switch (alt386) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_69);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm2_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_AssignmentExpression_return norm3_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm3_AssignmentExpression_return retval = new InternalN4JSParser.norm3_AssignmentExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm3_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;
        InternalN4JSParser.norm3_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;
        InternalN4JSParser.norm1_YieldExpression_return YieldExpressionParserRuleCall_3_0 = null;
        InternalN4JSParser.norm3_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;
        try {
            {
            int alt389=5;
            alt389 = dfa389.predict(input);
            switch (alt389) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm3_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm3_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm3_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=norm1_YieldExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_144);
                    ConditionalExpressionParserRuleCall_4_0=norm3_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt388=2;
                    alt388 = dfa388.predict(input);
                    switch (alt388) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_69);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleYieldExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleYieldExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleYieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleYieldExpression_return ruleYieldExpression() throws RecognitionException {
        InternalN4JSParser.ruleYieldExpression_return retval = new InternalN4JSParser.ruleYieldExpression_return();
        retval.start = input.LT(1);
        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
            }
            int alt390=2;
            int LA390_0 = input.LA(1);
            if ( (LA390_0==Asterisk) && (synpred258_InternalN4JSParser())) {
                alt390=1;
            }
            switch (alt390) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            int alt391=2;
            alt391 = dfa391.predict(input);
            switch (alt391) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_YieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_YieldExpression_return norm1_YieldExpression() throws RecognitionException {
        InternalN4JSParser.norm1_YieldExpression_return retval = new InternalN4JSParser.norm1_YieldExpression_return();
        retval.start = input.LT(1);
        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
            }
            int alt392=2;
            int LA392_0 = input.LA(1);
            if ( (LA392_0==Asterisk) && (synpred260_InternalN4JSParser())) {
                alt392=1;
            }
            switch (alt392) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            int alt393=2;
            alt393 = dfa393.predict(input);
            switch (alt393) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAssignmentOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentOperator_return ruleAssignmentOperator() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentOperator_return retval = new InternalN4JSParser.ruleAssignmentOperator_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_0=null;
        Token AsteriskEqualsSignKeyword_1=null;
        Token SolidusEqualsSignKeyword_2=null;
        Token PercentSignEqualsSignKeyword_3=null;
        Token PlusSignEqualsSignKeyword_4=null;
        Token HyphenMinusKeyword_5_0=null;
        Token EqualsSignKeyword_5_1=null;
        Token LessThanSignLessThanSignEqualsSignKeyword_6=null;
        Token GreaterThanSignKeyword_7_0=null;
        Token GreaterThanSignKeyword_7_1=null;
        Token GreaterThanSignKeyword_7_2=null;
        Token EqualsSignKeyword_7_3=null;
        Token AmpersandEqualsSignKeyword_8=null;
        Token CircumflexAccentEqualsSignKeyword_9=null;
        Token VerticalLineEqualsSignKeyword_10=null;
        try {
            {
            int alt395=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt395=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt395=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt395=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt395=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt395=5;
                }
                break;
            case HyphenMinus:
                {
                alt395=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt395=7;
                }
                break;
            case GreaterThanSign:
                {
                alt395=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt395=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt395=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt395=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 395, 0, input);
                throw nvae;
            }
            switch (alt395) {
                case 1 :
                    {
                    EqualsSignKeyword_0=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(EqualsSignKeyword_0, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    AsteriskEqualsSignKeyword_1=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(AsteriskEqualsSignKeyword_1, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    SolidusEqualsSignKeyword_2=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(SolidusEqualsSignKeyword_2, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    PercentSignEqualsSignKeyword_3=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(PercentSignEqualsSignKeyword_3, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    PlusSignEqualsSignKeyword_4=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(PlusSignEqualsSignKeyword_4, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    HyphenMinusKeyword_5_0=(Token)match(input,HyphenMinus,FOLLOW_68); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(HyphenMinusKeyword_5_0, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusKeyword_5_0());
                    }
                    EqualsSignKeyword_5_1=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_5_1, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_5_1());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    LessThanSignLessThanSignEqualsSignKeyword_6=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(LessThanSignLessThanSignEqualsSignKeyword_6, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    GreaterThanSignKeyword_7_0=(Token)match(input,GreaterThanSign,FOLLOW_132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_7_0, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0());
                    }
                    GreaterThanSignKeyword_7_1=(Token)match(input,GreaterThanSign,FOLLOW_146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_7_1, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1());
                    }
                    int alt394=2;
                    int LA394_0 = input.LA(1);
                    if ( (LA394_0==GreaterThanSign) ) {
                        alt394=1;
                    }
                    switch (alt394) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_7_2=(Token)match(input,GreaterThanSign,FOLLOW_68); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(GreaterThanSignKeyword_7_2, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_2());
                            }
                            }
                            break;
                    }
                    EqualsSignKeyword_7_3=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_7_3, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_7_3());
                    }
                    }
                    }
                    break;
                case 9 :
                    {
                    AmpersandEqualsSignKeyword_8=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(AmpersandEqualsSignKeyword_8, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    CircumflexAccentEqualsSignKeyword_9=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(CircumflexAccentEqualsSignKeyword_9, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    VerticalLineEqualsSignKeyword_10=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(VerticalLineEqualsSignKeyword_10, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10());
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentOperatorOnlyAssign() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentOperatorOnlyAssign();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAssignmentOperatorOnlyAssign_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentOperatorOnlyAssign_return ruleAssignmentOperatorOnlyAssign() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentOperatorOnlyAssign_return retval = new InternalN4JSParser.ruleAssignmentOperatorOnlyAssign_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword=null;
        try {
            {
            EqualsSignKeyword=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(EqualsSignKeyword, grammarAccess.getAssignmentOperatorOnlyAssignAccess().getEqualsSignKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAwaitExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAwaitExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAwaitExpression_return ruleAwaitExpression() throws RecognitionException {
        InternalN4JSParser.ruleAwaitExpression_return retval = new InternalN4JSParser.ruleAwaitExpression_return();
        retval.start = input.LT(1);
        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AwaitExpression_return norm1_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AwaitExpression_return retval = new InternalN4JSParser.norm1_AwaitExpression_return();
        retval.start = input.LT(1);
        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_AwaitExpression_return norm2_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm2_AwaitExpression_return retval = new InternalN4JSParser.norm2_AwaitExpression_return();
        retval.start = input.LT(1);
        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_AwaitExpression_return norm3_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm3_AwaitExpression_return retval = new InternalN4JSParser.norm3_AwaitExpression_return();
        retval.start = input.LT(1);
        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePromisifyExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePromisifyExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePromisifyExpression_return rulePromisifyExpression() throws RecognitionException {
        InternalN4JSParser.rulePromisifyExpression_return retval = new InternalN4JSParser.rulePromisifyExpression_return();
        retval.start = input.LT(1);
        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PromisifyExpression_return norm1_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PromisifyExpression_return retval = new InternalN4JSParser.norm1_PromisifyExpression_return();
        retval.start = input.LT(1);
        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_PromisifyExpression_return norm2_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm2_PromisifyExpression_return retval = new InternalN4JSParser.norm2_PromisifyExpression_return();
        retval.start = input.LT(1);
        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_PromisifyExpression_return norm3_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm3_PromisifyExpression_return retval = new InternalN4JSParser.norm3_PromisifyExpression_return();
        retval.start = input.LT(1);
        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpression_return ruleExpression() throws RecognitionException {
        InternalN4JSParser.ruleExpression_return retval = new InternalN4JSParser.ruleExpression_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.ruleAssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_30);
            AssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt397=2;
            int LA397_0 = input.LA(1);
            if ( (LA397_0==Comma) ) {
                alt397=1;
            }
            switch (alt397) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_30);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                    }
                    }
                    }
                    loop396:
                    do {
                        int alt396=2;
                        int LA396_0 = input.LA(1);
                        if ( (LA396_0==Comma) ) {
                            alt396=1;
                        }
                        switch (alt396) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_30);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=ruleAssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop396;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Expression_return norm1_Expression() throws RecognitionException {
        InternalN4JSParser.norm1_Expression_return retval = new InternalN4JSParser.norm1_Expression_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_30);
            AssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt399=2;
            int LA399_0 = input.LA(1);
            if ( (LA399_0==Comma) ) {
                alt399=1;
            }
            switch (alt399) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_30);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                    }
                    }
                    }
                    loop398:
                    do {
                        int alt398=2;
                        int LA398_0 = input.LA(1);
                        if ( (LA398_0==Comma) ) {
                            alt398=1;
                        }
                        switch (alt398) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_30);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm1_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop398;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_Expression_return norm2_Expression() throws RecognitionException {
        InternalN4JSParser.norm2_Expression_return retval = new InternalN4JSParser.norm2_Expression_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm2_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_30);
            AssignmentExpressionParserRuleCall_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt401=2;
            int LA401_0 = input.LA(1);
            if ( (LA401_0==Comma) ) {
                alt401=1;
            }
            switch (alt401) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_30);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                    }
                    }
                    }
                    loop400:
                    do {
                        int alt400=2;
                        int LA400_0 = input.LA(1);
                        if ( (LA400_0==Comma) ) {
                            alt400=1;
                        }
                        switch (alt400) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_69); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_30);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm2_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop400;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_Expression_return norm3_Expression() throws RecognitionException {
        InternalN4JSParser.norm3_Expression_return retval = new InternalN4JSParser.norm3_Expression_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_30);
            AssignmentExpressionParserRuleCall_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt403=2;
            int LA403_0 = input.LA(1);
            if ( (LA403_0==Comma) ) {
                alt403=1;
            }
            switch (alt403) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_30);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                    }
                    }
                    }
                    loop402:
                    do {
                        int alt402=2;
                        int LA402_0 = input.LA(1);
                        if ( (LA402_0==Comma) ) {
                            alt402=1;
                        }
                        switch (alt402) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_69); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_30);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm3_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop402;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateLiteral_return ruleTemplateLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateLiteral_return retval = new InternalN4JSParser.ruleTemplateLiteral_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;
        InternalN4JSParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;
        InternalN4JSParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;
        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;
        InternalN4JSParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;
        InternalN4JSParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;
        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;
        InternalN4JSParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;
        try {
            {
            {
            int alt407=2;
            int LA407_0 = input.LA(1);
            if ( (LA407_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt407=1;
            }
            else if ( (LA407_0==RULE_TEMPLATE_HEAD) ) {
                alt407=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 407, 0, input);
                throw nvae;
            }
            switch (alt407) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_148);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0());
                    }
                    }
                    }
                    int alt404=2;
                    int LA404_0 = input.LA(1);
                    if ( ((LA404_0>=Intersection && LA404_0<=Implements)||(LA404_0>=Promisify && LA404_0<=Abstract)||(LA404_0>=External && LA404_0<=Function)||(LA404_0>=Private && LA404_0<=Delete)||(LA404_0>=Import && LA404_0<=Public)||LA404_0==Static||(LA404_0>=Target && LA404_0<=Await)||LA404_0==Class||(LA404_0>=False && LA404_0<=Super)||LA404_0==Union||(LA404_0>=Yield && LA404_0<=This)||(LA404_0>=From && LA404_0<=Void)||(LA404_0>=Get && LA404_0<=Set)||LA404_0==PlusSignPlusSign||(LA404_0>=HyphenMinusHyphenMinus && LA404_0<=SolidusEqualsSign)||LA404_0==As||LA404_0==Of||LA404_0==ExclamationMark||LA404_0==LeftParenthesis||LA404_0==PlusSign||LA404_0==HyphenMinus||LA404_0==Solidus||LA404_0==LessThanSign||(LA404_0>=CommercialAt && LA404_0<=LeftSquareBracket)||LA404_0==LeftCurlyBracket||LA404_0==Tilde||LA404_0==RULE_DOUBLE||(LA404_0>=RULE_HEX_INT && LA404_0<=RULE_LEGACY_OCTAL_INT)||LA404_0==RULE_SCIENTIFIC_INT||LA404_0==RULE_IDENTIFIER||LA404_0==RULE_STRING||(LA404_0>=RULE_TEMPLATE_HEAD && LA404_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA404_0==RULE_INT) ) {
                        alt404=1;
                    }
                    switch (alt404) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_148);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm1_Expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1());
                            }
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_149);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop406:
                    do {
                        int alt406=2;
                        int LA406_0 = input.LA(1);
                        if ( (LA406_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt406=1;
                        }
                        switch (alt406) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_148);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0());
                    	    }
                    	    }
                    	    }
                    	    int alt405=2;
                    	    int LA405_0 = input.LA(1);
                    	    if ( ((LA405_0>=Intersection && LA405_0<=Implements)||(LA405_0>=Promisify && LA405_0<=Abstract)||(LA405_0>=External && LA405_0<=Function)||(LA405_0>=Private && LA405_0<=Delete)||(LA405_0>=Import && LA405_0<=Public)||LA405_0==Static||(LA405_0>=Target && LA405_0<=Await)||LA405_0==Class||(LA405_0>=False && LA405_0<=Super)||LA405_0==Union||(LA405_0>=Yield && LA405_0<=This)||(LA405_0>=From && LA405_0<=Void)||(LA405_0>=Get && LA405_0<=Set)||LA405_0==PlusSignPlusSign||(LA405_0>=HyphenMinusHyphenMinus && LA405_0<=SolidusEqualsSign)||LA405_0==As||LA405_0==Of||LA405_0==ExclamationMark||LA405_0==LeftParenthesis||LA405_0==PlusSign||LA405_0==HyphenMinus||LA405_0==Solidus||LA405_0==LessThanSign||(LA405_0>=CommercialAt && LA405_0<=LeftSquareBracket)||LA405_0==LeftCurlyBracket||LA405_0==Tilde||LA405_0==RULE_DOUBLE||(LA405_0>=RULE_HEX_INT && LA405_0<=RULE_LEGACY_OCTAL_INT)||LA405_0==RULE_SCIENTIFIC_INT||LA405_0==RULE_IDENTIFIER||LA405_0==RULE_STRING||(LA405_0>=RULE_TEMPLATE_HEAD && LA405_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA405_0==RULE_INT) ) {
                    	        alt405=1;
                    	    }
                    	    switch (alt405) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_148);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm1_Expression();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              							announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    pushFollow(FOLLOW_149);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop406;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_TemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_TemplateLiteral_return norm1_TemplateLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_TemplateLiteral_return retval = new InternalN4JSParser.norm1_TemplateLiteral_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;
        InternalN4JSParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;
        InternalN4JSParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;
        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;
        InternalN4JSParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;
        InternalN4JSParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;
        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;
        InternalN4JSParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;
        try {
            {
            {
            int alt411=2;
            int LA411_0 = input.LA(1);
            if ( (LA411_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt411=1;
            }
            else if ( (LA411_0==RULE_TEMPLATE_HEAD) ) {
                alt411=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 411, 0, input);
                throw nvae;
            }
            switch (alt411) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_150);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0());
                    }
                    }
                    }
                    int alt408=2;
                    int LA408_0 = input.LA(1);
                    if ( ((LA408_0>=Intersection && LA408_0<=Implements)||(LA408_0>=Promisify && LA408_0<=Abstract)||(LA408_0>=External && LA408_0<=Function)||(LA408_0>=Private && LA408_0<=Delete)||(LA408_0>=Import && LA408_0<=Public)||LA408_0==Static||(LA408_0>=Target && LA408_0<=Await)||LA408_0==Class||(LA408_0>=False && LA408_0<=Super)||LA408_0==Union||(LA408_0>=Yield && LA408_0<=This)||(LA408_0>=From && LA408_0<=Void)||(LA408_0>=Get && LA408_0<=Set)||LA408_0==PlusSignPlusSign||(LA408_0>=HyphenMinusHyphenMinus && LA408_0<=SolidusEqualsSign)||LA408_0==As||LA408_0==Of||LA408_0==ExclamationMark||LA408_0==LeftParenthesis||LA408_0==PlusSign||LA408_0==HyphenMinus||LA408_0==Solidus||LA408_0==LessThanSign||(LA408_0>=CommercialAt && LA408_0<=LeftSquareBracket)||LA408_0==LeftCurlyBracket||LA408_0==Tilde||LA408_0==RULE_DOUBLE||(LA408_0>=RULE_HEX_INT && LA408_0<=RULE_LEGACY_OCTAL_INT)||LA408_0==RULE_SCIENTIFIC_INT||LA408_0==RULE_IDENTIFIER||LA408_0==RULE_STRING||(LA408_0>=RULE_TEMPLATE_HEAD && LA408_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA408_0==RULE_INT) ) {
                        alt408=1;
                    }
                    switch (alt408) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_148);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm3_Expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1());
                            }
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_149);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop410:
                    do {
                        int alt410=2;
                        int LA410_0 = input.LA(1);
                        if ( (LA410_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt410=1;
                        }
                        switch (alt410) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_150);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0());
                    	    }
                    	    }
                    	    }
                    	    int alt409=2;
                    	    int LA409_0 = input.LA(1);
                    	    if ( ((LA409_0>=Intersection && LA409_0<=Implements)||(LA409_0>=Promisify && LA409_0<=Abstract)||(LA409_0>=External && LA409_0<=Function)||(LA409_0>=Private && LA409_0<=Delete)||(LA409_0>=Import && LA409_0<=Public)||LA409_0==Static||(LA409_0>=Target && LA409_0<=Await)||LA409_0==Class||(LA409_0>=False && LA409_0<=Super)||LA409_0==Union||(LA409_0>=Yield && LA409_0<=This)||(LA409_0>=From && LA409_0<=Void)||(LA409_0>=Get && LA409_0<=Set)||LA409_0==PlusSignPlusSign||(LA409_0>=HyphenMinusHyphenMinus && LA409_0<=SolidusEqualsSign)||LA409_0==As||LA409_0==Of||LA409_0==ExclamationMark||LA409_0==LeftParenthesis||LA409_0==PlusSign||LA409_0==HyphenMinus||LA409_0==Solidus||LA409_0==LessThanSign||(LA409_0>=CommercialAt && LA409_0<=LeftSquareBracket)||LA409_0==LeftCurlyBracket||LA409_0==Tilde||LA409_0==RULE_DOUBLE||(LA409_0>=RULE_HEX_INT && LA409_0<=RULE_LEGACY_OCTAL_INT)||LA409_0==RULE_SCIENTIFIC_INT||LA409_0==RULE_IDENTIFIER||LA409_0==RULE_STRING||(LA409_0>=RULE_TEMPLATE_HEAD && LA409_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA409_0==RULE_INT) ) {
                    	        alt409=1;
                    	    }
                    	    switch (alt409) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_148);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm3_Expression();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              							announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    pushFollow(FOLLOW_149);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop410;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateExpressionEnd() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateExpressionEnd();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateExpressionEnd_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateExpressionEnd_return ruleTemplateExpressionEnd() throws RecognitionException {
        InternalN4JSParser.ruleTemplateExpressionEnd_return retval = new InternalN4JSParser.ruleTemplateExpressionEnd_return();
        retval.start = input.LT(1);
        Token RightCurlyBracketKeyword=null;
        	setInTemplateSegment();
        try {
            {
            RightCurlyBracketKeyword=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(RightCurlyBracketKeyword, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNoSubstitutionTemplate() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNoSubstitutionTemplate();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleNoSubstitutionTemplate_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNoSubstitutionTemplate_return ruleNoSubstitutionTemplate() throws RecognitionException {
        InternalN4JSParser.ruleNoSubstitutionTemplate_return retval = new InternalN4JSParser.ruleNoSubstitutionTemplate_return();
        retval.start = input.LT(1);
        Token ValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=null;
        try {
            {
            {
            {
            {
            ValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getValueAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateHead() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateHead();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateHead_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateHead_return ruleTemplateHead() throws RecognitionException {
        InternalN4JSParser.ruleTemplateHead_return retval = new InternalN4JSParser.ruleTemplateHead_return();
        retval.start = input.LT(1);
        Token ValueTEMPLATE_HEADTerminalRuleCall_1_0=null;
        try {
            {
            {
            {
            {
            ValueTEMPLATE_HEADTerminalRuleCall_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ValueTEMPLATE_HEADTerminalRuleCall_1_0, grammarAccess.getTemplateHeadAccess().getValueAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTail() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTail();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateTail_return ruleTemplateTail() throws RecognitionException {
        InternalN4JSParser.ruleTemplateTail_return retval = new InternalN4JSParser.ruleTemplateTail_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTemplateTailLiteral_return ValueTemplateTailLiteralParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ValueTemplateTailLiteralParserRuleCall_1_0=ruleTemplateTailLiteral();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)ValueTemplateTailLiteralParserRuleCall_1_0.start):null), (ValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)ValueTemplateTailLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateTailAccess().getValueAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddle() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddle();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateMiddle_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateMiddle_return ruleTemplateMiddle() throws RecognitionException {
        InternalN4JSParser.ruleTemplateMiddle_return retval = new InternalN4JSParser.ruleTemplateMiddle_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTemplateMiddleLiteral_return ValueTemplateMiddleLiteralParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ValueTemplateMiddleLiteralParserRuleCall_1_0=ruleTemplateMiddleLiteral();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)ValueTemplateMiddleLiteralParserRuleCall_1_0.start):null), (ValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)ValueTemplateMiddleLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateMiddleAccess().getValueAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteral_return ruleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleLiteral_return retval = new InternalN4JSParser.ruleLiteral_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleNumericLiteral_return NumericLiteralParserRuleCall_0 = null;
        InternalN4JSParser.ruleBooleanLiteral_return BooleanLiteralParserRuleCall_1 = null;
        InternalN4JSParser.ruleStringLiteral_return StringLiteralParserRuleCall_2 = null;
        InternalN4JSParser.ruleNullLiteral_return NullLiteralParserRuleCall_3 = null;
        InternalN4JSParser.ruleRegularExpressionLiteral_return RegularExpressionLiteralParserRuleCall_4 = null;
        try {
            {
            int alt412=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt412=1;
                }
                break;
            case False:
            case True:
                {
                alt412=2;
                }
                break;
            case RULE_STRING:
                {
                alt412=3;
                }
                break;
            case Null:
                {
                alt412=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt412=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 412, 0, input);
                throw nvae;
            }
            switch (alt412) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    NumericLiteralParserRuleCall_0=ruleNumericLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.start):null), (NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    BooleanLiteralParserRuleCall_1=ruleBooleanLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.start):null), (BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.stop):null), grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    StringLiteralParserRuleCall_2=ruleStringLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.start):null), (StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.stop):null), grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    NullLiteralParserRuleCall_3=ruleNullLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.start):null), (NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.stop):null), grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    RegularExpressionLiteralParserRuleCall_4=ruleRegularExpressionLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.start):null), (RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.stop):null), grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNullLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNullLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleNullLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNullLiteral_return ruleNullLiteral() throws RecognitionException {
        InternalN4JSParser.ruleNullLiteral_return retval = new InternalN4JSParser.ruleNullLiteral_return();
        retval.start = input.LT(1);
        Token NullKeyword_1=null;
        try {
            {
            {
            NullKeyword_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(NullKeyword_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBooleanLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBooleanLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBooleanLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBooleanLiteral_return ruleBooleanLiteral() throws RecognitionException {
        InternalN4JSParser.ruleBooleanLiteral_return retval = new InternalN4JSParser.ruleBooleanLiteral_return();
        retval.start = input.LT(1);
        Token TrueTrueKeyword_1_0_0=null;
        Token FalseKeyword_1_1=null;
        try {
            {
            {
            int alt413=2;
            int LA413_0 = input.LA(1);
            if ( (LA413_0==True) ) {
                alt413=1;
            }
            else if ( (LA413_0==False) ) {
                alt413=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 413, 0, input);
                throw nvae;
            }
            switch (alt413) {
                case 1 :
                    {
                    {
                    {
                    TrueTrueKeyword_1_0_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(TrueTrueKeyword_1_0_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    FalseKeyword_1_1=(Token)match(input,False,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(FalseKeyword_1_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleStringLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStringLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleStringLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStringLiteral_return ruleStringLiteral() throws RecognitionException {
        InternalN4JSParser.ruleStringLiteral_return retval = new InternalN4JSParser.ruleStringLiteral_return();
        retval.start = input.LT(1);
        Token ValueSTRINGTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueSTRINGTerminalRuleCall_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueSTRINGTerminalRuleCall_0, grammarAccess.getStringLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleNumericLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNumericLiteral_return ruleNumericLiteral() throws RecognitionException {
        InternalN4JSParser.ruleNumericLiteral_return retval = new InternalN4JSParser.ruleNumericLiteral_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleDoubleLiteral_return DoubleLiteralParserRuleCall_0 = null;
        InternalN4JSParser.ruleIntLiteral_return IntLiteralParserRuleCall_1 = null;
        InternalN4JSParser.ruleBinaryIntLiteral_return BinaryIntLiteralParserRuleCall_2 = null;
        InternalN4JSParser.ruleOctalIntLiteral_return OctalIntLiteralParserRuleCall_3 = null;
        InternalN4JSParser.ruleLegacyOctalIntLiteral_return LegacyOctalIntLiteralParserRuleCall_4 = null;
        InternalN4JSParser.ruleHexIntLiteral_return HexIntLiteralParserRuleCall_5 = null;
        InternalN4JSParser.ruleScientificIntLiteral_return ScientificIntLiteralParserRuleCall_6 = null;
        try {
            {
            int alt414=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt414=1;
                }
                break;
            case RULE_INT:
                {
                alt414=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt414=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt414=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt414=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt414=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt414=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 414, 0, input);
                throw nvae;
            }
            switch (alt414) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoubleLiteralParserRuleCall_0=ruleDoubleLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.start):null), (DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.stop):null), grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    IntLiteralParserRuleCall_1=ruleIntLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.start):null), (IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.stop):null), grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    BinaryIntLiteralParserRuleCall_2=ruleBinaryIntLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.start):null), (BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.stop):null), grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    OctalIntLiteralParserRuleCall_3=ruleOctalIntLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.start):null), (OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.stop):null), grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LegacyOctalIntLiteralParserRuleCall_4=ruleLegacyOctalIntLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.start):null), (LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.stop):null), grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4()); 
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    HexIntLiteralParserRuleCall_5=ruleHexIntLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.start):null), (HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.stop):null), grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ScientificIntLiteralParserRuleCall_6=ruleScientificIntLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.start):null), (ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.stop):null), grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDoubleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoubleLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleDoubleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDoubleLiteral_return ruleDoubleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleDoubleLiteral_return retval = new InternalN4JSParser.ruleDoubleLiteral_return();
        retval.start = input.LT(1);
        Token ValueDOUBLETerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueDOUBLETerminalRuleCall_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueDOUBLETerminalRuleCall_0, grammarAccess.getDoubleLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntLiteral_return ruleIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleIntLiteral_return retval = new InternalN4JSParser.ruleIntLiteral_return();
        retval.start = input.LT(1);
        Token ValueINTTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueINTTerminalRuleCall_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueINTTerminalRuleCall_0, grammarAccess.getIntLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleOctalIntLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleOctalIntLiteral_return ruleOctalIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleOctalIntLiteral_return retval = new InternalN4JSParser.ruleOctalIntLiteral_return();
        retval.start = input.LT(1);
        Token ValueOCTAL_INTTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueOCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueOCTAL_INTTerminalRuleCall_0, grammarAccess.getOctalIntLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLegacyOctalIntLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLegacyOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLegacyOctalIntLiteral_return ruleLegacyOctalIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleLegacyOctalIntLiteral_return retval = new InternalN4JSParser.ruleLegacyOctalIntLiteral_return();
        retval.start = input.LT(1);
        Token ValueLEGACY_OCTAL_INTTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueLEGACY_OCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueLEGACY_OCTAL_INTTerminalRuleCall_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleHexIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleHexIntLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleHexIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleHexIntLiteral_return ruleHexIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleHexIntLiteral_return retval = new InternalN4JSParser.ruleHexIntLiteral_return();
        retval.start = input.LT(1);
        Token ValueHEX_INTTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueHEX_INTTerminalRuleCall_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueHEX_INTTerminalRuleCall_0, grammarAccess.getHexIntLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBinaryIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBinaryIntLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBinaryIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBinaryIntLiteral_return ruleBinaryIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleBinaryIntLiteral_return retval = new InternalN4JSParser.ruleBinaryIntLiteral_return();
        retval.start = input.LT(1);
        Token ValueBINARY_INTTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueBINARY_INTTerminalRuleCall_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueBINARY_INTTerminalRuleCall_0, grammarAccess.getBinaryIntLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleScientificIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScientificIntLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleScientificIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScientificIntLiteral_return ruleScientificIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleScientificIntLiteral_return retval = new InternalN4JSParser.ruleScientificIntLiteral_return();
        retval.start = input.LT(1);
        Token ValueSCIENTIFIC_INTTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueSCIENTIFIC_INTTerminalRuleCall_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueSCIENTIFIC_INTTerminalRuleCall_0, grammarAccess.getScientificIntLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRegularExpressionLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRegularExpressionLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleRegularExpressionLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRegularExpressionLiteral_return ruleRegularExpressionLiteral() throws RecognitionException {
        InternalN4JSParser.ruleRegularExpressionLiteral_return retval = new InternalN4JSParser.ruleRegularExpressionLiteral_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleREGEX_LITERAL_return ValueREGEX_LITERALParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ValueREGEX_LITERALParserRuleCall_0=ruleREGEX_LITERAL();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.start):null), (ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.stop):null), grammarAccess.getRegularExpressionLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteralAsString() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteralAsString();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleNumericLiteralAsString_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNumericLiteralAsString_return ruleNumericLiteralAsString() throws RecognitionException {
        InternalN4JSParser.ruleNumericLiteralAsString_return retval = new InternalN4JSParser.ruleNumericLiteralAsString_return();
        retval.start = input.LT(1);
        try {
            {
            if ( input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_INT ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierOrThis() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierOrThis();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIdentifierOrThis_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierOrThis_return ruleIdentifierOrThis() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierOrThis_return retval = new InternalN4JSParser.ruleIdentifierOrThis_return();
        retval.start = input.LT(1);
        Token ThisKeyword_1=null;
        Token PromisifyKeyword_2=null;
        Token TargetKeyword_3=null;
        try {
            {
            int alt415=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt415=1;
                }
                break;
            case This:
                {
                alt415=2;
                }
                break;
            case Promisify:
                {
                alt415=3;
                }
                break;
            case Target:
                {
                alt415=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 415, 0, input);
                throw nvae;
            }
            switch (alt415) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(ThisKeyword_1, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    PromisifyKeyword_2=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(PromisifyKeyword_2, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    TargetKeyword_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(TargetKeyword_3, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3());
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationName();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotationName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationName_return ruleAnnotationName() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationName_return retval = new InternalN4JSParser.ruleAnnotationName_return();
        retval.start = input.LT(1);
        Token ThisKeyword_1=null;
        Token TargetKeyword_2=null;
        try {
            {
            int alt416=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt416=1;
                }
                break;
            case This:
                {
                alt416=2;
                }
                break;
            case Target:
                {
                alt416=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 416, 0, input);
                throw nvae;
            }
            switch (alt416) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(ThisKeyword_1, grammarAccess.getAnnotationNameAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    TargetKeyword_2=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(TargetKeyword_2, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2());
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleREGEX_LITERAL() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleREGEX_LITERAL();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleREGEX_LITERAL_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleREGEX_LITERAL_return ruleREGEX_LITERAL() throws RecognitionException {
        InternalN4JSParser.ruleREGEX_LITERAL_return retval = new InternalN4JSParser.ruleREGEX_LITERAL_return();
        retval.start = input.LT(1);
        Token SolidusKeyword_0_0=null;
        Token SolidusEqualsSignKeyword_0_1=null;
        	setInRegularExpression();
        try {
            {
            {
            int alt417=2;
            int LA417_0 = input.LA(1);
            if ( (LA417_0==Solidus) ) {
                alt417=1;
            }
            else if ( (LA417_0==SolidusEqualsSign) ) {
                alt417=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 417, 0, input);
                throw nvae;
            }
            switch (alt417) {
                case 1 :
                    {
                    SolidusKeyword_0_0=(Token)match(input,Solidus,FOLLOW_151); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SolidusKeyword_0_0, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    SolidusEqualsSignKeyword_0_1=(Token)match(input,SolidusEqualsSign,FOLLOW_151); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SolidusEqualsSignKeyword_0_1, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1());
                    }
                    }
                    break;
            }
            int alt418=2;
            int LA418_0 = input.LA(1);
            if ( (LA418_0==RULE_REGEX_TAIL) ) {
                alt418=1;
            }
            switch (alt418) {
                case 1 :
                    {
                    match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTailLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTailLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateTailLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateTailLiteral_return ruleTemplateTailLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateTailLiteral_return retval = new InternalN4JSParser.ruleTemplateTailLiteral_return();
        retval.start = input.LT(1);
        try {
            {
            int alt419=2;
            int LA419_0 = input.LA(1);
            if ( (LA419_0==RULE_TEMPLATE_END) ) {
                alt419=1;
            }
            switch (alt419) {
                case 1 :
                    {
                    match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddleLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateMiddleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateMiddleLiteral_return ruleTemplateMiddleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateMiddleLiteral_return retval = new InternalN4JSParser.ruleTemplateMiddleLiteral_return();
        retval.start = input.LT(1);
        try {
            {
            match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSemi() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSemi();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleSemi_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSemi_return ruleSemi() throws RecognitionException {
        InternalN4JSParser.ruleSemi_return retval = new InternalN4JSParser.ruleSemi_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword=null;
        	int position = input.index();
        	promoteEOL();
        try {
            int alt420=5;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt420=1;
                }
                break;
            case EOF:
                {
                alt420=2;
                }
                break;
            case RULE_EOL:
                {
                alt420=3;
                }
                break;
            case RULE_ML_COMMENT:
                {
                alt420=4;
                }
                break;
            case RightCurlyBracket:
                {
                alt420=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 420, 0, input);
                throw nvae;
            }
            switch (alt420) {
                case 1 :
                    {
                    SemicolonKeyword=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	announce(SemicolonKeyword, grammarAccess.getSemiAccess().getSemicolonKeyword());
                    }
                    }
                    break;
                case 2 :
                    {
                    match(input,EOF,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    match(input,RULE_EOL,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    match(input,RULE_ML_COMMENT,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( !(( forcedRewind(position) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(position) ");
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleNoLineTerminator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNoLineTerminator_return ruleNoLineTerminator() throws RecognitionException {
        InternalN4JSParser.ruleNoLineTerminator_return retval = new InternalN4JSParser.ruleNoLineTerminator_return();
        retval.start = input.LT(1);
        Token NO_LINE_TERMINATORTerminalRuleCall=null;
        try {
            {
            int alt421=2;
            int LA421_0 = input.LA(1);
            if ( (LA421_0==RULE_NO_LINE_TERMINATOR) ) {
                alt421=1;
            }
            switch (alt421) {
                case 1 :
                    {
                    NO_LINE_TERMINATORTerminalRuleCall=(Token)match(input,RULE_NO_LINE_TERMINATOR,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NO_LINE_TERMINATORTerminalRuleCall, grammarAccess.getNoLineTerminatorAccess().getNO_LINE_TERMINATORTerminalRuleCall()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotation();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotation_return ruleAnnotation() throws RecognitionException {
        InternalN4JSParser.ruleAnnotation_return retval = new InternalN4JSParser.ruleAnnotation_return();
        retval.start = input.LT(1);
        Token CommercialAtKeyword_0=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;
        try {
            {
            {
            CommercialAtKeyword_0=(Token)match(input,CommercialAt,FOLLOW_152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CommercialAtKeyword_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleScriptAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptAnnotation();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleScriptAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScriptAnnotation_return ruleScriptAnnotation() throws RecognitionException {
        InternalN4JSParser.ruleScriptAnnotation_return retval = new InternalN4JSParser.ruleScriptAnnotation_return();
        retval.start = input.LT(1);
        Token CommercialAtCommercialAtKeyword_0=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;
        try {
            {
            {
            CommercialAtCommercialAtKeyword_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CommercialAtCommercialAtKeyword_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0());
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationNoAtSign() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotationNoAtSign_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationNoAtSign_return ruleAnnotationNoAtSign() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationNoAtSign_return retval = new InternalN4JSParser.ruleAnnotationNoAtSign_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token RightParenthesisKeyword_1_2=null;
        InternalN4JSParser.ruleAnnotationName_return NameAnnotationNameParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_0_0 = null;
        InternalN4JSParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_124);
            NameAnnotationNameParserRuleCall_0_0=ruleAnnotationName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.start):null), (NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getNameAssignment_0());
            }
            }
            }
            int alt424=2;
            alt424 = dfa424.predict(input);
            switch (alt424) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_1_0=(Token)match(input,LeftParenthesis,FOLLOW_153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftParenthesisKeyword_1_0, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_0());
                    }
                    }
                    int alt423=2;
                    int LA423_0 = input.LA(1);
                    if ( ((LA423_0>=Intersection && LA423_0<=Constructor)||LA423_0==Promisify||LA423_0==Default||LA423_0==Target||LA423_0==Await||LA423_0==False||LA423_0==Union||LA423_0==This||(LA423_0>=Null && LA423_0<=Void)||LA423_0==SolidusEqualsSign||LA423_0==LeftParenthesis||LA423_0==Solidus||LA423_0==QuestionMark||LA423_0==LeftSquareBracket||LA423_0==LeftCurlyBracket||LA423_0==Tilde||LA423_0==RULE_DOUBLE||(LA423_0>=RULE_HEX_INT && LA423_0<=RULE_LEGACY_OCTAL_INT)||LA423_0==RULE_SCIENTIFIC_INT||LA423_0==RULE_IDENTIFIER||LA423_0==RULE_STRING||LA423_0==RULE_INT) ) {
                        alt423=1;
                    }
                    switch (alt423) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_54);
                            ArgsAnnotationArgumentParserRuleCall_1_1_0_0=ruleAnnotationArgument();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_0());
                            }
                            }
                            }
                            loop422:
                            do {
                                int alt422=2;
                                int LA422_0 = input.LA(1);
                                if ( (LA422_0==Comma) ) {
                                    alt422=1;
                                }
                                switch (alt422) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_154); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      					announce(CommaKeyword_1_1_1_0, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_1_1_0());
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_54);
                            	    ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0=ruleAnnotationArgument();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      							announce((ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_1_1());
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop422;
                                }
                            } while (true);
                            }
                            break;
                    }
                    RightParenthesisKeyword_1_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightParenthesisKeyword_1_2, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_2());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationArgument();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationArgument_return ruleAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationArgument_return retval = new InternalN4JSParser.ruleAnnotationArgument_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleLiteralAnnotationArgument_return LiteralAnnotationArgumentParserRuleCall_0 = null;
        InternalN4JSParser.ruleTypeRefAnnotationArgument_return TypeRefAnnotationArgumentParserRuleCall_1 = null;
        try {
            {
            int alt425=2;
            int LA425_0 = input.LA(1);
            if ( (LA425_0==False||LA425_0==Null||LA425_0==True||LA425_0==SolidusEqualsSign||LA425_0==Solidus||LA425_0==RULE_DOUBLE||(LA425_0>=RULE_HEX_INT && LA425_0<=RULE_LEGACY_OCTAL_INT)||LA425_0==RULE_SCIENTIFIC_INT||LA425_0==RULE_STRING||LA425_0==RULE_INT) ) {
                alt425=1;
            }
            else if ( ((LA425_0>=Intersection && LA425_0<=Constructor)||LA425_0==Promisify||LA425_0==Default||LA425_0==Target||LA425_0==Await||LA425_0==Union||LA425_0==This||LA425_0==This_1||(LA425_0>=Type && LA425_0<=Void)||LA425_0==LeftParenthesis||LA425_0==QuestionMark||LA425_0==LeftSquareBracket||LA425_0==LeftCurlyBracket||LA425_0==Tilde||LA425_0==RULE_IDENTIFIER) ) {
                alt425=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 425, 0, input);
                throw nvae;
            }
            switch (alt425) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralAnnotationArgumentParserRuleCall_0=ruleLiteralAnnotationArgument();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.start):null), (LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.stop):null), grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefAnnotationArgumentParserRuleCall_1=ruleTypeRefAnnotationArgument();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.start):null), (TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.stop):null), grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralAnnotationArgument();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLiteralAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteralAnnotationArgument_return ruleLiteralAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleLiteralAnnotationArgument_return retval = new InternalN4JSParser.ruleLiteralAnnotationArgument_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleLiteral_return LiteralLiteralParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            LiteralLiteralParserRuleCall_0=ruleLiteral();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.start):null), (LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefAnnotationArgument();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeRefAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefAnnotationArgument_return ruleTypeRefAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefAnnotationArgument_return retval = new InternalN4JSParser.ruleTypeRefAnnotationArgument_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.start):null), (TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationList();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationList_return ruleAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationList_return retval = new InternalN4JSParser.ruleAnnotationList_return();
        retval.start = input.LT(1);
        Token CommercialAtKeyword_0_0_1=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1());
            }
            {
            {
            pushFollow(FOLLOW_155);
            AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.start):null), (AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_0_0_2());
            }
            }
            }
            }
            }
            loop426:
            do {
                int alt426=2;
                int LA426_0 = input.LA(1);
                if ( (LA426_0==CommercialAt) ) {
                    alt426=1;
                }
                switch (alt426) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_155);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop426;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExpressionAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionAnnotationList_return ruleExpressionAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleExpressionAnnotationList_return retval = new InternalN4JSParser.ruleExpressionAnnotationList_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;
        try {
            {
            {
            int cnt427=0;
            loop427:
            do {
                int alt427=2;
                int LA427_0 = input.LA(1);
                if ( (LA427_0==CommercialAt) ) {
                    alt427=1;
                }
                switch (alt427) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_155);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt427 >= 1 ) break loop427;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(427, input);
                        throw eee;
                }
                cnt427++;
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyAssignmentAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyAssignmentAnnotationList_return rulePropertyAssignmentAnnotationList() throws RecognitionException {
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return retval = new InternalN4JSParser.rulePropertyAssignmentAnnotationList_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;
        try {
            {
            {
            int cnt428=0;
            loop428:
            do {
                int alt428=2;
                int LA428_0 = input.LA(1);
                if ( (LA428_0==CommercialAt) ) {
                    alt428=1;
                }
                switch (alt428) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_155);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt428 >= 1 ) break loop428;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(428, input);
                        throw eee;
                }
                cnt428++;
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4MemberAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MemberAnnotationList_return ruleN4MemberAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleN4MemberAnnotationList_return retval = new InternalN4JSParser.ruleN4MemberAnnotationList_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;
        try {
            {
            {
            int cnt429=0;
            loop429:
            do {
                int alt429=2;
                int LA429_0 = input.LA(1);
                if ( (LA429_0==CommercialAt) ) {
                    alt429=1;
                }
                switch (alt429) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_155);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt429 >= 1 ) break loop429;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(429, input);
                        throw eee;
                }
                cnt429++;
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleTypeReference_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeReference_return ruleTypeReference() throws RecognitionException {
        InternalN4JSParser.ruleTypeReference_return retval = new InternalN4JSParser.ruleTypeReference_return();
        retval.start = input.LT(1);
        Token FullStopKeyword_0_1=null;
        InternalN4JSParser.ruleTypeReferenceName_return AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1 = null;
        InternalN4JSParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1 = null;
        try {
            {
            {
            int alt430=2;
            alt430 = dfa430.predict(input);
            switch (alt430) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_121);
                    AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1=ruleTypeReferenceName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1!=null?((Token)AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1.start):null), (AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1!=null?((Token)AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1.stop):null), grammarAccess.getTypeReferenceAccess().getAstNamespaceAssignment_0_0());
                    }
                    }
                    }
                    FullStopKeyword_0_1=(Token)match(input,FullStop,FOLLOW_156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(FullStopKeyword_0_1, grammarAccess.getTypeReferenceAccess().getFullStopKeyword_0_1());
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1=ruleTypeReferenceName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.stop):null), grammarAccess.getTypeReferenceAccess().getDeclaredTypeAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeReferenceName();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeReferenceName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeReferenceName_return ruleTypeReferenceName() throws RecognitionException {
        InternalN4JSParser.ruleTypeReferenceName_return retval = new InternalN4JSParser.ruleTypeReferenceName_return();
        retval.start = input.LT(1);
        Token VoidKeyword_0=null;
        Token ThisKeyword_1=null;
        Token AwaitKeyword_2=null;
        Token PromisifyKeyword_3=null;
        Token TargetKeyword_4=null;
        Token DefaultKeyword_5=null;
        try {
            {
            int alt431=7;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt431=1;
                }
                break;
            case This:
                {
                alt431=2;
                }
                break;
            case Await:
                {
                alt431=3;
                }
                break;
            case Promisify:
                {
                alt431=4;
                }
                break;
            case Target:
                {
                alt431=5;
                }
                break;
            case Default:
                {
                alt431=6;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt431=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 431, 0, input);
                throw nvae;
            }
            switch (alt431) {
                case 1 :
                    {
                    VoidKeyword_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(VoidKeyword_0, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(ThisKeyword_1, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    AwaitKeyword_2=(Token)match(input,Await,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(AwaitKeyword_2, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    PromisifyKeyword_3=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(PromisifyKeyword_3, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    TargetKeyword_4=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(TargetKeyword_4, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    DefaultKeyword_5=(Token)match(input,Default,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(DefaultKeyword_5, grammarAccess.getTypeReferenceNameAccess().getDefaultKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4ClassDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4ClassDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4ClassDeclaration_return ruleN4ClassDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4ClassDeclaration_return retval = new InternalN4JSParser.ruleN4ClassDeclaration_return();
        retval.start = input.LT(1);
        Token ClassKeyword_0_0_1=null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_0_0_4 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;
        InternalN4JSParser.ruleClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_2 = null;
        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            loop432:
            do {
                int alt432=2;
                int LA432_0 = input.LA(1);
                if ( ((LA432_0>=Protected && LA432_0<=Abstract)||LA432_0==External||(LA432_0>=Private && LA432_0<=Project)||LA432_0==Public||LA432_0==Static||LA432_0==Const) ) {
                    alt432=1;
                }
                switch (alt432) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop432;
                }
            } while (true);
            ClassKeyword_0_0_1=(Token)match(input,Class,FOLLOW_157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ClassKeyword_0_0_1, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_1());
            }
            int alt433=2;
            int LA433_0 = input.LA(1);
            if ( (LA433_0==Tilde) ) {
                alt433=1;
            }
            switch (alt433) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_58);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyAssignment_0_0_2());
                    }
                    }
                    }
                    break;
            }
            int alt434=2;
            int LA434_0 = input.LA(1);
            if ( ((LA434_0>=Intersection && LA434_0<=Constructor)||(LA434_0>=Promisify && LA434_0<=Abstract)||LA434_0==External||(LA434_0>=Private && LA434_0<=Project)||LA434_0==Public||LA434_0==Static||LA434_0==Target||(LA434_0>=Async && LA434_0<=Await)||LA434_0==Union||(LA434_0>=Yield && LA434_0<=This)||LA434_0==From||LA434_0==Type||(LA434_0>=Get && LA434_0<=Let)||(LA434_0>=Out && LA434_0<=Set)||LA434_0==As||LA434_0==Of||LA434_0==RULE_IDENTIFIER) ) {
                alt434=1;
            }
            else if ( (LA434_0==Implements) ) {
                int LA434_2 = input.LA(2);
                if ( (LA434_2==Implements||LA434_2==Extends||LA434_2==LessThanSign||LA434_2==LeftCurlyBracket||LA434_2==RULE_VERSION) ) {
                    alt434=1;
                }
            }
            switch (alt434) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_9);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getNameAssignment_0_0_3());
                    }
                    }
                    }
                    break;
            }
            int alt435=2;
            int LA435_0 = input.LA(1);
            if ( (LA435_0==RULE_VERSION) ) {
                alt435=1;
            }
            switch (alt435) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    VersionDeclarationParserRuleCall_0_0_4=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_0_0_4!=null?((Token)VersionDeclarationParserRuleCall_0_0_4.start):null), (VersionDeclarationParserRuleCall_0_0_4!=null?((Token)VersionDeclarationParserRuleCall_0_0_4.stop):null), grammarAccess.getN4ClassDeclarationAccess().getVersionDeclarationParserRuleCall_0_0_4()); 
                    }
                    }
                    break;
            }
            }
            }
            int alt436=2;
            int LA436_0 = input.LA(1);
            if ( (LA436_0==LessThanSign) ) {
                alt436=1;
            }
            switch (alt436) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            int alt437=2;
            int LA437_0 = input.LA(1);
            if ( (LA437_0==Implements||LA437_0==Extends) ) {
                alt437=1;
            }
            switch (alt437) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    ClassExtendsImplementsParserRuleCall_2=ruleClassExtendsImplements();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsImplementsParserRuleCall_2!=null?((Token)ClassExtendsImplementsParserRuleCall_2.start):null), (ClassExtendsImplementsParserRuleCall_2!=null?((Token)ClassExtendsImplementsParserRuleCall_2.stop):null), grammarAccess.getN4ClassDeclarationAccess().getClassExtendsImplementsParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleMembers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMembers_return ruleMembers() throws RecognitionException {
        InternalN4JSParser.ruleMembers_return retval = new InternalN4JSParser.ruleMembers_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleN4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_158); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
            }
            loop438:
            do {
                int alt438=2;
                int LA438_0 = input.LA(1);
                if ( ((LA438_0>=Intersection && LA438_0<=With)||(LA438_0>=For && LA438_0<=Var)||(LA438_0>=As && LA438_0<=Of)||LA438_0==LeftParenthesis||LA438_0==Asterisk||LA438_0==LessThanSign||(LA438_0>=CommercialAt && LA438_0<=LeftSquareBracket)||LA438_0==RULE_DOUBLE||(LA438_0>=RULE_HEX_INT && LA438_0<=RULE_OCTAL_INT)||LA438_0==RULE_SCIENTIFIC_INT||LA438_0==RULE_IDENTIFIER||LA438_0==RULE_STRING||LA438_0==RULE_INT) ) {
                    alt438=1;
                }
                switch (alt438) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_158);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=ruleN4MemberDeclaration();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop438;
                }
            } while (true);
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_Members_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Members_return norm1_Members() throws RecognitionException {
        InternalN4JSParser.norm1_Members_return retval = new InternalN4JSParser.norm1_Members_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.norm1_N4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_158); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
            }
            loop439:
            do {
                int alt439=2;
                int LA439_0 = input.LA(1);
                if ( ((LA439_0>=Intersection && LA439_0<=With)||(LA439_0>=For && LA439_0<=Var)||(LA439_0>=As && LA439_0<=Of)||LA439_0==LeftParenthesis||LA439_0==Asterisk||LA439_0==LessThanSign||(LA439_0>=CommercialAt && LA439_0<=LeftSquareBracket)||LA439_0==RULE_DOUBLE||(LA439_0>=RULE_HEX_INT && LA439_0<=RULE_OCTAL_INT)||LA439_0==RULE_SCIENTIFIC_INT||LA439_0==RULE_IDENTIFIER||LA439_0==RULE_STRING||LA439_0==RULE_INT) ) {
                    alt439=1;
                }
                switch (alt439) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_158);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=norm1_N4MemberDeclaration();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop439;
                }
            } while (true);
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleClassExtendsImplements_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleClassExtendsImplements_return ruleClassExtendsImplements() throws RecognitionException {
        InternalN4JSParser.ruleClassExtendsImplements_return retval = new InternalN4JSParser.ruleClassExtendsImplements_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1 = null;
        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_1 = null;
        try {
            {
            int alt442=2;
            int LA442_0 = input.LA(1);
            if ( (LA442_0==Extends) ) {
                alt442=1;
            }
            else if ( (LA442_0==Implements) ) {
                alt442=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 442, 0, input);
                throw nvae;
            }
            switch (alt442) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_159);
                    ClassExtendsClauseParserRuleCall_0_0=ruleClassExtendsClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_0_0!=null?((Token)ClassExtendsClauseParserRuleCall_0_0.start):null), (ClassExtendsClauseParserRuleCall_0_0!=null?((Token)ClassExtendsClauseParserRuleCall_0_0.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_0_0()); 
                    }
                    int alt440=2;
                    int LA440_0 = input.LA(1);
                    if ( (LA440_0==Implements) ) {
                        alt440=1;
                    }
                    switch (alt440) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_2);
                            ClassImplementsListParserRuleCall_0_1=ruleClassImplementsList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassImplementsListParserRuleCall_0_1!=null?((Token)ClassImplementsListParserRuleCall_0_1.start):null), (ClassImplementsListParserRuleCall_0_1!=null?((Token)ClassImplementsListParserRuleCall_0_1.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_0_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_61);
                    ClassImplementsListParserRuleCall_1_0=ruleClassImplementsList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_0!=null?((Token)ClassImplementsListParserRuleCall_1_0.start):null), (ClassImplementsListParserRuleCall_1_0!=null?((Token)ClassImplementsListParserRuleCall_1_0.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_1_0()); 
                    }
                    int alt441=2;
                    int LA441_0 = input.LA(1);
                    if ( (LA441_0==Extends) ) {
                        alt441=1;
                    }
                    switch (alt441) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_2);
                            ClassExtendsClauseParserRuleCall_1_1=ruleClassExtendsClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_1!=null?((Token)ClassExtendsClauseParserRuleCall_1_1.start):null), (ClassExtendsClauseParserRuleCall_1_1!=null?((Token)ClassExtendsClauseParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ClassExtendsImplements_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ClassExtendsImplements_return norm1_ClassExtendsImplements() throws RecognitionException {
        InternalN4JSParser.norm1_ClassExtendsImplements_return retval = new InternalN4JSParser.norm1_ClassExtendsImplements_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1 = null;
        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_0 = null;
        InternalN4JSParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_1 = null;
        try {
            {
            int alt445=2;
            int LA445_0 = input.LA(1);
            if ( (LA445_0==Extends) ) {
                alt445=1;
            }
            else if ( (LA445_0==Implements) ) {
                alt445=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 445, 0, input);
                throw nvae;
            }
            switch (alt445) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_159);
                    ClassExtendsClauseParserRuleCall_0_0=norm1_ClassExtendsClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_0_0!=null?((Token)ClassExtendsClauseParserRuleCall_0_0.start):null), (ClassExtendsClauseParserRuleCall_0_0!=null?((Token)ClassExtendsClauseParserRuleCall_0_0.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_0_0()); 
                    }
                    int alt443=2;
                    int LA443_0 = input.LA(1);
                    if ( (LA443_0==Implements) ) {
                        alt443=1;
                    }
                    switch (alt443) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_2);
                            ClassImplementsListParserRuleCall_0_1=ruleClassImplementsList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassImplementsListParserRuleCall_0_1!=null?((Token)ClassImplementsListParserRuleCall_0_1.start):null), (ClassImplementsListParserRuleCall_0_1!=null?((Token)ClassImplementsListParserRuleCall_0_1.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_0_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_61);
                    ClassImplementsListParserRuleCall_1_0=ruleClassImplementsList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_0!=null?((Token)ClassImplementsListParserRuleCall_1_0.start):null), (ClassImplementsListParserRuleCall_1_0!=null?((Token)ClassImplementsListParserRuleCall_1_0.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_1_0()); 
                    }
                    int alt444=2;
                    int LA444_0 = input.LA(1);
                    if ( (LA444_0==Extends) ) {
                        alt444=1;
                    }
                    switch (alt444) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_2);
                            ClassExtendsClauseParserRuleCall_1_1=norm1_ClassExtendsClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_1!=null?((Token)ClassExtendsClauseParserRuleCall_1_1.start):null), (ClassExtendsClauseParserRuleCall_1_1!=null?((Token)ClassExtendsClauseParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleClassExtendsClause_return ruleClassExtendsClause() throws RecognitionException {
        InternalN4JSParser.ruleClassExtendsClause_return retval = new InternalN4JSParser.ruleClassExtendsClause_return();
        retval.start = input.LT(1);
        Token ExtendsKeyword_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0 = null;
        InternalN4JSParser.ruleLeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            ExtendsKeyword_0=(Token)match(input,Extends,FOLLOW_160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ExtendsKeyword_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0());
            }
            int alt446=2;
            int LA446_0 = input.LA(1);
            if ( (LA446_0==Void) && (synpred274_InternalN4JSParser())) {
                alt446=1;
            }
            else if ( (LA446_0==This) ) {
                int LA446_2 = input.LA(2);
                if ( (synpred274_InternalN4JSParser()) ) {
                    alt446=1;
                }
                else if ( (true) ) {
                    alt446=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 446, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA446_0==Await) ) {
                int LA446_3 = input.LA(2);
                if ( (synpred274_InternalN4JSParser()) ) {
                    alt446=1;
                }
                else if ( (true) ) {
                    alt446=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 446, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA446_0==Promisify) ) {
                int LA446_4 = input.LA(2);
                if ( (synpred274_InternalN4JSParser()) ) {
                    alt446=1;
                }
                else if ( (true) ) {
                    alt446=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 446, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA446_0==Target) ) {
                int LA446_5 = input.LA(2);
                if ( (synpred274_InternalN4JSParser()) ) {
                    alt446=1;
                }
                else if ( (true) ) {
                    alt446=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 446, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA446_0==Default) && (synpred274_InternalN4JSParser())) {
                alt446=1;
            }
            else if ( (LA446_0==RULE_IDENTIFIER) ) {
                int LA446_7 = input.LA(2);
                if ( (synpred274_InternalN4JSParser()) ) {
                    alt446=1;
                }
                else if ( (true) ) {
                    alt446=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 446, 7, input);
                    throw nvae;
                }
            }
            else if ( ((LA446_0>=Intersection && LA446_0<=Implements)||(LA446_0>=Interface && LA446_0<=Abstract)||(LA446_0>=External && LA446_0<=Function)||(LA446_0>=Private && LA446_0<=Project)||(LA446_0>=Import && LA446_0<=Public)||LA446_0==Static||LA446_0==Async||LA446_0==Class||(LA446_0>=False && LA446_0<=Super)||LA446_0==Union||LA446_0==Yield||(LA446_0>=From && LA446_0<=Type)||(LA446_0>=Get && LA446_0<=Set)||LA446_0==SolidusEqualsSign||LA446_0==As||LA446_0==Of||LA446_0==LeftParenthesis||LA446_0==Solidus||LA446_0==LessThanSign||(LA446_0>=CommercialAt && LA446_0<=LeftSquareBracket)||LA446_0==LeftCurlyBracket||LA446_0==RULE_DOUBLE||(LA446_0>=RULE_HEX_INT && LA446_0<=RULE_LEGACY_OCTAL_INT)||LA446_0==RULE_SCIENTIFIC_INT||LA446_0==RULE_STRING||(LA446_0>=RULE_TEMPLATE_HEAD && LA446_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA446_0==RULE_INT) ) {
                alt446=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 446, 0, input);
                throw nvae;
            }
            switch (alt446) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_1_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0=ruleLeftHandSideExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ClassExtendsClause_return norm1_ClassExtendsClause() throws RecognitionException {
        InternalN4JSParser.norm1_ClassExtendsClause_return retval = new InternalN4JSParser.norm1_ClassExtendsClause_return();
        retval.start = input.LT(1);
        Token ExtendsKeyword_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0 = null;
        InternalN4JSParser.norm1_LeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            ExtendsKeyword_0=(Token)match(input,Extends,FOLLOW_160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ExtendsKeyword_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0());
            }
            int alt447=2;
            int LA447_0 = input.LA(1);
            if ( (LA447_0==Void) && (synpred275_InternalN4JSParser())) {
                alt447=1;
            }
            else if ( (LA447_0==This) ) {
                int LA447_2 = input.LA(2);
                if ( (synpred275_InternalN4JSParser()) ) {
                    alt447=1;
                }
                else if ( (true) ) {
                    alt447=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 447, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA447_0==Await) ) {
                int LA447_3 = input.LA(2);
                if ( (synpred275_InternalN4JSParser()) ) {
                    alt447=1;
                }
                else if ( (true) ) {
                    alt447=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 447, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA447_0==Promisify) ) {
                int LA447_4 = input.LA(2);
                if ( (synpred275_InternalN4JSParser()) ) {
                    alt447=1;
                }
                else if ( (true) ) {
                    alt447=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 447, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA447_0==Target) ) {
                int LA447_5 = input.LA(2);
                if ( (synpred275_InternalN4JSParser()) ) {
                    alt447=1;
                }
                else if ( (true) ) {
                    alt447=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 447, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA447_0==Default) && (synpred275_InternalN4JSParser())) {
                alt447=1;
            }
            else if ( (LA447_0==RULE_IDENTIFIER) ) {
                int LA447_7 = input.LA(2);
                if ( (synpred275_InternalN4JSParser()) ) {
                    alt447=1;
                }
                else if ( (true) ) {
                    alt447=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 447, 7, input);
                    throw nvae;
                }
            }
            else if ( ((LA447_0>=Intersection && LA447_0<=Implements)||(LA447_0>=Interface && LA447_0<=Abstract)||(LA447_0>=External && LA447_0<=Function)||(LA447_0>=Private && LA447_0<=Project)||(LA447_0>=Import && LA447_0<=Public)||LA447_0==Static||LA447_0==Async||LA447_0==Class||(LA447_0>=False && LA447_0<=Super)||LA447_0==Union||(LA447_0>=From && LA447_0<=Type)||(LA447_0>=Get && LA447_0<=Set)||LA447_0==SolidusEqualsSign||LA447_0==As||LA447_0==Of||LA447_0==LeftParenthesis||LA447_0==Solidus||LA447_0==LessThanSign||(LA447_0>=CommercialAt && LA447_0<=LeftSquareBracket)||LA447_0==LeftCurlyBracket||LA447_0==RULE_DOUBLE||(LA447_0>=RULE_HEX_INT && LA447_0<=RULE_LEGACY_OCTAL_INT)||LA447_0==RULE_SCIENTIFIC_INT||LA447_0==RULE_STRING||(LA447_0>=RULE_TEMPLATE_HEAD && LA447_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA447_0==RULE_INT) ) {
                alt447=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 447, 0, input);
                throw nvae;
            }
            switch (alt447) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_1_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0=norm1_LeftHandSideExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleClassImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleClassImplementsList_return ruleClassImplementsList() throws RecognitionException {
        InternalN4JSParser.ruleClassImplementsList_return retval = new InternalN4JSParser.ruleClassImplementsList_return();
        retval.start = input.LT(1);
        Token ImplementsKeyword_0=null;
        Token CommaKeyword_2_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0 = null;
        try {
            {
            {
            ImplementsKeyword_0=(Token)match(input,Implements,FOLLOW_156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ImplementsKeyword_0, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_30);
            ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0=ruleParameterizedTypeRefNominal();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_1());
            }
            }
            }
            loop448:
            do {
                int alt448=2;
                int LA448_0 = input.LA(1);
                if ( (LA448_0==Comma) ) {
                    alt448=1;
                }
                switch (alt448) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_156); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getClassImplementsListAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_30);
            	    ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0=ruleParameterizedTypeRefNominal();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop448;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4ClassExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4ClassExpression_return ruleN4ClassExpression() throws RecognitionException {
        InternalN4JSParser.ruleN4ClassExpression_return retval = new InternalN4JSParser.ruleN4ClassExpression_return();
        retval.start = input.LT(1);
        Token ClassKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_3 = null;
        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_4 = null;
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_58); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
            }
            int alt449=2;
            int LA449_0 = input.LA(1);
            if ( ((LA449_0>=Intersection && LA449_0<=Constructor)||(LA449_0>=Promisify && LA449_0<=Abstract)||LA449_0==External||(LA449_0>=Private && LA449_0<=Project)||LA449_0==Public||LA449_0==Static||LA449_0==Target||(LA449_0>=Async && LA449_0<=Await)||LA449_0==Union||(LA449_0>=Yield && LA449_0<=This)||LA449_0==From||LA449_0==Type||(LA449_0>=Get && LA449_0<=Let)||(LA449_0>=Out && LA449_0<=Set)||LA449_0==As||LA449_0==Of||LA449_0==RULE_IDENTIFIER) ) {
                alt449=1;
            }
            else if ( (LA449_0==Implements) ) {
                int LA449_2 = input.LA(2);
                if ( (LA449_2==Implements||LA449_2==Extends||LA449_2==LeftCurlyBracket) ) {
                    alt449=1;
                }
            }
            switch (alt449) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_9);
                    NameBindingIdentifierParserRuleCall_2_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2());
                    }
                    }
                    }
                    break;
            }
            int alt450=2;
            int LA450_0 = input.LA(1);
            if ( (LA450_0==Implements||LA450_0==Extends) ) {
                alt450=1;
            }
            switch (alt450) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    ClassExtendsImplementsParserRuleCall_3=ruleClassExtendsImplements();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsImplementsParserRuleCall_3!=null?((Token)ClassExtendsImplementsParserRuleCall_3.start):null), (ClassExtendsImplementsParserRuleCall_3!=null?((Token)ClassExtendsImplementsParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsImplementsParserRuleCall_3()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=ruleMembers();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4ClassExpression_return norm1_N4ClassExpression() throws RecognitionException {
        InternalN4JSParser.norm1_N4ClassExpression_return retval = new InternalN4JSParser.norm1_N4ClassExpression_return();
        retval.start = input.LT(1);
        Token ClassKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_ClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_3 = null;
        InternalN4JSParser.norm1_Members_return MembersParserRuleCall_4 = null;
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_59); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
            }
            int alt451=2;
            int LA451_0 = input.LA(1);
            if ( ((LA451_0>=Intersection && LA451_0<=Constructor)||(LA451_0>=Promisify && LA451_0<=Abstract)||LA451_0==External||(LA451_0>=Private && LA451_0<=Project)||LA451_0==Public||LA451_0==Static||LA451_0==Target||(LA451_0>=Async && LA451_0<=Await)||LA451_0==Union||LA451_0==This||LA451_0==From||LA451_0==Type||(LA451_0>=Get && LA451_0<=Let)||(LA451_0>=Out && LA451_0<=Set)||LA451_0==As||LA451_0==Of||LA451_0==RULE_IDENTIFIER) ) {
                alt451=1;
            }
            else if ( (LA451_0==Implements) ) {
                int LA451_2 = input.LA(2);
                if ( (LA451_2==Implements||LA451_2==Extends||LA451_2==LeftCurlyBracket) ) {
                    alt451=1;
                }
            }
            switch (alt451) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_59);
                    NameBindingIdentifierParserRuleCall_2_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2());
                    }
                    }
                    }
                    break;
            }
            int alt452=2;
            int LA452_0 = input.LA(1);
            if ( (LA452_0==Implements||LA452_0==Extends) ) {
                alt452=1;
            }
            switch (alt452) {
                case 1 :
                    {
                    pushFollow(FOLLOW_59);
                    ClassExtendsImplementsParserRuleCall_3=norm1_ClassExtendsImplements();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsImplementsParserRuleCall_3!=null?((Token)ClassExtendsImplementsParserRuleCall_3.start):null), (ClassExtendsImplementsParserRuleCall_3!=null?((Token)ClassExtendsImplementsParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsImplementsParserRuleCall_3()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=norm1_Members();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4InterfaceDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4InterfaceDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4InterfaceDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4InterfaceDeclaration_return ruleN4InterfaceDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4InterfaceDeclaration_return retval = new InternalN4JSParser.ruleN4InterfaceDeclaration_return();
        retval.start = input.LT(1);
        Token InterfaceKeyword_0_0_1=null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_0_0_4 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;
        InternalN4JSParser.ruleInterfaceExtendsList_return InterfaceExtendsListParserRuleCall_2 = null;
        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            loop453:
            do {
                int alt453=2;
                int LA453_0 = input.LA(1);
                if ( ((LA453_0>=Protected && LA453_0<=Abstract)||LA453_0==External||(LA453_0>=Private && LA453_0<=Project)||LA453_0==Public||LA453_0==Static||LA453_0==Const) ) {
                    alt453=1;
                }
                switch (alt453) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_10);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop453;
                }
            } while (true);
            InterfaceKeyword_0_0_1=(Token)match(input,Interface,FOLLOW_157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(InterfaceKeyword_0_0_1, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_1());
            }
            int alt454=2;
            int LA454_0 = input.LA(1);
            if ( (LA454_0==Tilde) ) {
                alt454=1;
            }
            switch (alt454) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_58);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyAssignment_0_0_2());
                    }
                    }
                    }
                    break;
            }
            int alt455=2;
            int LA455_0 = input.LA(1);
            if ( ((LA455_0>=Intersection && LA455_0<=Constructor)||(LA455_0>=Promisify && LA455_0<=Abstract)||LA455_0==External||(LA455_0>=Private && LA455_0<=Project)||LA455_0==Public||LA455_0==Static||LA455_0==Target||(LA455_0>=Async && LA455_0<=Await)||LA455_0==Union||(LA455_0>=Yield && LA455_0<=This)||LA455_0==From||LA455_0==Type||(LA455_0>=Get && LA455_0<=Let)||(LA455_0>=Out && LA455_0<=Set)||LA455_0==As||LA455_0==Of||LA455_0==RULE_IDENTIFIER) ) {
                alt455=1;
            }
            else if ( (LA455_0==Implements) ) {
                int LA455_2 = input.LA(2);
                if ( (LA455_2==Implements||LA455_2==Extends||LA455_2==LessThanSign||LA455_2==LeftCurlyBracket||LA455_2==RULE_VERSION) ) {
                    alt455=1;
                }
            }
            switch (alt455) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_9);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getNameAssignment_0_0_3());
                    }
                    }
                    }
                    break;
            }
            int alt456=2;
            int LA456_0 = input.LA(1);
            if ( (LA456_0==RULE_VERSION) ) {
                alt456=1;
            }
            switch (alt456) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    VersionDeclarationParserRuleCall_0_0_4=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_0_0_4!=null?((Token)VersionDeclarationParserRuleCall_0_0_4.start):null), (VersionDeclarationParserRuleCall_0_0_4!=null?((Token)VersionDeclarationParserRuleCall_0_0_4.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getVersionDeclarationParserRuleCall_0_0_4()); 
                    }
                    }
                    break;
            }
            }
            }
            int alt457=2;
            int LA457_0 = input.LA(1);
            if ( (LA457_0==LessThanSign) ) {
                alt457=1;
            }
            switch (alt457) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            int alt458=2;
            int LA458_0 = input.LA(1);
            if ( (LA458_0==Implements||LA458_0==Extends) ) {
                alt458=1;
            }
            switch (alt458) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    InterfaceExtendsListParserRuleCall_2=ruleInterfaceExtendsList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InterfaceExtendsListParserRuleCall_2!=null?((Token)InterfaceExtendsListParserRuleCall_2.start):null), (InterfaceExtendsListParserRuleCall_2!=null?((Token)InterfaceExtendsListParserRuleCall_2.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceExtendsListParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleInterfaceExtendsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleInterfaceExtendsList_return ruleInterfaceExtendsList() throws RecognitionException {
        InternalN4JSParser.ruleInterfaceExtendsList_return retval = new InternalN4JSParser.ruleInterfaceExtendsList_return();
        retval.start = input.LT(1);
        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1=null;
        Token CommaKeyword_2_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0 = null;
        try {
            {
            {
            int alt459=2;
            int LA459_0 = input.LA(1);
            if ( (LA459_0==Extends) ) {
                alt459=1;
            }
            else if ( (LA459_0==Implements) ) {
                alt459=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 459, 0, input);
                throw nvae;
            }
            switch (alt459) {
                case 1 :
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ExtendsKeyword_0_0, grammarAccess.getInterfaceExtendsListAccess().getExtendsKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    ImplementsKeyword_0_1=(Token)match(input,Implements,FOLLOW_156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ImplementsKeyword_0_1, grammarAccess.getInterfaceExtendsListAccess().getImplementsKeyword_0_1());
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_30);
            SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0=ruleParameterizedTypeRefNominal();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.stop):null), grammarAccess.getInterfaceExtendsListAccess().getSuperInterfaceRefsAssignment_1());
            }
            }
            }
            loop460:
            do {
                int alt460=2;
                int LA460_0 = input.LA(1);
                if ( (LA460_0==Comma) ) {
                    alt460=1;
                }
                switch (alt460) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_156); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getInterfaceExtendsListAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_30);
            	    SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0=ruleParameterizedTypeRefNominal();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.stop):null), grammarAccess.getInterfaceExtendsListAccess().getSuperInterfaceRefsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop460;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4EnumDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4EnumDeclaration_return ruleN4EnumDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4EnumDeclaration_return retval = new InternalN4JSParser.ruleN4EnumDeclaration_return();
        retval.start = input.LT(1);
        Token EnumKeyword_0_0_2=null;
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_0_0_4 = null;
        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_0_0 = null;
        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_1_1_0 = null;
        try {
            {
            {
            {
            {
            loop461:
            do {
                int alt461=2;
                int LA461_0 = input.LA(1);
                if ( ((LA461_0>=Protected && LA461_0<=Abstract)||LA461_0==External||(LA461_0>=Private && LA461_0<=Project)||LA461_0==Public||LA461_0==Static||LA461_0==Const) ) {
                    alt461=1;
                }
                switch (alt461) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop461;
                }
            } while (true);
            EnumKeyword_0_0_2=(Token)match(input,Enum,FOLLOW_161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(EnumKeyword_0_0_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2());
            }
            int alt462=2;
            int LA462_0 = input.LA(1);
            if ( ((LA462_0>=Intersection && LA462_0<=Implements)||(LA462_0>=Promisify && LA462_0<=Abstract)||LA462_0==External||(LA462_0>=Private && LA462_0<=Project)||LA462_0==Public||LA462_0==Static||LA462_0==Target||(LA462_0>=Async && LA462_0<=Await)||LA462_0==Union||(LA462_0>=Yield && LA462_0<=This)||LA462_0==From||LA462_0==Type||(LA462_0>=Get && LA462_0<=Let)||(LA462_0>=Out && LA462_0<=Set)||LA462_0==As||LA462_0==Of||LA462_0==RULE_IDENTIFIER) ) {
                alt462=1;
            }
            switch (alt462) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_12);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getNameAssignment_0_0_3());
                    }
                    }
                    }
                    break;
            }
            int alt463=2;
            int LA463_0 = input.LA(1);
            if ( (LA463_0==RULE_VERSION) ) {
                alt463=1;
            }
            switch (alt463) {
                case 1 :
                    {
                    pushFollow(FOLLOW_13);
                    VersionDeclarationParserRuleCall_0_0_4=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_0_0_4!=null?((Token)VersionDeclarationParserRuleCall_0_0_4.start):null), (VersionDeclarationParserRuleCall_0_0_4!=null?((Token)VersionDeclarationParserRuleCall_0_0_4.stop):null), grammarAccess.getN4EnumDeclarationAccess().getVersionDeclarationParserRuleCall_0_0_4()); 
                    }
                    }
                    break;
            }
            }
            }
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_32); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt465=2;
            int LA465_0 = input.LA(1);
            if ( ((LA465_0>=Intersection && LA465_0<=With)||(LA465_0>=For && LA465_0<=Var)||(LA465_0>=As && LA465_0<=Of)||LA465_0==RULE_IDENTIFIER) ) {
                alt465=1;
            }
            switch (alt465) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_2_0_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_0());
                    }
                    }
                    }
                    loop464:
                    do {
                        int alt464=2;
                        int LA464_0 = input.LA(1);
                        if ( (LA464_0==Comma) ) {
                            alt464=1;
                        }
                        switch (alt464) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_2_1_1_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop464;
                        }
                    } while (true);
                    }
                    break;
            }
            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_3, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4EnumLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4EnumLiteral_return ruleN4EnumLiteral() throws RecognitionException {
        InternalN4JSParser.ruleN4EnumLiteral_return retval = new InternalN4JSParser.ruleN4EnumLiteral_return();
        retval.start = input.LT(1);
        Token ColonKeyword_1_0=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ValueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_43);
            NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getN4EnumLiteralAccess().getNameAssignment_0());
            }
            }
            }
            int alt466=2;
            int LA466_0 = input.LA(1);
            if ( (LA466_0==Colon) ) {
                alt466=1;
            }
            switch (alt466) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ColonKeyword_1_0, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ValueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)ValueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (ValueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)ValueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getN4EnumLiteralAccess().getValueExpressionAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MemberDeclaration_return ruleN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4MemberDeclaration_return retval = new InternalN4JSParser.ruleN4MemberDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;
        InternalN4JSParser.ruleN4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;
        InternalN4JSParser.ruleN4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.ruleN4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;
        InternalN4JSParser.ruleN4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;
        InternalN4JSParser.ruleN4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;
        try {
            {
            int alt467=6;
            alt467 = dfa467.predict(input);
            switch (alt467) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=ruleAnnotatedN4MemberDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=ruleN4GetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=ruleN4SetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=ruleN4MethodDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=ruleN4FieldDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=ruleN4CallableConstructorDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4MemberDeclaration_return norm1_N4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4MemberDeclaration_return retval = new InternalN4JSParser.norm1_N4MemberDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;
        InternalN4JSParser.norm1_N4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;
        InternalN4JSParser.norm1_N4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.norm1_N4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;
        InternalN4JSParser.norm1_N4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;
        InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;
        try {
            {
            int alt468=6;
            alt468 = dfa468.predict(input);
            switch (alt468) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=norm1_AnnotatedN4MemberDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=norm1_N4GetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=norm1_N4SetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=norm1_N4MethodDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=norm1_N4FieldDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=norm1_N4CallableConstructorDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedN4MemberDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return retval = new InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_1_1_0=null;
        Token LeftParenthesisKeyword_1_1_2=null;
        Token RightParenthesisKeyword_1_1_4=null;
        Token SemicolonKeyword_1_1_6=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;
        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_1_3_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_5_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0 = null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2 = null;
        InternalN4JSParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_162);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt480=4;
            alt480 = dfa480.predict(input);
            switch (alt480) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop469:
                    do {
                        int alt469=2;
                        int LA469_0 = input.LA(1);
                        if ( ((LA469_0>=Protected && LA469_0<=Abstract)||LA469_0==External||(LA469_0>=Private && LA469_0<=Project)||LA469_0==Public||LA469_0==Static||LA469_0==Const) ) {
                            alt469=1;
                        }
                        switch (alt469) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_163);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop469;
                        }
                    } while (true);
                    pushFollow(FOLLOW_164);
                    GetterHeaderParserRuleCall_1_0_0_0_2=ruleGetterHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }
                    }
                    }
                    int alt470=2;
                    int LA470_0 = input.LA(1);
                    if ( (LA470_0==LeftCurlyBracket) && (synpred285_InternalN4JSParser())) {
                        alt470=1;
                    }
                    switch (alt470) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_109);
                            BodyBlockParserRuleCall_1_0_1_0=ruleBlock();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1());
                            }
                            }
                            }
                            break;
                    }
                    int alt471=2;
                    int LA471_0 = input.LA(1);
                    if ( (LA471_0==Semicolon) ) {
                        alt471=1;
                    }
                    switch (alt471) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop472:
                    do {
                        int alt472=2;
                        int LA472_0 = input.LA(1);
                        if ( ((LA472_0>=Protected && LA472_0<=Abstract)||LA472_0==External||(LA472_0>=Private && LA472_0<=Project)||LA472_0==Public||LA472_0==Static||LA472_0==Const) ) {
                            alt472=1;
                        }
                        switch (alt472) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_165);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop472;
                        }
                    } while (true);
                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_107);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3());
                    }
                    }
                    }
                    }
                    }
                    int alt473=2;
                    int LA473_0 = input.LA(1);
                    if ( (LA473_0==QuestionMark) ) {
                        alt473=1;
                    }
                    switch (alt473) {
                        case 1 :
                            {
                            {
                            DeclaredOptionalQuestionMarkKeyword_1_1_1_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(DeclaredOptionalQuestionMarkKeyword_1_1_1_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                            }
                            }
                            }
                            break;
                    }
                    LeftParenthesisKeyword_1_1_2=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftParenthesisKeyword_1_1_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_71);
                    FparFormalParameterParserRuleCall_1_1_3_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((FparFormalParameterParserRuleCall_1_1_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_3_0.start):null), (FparFormalParameterParserRuleCall_1_1_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_3());
                    }
                    }
                    }
                    RightParenthesisKeyword_1_1_4=(Token)match(input,RightParenthesis,FOLLOW_164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightParenthesisKeyword_1_1_4, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                    }
                    int alt474=2;
                    int LA474_0 = input.LA(1);
                    if ( (LA474_0==LeftCurlyBracket) && (synpred288_InternalN4JSParser())) {
                        alt474=1;
                    }
                    switch (alt474) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_109);
                            BodyBlockParserRuleCall_1_1_5_0=ruleBlock();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((BodyBlockParserRuleCall_1_1_5_0!=null?((Token)BodyBlockParserRuleCall_1_1_5_0.start):null), (BodyBlockParserRuleCall_1_1_5_0!=null?((Token)BodyBlockParserRuleCall_1_1_5_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_5());
                            }
                            }
                            }
                            break;
                    }
                    int alt475=2;
                    int LA475_0 = input.LA(1);
                    if ( (LA475_0==Semicolon) ) {
                        alt475=1;
                    }
                    switch (alt475) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_6=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_1_6, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop476:
                    do {
                        int alt476=2;
                        alt476 = dfa476.predict(input);
                        switch (alt476) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_162);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop476;
                        }
                    } while (true);
                    int alt477=2;
                    int LA477_0 = input.LA(1);
                    if ( (LA477_0==LessThanSign) ) {
                        alt477=1;
                    }
                    switch (alt477) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_108);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }
                            }
                            break;
                    }
                    int alt478=2;
                    int LA478_0 = input.LA(1);
                    if ( (LA478_0==Asterisk) ) {
                        alt478=1;
                    }
                    else if ( ((LA478_0>=Intersection && LA478_0<=With)||(LA478_0>=For && LA478_0<=Var)||(LA478_0>=As && LA478_0<=Of)||LA478_0==LeftSquareBracket||LA478_0==RULE_DOUBLE||(LA478_0>=RULE_HEX_INT && LA478_0<=RULE_OCTAL_INT)||LA478_0==RULE_SCIENTIFIC_INT||LA478_0==RULE_IDENTIFIER||LA478_0==RULE_STRING||LA478_0==RULE_INT) ) {
                        alt478=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 478, 0, input);
                        throw nvae;
                    }
                    switch (alt478) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_106); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce(GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_3_0_0_0());
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_39);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_3_0_1());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_109);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2=norm1_MethodParamsReturnAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2()); 
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_106);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0=ruleAsyncNoTrailingLineBreak();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_166);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_3_1_1());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_109);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2=ruleMethodParamsReturnAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2()); 
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt479=2;
                    int LA479_0 = input.LA(1);
                    if ( (LA479_0==Semicolon) ) {
                        alt479=1;
                    }
                    switch (alt479) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=ruleFieldDeclarationImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return retval = new InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_1_1_0=null;
        Token LeftParenthesisKeyword_1_1_2=null;
        Token RightParenthesisKeyword_1_1_4=null;
        Token SemicolonKeyword_1_1_6=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;
        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_1_3_0 = null;
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_1_5_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0 = null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2 = null;
        InternalN4JSParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_162);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt492=4;
            alt492 = dfa492.predict(input);
            switch (alt492) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop481:
                    do {
                        int alt481=2;
                        int LA481_0 = input.LA(1);
                        if ( ((LA481_0>=Protected && LA481_0<=Abstract)||LA481_0==External||(LA481_0>=Private && LA481_0<=Project)||LA481_0==Public||LA481_0==Static||LA481_0==Const) ) {
                            alt481=1;
                        }
                        switch (alt481) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_163);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop481;
                        }
                    } while (true);
                    pushFollow(FOLLOW_164);
                    GetterHeaderParserRuleCall_1_0_0_0_2=norm1_GetterHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }
                    }
                    }
                    int alt482=2;
                    int LA482_0 = input.LA(1);
                    if ( (LA482_0==LeftCurlyBracket) && (synpred293_InternalN4JSParser())) {
                        alt482=1;
                    }
                    switch (alt482) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_109);
                            BodyBlockParserRuleCall_1_0_1_0=norm1_Block();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1());
                            }
                            }
                            }
                            break;
                    }
                    int alt483=2;
                    int LA483_0 = input.LA(1);
                    if ( (LA483_0==Semicolon) ) {
                        alt483=1;
                    }
                    switch (alt483) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop484:
                    do {
                        int alt484=2;
                        int LA484_0 = input.LA(1);
                        if ( ((LA484_0>=Protected && LA484_0<=Abstract)||LA484_0==External||(LA484_0>=Private && LA484_0<=Project)||LA484_0==Public||LA484_0==Static||LA484_0==Const) ) {
                            alt484=1;
                        }
                        switch (alt484) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_165);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop484;
                        }
                    } while (true);
                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_107);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3());
                    }
                    }
                    }
                    }
                    }
                    int alt485=2;
                    int LA485_0 = input.LA(1);
                    if ( (LA485_0==QuestionMark) ) {
                        alt485=1;
                    }
                    switch (alt485) {
                        case 1 :
                            {
                            {
                            DeclaredOptionalQuestionMarkKeyword_1_1_1_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(DeclaredOptionalQuestionMarkKeyword_1_1_1_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                            }
                            }
                            }
                            break;
                    }
                    LeftParenthesisKeyword_1_1_2=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftParenthesisKeyword_1_1_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_71);
                    FparFormalParameterParserRuleCall_1_1_3_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((FparFormalParameterParserRuleCall_1_1_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_3_0.start):null), (FparFormalParameterParserRuleCall_1_1_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_3());
                    }
                    }
                    }
                    RightParenthesisKeyword_1_1_4=(Token)match(input,RightParenthesis,FOLLOW_164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightParenthesisKeyword_1_1_4, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                    }
                    int alt486=2;
                    int LA486_0 = input.LA(1);
                    if ( (LA486_0==LeftCurlyBracket) && (synpred296_InternalN4JSParser())) {
                        alt486=1;
                    }
                    switch (alt486) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_109);
                            BodyBlockParserRuleCall_1_1_5_0=norm1_Block();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((BodyBlockParserRuleCall_1_1_5_0!=null?((Token)BodyBlockParserRuleCall_1_1_5_0.start):null), (BodyBlockParserRuleCall_1_1_5_0!=null?((Token)BodyBlockParserRuleCall_1_1_5_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_5());
                            }
                            }
                            }
                            break;
                    }
                    int alt487=2;
                    int LA487_0 = input.LA(1);
                    if ( (LA487_0==Semicolon) ) {
                        alt487=1;
                    }
                    switch (alt487) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_6=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_1_6, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop488:
                    do {
                        int alt488=2;
                        alt488 = dfa488.predict(input);
                        switch (alt488) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_162);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop488;
                        }
                    } while (true);
                    int alt489=2;
                    int LA489_0 = input.LA(1);
                    if ( (LA489_0==LessThanSign) ) {
                        alt489=1;
                    }
                    switch (alt489) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_108);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }
                            }
                            break;
                    }
                    int alt490=2;
                    int LA490_0 = input.LA(1);
                    if ( (LA490_0==Asterisk) ) {
                        alt490=1;
                    }
                    else if ( ((LA490_0>=Intersection && LA490_0<=With)||(LA490_0>=For && LA490_0<=Var)||(LA490_0>=As && LA490_0<=Of)||LA490_0==LeftSquareBracket||LA490_0==RULE_DOUBLE||(LA490_0>=RULE_HEX_INT && LA490_0<=RULE_OCTAL_INT)||LA490_0==RULE_SCIENTIFIC_INT||LA490_0==RULE_IDENTIFIER||LA490_0==RULE_STRING||LA490_0==RULE_INT) ) {
                        alt490=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 490, 0, input);
                        throw nvae;
                    }
                    switch (alt490) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_106); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce(GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_3_0_0_0());
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_39);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_3_0_1());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_109);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2=norm1_MethodParamsReturnAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2()); 
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_106);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0=ruleAsyncNoTrailingLineBreak();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_166);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_3_1_1());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_109);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2=ruleMethodParamsReturnAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2()); 
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt491=2;
                    int LA491_0 = input.LA(1);
                    if ( (LA491_0==Semicolon) ) {
                        alt491=1;
                    }
                    switch (alt491) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=norm1_FieldDeclarationImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleFieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFieldDeclarationImpl_return ruleFieldDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleFieldDeclarationImpl_return retval = new InternalN4JSParser.ruleFieldDeclarationImpl_return();
        retval.start = input.LT(1);
        Token DeclaredOptionalQuestionMarkKeyword_2_0=null;
        Token EqualsSignKeyword_4_0=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_3 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_5 = null;
        try {
            {
            {
            loop493:
            do {
                int alt493=2;
                alt493 = dfa493.predict(input);
                switch (alt493) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_106);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop493;
                }
            } while (true);
            {
            {
            pushFollow(FOLLOW_167);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_1());
            }
            }
            }
            int alt494=2;
            int LA494_0 = input.LA(1);
            if ( (LA494_0==QuestionMark) ) {
                alt494=1;
            }
            switch (alt494) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_2_0=(Token)match(input,QuestionMark,FOLLOW_168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_2_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            int alt495=2;
            int LA495_0 = input.LA(1);
            if ( (LA495_0==Colon) ) {
                alt495=1;
            }
            switch (alt495) {
                case 1 :
                    {
                    pushFollow(FOLLOW_169);
                    ColonSepDeclaredTypeRefParserRuleCall_3=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_3.start):null), (ColonSepDeclaredTypeRefParserRuleCall_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_3()); 
                    }
                    }
                    break;
            }
            int alt496=2;
            int LA496_0 = input.LA(1);
            if ( (LA496_0==EqualsSign) ) {
                alt496=1;
            }
            switch (alt496) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_18);
                    ExpressionExpressionParserRuleCall_4_1_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1());
                    }
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_FieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FieldDeclarationImpl_return norm1_FieldDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm1_FieldDeclarationImpl_return retval = new InternalN4JSParser.norm1_FieldDeclarationImpl_return();
        retval.start = input.LT(1);
        Token DeclaredOptionalQuestionMarkKeyword_2_0=null;
        Token EqualsSignKeyword_4_0=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_3 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_5 = null;
        try {
            {
            {
            loop497:
            do {
                int alt497=2;
                alt497 = dfa497.predict(input);
                switch (alt497) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_106);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop497;
                }
            } while (true);
            {
            {
            pushFollow(FOLLOW_167);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_1());
            }
            }
            }
            int alt498=2;
            int LA498_0 = input.LA(1);
            if ( (LA498_0==QuestionMark) ) {
                alt498=1;
            }
            switch (alt498) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_2_0=(Token)match(input,QuestionMark,FOLLOW_168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_2_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            int alt499=2;
            int LA499_0 = input.LA(1);
            if ( (LA499_0==Colon) ) {
                alt499=1;
            }
            switch (alt499) {
                case 1 :
                    {
                    pushFollow(FOLLOW_169);
                    ColonSepDeclaredTypeRefParserRuleCall_3=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_3.start):null), (ColonSepDeclaredTypeRefParserRuleCall_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_3()); 
                    }
                    }
                    break;
            }
            int alt500=2;
            int LA500_0 = input.LA(1);
            if ( (LA500_0==EqualsSign) ) {
                alt500=1;
            }
            switch (alt500) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_18);
                    ExpressionExpressionParserRuleCall_4_1_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1());
                    }
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4FieldDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4FieldDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4FieldDeclaration_return ruleN4FieldDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4FieldDeclaration_return retval = new InternalN4JSParser.ruleN4FieldDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=ruleFieldDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4FieldDeclaration_return norm1_N4FieldDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4FieldDeclaration_return retval = new InternalN4JSParser.norm1_N4FieldDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=norm1_FieldDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MethodDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MethodDeclaration_return ruleN4MethodDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4MethodDeclaration_return retval = new InternalN4JSParser.ruleN4MethodDeclaration_return();
        retval.start = input.LT(1);
        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1_0 = null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2 = null;
        try {
            {
            {
            {
            {
            loop501:
            do {
                int alt501=2;
                alt501 = dfa501.predict(input);
                switch (alt501) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_162);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop501;
                }
            } while (true);
            int alt502=2;
            int LA502_0 = input.LA(1);
            if ( (LA502_0==LessThanSign) ) {
                alt502=1;
            }
            switch (alt502) {
                case 1 :
                    {
                    pushFollow(FOLLOW_108);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }
                    }
                    break;
            }
            int alt503=2;
            int LA503_0 = input.LA(1);
            if ( (LA503_0==Asterisk) ) {
                alt503=1;
            }
            else if ( ((LA503_0>=Intersection && LA503_0<=With)||(LA503_0>=For && LA503_0<=Var)||(LA503_0>=As && LA503_0<=Of)||LA503_0==LeftSquareBracket||LA503_0==RULE_DOUBLE||(LA503_0>=RULE_HEX_INT && LA503_0<=RULE_OCTAL_INT)||LA503_0==RULE_SCIENTIFIC_INT||LA503_0==RULE_IDENTIFIER||LA503_0==RULE_STRING||LA503_0==RULE_INT) ) {
                alt503=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 503, 0, input);
                throw nvae;
            }
            switch (alt503) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_39);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_109);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsReturnAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2()); 
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_106);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0=ruleAsyncNoTrailingLineBreak();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_166);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_1());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_109);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2=ruleMethodParamsReturnAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2()); 
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt504=2;
            int LA504_0 = input.LA(1);
            if ( (LA504_0==Semicolon) ) {
                alt504=1;
            }
            switch (alt504) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4MethodDeclaration_return norm1_N4MethodDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4MethodDeclaration_return retval = new InternalN4JSParser.norm1_N4MethodDeclaration_return();
        retval.start = input.LT(1);
        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1_0 = null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2 = null;
        try {
            {
            {
            {
            {
            loop505:
            do {
                int alt505=2;
                alt505 = dfa505.predict(input);
                switch (alt505) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_162);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop505;
                }
            } while (true);
            int alt506=2;
            int LA506_0 = input.LA(1);
            if ( (LA506_0==LessThanSign) ) {
                alt506=1;
            }
            switch (alt506) {
                case 1 :
                    {
                    pushFollow(FOLLOW_108);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }
                    }
                    break;
            }
            int alt507=2;
            int LA507_0 = input.LA(1);
            if ( (LA507_0==Asterisk) ) {
                alt507=1;
            }
            else if ( ((LA507_0>=Intersection && LA507_0<=With)||(LA507_0>=For && LA507_0<=Var)||(LA507_0>=As && LA507_0<=Of)||LA507_0==LeftSquareBracket||LA507_0==RULE_DOUBLE||(LA507_0>=RULE_HEX_INT && LA507_0<=RULE_OCTAL_INT)||LA507_0==RULE_SCIENTIFIC_INT||LA507_0==RULE_IDENTIFIER||LA507_0==RULE_STRING||LA507_0==RULE_INT) ) {
                alt507=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 507, 0, input);
                throw nvae;
            }
            switch (alt507) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_39);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_109);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsReturnAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2()); 
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_106);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0=ruleAsyncNoTrailingLineBreak();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_166);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_1());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_109);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2=ruleMethodParamsReturnAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2()); 
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt508=2;
            int LA508_0 = input.LA(1);
            if ( (LA508_0==Semicolon) ) {
                alt508=1;
            }
            switch (alt508) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4CallableConstructorDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4CallableConstructorDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4CallableConstructorDeclaration_return ruleN4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4CallableConstructorDeclaration_return retval = new InternalN4JSParser.ruleN4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_109);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt509=2;
            int LA509_0 = input.LA(1);
            if ( (LA509_0==Semicolon) ) {
                alt509=1;
            }
            switch (alt509) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return norm1_N4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return retval = new InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_109);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt510=2;
            int LA510_0 = input.LA(1);
            if ( (LA510_0==Semicolon) ) {
                alt510=1;
            }
            switch (alt510) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleMethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMethodParamsAndBody_return ruleMethodParamsAndBody() throws RecognitionException {
        InternalN4JSParser.ruleMethodParamsAndBody_return retval = new InternalN4JSParser.ruleMethodParamsAndBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_170);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt511=2;
            int LA511_0 = input.LA(1);
            if ( (LA511_0==LeftCurlyBracket) && (synpred306_InternalN4JSParser())) {
                alt511=1;
            }
            switch (alt511) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_MethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MethodParamsAndBody_return norm1_MethodParamsAndBody() throws RecognitionException {
        InternalN4JSParser.norm1_MethodParamsAndBody_return retval = new InternalN4JSParser.norm1_MethodParamsAndBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_170);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt512=2;
            int LA512_0 = input.LA(1);
            if ( (LA512_0==LeftCurlyBracket) && (synpred307_InternalN4JSParser())) {
                alt512=1;
            }
            switch (alt512) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleMethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMethodParamsReturnAndBody_return ruleMethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return retval = new InternalN4JSParser.ruleMethodParamsReturnAndBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_1 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_171);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt513=2;
            int LA513_0 = input.LA(1);
            if ( (LA513_0==Colon) ) {
                alt513=1;
            }
            switch (alt513) {
                case 1 :
                    {
                    pushFollow(FOLLOW_170);
                    ColonSepReturnTypeRefParserRuleCall_1=ruleColonSepReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepReturnTypeRefParserRuleCall_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_1.start):null), (ColonSepReturnTypeRefParserRuleCall_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_1.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepReturnTypeRefParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            int alt514=2;
            int LA514_0 = input.LA(1);
            if ( (LA514_0==LeftCurlyBracket) && (synpred308_InternalN4JSParser())) {
                alt514=1;
            }
            switch (alt514) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_MethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MethodParamsReturnAndBody_return norm1_MethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return retval = new InternalN4JSParser.norm1_MethodParamsReturnAndBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_1 = null;
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_171);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt515=2;
            int LA515_0 = input.LA(1);
            if ( (LA515_0==Colon) ) {
                alt515=1;
            }
            switch (alt515) {
                case 1 :
                    {
                    pushFollow(FOLLOW_170);
                    ColonSepReturnTypeRefParserRuleCall_1=ruleColonSepReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepReturnTypeRefParserRuleCall_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_1.start):null), (ColonSepReturnTypeRefParserRuleCall_1!=null?((Token)ColonSepReturnTypeRefParserRuleCall_1.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepReturnTypeRefParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            int alt516=2;
            int LA516_0 = input.LA(1);
            if ( (LA516_0==LeftCurlyBracket) && (synpred309_InternalN4JSParser())) {
                alt516=1;
            }
            switch (alt516) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4GetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4GetterDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4GetterDeclaration_return ruleN4GetterDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4GetterDeclaration_return retval = new InternalN4JSParser.ruleN4GetterDeclaration_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_2=null;
        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            loop517:
            do {
                int alt517=2;
                int LA517_0 = input.LA(1);
                if ( ((LA517_0>=Protected && LA517_0<=Abstract)||LA517_0==External||(LA517_0>=Private && LA517_0<=Project)||LA517_0==Public||LA517_0==Static||LA517_0==Const) ) {
                    alt517=1;
                }
                switch (alt517) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_163);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop517;
                }
            } while (true);
            pushFollow(FOLLOW_164);
            GetterHeaderParserRuleCall_0_0_2=ruleGetterHeader();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }
            }
            }
            int alt518=2;
            int LA518_0 = input.LA(1);
            if ( (LA518_0==LeftCurlyBracket) && (synpred311_InternalN4JSParser())) {
                alt518=1;
            }
            switch (alt518) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_109);
                    BodyBlockParserRuleCall_1_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1());
                    }
                    }
                    }
                    break;
            }
            int alt519=2;
            int LA519_0 = input.LA(1);
            if ( (LA519_0==Semicolon) ) {
                alt519=1;
            }
            switch (alt519) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4GetterDeclaration_return norm1_N4GetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4GetterDeclaration_return retval = new InternalN4JSParser.norm1_N4GetterDeclaration_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_2=null;
        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            loop520:
            do {
                int alt520=2;
                int LA520_0 = input.LA(1);
                if ( ((LA520_0>=Protected && LA520_0<=Abstract)||LA520_0==External||(LA520_0>=Private && LA520_0<=Project)||LA520_0==Public||LA520_0==Static||LA520_0==Const) ) {
                    alt520=1;
                }
                switch (alt520) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_163);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop520;
                }
            } while (true);
            pushFollow(FOLLOW_164);
            GetterHeaderParserRuleCall_0_0_2=norm1_GetterHeader();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }
            }
            }
            int alt521=2;
            int LA521_0 = input.LA(1);
            if ( (LA521_0==LeftCurlyBracket) && (synpred313_InternalN4JSParser())) {
                alt521=1;
            }
            switch (alt521) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_109);
                    BodyBlockParserRuleCall_1_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1());
                    }
                    }
                    }
                    break;
            }
            int alt522=2;
            int LA522_0 = input.LA(1);
            if ( (LA522_0==Semicolon) ) {
                alt522=1;
            }
            switch (alt522) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleGetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleGetterHeader_return ruleGetterHeader() throws RecognitionException {
        InternalN4JSParser.ruleGetterHeader_return retval = new InternalN4JSParser.ruleGetterHeader_return();
        retval.start = input.LT(1);
        Token GetKeyword_0=null;
        Token DeclaredOptionalQuestionMarkKeyword_2_0=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_5 = null;
        try {
            {
            {
            GetKeyword_0=(Token)match(input,Get,FOLLOW_106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GetKeyword_0, grammarAccess.getGetterHeaderAccess().getGetKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_107);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_1());
            }
            }
            }
            int alt523=2;
            int LA523_0 = input.LA(1);
            if ( (LA523_0==QuestionMark) ) {
                alt523=1;
            }
            switch (alt523) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_2_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_2_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3());
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4());
            }
            int alt524=2;
            int LA524_0 = input.LA(1);
            if ( (LA524_0==Colon) ) {
                alt524=1;
            }
            switch (alt524) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepDeclaredTypeRefParserRuleCall_5=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_5!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_5.start):null), (ColonSepDeclaredTypeRefParserRuleCall_5!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_5()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_GetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_GetterHeader_return norm1_GetterHeader() throws RecognitionException {
        InternalN4JSParser.norm1_GetterHeader_return retval = new InternalN4JSParser.norm1_GetterHeader_return();
        retval.start = input.LT(1);
        Token GetKeyword_0=null;
        Token DeclaredOptionalQuestionMarkKeyword_2_0=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_5 = null;
        try {
            {
            {
            GetKeyword_0=(Token)match(input,Get,FOLLOW_106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GetKeyword_0, grammarAccess.getGetterHeaderAccess().getGetKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_107);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_1());
            }
            }
            }
            int alt525=2;
            int LA525_0 = input.LA(1);
            if ( (LA525_0==QuestionMark) ) {
                alt525=1;
            }
            switch (alt525) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_2_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_2_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3());
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4());
            }
            int alt526=2;
            int LA526_0 = input.LA(1);
            if ( (LA526_0==Colon) ) {
                alt526=1;
            }
            switch (alt526) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepDeclaredTypeRefParserRuleCall_5=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_5!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_5.start):null), (ColonSepDeclaredTypeRefParserRuleCall_5!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_5()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4SetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4SetterDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4SetterDeclaration_return ruleN4SetterDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4SetterDeclaration_return retval = new InternalN4JSParser.ruleN4SetterDeclaration_return();
        retval.start = input.LT(1);
        Token SetKeyword_0_0_2=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        Token SemicolonKeyword_6=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;
        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_5_0 = null;
        try {
            {
            {
            {
            {
            loop527:
            do {
                int alt527=2;
                int LA527_0 = input.LA(1);
                if ( ((LA527_0>=Protected && LA527_0<=Abstract)||LA527_0==External||(LA527_0>=Private && LA527_0<=Project)||LA527_0==Public||LA527_0==Static||LA527_0==Const) ) {
                    alt527=1;
                }
                switch (alt527) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_165);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop527;
                }
            } while (true);
            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
            }
            {
            {
            pushFollow(FOLLOW_107);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3());
            }
            }
            }
            }
            }
            int alt528=2;
            int LA528_0 = input.LA(1);
            if ( (LA528_0==QuestionMark) ) {
                alt528=1;
            }
            switch (alt528) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_1_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_71);
            FparFormalParameterParserRuleCall_3_0=ruleFormalParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.start):null), (FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            int alt529=2;
            int LA529_0 = input.LA(1);
            if ( (LA529_0==LeftCurlyBracket) && (synpred318_InternalN4JSParser())) {
                alt529=1;
            }
            switch (alt529) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_109);
                    BodyBlockParserRuleCall_5_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.start):null), (BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_5());
                    }
                    }
                    }
                    break;
            }
            int alt530=2;
            int LA530_0 = input.LA(1);
            if ( (LA530_0==Semicolon) ) {
                alt530=1;
            }
            switch (alt530) {
                case 1 :
                    {
                    SemicolonKeyword_6=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_6, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4SetterDeclaration_return norm1_N4SetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4SetterDeclaration_return retval = new InternalN4JSParser.norm1_N4SetterDeclaration_return();
        retval.start = input.LT(1);
        Token SetKeyword_0_0_2=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        Token SemicolonKeyword_6=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;
        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_3_0 = null;
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_5_0 = null;
        try {
            {
            {
            {
            {
            loop531:
            do {
                int alt531=2;
                int LA531_0 = input.LA(1);
                if ( ((LA531_0>=Protected && LA531_0<=Abstract)||LA531_0==External||(LA531_0>=Private && LA531_0<=Project)||LA531_0==Public||LA531_0==Static||LA531_0==Const) ) {
                    alt531=1;
                }
                switch (alt531) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_165);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop531;
                }
            } while (true);
            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
            }
            {
            {
            pushFollow(FOLLOW_107);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3());
            }
            }
            }
            }
            }
            int alt532=2;
            int LA532_0 = input.LA(1);
            if ( (LA532_0==QuestionMark) ) {
                alt532=1;
            }
            switch (alt532) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_1_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_71);
            FparFormalParameterParserRuleCall_3_0=norm1_FormalParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.start):null), (FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            int alt533=2;
            int LA533_0 = input.LA(1);
            if ( (LA533_0==LeftCurlyBracket) && (synpred321_InternalN4JSParser())) {
                alt533=1;
            }
            switch (alt533) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_109);
                    BodyBlockParserRuleCall_5_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.start):null), (BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_5());
                    }
                    }
                    }
                    break;
            }
            int alt534=2;
            int LA534_0 = input.LA(1);
            if ( (LA534_0==Semicolon) ) {
                alt534=1;
            }
            switch (alt534) {
                case 1 :
                    {
                    SemicolonKeyword_6=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_6, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingPattern();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingPattern_return ruleBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleBindingPattern_return retval = new InternalN4JSParser.ruleBindingPattern_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;
        InternalN4JSParser.ruleArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;
        try {
            {
            int alt535=2;
            int LA535_0 = input.LA(1);
            if ( (LA535_0==LeftCurlyBracket) ) {
                alt535=1;
            }
            else if ( (LA535_0==LeftSquareBracket) ) {
                alt535=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 535, 0, input);
                throw nvae;
            }
            switch (alt535) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=ruleObjectBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=ruleArrayBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingPattern_return norm1_BindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_BindingPattern_return retval = new InternalN4JSParser.norm1_BindingPattern_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_ObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;
        InternalN4JSParser.norm1_ArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;
        try {
            {
            int alt536=2;
            int LA536_0 = input.LA(1);
            if ( (LA536_0==LeftCurlyBracket) ) {
                alt536=1;
            }
            else if ( (LA536_0==LeftSquareBracket) ) {
                alt536=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 536, 0, input);
                throw nvae;
            }
            switch (alt536) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=norm1_ObjectBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=norm1_ArrayBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectBindingPattern();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleObjectBindingPattern_return ruleObjectBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleObjectBindingPattern_return retval = new InternalN4JSParser.ruleObjectBindingPattern_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;
        InternalN4JSParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_172); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt538=2;
            int LA538_0 = input.LA(1);
            if ( ((LA538_0>=Intersection && LA538_0<=With)||(LA538_0>=For && LA538_0<=Var)||(LA538_0>=As && LA538_0<=Of)||(LA538_0>=CommercialAt && LA538_0<=LeftSquareBracket)||LA538_0==RULE_DOUBLE||(LA538_0>=RULE_HEX_INT && LA538_0<=RULE_OCTAL_INT)||LA538_0==RULE_SCIENTIFIC_INT||LA538_0==RULE_IDENTIFIER||LA538_0==RULE_STRING||LA538_0==RULE_INT) ) {
                alt538=1;
            }
            switch (alt538) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=ruleBindingProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0());
                    }
                    }
                    }
                    loop537:
                    do {
                        int alt537=2;
                        int LA537_0 = input.LA(1);
                        if ( (LA537_0==Comma) ) {
                            alt537=1;
                        }
                        switch (alt537) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_173); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=ruleBindingProperty();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop537;
                        }
                    } while (true);
                    }
                    break;
            }
            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ObjectBindingPattern_return norm1_ObjectBindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_ObjectBindingPattern_return retval = new InternalN4JSParser.norm1_ObjectBindingPattern_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;
        InternalN4JSParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_172); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt540=2;
            int LA540_0 = input.LA(1);
            if ( ((LA540_0>=Intersection && LA540_0<=With)||(LA540_0>=For && LA540_0<=Var)||(LA540_0>=As && LA540_0<=Of)||(LA540_0>=CommercialAt && LA540_0<=LeftSquareBracket)||LA540_0==RULE_DOUBLE||(LA540_0>=RULE_HEX_INT && LA540_0<=RULE_OCTAL_INT)||LA540_0==RULE_SCIENTIFIC_INT||LA540_0==RULE_IDENTIFIER||LA540_0==RULE_STRING||LA540_0==RULE_INT) ) {
                alt540=1;
            }
            switch (alt540) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=norm1_BindingProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0());
                    }
                    }
                    }
                    loop539:
                    do {
                        int alt539=2;
                        int LA539_0 = input.LA(1);
                        if ( (LA539_0==Comma) ) {
                            alt539=1;
                        }
                        switch (alt539) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_173); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=norm1_BindingProperty();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop539;
                        }
                    } while (true);
                    }
                    break;
            }
            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayBindingPattern();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayBindingPattern_return ruleArrayBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleArrayBindingPattern_return retval = new InternalN4JSParser.ruleArrayBindingPattern_return();
        retval.start = input.LT(1);
        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;
        InternalN4JSParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
            }
            loop541:
            do {
                int alt541=2;
                int LA541_0 = input.LA(1);
                if ( (LA541_0==Comma) ) {
                    alt541=1;
                }
                switch (alt541) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_174);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop541;
                }
            } while (true);
            int alt546=2;
            int LA546_0 = input.LA(1);
            if ( ((LA546_0>=Intersection && LA546_0<=Implements)||(LA546_0>=Promisify && LA546_0<=Abstract)||LA546_0==External||(LA546_0>=Private && LA546_0<=Project)||LA546_0==Public||LA546_0==Static||LA546_0==Target||(LA546_0>=Async && LA546_0<=Await)||LA546_0==Union||(LA546_0>=Yield && LA546_0<=This)||LA546_0==From||LA546_0==Type||LA546_0==FullStopFullStopFullStop||(LA546_0>=Get && LA546_0<=Let)||(LA546_0>=Out && LA546_0<=Set)||LA546_0==As||LA546_0==Of||(LA546_0>=CommercialAt && LA546_0<=LeftSquareBracket)||LA546_0==LeftCurlyBracket||LA546_0==RULE_IDENTIFIER) ) {
                alt546=1;
            }
            switch (alt546) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_99);
                    ElementsBindingRestElementParserRuleCall_3_0_0=ruleBindingRestElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0());
                    }
                    }
                    }
                    loop543:
                    do {
                        int alt543=2;
                        alt543 = dfa543.predict(input);
                        switch (alt543) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_175); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop542:
                    	    do {
                    	        int alt542=2;
                    	        int LA542_0 = input.LA(1);
                    	        if ( (LA542_0==Comma) ) {
                    	            alt542=1;
                    	        }
                    	        switch (alt542) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_175);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      						announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1());
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop542;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=ruleBindingRestElement();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop543;
                        }
                    } while (true);
                    int alt545=2;
                    int LA545_0 = input.LA(1);
                    if ( (LA545_0==Comma) ) {
                        alt545=1;
                    }
                    switch (alt545) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_99); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                            }
                            loop544:
                            do {
                                int alt544=2;
                                int LA544_0 = input.LA(1);
                                if ( (LA544_0==Comma) ) {
                                    alt544=1;
                                }
                                switch (alt544) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_99);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      						announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1());
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop544;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayBindingPattern_return norm1_ArrayBindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayBindingPattern_return retval = new InternalN4JSParser.norm1_ArrayBindingPattern_return();
        retval.start = input.LT(1);
        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;
        InternalN4JSParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
            }
            loop547:
            do {
                int alt547=2;
                int LA547_0 = input.LA(1);
                if ( (LA547_0==Comma) ) {
                    alt547=1;
                }
                switch (alt547) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_174);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop547;
                }
            } while (true);
            int alt552=2;
            int LA552_0 = input.LA(1);
            if ( ((LA552_0>=Intersection && LA552_0<=Implements)||(LA552_0>=Promisify && LA552_0<=Abstract)||LA552_0==External||(LA552_0>=Private && LA552_0<=Project)||LA552_0==Public||LA552_0==Static||LA552_0==Target||(LA552_0>=Async && LA552_0<=Await)||LA552_0==Union||LA552_0==This||LA552_0==From||LA552_0==Type||LA552_0==FullStopFullStopFullStop||(LA552_0>=Get && LA552_0<=Let)||(LA552_0>=Out && LA552_0<=Set)||LA552_0==As||LA552_0==Of||(LA552_0>=CommercialAt && LA552_0<=LeftSquareBracket)||LA552_0==LeftCurlyBracket||LA552_0==RULE_IDENTIFIER) ) {
                alt552=1;
            }
            switch (alt552) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_99);
                    ElementsBindingRestElementParserRuleCall_3_0_0=norm1_BindingRestElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0());
                    }
                    }
                    }
                    loop549:
                    do {
                        int alt549=2;
                        alt549 = dfa549.predict(input);
                        switch (alt549) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_175); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop548:
                    	    do {
                    	        int alt548=2;
                    	        int LA548_0 = input.LA(1);
                    	        if ( (LA548_0==Comma) ) {
                    	            alt548=1;
                    	        }
                    	        switch (alt548) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_175);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      						announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1());
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop548;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=norm1_BindingRestElement();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop549;
                        }
                    } while (true);
                    int alt551=2;
                    int LA551_0 = input.LA(1);
                    if ( (LA551_0==Comma) ) {
                        alt551=1;
                    }
                    switch (alt551) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_99); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                            }
                            loop550:
                            do {
                                int alt550=2;
                                int LA550_0 = input.LA(1);
                                if ( (LA550_0==Comma) ) {
                                    alt550=1;
                                }
                                switch (alt550) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_99);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      						announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1());
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop550;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingProperty() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingProperty();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingProperty_return ruleBindingProperty() throws RecognitionException {
        InternalN4JSParser.ruleBindingProperty_return retval = new InternalN4JSParser.ruleBindingProperty_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;
        InternalN4JSParser.ruleBindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;
        InternalN4JSParser.ruleSingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;
        try {
            {
            int alt553=2;
            alt553 = dfa553.predict(input);
            switch (alt553) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_93);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0());
                    }
                    }
                    }
                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=ruleBindingElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=ruleSingleNameBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingProperty_return norm1_BindingProperty() throws RecognitionException {
        InternalN4JSParser.norm1_BindingProperty_return retval = new InternalN4JSParser.norm1_BindingProperty_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;
        InternalN4JSParser.norm1_BindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;
        InternalN4JSParser.norm1_SingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;
        try {
            {
            int alt554=2;
            alt554 = dfa554.predict(input);
            switch (alt554) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_93);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0());
                    }
                    }
                    }
                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=norm1_BindingElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=norm1_SingleNameBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSingleNameBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSingleNameBinding();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleSingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSingleNameBinding_return ruleSingleNameBinding() throws RecognitionException {
        InternalN4JSParser.ruleSingleNameBinding_return retval = new InternalN4JSParser.ruleSingleNameBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm1_VariableDeclaration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_SingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_SingleNameBinding_return norm1_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm1_SingleNameBinding_return retval = new InternalN4JSParser.norm1_SingleNameBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm3_VariableDeclaration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm2_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm5_VariableDeclaration();
            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
            }
            }
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void norm3_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm7_VariableDeclaration();
            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
            }
            }
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleBindingElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingElement_return ruleBindingElement() throws RecognitionException {
        InternalN4JSParser.ruleBindingElement_return retval = new InternalN4JSParser.ruleBindingElement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingElementImpl_return BindingElementImplParserRuleCall = null;
        try {
            {
            pushFollow(FOLLOW_2);
            BindingElementImplParserRuleCall=ruleBindingElementImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementImplParserRuleCall!=null?((Token)BindingElementImplParserRuleCall.start):null), (BindingElementImplParserRuleCall!=null?((Token)BindingElementImplParserRuleCall.stop):null), grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall()); 
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingElement_return norm1_BindingElement() throws RecognitionException {
        InternalN4JSParser.norm1_BindingElement_return retval = new InternalN4JSParser.norm1_BindingElement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BindingElementImpl_return BindingElementImplParserRuleCall = null;
        try {
            {
            pushFollow(FOLLOW_2);
            BindingElementImplParserRuleCall=norm1_BindingElementImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementImplParserRuleCall!=null?((Token)BindingElementImplParserRuleCall.start):null), (BindingElementImplParserRuleCall!=null?((Token)BindingElementImplParserRuleCall.stop):null), grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall()); 
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingRestElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingRestElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingRestElement_return ruleBindingRestElement() throws RecognitionException {
        InternalN4JSParser.ruleBindingRestElement_return retval = new InternalN4JSParser.ruleBindingRestElement_return();
        retval.start = input.LT(1);
        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.ruleBindingElementImpl_return BindingElementImplParserRuleCall_1 = null;
        try {
            {
            {
            int alt555=2;
            int LA555_0 = input.LA(1);
            if ( (LA555_0==FullStopFullStopFullStop) ) {
                alt555=1;
            }
            switch (alt555) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            BindingElementImplParserRuleCall_1=ruleBindingElementImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementImplParserRuleCall_1!=null?((Token)BindingElementImplParserRuleCall_1.start):null), (BindingElementImplParserRuleCall_1!=null?((Token)BindingElementImplParserRuleCall_1.stop):null), grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingRestElement_return norm1_BindingRestElement() throws RecognitionException {
        InternalN4JSParser.norm1_BindingRestElement_return retval = new InternalN4JSParser.norm1_BindingRestElement_return();
        retval.start = input.LT(1);
        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.norm1_BindingElementImpl_return BindingElementImplParserRuleCall_1 = null;
        try {
            {
            {
            int alt556=2;
            int LA556_0 = input.LA(1);
            if ( (LA556_0==FullStopFullStopFullStop) ) {
                alt556=1;
            }
            switch (alt556) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            BindingElementImplParserRuleCall_1=norm1_BindingElementImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementImplParserRuleCall_1!=null?((Token)BindingElementImplParserRuleCall_1.start):null), (BindingElementImplParserRuleCall_1!=null?((Token)BindingElementImplParserRuleCall_1.stop):null), grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleBindingElementImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingElementImpl_return ruleBindingElementImpl() throws RecognitionException {
        InternalN4JSParser.ruleBindingElementImpl_return retval = new InternalN4JSParser.ruleBindingElementImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;
        InternalN4JSParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;
        try {
            {
            int alt558=2;
            int LA558_0 = input.LA(1);
            if ( (LA558_0==LeftCurlyBracket) && (synpred324_InternalN4JSParser())) {
                alt558=1;
            }
            else if ( (LA558_0==LeftSquareBracket) && (synpred324_InternalN4JSParser())) {
                alt558=1;
            }
            else if ( ((LA558_0>=Intersection && LA558_0<=Implements)||(LA558_0>=Promisify && LA558_0<=Abstract)||LA558_0==External||(LA558_0>=Private && LA558_0<=Project)||LA558_0==Public||LA558_0==Static||LA558_0==Target||(LA558_0>=Async && LA558_0<=Await)||LA558_0==Union||(LA558_0>=Yield && LA558_0<=This)||LA558_0==From||LA558_0==Type||(LA558_0>=Get && LA558_0<=Let)||(LA558_0>=Out && LA558_0<=Set)||LA558_0==As||LA558_0==Of||LA558_0==CommercialAt||LA558_0==RULE_IDENTIFIER) ) {
                alt558=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 558, 0, input);
                throw nvae;
            }
            switch (alt558) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_63);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementImplAccess().getNestedPatternAssignment_0_0_0());
                    }
                    }
                    }
                    }
                    int alt557=2;
                    int LA557_0 = input.LA(1);
                    if ( (LA557_0==EqualsSign) ) {
                        alt557=1;
                    }
                    switch (alt557) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementImplAccess().getExpressionAssignment_0_1_1());
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm5_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementImplAccess().getVarDeclAssignment_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingElementImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingElementImpl_return norm1_BindingElementImpl() throws RecognitionException {
        InternalN4JSParser.norm1_BindingElementImpl_return retval = new InternalN4JSParser.norm1_BindingElementImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;
        InternalN4JSParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;
        try {
            {
            int alt560=2;
            int LA560_0 = input.LA(1);
            if ( (LA560_0==LeftCurlyBracket) && (synpred325_InternalN4JSParser())) {
                alt560=1;
            }
            else if ( (LA560_0==LeftSquareBracket) && (synpred325_InternalN4JSParser())) {
                alt560=1;
            }
            else if ( ((LA560_0>=Intersection && LA560_0<=Implements)||(LA560_0>=Promisify && LA560_0<=Abstract)||LA560_0==External||(LA560_0>=Private && LA560_0<=Project)||LA560_0==Public||LA560_0==Static||LA560_0==Target||(LA560_0>=Async && LA560_0<=Await)||LA560_0==Union||LA560_0==This||LA560_0==From||LA560_0==Type||(LA560_0>=Get && LA560_0<=Let)||(LA560_0>=Out && LA560_0<=Set)||LA560_0==As||LA560_0==Of||LA560_0==CommercialAt||LA560_0==RULE_IDENTIFIER) ) {
                alt560=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 560, 0, input);
                throw nvae;
            }
            switch (alt560) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_63);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementImplAccess().getNestedPatternAssignment_0_0_0());
                    }
                    }
                    }
                    }
                    int alt559=2;
                    int LA559_0 = input.LA(1);
                    if ( (LA559_0==EqualsSign) ) {
                        alt559=1;
                    }
                    switch (alt559) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_69); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementImplAccess().getExpressionAssignment_0_1_1());
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm7_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementImplAccess().getVarDeclAssignment_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleElision() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleElision();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleElision_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleElision_return ruleElision() throws RecognitionException {
        InternalN4JSParser.ruleElision_return retval = new InternalN4JSParser.ruleElision_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1=null;
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CommaKeyword_1, grammarAccess.getElisionAccess().getCommaKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralOrComputedPropertyName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteralOrComputedPropertyName_return ruleLiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return retval = new InternalN4JSParser.ruleLiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);
        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;
        try {
            {
            int alt561=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt561=1;
                }
                break;
            case RULE_STRING:
                {
                alt561=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt561=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt561=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 561, 0, input);
                throw nvae;
            }
            switch (alt561) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1());
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2());
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_126);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1());
                    }
                    }
                    }
                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_LiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return retval = new InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);
        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;
        try {
            {
            int alt562=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt562=1;
                }
                break;
            case RULE_STRING:
                {
                alt562=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt562=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt562=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 562, 0, input);
                throw nvae;
            }
            switch (alt562) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1());
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2());
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_126);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1());
                    }
                    }
                    }
                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXElement_return ruleJSXElement() throws RecognitionException {
        InternalN4JSParser.ruleJSXElement_return retval = new InternalN4JSParser.ruleJSXElement_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_3_0_0=null;
        Token LessThanSignKeyword_3_0_2=null;
        Token SolidusKeyword_3_0_3=null;
        Token GreaterThanSignKeyword_3_0_5=null;
        Token SolidusKeyword_3_1_0=null;
        Token GreaterThanSignKeyword_3_1_1=null;
        InternalN4JSParser.ruleJSXElementName_return JsxElementNameJSXElementNameParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleJSXAttribute_return JsxAttributesJSXAttributeParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleJSXChild_return JsxChildrenJSXChildParserRuleCall_3_0_1_0 = null;
        InternalN4JSParser.ruleJSXElementName_return JsxClosingNameJSXElementNameParserRuleCall_3_0_4_0 = null;
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_8); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LessThanSignKeyword_0, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_176);
            JsxElementNameJSXElementNameParserRuleCall_1_0=ruleJSXElementName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((JsxElementNameJSXElementNameParserRuleCall_1_0!=null?((Token)JsxElementNameJSXElementNameParserRuleCall_1_0.start):null), (JsxElementNameJSXElementNameParserRuleCall_1_0!=null?((Token)JsxElementNameJSXElementNameParserRuleCall_1_0.stop):null), grammarAccess.getJSXElementAccess().getJsxElementNameAssignment_1());
            }
            }
            }
            loop563:
            do {
                int alt563=2;
                int LA563_0 = input.LA(1);
                if ( ((LA563_0>=Intersection && LA563_0<=With)||(LA563_0>=For && LA563_0<=Var)||(LA563_0>=As && LA563_0<=Of)||LA563_0==LeftCurlyBracket||LA563_0==RULE_IDENTIFIER) ) {
                    alt563=1;
                }
                switch (alt563) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_176);
            	    JsxAttributesJSXAttributeParserRuleCall_2_0=ruleJSXAttribute();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((JsxAttributesJSXAttributeParserRuleCall_2_0!=null?((Token)JsxAttributesJSXAttributeParserRuleCall_2_0.start):null), (JsxAttributesJSXAttributeParserRuleCall_2_0!=null?((Token)JsxAttributesJSXAttributeParserRuleCall_2_0.stop):null), grammarAccess.getJSXElementAccess().getJsxAttributesAssignment_2());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop563;
                }
            } while (true);
            int alt565=2;
            int LA565_0 = input.LA(1);
            if ( (LA565_0==GreaterThanSign) ) {
                alt565=1;
            }
            else if ( (LA565_0==Solidus) ) {
                alt565=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 565, 0, input);
                throw nvae;
            }
            switch (alt565) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_3_0_0=(Token)match(input,GreaterThanSign,FOLLOW_177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(GreaterThanSignKeyword_3_0_0, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_0());
                    }
                    loop564:
                    do {
                        int alt564=2;
                        int LA564_0 = input.LA(1);
                        if ( (LA564_0==LessThanSign) ) {
                            int LA564_1 = input.LA(2);
                            if ( ((LA564_1>=Intersection && LA564_1<=Implements)||(LA564_1>=Promisify && LA564_1<=Abstract)||LA564_1==External||(LA564_1>=Private && LA564_1<=Project)||LA564_1==Public||LA564_1==Static||LA564_1==Target||(LA564_1>=Async && LA564_1<=Await)||LA564_1==Union||(LA564_1>=Yield && LA564_1<=This)||LA564_1==From||LA564_1==Type||(LA564_1>=Get && LA564_1<=Let)||(LA564_1>=Out && LA564_1<=Set)||LA564_1==As||LA564_1==Of||LA564_1==GreaterThanSign||LA564_1==RULE_IDENTIFIER) ) {
                                alt564=1;
                            }
                        }
                        else if ( (LA564_0==LeftCurlyBracket) ) {
                            alt564=1;
                        }
                        switch (alt564) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_177);
                    	    JsxChildrenJSXChildParserRuleCall_3_0_1_0=ruleJSXChild();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((JsxChildrenJSXChildParserRuleCall_3_0_1_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0_1_0.start):null), (JsxChildrenJSXChildParserRuleCall_3_0_1_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0_1_0.stop):null), grammarAccess.getJSXElementAccess().getJsxChildrenAssignment_3_0_1());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop564;
                        }
                    } while (true);
                    LessThanSignKeyword_3_0_2=(Token)match(input,LessThanSign,FOLLOW_178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LessThanSignKeyword_3_0_2, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_3_0_2());
                    }
                    SolidusKeyword_3_0_3=(Token)match(input,Solidus,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SolidusKeyword_3_0_3, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_0_3());
                    }
                    {
                    {
                    pushFollow(FOLLOW_132);
                    JsxClosingNameJSXElementNameParserRuleCall_3_0_4_0=ruleJSXElementName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((JsxClosingNameJSXElementNameParserRuleCall_3_0_4_0!=null?((Token)JsxClosingNameJSXElementNameParserRuleCall_3_0_4_0.start):null), (JsxClosingNameJSXElementNameParserRuleCall_3_0_4_0!=null?((Token)JsxClosingNameJSXElementNameParserRuleCall_3_0_4_0.stop):null), grammarAccess.getJSXElementAccess().getJsxClosingNameAssignment_3_0_4());
                    }
                    }
                    }
                    GreaterThanSignKeyword_3_0_5=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(GreaterThanSignKeyword_3_0_5, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_5());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    SolidusKeyword_3_1_0=(Token)match(input,Solidus,FOLLOW_132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SolidusKeyword_3_1_0, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_1_0());
                    }
                    GreaterThanSignKeyword_3_1_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(GreaterThanSignKeyword_3_1_1, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_1_1());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXFragment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXFragment();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXFragment_return ruleJSXFragment() throws RecognitionException {
        InternalN4JSParser.ruleJSXFragment_return retval = new InternalN4JSParser.ruleJSXFragment_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_1=null;
        Token GreaterThanSignKeyword_2=null;
        Token LessThanSignKeyword_4=null;
        Token SolidusKeyword_5=null;
        Token GreaterThanSignKeyword_6=null;
        InternalN4JSParser.ruleJSXChild_return JsxChildrenJSXChildParserRuleCall_3_0 = null;
        try {
            {
            {
            LessThanSignKeyword_1=(Token)match(input,LessThanSign,FOLLOW_132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LessThanSignKeyword_1, grammarAccess.getJSXFragmentAccess().getLessThanSignKeyword_1());
            }
            GreaterThanSignKeyword_2=(Token)match(input,GreaterThanSign,FOLLOW_177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GreaterThanSignKeyword_2, grammarAccess.getJSXFragmentAccess().getGreaterThanSignKeyword_2());
            }
            loop566:
            do {
                int alt566=2;
                int LA566_0 = input.LA(1);
                if ( (LA566_0==LessThanSign) ) {
                    int LA566_1 = input.LA(2);
                    if ( ((LA566_1>=Intersection && LA566_1<=Implements)||(LA566_1>=Promisify && LA566_1<=Abstract)||LA566_1==External||(LA566_1>=Private && LA566_1<=Project)||LA566_1==Public||LA566_1==Static||LA566_1==Target||(LA566_1>=Async && LA566_1<=Await)||LA566_1==Union||(LA566_1>=Yield && LA566_1<=This)||LA566_1==From||LA566_1==Type||(LA566_1>=Get && LA566_1<=Let)||(LA566_1>=Out && LA566_1<=Set)||LA566_1==As||LA566_1==Of||LA566_1==GreaterThanSign||LA566_1==RULE_IDENTIFIER) ) {
                        alt566=1;
                    }
                }
                else if ( (LA566_0==LeftCurlyBracket) ) {
                    alt566=1;
                }
                switch (alt566) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_177);
            	    JsxChildrenJSXChildParserRuleCall_3_0=ruleJSXChild();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((JsxChildrenJSXChildParserRuleCall_3_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0.start):null), (JsxChildrenJSXChildParserRuleCall_3_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0.stop):null), grammarAccess.getJSXFragmentAccess().getJsxChildrenAssignment_3());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop566;
                }
            } while (true);
            LessThanSignKeyword_4=(Token)match(input,LessThanSign,FOLLOW_178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LessThanSignKeyword_4, grammarAccess.getJSXFragmentAccess().getLessThanSignKeyword_4());
            }
            SolidusKeyword_5=(Token)match(input,Solidus,FOLLOW_132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(SolidusKeyword_5, grammarAccess.getJSXFragmentAccess().getSolidusKeyword_5());
            }
            GreaterThanSignKeyword_6=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GreaterThanSignKeyword_6, grammarAccess.getJSXFragmentAccess().getGreaterThanSignKeyword_6());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXChild() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXChild();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXChild_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXChild_return ruleJSXChild() throws RecognitionException {
        InternalN4JSParser.ruleJSXChild_return retval = new InternalN4JSParser.ruleJSXChild_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleJSXElement_return JSXElementParserRuleCall_0 = null;
        InternalN4JSParser.ruleJSXFragment_return JSXFragmentParserRuleCall_1 = null;
        InternalN4JSParser.ruleJSXExpression_return JSXExpressionParserRuleCall_2 = null;
        try {
            {
            int alt567=3;
            int LA567_0 = input.LA(1);
            if ( (LA567_0==LessThanSign) ) {
                int LA567_1 = input.LA(2);
                if ( (LA567_1==GreaterThanSign) ) {
                    alt567=2;
                }
                else if ( ((LA567_1>=Intersection && LA567_1<=Implements)||(LA567_1>=Promisify && LA567_1<=Abstract)||LA567_1==External||(LA567_1>=Private && LA567_1<=Project)||LA567_1==Public||LA567_1==Static||LA567_1==Target||(LA567_1>=Async && LA567_1<=Await)||LA567_1==Union||(LA567_1>=Yield && LA567_1<=This)||LA567_1==From||LA567_1==Type||(LA567_1>=Get && LA567_1<=Let)||(LA567_1>=Out && LA567_1<=Set)||LA567_1==As||LA567_1==Of||LA567_1==RULE_IDENTIFIER) ) {
                    alt567=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 567, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA567_0==LeftCurlyBracket) ) {
                alt567=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 567, 0, input);
                throw nvae;
            }
            switch (alt567) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_0=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_0!=null?((Token)JSXElementParserRuleCall_0.start):null), (JSXElementParserRuleCall_0!=null?((Token)JSXElementParserRuleCall_0.stop):null), grammarAccess.getJSXChildAccess().getJSXElementParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXFragmentParserRuleCall_1=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXFragmentParserRuleCall_1!=null?((Token)JSXFragmentParserRuleCall_1.start):null), (JSXFragmentParserRuleCall_1!=null?((Token)JSXFragmentParserRuleCall_1.stop):null), grammarAccess.getJSXChildAccess().getJSXFragmentParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXExpressionParserRuleCall_2=ruleJSXExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXExpressionParserRuleCall_2!=null?((Token)JSXExpressionParserRuleCall_2.start):null), (JSXExpressionParserRuleCall_2!=null?((Token)JSXExpressionParserRuleCall_2.stop):null), grammarAccess.getJSXChildAccess().getJSXExpressionParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXExpression_return ruleJSXExpression() throws RecognitionException {
        InternalN4JSParser.ruleJSXExpression_return retval = new InternalN4JSParser.ruleJSXExpression_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getJSXExpressionAccess().getLeftCurlyBracketKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_23);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getJSXExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getJSXExpressionAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElementName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElementName();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXElementName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXElementName_return ruleJSXElementName() throws RecognitionException {
        InternalN4JSParser.ruleJSXElementName_return retval = new InternalN4JSParser.ruleJSXElementName_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleJSXElementNameExpression_return ExpressionJSXElementNameExpressionParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionJSXElementNameExpressionParserRuleCall_0=ruleJSXElementNameExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((ExpressionJSXElementNameExpressionParserRuleCall_0!=null?((Token)ExpressionJSXElementNameExpressionParserRuleCall_0.start):null), (ExpressionJSXElementNameExpressionParserRuleCall_0!=null?((Token)ExpressionJSXElementNameExpressionParserRuleCall_0.stop):null), grammarAccess.getJSXElementNameAccess().getExpressionAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElementNameExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElementNameExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXElementNameExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXElementNameExpression_return ruleJSXElementNameExpression() throws RecognitionException {
        InternalN4JSParser.ruleJSXElementNameExpression_return retval = new InternalN4JSParser.ruleJSXElementNameExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_0 = null;
        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_179);
            IdentifierRefParserRuleCall_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.start):null), (IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.stop):null), grammarAccess.getJSXElementNameExpressionAccess().getIdentifierRefParserRuleCall_0()); 
            }
            loop568:
            do {
                int alt568=2;
                int LA568_0 = input.LA(1);
                if ( (LA568_0==QuestionMarkFullStop||LA568_0==FullStop) ) {
                    alt568=1;
                }
                switch (alt568) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_179);
            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1=ruleParameterizedPropertyAccessExpressionTail();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1.stop):null), grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_1()); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop568;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXAttribute();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXAttribute_return ruleJSXAttribute() throws RecognitionException {
        InternalN4JSParser.ruleJSXAttribute_return retval = new InternalN4JSParser.ruleJSXAttribute_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleJSXSpreadAttribute_return JSXSpreadAttributeParserRuleCall_0 = null;
        InternalN4JSParser.ruleJSXPropertyAttribute_return JSXPropertyAttributeParserRuleCall_1 = null;
        try {
            {
            int alt569=2;
            int LA569_0 = input.LA(1);
            if ( (LA569_0==LeftCurlyBracket) ) {
                alt569=1;
            }
            else if ( ((LA569_0>=Intersection && LA569_0<=With)||(LA569_0>=For && LA569_0<=Var)||(LA569_0>=As && LA569_0<=Of)||LA569_0==RULE_IDENTIFIER) ) {
                alt569=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 569, 0, input);
                throw nvae;
            }
            switch (alt569) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXSpreadAttributeParserRuleCall_0=ruleJSXSpreadAttribute();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXSpreadAttributeParserRuleCall_0!=null?((Token)JSXSpreadAttributeParserRuleCall_0.start):null), (JSXSpreadAttributeParserRuleCall_0!=null?((Token)JSXSpreadAttributeParserRuleCall_0.stop):null), grammarAccess.getJSXAttributeAccess().getJSXSpreadAttributeParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXPropertyAttributeParserRuleCall_1=ruleJSXPropertyAttribute();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXPropertyAttributeParserRuleCall_1!=null?((Token)JSXPropertyAttributeParserRuleCall_1.start):null), (JSXPropertyAttributeParserRuleCall_1!=null?((Token)JSXPropertyAttributeParserRuleCall_1.stop):null), grammarAccess.getJSXAttributeAccess().getJSXPropertyAttributeParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXSpreadAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXSpreadAttribute();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXSpreadAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXSpreadAttribute_return ruleJSXSpreadAttribute() throws RecognitionException {
        InternalN4JSParser.ruleJSXSpreadAttribute_return retval = new InternalN4JSParser.ruleJSXSpreadAttribute_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0=null;
        Token FullStopFullStopFullStopKeyword_1=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getJSXSpreadAttributeAccess().getLeftCurlyBracketKeyword_0());
            }
            FullStopFullStopFullStopKeyword_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FullStopFullStopFullStopKeyword_1, grammarAccess.getJSXSpreadAttributeAccess().getFullStopFullStopFullStopKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_23);
            ExpressionAssignmentExpressionParserRuleCall_2_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignment_2());
            }
            }
            }
            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_3, grammarAccess.getJSXSpreadAttributeAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXIdentifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXIdentifier_return ruleJSXIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleJSXIdentifier_return retval = new InternalN4JSParser.ruleJSXIdentifier_return();
        retval.start = input.LT(1);
        Token HyphenMinusKeyword_1_0_0=null;
        Token HyphenMinusHyphenMinusKeyword_1_0_1=null;
        try {
            {
            {
            pushFollow(FOLLOW_181);
            ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            loop573:
            do {
                int alt573=2;
                int LA573_0 = input.LA(1);
                if ( (LA573_0==HyphenMinusHyphenMinus||LA573_0==HyphenMinus) ) {
                    alt573=1;
                }
                switch (alt573) {
            	case 1 :
            	    {
            	    int alt570=2;
            	    int LA570_0 = input.LA(1);
            	    if ( (LA570_0==HyphenMinus) ) {
            	        alt570=1;
            	    }
            	    else if ( (LA570_0==HyphenMinusHyphenMinus) ) {
            	        alt570=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 570, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt570) {
            	        case 1 :
            	            {
            	            HyphenMinusKeyword_1_0_0=(Token)match(input,HyphenMinus,FOLLOW_182); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	              				announce(HyphenMinusKeyword_1_0_0, grammarAccess.getJSXIdentifierAccess().getHyphenMinusKeyword_1_0_0());
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            HyphenMinusHyphenMinusKeyword_1_0_1=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_182); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	              				announce(HyphenMinusHyphenMinusKeyword_1_0_1, grammarAccess.getJSXIdentifierAccess().getHyphenMinusHyphenMinusKeyword_1_0_1());
            	            }
            	            }
            	            break;
            	    }
            	    int alt572=2;
            	    alt572 = dfa572.predict(input);
            	    switch (alt572) {
            	        case 1 :
            	            {
            	            int alt571=7;
            	            switch ( input.LA(1) ) {
            	            case RULE_INT:
            	                {
            	                alt571=1;
            	                }
            	                break;
            	            case RULE_HEX_INT:
            	                {
            	                alt571=2;
            	                }
            	                break;
            	            case RULE_BINARY_INT:
            	                {
            	                alt571=3;
            	                }
            	                break;
            	            case RULE_OCTAL_INT:
            	                {
            	                alt571=4;
            	                }
            	                break;
            	            case RULE_SCIENTIFIC_INT:
            	                {
            	                alt571=5;
            	                }
            	                break;
            	            case RULE_LEGACY_OCTAL_INT:
            	                {
            	                alt571=6;
            	                }
            	                break;
            	            case Intersection:
            	            case Constructor:
            	            case Implements:
            	            case Instanceof:
            	            case Promisify:
            	            case Interface:
            	            case Protected:
            	            case Abstract:
            	            case Continue:
            	            case Debugger:
            	            case External:
            	            case Function:
            	            case Default:
            	            case Extends:
            	            case Finally:
            	            case Private:
            	            case Project:
            	            case Delete:
            	            case Export:
            	            case Import:
            	            case Public:
            	            case Return:
            	            case Static:
            	            case Switch:
            	            case Target:
            	            case Typeof:
            	            case Async:
            	            case Await:
            	            case Break:
            	            case Catch:
            	            case Class:
            	            case Const:
            	            case False:
            	            case Super:
            	            case Throw:
            	            case Union:
            	            case While:
            	            case Yield:
            	            case This:
            	            case Case:
            	            case Else:
            	            case Enum:
            	            case From:
            	            case Null:
            	            case This_1:
            	            case True:
            	            case Type:
            	            case Void:
            	            case With:
            	            case For:
            	            case Get:
            	            case Let:
            	            case New:
            	            case Out:
            	            case Set:
            	            case Try:
            	            case Var:
            	            case As:
            	            case Do:
            	            case If:
            	            case In:
            	            case Of:
            	            case RULE_IDENTIFIER:
            	                {
            	                alt571=7;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 571, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt571) {
            	                case 1 :
            	                    {
            	                    match(input,RULE_INT,FOLLOW_181); if (state.failed) return retval;
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    match(input,RULE_HEX_INT,FOLLOW_181); if (state.failed) return retval;
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    match(input,RULE_BINARY_INT,FOLLOW_181); if (state.failed) return retval;
            	                    }
            	                    break;
            	                case 4 :
            	                    {
            	                    match(input,RULE_OCTAL_INT,FOLLOW_181); if (state.failed) return retval;
            	                    }
            	                    break;
            	                case 5 :
            	                    {
            	                    match(input,RULE_SCIENTIFIC_INT,FOLLOW_181); if (state.failed) return retval;
            	                    }
            	                    break;
            	                case 6 :
            	                    {
            	                    match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_181); if (state.failed) return retval;
            	                    }
            	                    break;
            	                case 7 :
            	                    {
            	                    pushFollow(FOLLOW_181);
            	                    ruleIdentifierName();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop573;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXPropertyAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXPropertyAttribute();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXPropertyAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXPropertyAttribute_return ruleJSXPropertyAttribute() throws RecognitionException {
        InternalN4JSParser.ruleJSXPropertyAttribute_return retval = new InternalN4JSParser.ruleJSXPropertyAttribute_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0=null;
        Token LeftCurlyBracketKeyword_1_1_3_0=null;
        Token RightCurlyBracketKeyword_1_1_3_2=null;
        InternalN4JSParser.ruleJSXIdentifier_return PropertyIdentifiableElementJSXIdentifierParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleStringLiteral_return JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0 = null;
        InternalN4JSParser.ruleJSXElement_return JsxAttributeValueJSXElementParserRuleCall_1_1_1_0 = null;
        InternalN4JSParser.ruleJSXFragment_return JsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_63);
            PropertyIdentifiableElementJSXIdentifierParserRuleCall_0_0_1=ruleJSXIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PropertyIdentifiableElementJSXIdentifierParserRuleCall_0_0_1!=null?((Token)PropertyIdentifiableElementJSXIdentifierParserRuleCall_0_0_1.start):null), (PropertyIdentifiableElementJSXIdentifierParserRuleCall_0_0_1!=null?((Token)PropertyIdentifiableElementJSXIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getPropertyAssignment_0());
            }
            }
            }
            int alt575=2;
            int LA575_0 = input.LA(1);
            if ( (LA575_0==EqualsSign) ) {
                alt575=1;
            }
            switch (alt575) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_183); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_1_0, grammarAccess.getJSXPropertyAttributeAccess().getEqualsSignKeyword_1_0());
                    }
                    int alt574=4;
                    switch ( input.LA(1) ) {
                    case RULE_STRING:
                        {
                        alt574=1;
                        }
                        break;
                    case LessThanSign:
                        {
                        int LA574_2 = input.LA(2);
                        if ( ((LA574_2>=Intersection && LA574_2<=Implements)||(LA574_2>=Promisify && LA574_2<=Abstract)||LA574_2==External||(LA574_2>=Private && LA574_2<=Project)||LA574_2==Public||LA574_2==Static||LA574_2==Target||(LA574_2>=Async && LA574_2<=Await)||LA574_2==Union||(LA574_2>=Yield && LA574_2<=This)||LA574_2==From||LA574_2==Type||(LA574_2>=Get && LA574_2<=Let)||(LA574_2>=Out && LA574_2<=Set)||LA574_2==As||LA574_2==Of||LA574_2==RULE_IDENTIFIER) ) {
                            alt574=2;
                        }
                        else if ( (LA574_2==GreaterThanSign) ) {
                            alt574=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 574, 2, input);
                            throw nvae;
                        }
                        }
                        break;
                    case LeftCurlyBracket:
                        {
                        alt574=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 574, 0, input);
                        throw nvae;
                    }
                    switch (alt574) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0=ruleStringLiteral();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0!=null?((Token)JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0.start):null), (JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0!=null?((Token)JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_1_1_0());
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            JsxAttributeValueJSXElementParserRuleCall_1_1_1_0=ruleJSXElement();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((JsxAttributeValueJSXElementParserRuleCall_1_1_1_0!=null?((Token)JsxAttributeValueJSXElementParserRuleCall_1_1_1_0.start):null), (JsxAttributeValueJSXElementParserRuleCall_1_1_1_0!=null?((Token)JsxAttributeValueJSXElementParserRuleCall_1_1_1_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_1_1_1());
                            }
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            JsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0=ruleJSXFragment();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((JsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0!=null?((Token)JsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0.start):null), (JsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0!=null?((Token)JsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_1_1_2());
                            }
                            }
                            }
                            }
                            break;
                        case 4 :
                            {
                            {
                            LeftCurlyBracketKeyword_1_1_3_0=(Token)match(input,LeftCurlyBracket,FOLLOW_49); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(LeftCurlyBracketKeyword_1_1_3_0, grammarAccess.getJSXPropertyAttributeAccess().getLeftCurlyBracketKeyword_1_1_3_0());
                            }
                            {
                            {
                            pushFollow(FOLLOW_23);
                            JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0=ruleAssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              							announce((JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0!=null?((Token)JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0.start):null), (JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0!=null?((Token)JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_1_1_3_1());
                            }
                            }
                            }
                            RightCurlyBracketKeyword_1_1_3_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(RightCurlyBracketKeyword_1_1_3_2, grammarAccess.getJSXPropertyAttributeAccess().getRightCurlyBracketKeyword_1_1_3_2());
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleVersionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVersionDeclaration_return ruleVersionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleVersionDeclaration_return retval = new InternalN4JSParser.ruleVersionDeclaration_return();
        retval.start = input.LT(1);
        Token DeclaredVersionVERSIONTerminalRuleCall_0=null;
        try {
            {
            {
            {
            DeclaredVersionVERSIONTerminalRuleCall_0=(Token)match(input,RULE_VERSION,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(DeclaredVersionVERSIONTerminalRuleCall_0, grammarAccess.getVersionDeclarationAccess().getDeclaredVersionAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRef_return ruleTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleTypeRef_return retval = new InternalN4JSParser.ruleTypeRef_return();
        retval.start = input.LT(1);
        Token VerticalLineKeyword_1_1_0=null;
        InternalN4JSParser.ruleIntersectionTypeExpression_return IntersectionTypeExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleIntersectionTypeExpression_return TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_139);
            IntersectionTypeExpressionParserRuleCall_0=ruleIntersectionTypeExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.start):null), (IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getTypeRefAccess().getIntersectionTypeExpressionParserRuleCall_0()); 
            }
            int alt577=2;
            int LA577_0 = input.LA(1);
            if ( (LA577_0==VerticalLine) ) {
                alt577=1;
            }
            switch (alt577) {
                case 1 :
                    {
                    int cnt576=0;
                    loop576:
                    do {
                        int alt576=2;
                        int LA576_0 = input.LA(1);
                        if ( (LA576_0==VerticalLine) ) {
                            alt576=1;
                        }
                        switch (alt576) {
                    	case 1 :
                    	    {
                    	    VerticalLineKeyword_1_1_0=(Token)match(input,VerticalLine,FOLLOW_62); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(VerticalLineKeyword_1_1_0, grammarAccess.getTypeRefAccess().getVerticalLineKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_139);
                    	    TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0=ruleIntersectionTypeExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTypeRefAccess().getTypeRefsAssignment_1_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt576 >= 1 ) break loop576;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(576, input);
                                throw eee;
                        }
                        cnt576++;
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIntersectionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntersectionTypeExpression_return ruleIntersectionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleIntersectionTypeExpression_return retval = new InternalN4JSParser.ruleIntersectionTypeExpression_return();
        retval.start = input.LT(1);
        Token AmpersandKeyword_1_1_0=null;
        InternalN4JSParser.ruleArrayTypeExpression_return ArrayTypeExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleArrayTypeExpression_return TypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_137);
            ArrayTypeExpressionParserRuleCall_0=ruleArrayTypeExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArrayTypeExpressionParserRuleCall_0!=null?((Token)ArrayTypeExpressionParserRuleCall_0.start):null), (ArrayTypeExpressionParserRuleCall_0!=null?((Token)ArrayTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getArrayTypeExpressionParserRuleCall_0()); 
            }
            int alt579=2;
            int LA579_0 = input.LA(1);
            if ( (LA579_0==Ampersand) ) {
                alt579=1;
            }
            switch (alt579) {
                case 1 :
                    {
                    int cnt578=0;
                    loop578:
                    do {
                        int alt578=2;
                        int LA578_0 = input.LA(1);
                        if ( (LA578_0==Ampersand) ) {
                            alt578=1;
                        }
                        switch (alt578) {
                    	case 1 :
                    	    {
                    	    AmpersandKeyword_1_1_0=(Token)match(input,Ampersand,FOLLOW_62); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(AmpersandKeyword_1_1_0, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_137);
                    	    TypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0=ruleArrayTypeExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((TypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsAssignment_1_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt578 >= 1 ) break loop578;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(578, input);
                                throw eee;
                        }
                        cnt578++;
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayTypeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrayTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayTypeExpression_return ruleArrayTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleArrayTypeExpression_return retval = new InternalN4JSParser.ruleArrayTypeExpression_return();
        retval.start = input.LT(1);
        Token ArrayTypeExpressionLeftSquareBracketKeyword_0_2_0=null;
        Token RightSquareBracketKeyword_0_3=null;
        Token ArrayTypeExpressionLeftSquareBracketKeyword_0_4_0_1_0=null;
        Token RightSquareBracketKeyword_0_4_0_2=null;
        Token LeftParenthesisKeyword_1_1=null;
        Token RightParenthesisKeyword_1_3=null;
        Token ArrayTypeExpressionLeftSquareBracketKeyword_1_4_0=null;
        Token RightSquareBracketKeyword_1_5=null;
        Token ArrayTypeExpressionLeftSquareBracketKeyword_1_6_0_1_0=null;
        Token RightSquareBracketKeyword_1_6_0_2=null;
        Token ArrayTypeExpressionLeftSquareBracketKeyword_2_1_0_1_0=null;
        Token RightSquareBracketKeyword_2_1_0_2=null;
        InternalN4JSParser.ruleWildcardOldNotationWithoutBound_return TypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0 = null;
        InternalN4JSParser.ruleWildcard_return TypeArgsWildcardParserRuleCall_1_2_0 = null;
        InternalN4JSParser.rulePrimaryTypeExpression_return PrimaryTypeExpressionParserRuleCall_2_0 = null;
        try {
            {
            int alt583=3;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                alt583=1;
                }
                break;
            case LeftParenthesis:
                {
                switch ( input.LA(2) ) {
                case QuestionMark:
                    {
                    int LA583_4 = input.LA(3);
                    if ( (LA583_4==Extends||LA583_4==Super||LA583_4==RightParenthesis) ) {
                        alt583=2;
                    }
                    else if ( (LA583_4==LeftSquareBracket) ) {
                        alt583=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 583, 4, input);
                        throw nvae;
                    }
                    }
                    break;
                case Intersection:
                case Constructor:
                case Implements:
                case Promisify:
                case Interface:
                case Protected:
                case Abstract:
                case External:
                case Default:
                case Private:
                case Project:
                case Public:
                case Static:
                case Target:
                case Async:
                case Await:
                case Union:
                case Yield:
                case This:
                case From:
                case This_1:
                case Type:
                case Void:
                case FullStopFullStopFullStop:
                case Get:
                case Let:
                case Set:
                case As:
                case Of:
                case LeftParenthesis:
                case RightParenthesis:
                case LeftSquareBracket:
                case LeftCurlyBracket:
                case Tilde:
                case RULE_IDENTIFIER:
                    {
                    alt583=3;
                    }
                    break;
                case Out:
                    {
                    int LA583_5 = input.LA(3);
                    if ( ((LA583_5>=Intersection && LA583_5<=Constructor)||LA583_5==Promisify||LA583_5==Default||LA583_5==Target||LA583_5==Await||LA583_5==Union||LA583_5==This||LA583_5==This_1||(LA583_5>=Type && LA583_5<=Void)||LA583_5==LeftParenthesis||LA583_5==QuestionMark||LA583_5==LeftSquareBracket||LA583_5==LeftCurlyBracket||LA583_5==Tilde||LA583_5==RULE_IDENTIFIER) ) {
                        alt583=2;
                    }
                    else if ( (LA583_5==Colon) ) {
                        alt583=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 583, 5, input);
                        throw nvae;
                    }
                    }
                    break;
                case In:
                    {
                    alt583=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 583, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Default:
            case Target:
            case Await:
            case Union:
            case This:
            case This_1:
            case Type:
            case Void:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt583=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 583, 0, input);
                throw nvae;
            }
            switch (alt583) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_125);
                    TypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0=ruleWildcardOldNotationWithoutBound();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0!=null?((Token)TypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0.start):null), (TypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0!=null?((Token)TypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0.stop):null), grammarAccess.getArrayTypeExpressionAccess().getTypeArgsAssignment_0_1());
                    }
                    }
                    }
                    {
                    {
                    ArrayTypeExpressionLeftSquareBracketKeyword_0_2_0=(Token)match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(ArrayTypeExpressionLeftSquareBracketKeyword_0_2_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_2_0());
                    }
                    }
                    }
                    RightSquareBracketKeyword_0_3=(Token)match(input,RightSquareBracket,FOLLOW_184); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightSquareBracketKeyword_0_3, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_3());
                    }
                    loop580:
                    do {
                        int alt580=2;
                        int LA580_0 = input.LA(1);
                        if ( (LA580_0==LeftSquareBracket) ) {
                            int LA580_2 = input.LA(2);
                            if ( (LA580_2==RightSquareBracket) ) {
                                int LA580_3 = input.LA(3);
                                if ( (synpred327_InternalN4JSParser()) ) {
                                    alt580=1;
                                }
                            }
                        }
                        switch (alt580) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    ArrayTypeExpressionLeftSquareBracketKeyword_0_4_0_1_0=(Token)match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce(ArrayTypeExpressionLeftSquareBracketKeyword_0_4_0_1_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_4_0_1_0());
                    	    }
                    	    }
                    	    }
                    	    RightSquareBracketKeyword_0_4_0_2=(Token)match(input,RightSquareBracket,FOLLOW_184); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(RightSquareBracketKeyword_0_4_0_2, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_4_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop580;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    LeftParenthesisKeyword_1_1=(Token)match(input,LeftParenthesis,FOLLOW_185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LeftParenthesisKeyword_1_1, grammarAccess.getArrayTypeExpressionAccess().getLeftParenthesisKeyword_1_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_71);
                    TypeArgsWildcardParserRuleCall_1_2_0=ruleWildcard();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TypeArgsWildcardParserRuleCall_1_2_0!=null?((Token)TypeArgsWildcardParserRuleCall_1_2_0.start):null), (TypeArgsWildcardParserRuleCall_1_2_0!=null?((Token)TypeArgsWildcardParserRuleCall_1_2_0.stop):null), grammarAccess.getArrayTypeExpressionAccess().getTypeArgsAssignment_1_2());
                    }
                    }
                    }
                    RightParenthesisKeyword_1_3=(Token)match(input,RightParenthesis,FOLLOW_125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightParenthesisKeyword_1_3, grammarAccess.getArrayTypeExpressionAccess().getRightParenthesisKeyword_1_3());
                    }
                    {
                    {
                    ArrayTypeExpressionLeftSquareBracketKeyword_1_4_0=(Token)match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(ArrayTypeExpressionLeftSquareBracketKeyword_1_4_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_4_0());
                    }
                    }
                    }
                    RightSquareBracketKeyword_1_5=(Token)match(input,RightSquareBracket,FOLLOW_184); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightSquareBracketKeyword_1_5, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_5());
                    }
                    loop581:
                    do {
                        int alt581=2;
                        int LA581_0 = input.LA(1);
                        if ( (LA581_0==LeftSquareBracket) ) {
                            int LA581_2 = input.LA(2);
                            if ( (LA581_2==RightSquareBracket) ) {
                                int LA581_3 = input.LA(3);
                                if ( (synpred328_InternalN4JSParser()) ) {
                                    alt581=1;
                                }
                            }
                        }
                        switch (alt581) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    ArrayTypeExpressionLeftSquareBracketKeyword_1_6_0_1_0=(Token)match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce(ArrayTypeExpressionLeftSquareBracketKeyword_1_6_0_1_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_6_0_1_0());
                    	    }
                    	    }
                    	    }
                    	    RightSquareBracketKeyword_1_6_0_2=(Token)match(input,RightSquareBracket,FOLLOW_184); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(RightSquareBracketKeyword_1_6_0_2, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_6_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop581;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_184);
                    PrimaryTypeExpressionParserRuleCall_2_0=rulePrimaryTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryTypeExpressionParserRuleCall_2_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_2_0.start):null), (PrimaryTypeExpressionParserRuleCall_2_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_2_0()); 
                    }
                    loop582:
                    do {
                        int alt582=2;
                        int LA582_0 = input.LA(1);
                        if ( (LA582_0==LeftSquareBracket) ) {
                            int LA582_2 = input.LA(2);
                            if ( (LA582_2==RightSquareBracket) ) {
                                int LA582_3 = input.LA(3);
                                if ( (synpred329_InternalN4JSParser()) ) {
                                    alt582=1;
                                }
                            }
                        }
                        switch (alt582) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    ArrayTypeExpressionLeftSquareBracketKeyword_2_1_0_1_0=(Token)match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce(ArrayTypeExpressionLeftSquareBracketKeyword_2_1_0_1_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_2_1_0_1_0());
                    	    }
                    	    }
                    	    }
                    	    RightSquareBracketKeyword_2_1_0_2=(Token)match(input,RightSquareBracket,FOLLOW_184); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(RightSquareBracketKeyword_2_1_0_2, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_2_1_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop582;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePrimaryTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryTypeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePrimaryTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePrimaryTypeExpression_return rulePrimaryTypeExpression() throws RecognitionException {
        InternalN4JSParser.rulePrimaryTypeExpression_return retval = new InternalN4JSParser.rulePrimaryTypeExpression_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_3_0=null;
        Token RightParenthesisKeyword_3_2=null;
        InternalN4JSParser.ruleArrowFunctionTypeExpression_return ArrowFunctionTypeExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleIterableTypeExpression_return IterableTypeExpressionParserRuleCall_1 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall_2 = null;
        InternalN4JSParser.ruleTypeRef_return TypeRefParserRuleCall_3_1 = null;
        try {
            {
            int alt584=4;
            alt584 = dfa584.predict(input);
            switch (alt584) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowFunctionTypeExpressionParserRuleCall_0=ruleArrowFunctionTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowFunctionTypeExpressionParserRuleCall_0!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_0.start):null), (ArrowFunctionTypeExpressionParserRuleCall_0!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getArrowFunctionTypeExpressionParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    IterableTypeExpressionParserRuleCall_1=ruleIterableTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterableTypeExpressionParserRuleCall_1!=null?((Token)IterableTypeExpressionParserRuleCall_1.start):null), (IterableTypeExpressionParserRuleCall_1!=null?((Token)IterableTypeExpressionParserRuleCall_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getIterableTypeExpressionParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefWithModifiersParserRuleCall_2=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.start):null), (TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    LeftParenthesisKeyword_3_0=(Token)match(input,LeftParenthesis,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LeftParenthesisKeyword_3_0, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_3_0());
                    }
                    pushFollow(FOLLOW_71);
                    TypeRefParserRuleCall_3_1=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.start):null), (TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_3_1()); 
                    }
                    RightParenthesisKeyword_3_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightParenthesisKeyword_3_2, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_3_2());
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithModifiers();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeRefWithModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefWithModifiers_return ruleTypeRefWithModifiers() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefWithModifiers_return retval = new InternalN4JSParser.ruleTypeRefWithModifiers_return();
        retval.start = input.LT(1);
        Token FollowedByQuestionMarkQuestionMarkKeyword_1_0=null;
        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefWithoutModifiersParserRuleCall_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_143);
            TypeRefWithoutModifiersParserRuleCall_0=ruleTypeRefWithoutModifiers();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefWithoutModifiersParserRuleCall_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0.start):null), (TypeRefWithoutModifiersParserRuleCall_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0()); 
            }
            int alt585=2;
            alt585 = dfa585.predict(input);
            switch (alt585) {
                case 1 :
                    {
                    {
                    FollowedByQuestionMarkQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(FollowedByQuestionMarkQuestionMarkKeyword_1_0, grammarAccess.getTypeRefWithModifiersAccess().getFollowedByQuestionMarkQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithoutModifiers();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeRefWithoutModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefWithoutModifiers_return ruleTypeRefWithoutModifiers() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefWithoutModifiers_return retval = new InternalN4JSParser.ruleTypeRefWithoutModifiers_return();
        retval.start = input.LT(1);
        Token DynamicPlusSignKeyword_0_1_0=null;
        InternalN4JSParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0_0_0 = null;
        InternalN4JSParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_1 = null;
        InternalN4JSParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_2 = null;
        InternalN4JSParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;
        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;
        try {
            {
            int alt588=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Default:
            case Target:
            case Await:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt588=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt588=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt588=3;
                }
                break;
            case Union:
                {
                alt588=4;
                }
                break;
            case Intersection:
                {
                alt588=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 588, 0, input);
                throw nvae;
            }
            switch (alt588) {
                case 1 :
                    {
                    {
                    int alt586=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Default:
                    case Target:
                    case Await:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt586=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA586_4 = input.LA(3);
                            if ( (LA586_4==Promisify||LA586_4==Default||LA586_4==Target||LA586_4==Await||LA586_4==This||LA586_4==Void||LA586_4==RULE_IDENTIFIER) ) {
                                alt586=1;
                            }
                            else if ( (LA586_4==This_1) ) {
                                alt586=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 586, 4, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA586_5 = input.LA(3);
                            if ( (LA586_5==Promisify||LA586_5==Default||LA586_5==Target||LA586_5==Await||LA586_5==This||LA586_5==Void||LA586_5==RULE_IDENTIFIER) ) {
                                alt586=1;
                            }
                            else if ( (LA586_5==This_1) ) {
                                alt586=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 586, 5, input);
                                throw nvae;
                            }
                            }
                            break;
                        case This_1:
                            {
                            alt586=2;
                            }
                            break;
                        case Promisify:
                        case Default:
                        case Target:
                        case Await:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt586=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 586, 2, input);
                            throw nvae;
                        }
                        }
                        break;
                    case This_1:
                        {
                        alt586=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 586, 0, input);
                        throw nvae;
                    }
                    switch (alt586) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_34);
                            ParameterizedTypeRefParserRuleCall_0_0_0=ruleParameterizedTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.start):null), (ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0()); 
                            }
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_34);
                            ThisTypeRefParserRuleCall_0_0_1=ruleThisTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.start):null), (ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1()); 
                            }
                            }
                            break;
                    }
                    int alt587=2;
                    alt587 = dfa587.predict(input);
                    switch (alt587) {
                        case 1 :
                            {
                            {
                            DynamicPlusSignKeyword_0_1_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(DynamicPlusSignKeyword_0_1_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0());
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_1=ruleTypeTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.start):null), (TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_2=ruleFunctionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.start):null), (FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefFunctionTypeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeRefFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return retval = new InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;
        InternalN4JSParser.ruleIterableTypeExpression_return IterableTypeExpressionParserRuleCall_1 = null;
        InternalN4JSParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_2 = null;
        InternalN4JSParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;
        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;
        try {
            {
            int alt589=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Default:
            case Target:
            case Await:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt589=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt589=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt589=3;
                }
                break;
            case Union:
                {
                alt589=4;
                }
                break;
            case Intersection:
                {
                alt589=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 589, 0, input);
                throw nvae;
            }
            switch (alt589) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    IterableTypeExpressionParserRuleCall_1=ruleIterableTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterableTypeExpressionParserRuleCall_1!=null?((Token)IterableTypeExpressionParserRuleCall_1.start):null), (IterableTypeExpressionParserRuleCall_1!=null?((Token)IterableTypeExpressionParserRuleCall_1.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIterableTypeExpressionParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_2=ruleTypeTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.start):null), (TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgInTypeTypeRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeArgInTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArgInTypeTypeRef_return ruleTypeArgInTypeTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleTypeArgInTypeTypeRef_return retval = new InternalN4JSParser.ruleTypeArgInTypeTypeRef_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;
        InternalN4JSParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_1 = null;
        InternalN4JSParser.ruleWildcardOldNotation_return WildcardOldNotationParserRuleCall_2 = null;
        try {
            {
            int alt590=3;
            int LA590_0 = input.LA(1);
            if ( (LA590_0==Promisify||LA590_0==Default||LA590_0==Target||LA590_0==Await||LA590_0==This||LA590_0==Void||LA590_0==RULE_IDENTIFIER) ) {
                alt590=1;
            }
            else if ( (LA590_0==This_1) ) {
                alt590=2;
            }
            else if ( (LA590_0==QuestionMark) && (synpred333_InternalN4JSParser())) {
                alt590=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 590, 0, input);
                throw nvae;
            }
            switch (alt590) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_1=ruleThisTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.start):null), (ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardOldNotationParserRuleCall_2=ruleWildcardOldNotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardOldNotationParserRuleCall_2!=null?((Token)WildcardOldNotationParserRuleCall_2.start):null), (WildcardOldNotationParserRuleCall_2!=null?((Token)WildcardOldNotationParserRuleCall_2.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardOldNotationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleThisTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRef_return ruleThisTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRef_return retval = new InternalN4JSParser.ruleThisTypeRef_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_0 = null;
        InternalN4JSParser.ruleThisTypeRefStructural_return ThisTypeRefStructuralParserRuleCall_1 = null;
        try {
            {
            int alt591=2;
            int LA591_0 = input.LA(1);
            if ( (LA591_0==This_1) ) {
                alt591=1;
            }
            else if ( (LA591_0==Tilde) ) {
                alt591=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 591, 0, input);
                throw nvae;
            }
            switch (alt591) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_0=ruleThisTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.start):null), (ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefStructuralParserRuleCall_1=ruleThisTypeRefStructural();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.start):null), (ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefNominal();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleThisTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRefNominal_return ruleThisTypeRefNominal() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRefNominal_return retval = new InternalN4JSParser.ruleThisTypeRefNominal_return();
        retval.start = input.LT(1);
        Token ThisKeyword_1=null;
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ThisKeyword_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefStructural();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleThisTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRefStructural_return ruleThisTypeRefStructural() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRefStructural_return retval = new InternalN4JSParser.ruleThisTypeRefStructural_return();
        retval.start = input.LT(1);
        Token ThisKeyword_1=null;
        Token WithKeyword_2_0=null;
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_2_1 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_186);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0());
            }
            }
            }
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ThisKeyword_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1());
            }
            int alt592=2;
            int LA592_0 = input.LA(1);
            if ( (LA592_0==With) ) {
                int LA592_1 = input.LA(2);
                if ( (LA592_1==LeftCurlyBracket) ) {
                    alt592=1;
                }
            }
            switch (alt592) {
                case 1 :
                    {
                    WithKeyword_2_0=(Token)match(input,With,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(WithKeyword_2_0, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_2_1=ruleTStructMemberList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.start):null), (TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleFunctionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionTypeExpressionOLD_return ruleFunctionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSParser.ruleFunctionTypeExpressionOLD_return retval = new InternalN4JSParser.ruleFunctionTypeExpressionOLD_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_1=null;
        Token CommercialAtKeyword_2_0=null;
        Token ThisKeyword_2_1=null;
        Token LeftParenthesisKeyword_2_2=null;
        Token RightParenthesisKeyword_2_4=null;
        Token FunctionKeyword_3=null;
        Token LessThanSignKeyword_4_0=null;
        Token CommaKeyword_4_2_0=null;
        Token GreaterThanSignKeyword_4_3=null;
        Token LeftParenthesisKeyword_5=null;
        Token RightParenthesisKeyword_7=null;
        Token RightCurlyBracketKeyword_9=null;
        InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0 = null;
        InternalN4JSParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_1_0 = null;
        InternalN4JSParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0 = null;
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_6 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_8 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_188); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt593=2;
            int LA593_0 = input.LA(1);
            if ( (LA593_0==CommercialAt) ) {
                alt593=1;
            }
            switch (alt593) {
                case 1 :
                    {
                    CommercialAtKeyword_2_0=(Token)match(input,CommercialAt,FOLLOW_189); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(CommercialAtKeyword_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0());
                    }
                    ThisKeyword_2_1=(Token)match(input,This,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ThisKeyword_2_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1());
                    }
                    LeftParenthesisKeyword_2_2=(Token)match(input,LeftParenthesis,FOLLOW_190); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LeftParenthesisKeyword_2_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_71);
                    DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0=ruleTypeRefFunctionTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.start):null), (DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeAssignment_2_3());
                    }
                    }
                    }
                    RightParenthesisKeyword_2_4=(Token)match(input,RightParenthesis,FOLLOW_45); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightParenthesisKeyword_2_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4());
                    }
                    }
                    break;
            }
            FunctionKeyword_3=(Token)match(input,Function,FOLLOW_191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FunctionKeyword_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3());
            }
            int alt595=2;
            int LA595_0 = input.LA(1);
            if ( (LA595_0==LessThanSign) ) {
                alt595=1;
            }
            switch (alt595) {
                case 1 :
                    {
                    LessThanSignKeyword_4_0=(Token)match(input,LessThanSign,FOLLOW_192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LessThanSignKeyword_4_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_113);
                    OwnedTypeVarsTypeVariableParserRuleCall_4_1_0=ruleTypeVariable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_1());
                    }
                    }
                    }
                    loop594:
                    do {
                        int alt594=2;
                        int LA594_0 = input.LA(1);
                        if ( (LA594_0==Comma) ) {
                            alt594=1;
                        }
                        switch (alt594) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_4_2_0=(Token)match(input,Comma,FOLLOW_192); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_4_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_113);
                    	    OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0=ruleTypeVariable();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_2_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop594;
                        }
                    } while (true);
                    GreaterThanSignKeyword_4_3=(Token)match(input,GreaterThanSign,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_4_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3());
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_5=(Token)match(input,LeftParenthesis,FOLLOW_193); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_5, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5());
            }
            pushFollow(FOLLOW_71);
            TAnonymousFormalParameterListParserRuleCall_6=ruleTAnonymousFormalParameterList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.start):null), (TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6()); 
            }
            RightParenthesisKeyword_7=(Token)match(input,RightParenthesis,FOLLOW_194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7());
            }
            int alt596=2;
            int LA596_0 = input.LA(1);
            if ( (LA596_0==Colon) ) {
                alt596=1;
            }
            switch (alt596) {
                case 1 :
                    {
                    pushFollow(FOLLOW_23);
                    ColonSepReturnTypeRefParserRuleCall_8=ruleColonSepReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepReturnTypeRefParserRuleCall_8!=null?((Token)ColonSepReturnTypeRefParserRuleCall_8.start):null), (ColonSepReturnTypeRefParserRuleCall_8!=null?((Token)ColonSepReturnTypeRefParserRuleCall_8.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getColonSepReturnTypeRefParserRuleCall_8()); 
                    }
                    }
                    break;
            }
            RightCurlyBracketKeyword_9=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_9, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowFunctionTypeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrowFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrowFunctionTypeExpression_return ruleArrowFunctionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleArrowFunctionTypeExpression_return retval = new InternalN4JSParser.ruleArrowFunctionTypeExpression_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0_0_1=null;
        Token RightParenthesisKeyword_0_0_3=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_4=null;
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_0_0_2 = null;
        InternalN4JSParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            LeftParenthesisKeyword_0_0_1=(Token)match(input,LeftParenthesis,FOLLOW_193); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(LeftParenthesisKeyword_0_0_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_0_0_1());
            }
            pushFollow(FOLLOW_71);
            TAnonymousFormalParameterListParserRuleCall_0_0_2=ruleTAnonymousFormalParameterList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_2.start):null), (TAnonymousFormalParameterListParserRuleCall_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_2.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_2()); 
            }
            RightParenthesisKeyword_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(RightParenthesisKeyword_0_0_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_0_0_3());
            }
            EqualsSignGreaterThanSignKeyword_0_0_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(EqualsSignGreaterThanSignKeyword_0_0_4, grammarAccess.getArrowFunctionTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_4());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0=rulePrimaryTypeExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleTAnonymousFormalParameterList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTAnonymousFormalParameterList_return ruleTAnonymousFormalParameterList() throws RecognitionException {
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return retval = new InternalN4JSParser.ruleTAnonymousFormalParameterList_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_0=null;
        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_1_1_0 = null;
        try {
            {
            int alt598=2;
            int LA598_0 = input.LA(1);
            if ( ((LA598_0>=Intersection && LA598_0<=Implements)||(LA598_0>=Promisify && LA598_0<=Abstract)||LA598_0==External||LA598_0==Default||(LA598_0>=Private && LA598_0<=Project)||LA598_0==Public||LA598_0==Static||LA598_0==Target||(LA598_0>=Async && LA598_0<=Await)||LA598_0==Union||(LA598_0>=Yield && LA598_0<=This)||LA598_0==From||LA598_0==This_1||(LA598_0>=Type && LA598_0<=Void)||LA598_0==FullStopFullStopFullStop||(LA598_0>=Get && LA598_0<=Let)||(LA598_0>=Out && LA598_0<=Set)||LA598_0==As||LA598_0==Of||LA598_0==LeftParenthesis||LA598_0==QuestionMark||LA598_0==LeftSquareBracket||LA598_0==LeftCurlyBracket||LA598_0==Tilde||LA598_0==RULE_IDENTIFIER) ) {
                alt598=1;
            }
            switch (alt598) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_30);
                    FparsTAnonymousFormalParameterParserRuleCall_0_0=ruleTAnonymousFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_0());
                    }
                    }
                    }
                    loop597:
                    do {
                        int alt597=2;
                        int LA597_0 = input.LA(1);
                        if ( (LA597_0==Comma) ) {
                            alt597=1;
                        }
                        switch (alt597) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_195); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      			announce(CommaKeyword_1_0, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_30);
                    	    FparsTAnonymousFormalParameterParserRuleCall_1_1_0=ruleTAnonymousFormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce((FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop597;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTAnonymousFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTAnonymousFormalParameter();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTAnonymousFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTAnonymousFormalParameter_return ruleTAnonymousFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleTAnonymousFormalParameter_return retval = new InternalN4JSParser.ruleTAnonymousFormalParameter_return();
        retval.start = input.LT(1);
        Token VariadicFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_1 = null;
        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_1_1_0 = null;
        InternalN4JSParser.ruleDefaultFormalParameter_return DefaultFormalParameterParserRuleCall_2 = null;
        try {
            {
            {
            int alt599=2;
            int LA599_0 = input.LA(1);
            if ( (LA599_0==FullStopFullStopFullStop) ) {
                alt599=1;
            }
            switch (alt599) {
                case 1 :
                    {
                    {
                    VariadicFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(VariadicFullStopFullStopFullStopKeyword_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            int alt600=2;
            alt600 = dfa600.predict(input);
            switch (alt600) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_93);
                    NameBindingIdentifierParserRuleCall_1_0_0_0_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getNameAssignment_1_0_0_0());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_68);
                    ColonSepTypeRefParserRuleCall_1_0_0_1=ruleColonSepTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_1.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getColonSepTypeRefParserRuleCall_1_0_0_1()); 
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_68);
                    TypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.start):null), (TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            DefaultFormalParameterParserRuleCall_2=ruleDefaultFormalParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DefaultFormalParameterParserRuleCall_2!=null?((Token)DefaultFormalParameterParserRuleCall_2.start):null), (DefaultFormalParameterParserRuleCall_2!=null?((Token)DefaultFormalParameterParserRuleCall_2.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getDefaultFormalParameterParserRuleCall_2()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleDefaultFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDefaultFormalParameter_return ruleDefaultFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleDefaultFormalParameter_return retval = new InternalN4JSParser.ruleDefaultFormalParameter_return();
        retval.start = input.LT(1);
        Token HasInitializerAssignmentEqualsSignKeyword_0_0=null;
        InternalN4JSParser.ruleTypeReferenceName_return AstInitializerTypeReferenceNameParserRuleCall_1_0 = null;
        try {
            {
            int alt602=2;
            int LA602_0 = input.LA(1);
            if ( (LA602_0==EqualsSign) ) {
                alt602=1;
            }
            switch (alt602) {
                case 1 :
                    {
                    {
                    {
                    HasInitializerAssignmentEqualsSignKeyword_0_0=(Token)match(input,EqualsSign,FOLLOW_196); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(HasInitializerAssignmentEqualsSignKeyword_0_0, grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());
                    }
                    }
                    }
                    int alt601=2;
                    int LA601_0 = input.LA(1);
                    if ( (LA601_0==Promisify||LA601_0==Default||LA601_0==Target||LA601_0==Await||LA601_0==This||LA601_0==Void||LA601_0==RULE_IDENTIFIER) ) {
                        alt601=1;
                    }
                    switch (alt601) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            AstInitializerTypeReferenceNameParserRuleCall_1_0=ruleTypeReferenceName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce((AstInitializerTypeReferenceNameParserRuleCall_1_0!=null?((Token)AstInitializerTypeReferenceNameParserRuleCall_1_0.start):null), (AstInitializerTypeReferenceNameParserRuleCall_1_0!=null?((Token)AstInitializerTypeReferenceNameParserRuleCall_1_0.stop):null), grammarAccess.getDefaultFormalParameterAccess().getAstInitializerAssignment_1());
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleUnionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUnionTypeExpressionOLD_return ruleUnionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSParser.ruleUnionTypeExpressionOLD_return retval = new InternalN4JSParser.ruleUnionTypeExpressionOLD_return();
        retval.start = input.LT(1);
        Token UnionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSParser.ruleTypeRef_return TypeRefsTypeRefParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleTypeRef_return TypeRefsTypeRefParserRuleCall_4_1_0 = null;
        try {
            {
            {
            UnionKeyword_1=(Token)match(input,Union,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(UnionKeyword_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1());
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_15);
            TypeRefsTypeRefParserRuleCall_3_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeRefsTypeRefParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefParserRuleCall_3_0.start):null), (TypeRefsTypeRefParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefParserRuleCall_3_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_3());
            }
            }
            }
            loop603:
            do {
                int alt603=2;
                int LA603_0 = input.LA(1);
                if ( (LA603_0==Comma) ) {
                    alt603=1;
                }
                switch (alt603) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_62); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_4_0, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_15);
            	    TypeRefsTypeRefParserRuleCall_4_1_0=ruleTypeRef();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((TypeRefsTypeRefParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefParserRuleCall_4_1_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop603;
                }
            } while (true);
            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_5, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIntersectionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return retval = new InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return();
        retval.start = input.LT(1);
        Token IntersectionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSParser.ruleTypeRef_return TypeRefsTypeRefParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleTypeRef_return TypeRefsTypeRefParserRuleCall_4_1_0 = null;
        try {
            {
            {
            IntersectionKeyword_1=(Token)match(input,Intersection,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(IntersectionKeyword_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1());
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_15);
            TypeRefsTypeRefParserRuleCall_3_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeRefsTypeRefParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefParserRuleCall_3_0.start):null), (TypeRefsTypeRefParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefParserRuleCall_3_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_3());
            }
            }
            }
            loop604:
            do {
                int alt604=2;
                int LA604_0 = input.LA(1);
                if ( (LA604_0==Comma) ) {
                    alt604=1;
                }
                switch (alt604) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_62); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_4_0, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_15);
            	    TypeRefsTypeRefParserRuleCall_4_1_0=ruleTypeRef();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((TypeRefsTypeRefParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefParserRuleCall_4_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop604;
                }
            } while (true);
            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_5, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleParameterizedTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRef_return ruleParameterizedTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRef_return retval = new InternalN4JSParser.ruleParameterizedTypeRef_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;
        InternalN4JSParser.ruleParameterizedTypeRefStructural_return ParameterizedTypeRefStructuralParserRuleCall_1 = null;
        try {
            {
            int alt605=2;
            int LA605_0 = input.LA(1);
            if ( (LA605_0==Promisify||LA605_0==Default||LA605_0==Target||LA605_0==Await||LA605_0==This||LA605_0==Void||LA605_0==RULE_IDENTIFIER) ) {
                alt605=1;
            }
            else if ( (LA605_0==Tilde) ) {
                alt605=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 605, 0, input);
                throw nvae;
            }
            switch (alt605) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefStructuralParserRuleCall_1=ruleParameterizedTypeRefStructural();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.start):null), (ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefNominal();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleParameterizedTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRefNominal_return ruleParameterizedTypeRefNominal() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return retval = new InternalN4JSParser.ruleParameterizedTypeRefNominal_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeReference_return TypeReferenceParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleTypeReference_return TypeReferenceParserRuleCall_0_1_1 = null;
        InternalN4JSParser.ruleVersionRequest_return VersionRequestParserRuleCall_0_1_2 = null;
        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;
        try {
            {
            {
            int alt606=2;
            alt606 = dfa606.predict(input);
            switch (alt606) {
                case 1 :
                    {
                    pushFollow(FOLLOW_197);
                    TypeReferenceParserRuleCall_0_0=ruleTypeReference();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeReferenceParserRuleCall_0_0!=null?((Token)TypeReferenceParserRuleCall_0_0.start):null), (TypeReferenceParserRuleCall_0_0!=null?((Token)TypeReferenceParserRuleCall_0_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeReferenceParserRuleCall_0_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_97);
                    TypeReferenceParserRuleCall_0_1_1=ruleTypeReference();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeReferenceParserRuleCall_0_1_1!=null?((Token)TypeReferenceParserRuleCall_0_1_1.start):null), (TypeReferenceParserRuleCall_0_1_1!=null?((Token)TypeReferenceParserRuleCall_0_1_1.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeReferenceParserRuleCall_0_1_1()); 
                    }
                    pushFollow(FOLLOW_197);
                    VersionRequestParserRuleCall_0_1_2=ruleVersionRequest();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionRequestParserRuleCall_0_1_2!=null?((Token)VersionRequestParserRuleCall_0_1_2.start):null), (VersionRequestParserRuleCall_0_1_2!=null?((Token)VersionRequestParserRuleCall_0_1_2.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getVersionRequestParserRuleCall_0_1_2()); 
                    }
                    }
                    }
                    break;
            }
            int alt607=2;
            alt607 = dfa607.predict(input);
            switch (alt607) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgumentsParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefStructural();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleParameterizedTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRefStructural_return ruleParameterizedTypeRefStructural() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRefStructural_return retval = new InternalN4JSParser.ruleParameterizedTypeRefStructural_return();
        retval.start = input.LT(1);
        Token WithKeyword_2_0=null;
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0 = null;
        InternalN4JSParser.ruleTypeReference_return TypeReferenceParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0 = null;
        InternalN4JSParser.ruleTypeReference_return TypeReferenceParserRuleCall_0_1_2 = null;
        InternalN4JSParser.ruleVersionRequest_return VersionRequestParserRuleCall_0_1_3 = null;
        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;
        InternalN4JSParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_2_1 = null;
        try {
            {
            {
            int alt608=2;
            alt608 = dfa608.predict(input);
            switch (alt608) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_156);
                    DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0=ruleTypingStrategyUseSiteOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_198);
                    TypeReferenceParserRuleCall_0_0_1=ruleTypeReference();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeReferenceParserRuleCall_0_0_1!=null?((Token)TypeReferenceParserRuleCall_0_0_1.start):null), (TypeReferenceParserRuleCall_0_0_1!=null?((Token)TypeReferenceParserRuleCall_0_0_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeReferenceParserRuleCall_0_0_1()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_156);
                    DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0=ruleTypingStrategyUseSiteOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0_1_1());
                    }
                    }
                    }
                    pushFollow(FOLLOW_97);
                    TypeReferenceParserRuleCall_0_1_2=ruleTypeReference();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeReferenceParserRuleCall_0_1_2!=null?((Token)TypeReferenceParserRuleCall_0_1_2.start):null), (TypeReferenceParserRuleCall_0_1_2!=null?((Token)TypeReferenceParserRuleCall_0_1_2.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeReferenceParserRuleCall_0_1_2()); 
                    }
                    pushFollow(FOLLOW_198);
                    VersionRequestParserRuleCall_0_1_3=ruleVersionRequest();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionRequestParserRuleCall_0_1_3!=null?((Token)VersionRequestParserRuleCall_0_1_3.start):null), (VersionRequestParserRuleCall_0_1_3!=null?((Token)VersionRequestParserRuleCall_0_1_3.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getVersionRequestParserRuleCall_0_1_3()); 
                    }
                    }
                    }
                    break;
            }
            int alt609=2;
            alt609 = dfa609.predict(input);
            switch (alt609) {
                case 1 :
                    {
                    pushFollow(FOLLOW_187);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgumentsParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            int alt610=2;
            int LA610_0 = input.LA(1);
            if ( (LA610_0==With) ) {
                int LA610_1 = input.LA(2);
                if ( (LA610_1==LeftCurlyBracket) ) {
                    alt610=1;
                }
            }
            switch (alt610) {
                case 1 :
                    {
                    WithKeyword_2_0=(Token)match(input,With,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(WithKeyword_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_2_1=ruleTStructMemberList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.start):null), (TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIterableTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIterableTypeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIterableTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIterableTypeExpression_return ruleIterableTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleIterableTypeExpression_return retval = new InternalN4JSParser.ruleIterableTypeExpression_return();
        retval.start = input.LT(1);
        Token IterableTypeExpressionLeftSquareBracketKeyword_0_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token RightSquareBracketKeyword_1_1_2=null;
        InternalN4JSParser.ruleEmptyIterableTypeExpressionTail_return TypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0 = null;
        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_1_0_0 = null;
        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            IterableTypeExpressionLeftSquareBracketKeyword_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_199); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(IterableTypeExpressionLeftSquareBracketKeyword_0_0, grammarAccess.getIterableTypeExpressionAccess().getIterableTypeExpressionLeftSquareBracketKeyword_0_0());
            }
            }
            }
            int alt612=2;
            int LA612_0 = input.LA(1);
            if ( (LA612_0==RightSquareBracket) ) {
                alt612=1;
            }
            else if ( ((LA612_0>=Intersection && LA612_0<=Constructor)||LA612_0==Promisify||LA612_0==Default||LA612_0==Target||LA612_0==Await||LA612_0==Union||LA612_0==This||LA612_0==This_1||(LA612_0>=Type && LA612_0<=Void)||LA612_0==Out||LA612_0==In||LA612_0==LeftParenthesis||LA612_0==QuestionMark||LA612_0==LeftSquareBracket||LA612_0==LeftCurlyBracket||LA612_0==Tilde||LA612_0==RULE_IDENTIFIER) ) {
                alt612=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 612, 0, input);
                throw nvae;
            }
            switch (alt612) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0=ruleEmptyIterableTypeExpressionTail();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0!=null?((Token)TypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0.start):null), (TypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0!=null?((Token)TypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0.stop):null), grammarAccess.getIterableTypeExpressionAccess().getTypeArgsAssignment_1_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_99);
                    TypeArgsTypeArgumentParserRuleCall_1_1_0_0=ruleTypeArgument();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((TypeArgsTypeArgumentParserRuleCall_1_1_0_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_1_0_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0_0.stop):null), grammarAccess.getIterableTypeExpressionAccess().getTypeArgsAssignment_1_1_0());
                    }
                    }
                    }
                    loop611:
                    do {
                        int alt611=2;
                        int LA611_0 = input.LA(1);
                        if ( (LA611_0==Comma) ) {
                            alt611=1;
                        }
                        switch (alt611) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_199); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(CommaKeyword_1_1_1_0, grammarAccess.getIterableTypeExpressionAccess().getCommaKeyword_1_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    TypeArgsTypeArgumentParserRuleCall_1_1_1_1_0=ruleTypeArgument();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((TypeArgsTypeArgumentParserRuleCall_1_1_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_1_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_1_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getIterableTypeExpressionAccess().getTypeArgsAssignment_1_1_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop611;
                        }
                    } while (true);
                    RightSquareBracketKeyword_1_1_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightSquareBracketKeyword_1_1_2, grammarAccess.getIterableTypeExpressionAccess().getRightSquareBracketKeyword_1_1_2());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleEmptyIterableTypeExpressionTail() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEmptyIterableTypeExpressionTail();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleEmptyIterableTypeExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleEmptyIterableTypeExpressionTail_return ruleEmptyIterableTypeExpressionTail() throws RecognitionException {
        InternalN4JSParser.ruleEmptyIterableTypeExpressionTail_return retval = new InternalN4JSParser.ruleEmptyIterableTypeExpressionTail_return();
        retval.start = input.LT(1);
        Token RightSquareBracketKeyword_1=null;
        try {
            {
            {
            RightSquareBracketKeyword_1=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_1, grammarAccess.getEmptyIterableTypeExpressionTailAccess().getRightSquareBracketKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleVersionRequest_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVersionRequest_return ruleVersionRequest() throws RecognitionException {
        InternalN4JSParser.ruleVersionRequest_return retval = new InternalN4JSParser.ruleVersionRequest_return();
        retval.start = input.LT(1);
        Token RequestedVersionVERSIONTerminalRuleCall_0=null;
        try {
            {
            {
            {
            RequestedVersionVERSIONTerminalRuleCall_0=(Token)match(input,RULE_VERSION,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(RequestedVersionVERSIONTerminalRuleCall_0, grammarAccess.getVersionRequestAccess().getRequestedVersionAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleTypeArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArguments_return ruleTypeArguments() throws RecognitionException {
        InternalN4JSParser.ruleTypeArguments_return retval = new InternalN4JSParser.ruleTypeArguments_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_1_0 = null;
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_199); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LessThanSignKeyword_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_113);
            TypeArgsTypeArgumentParserRuleCall_1_0=ruleTypeArgument();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_1());
            }
            }
            }
            loop613:
            do {
                int alt613=2;
                int LA613_0 = input.LA(1);
                if ( (LA613_0==Comma) ) {
                    alt613=1;
                }
                switch (alt613) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_199); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_113);
            	    TypeArgsTypeArgumentParserRuleCall_2_1_0=ruleTypeArgument();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop613;
                }
            } while (true);
            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GreaterThanSignKeyword_3, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleTStructMemberList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMemberList_return ruleTStructMemberList() throws RecognitionException {
        InternalN4JSParser.ruleTStructMemberList_return retval = new InternalN4JSParser.ruleTStructMemberList_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0=null;
        Token SemicolonKeyword_1_1_0=null;
        Token CommaKeyword_1_1_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleTStructMember_return AstStructuralMembersTStructMemberParserRuleCall_1_0_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_200); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0());
            }
            loop615:
            do {
                int alt615=2;
                int LA615_0 = input.LA(1);
                if ( ((LA615_0>=Intersection && LA615_0<=With)||(LA615_0>=For && LA615_0<=Var)||(LA615_0>=As && LA615_0<=Of)||LA615_0==LessThanSign||LA615_0==RULE_IDENTIFIER) ) {
                    alt615=1;
                }
                switch (alt615) {
            	case 1 :
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_201);
            	    AstStructuralMembersTStructMemberParserRuleCall_1_0_0=ruleTStructMember();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.start):null), (AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.stop):null), grammarAccess.getTStructMemberListAccess().getAstStructuralMembersAssignment_1_0());
            	    }
            	    }
            	    }
            	    int alt614=3;
            	    int LA614_0 = input.LA(1);
            	    if ( (LA614_0==Semicolon) ) {
            	        alt614=1;
            	    }
            	    else if ( (LA614_0==Comma) ) {
            	        alt614=2;
            	    }
            	    switch (alt614) {
            	        case 1 :
            	            {
            	            SemicolonKeyword_1_1_0=(Token)match(input,Semicolon,FOLLOW_200); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	              				announce(SemicolonKeyword_1_1_0, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0());
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            CommaKeyword_1_1_1=(Token)match(input,Comma,FOLLOW_200); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	              				announce(CommaKeyword_1_1_1, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1());
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop615;
                }
            } while (true);
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMember() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMember();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTStructMember_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMember_return ruleTStructMember() throws RecognitionException {
        InternalN4JSParser.ruleTStructMember_return retval = new InternalN4JSParser.ruleTStructMember_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTStructGetter_return TStructGetterParserRuleCall_0 = null;
        InternalN4JSParser.ruleTStructSetter_return TStructSetterParserRuleCall_1 = null;
        InternalN4JSParser.ruleTStructMethod_return TStructMethodParserRuleCall_2 = null;
        InternalN4JSParser.ruleTStructField_return TStructFieldParserRuleCall_3 = null;
        try {
            {
            int alt616=4;
            alt616 = dfa616.predict(input);
            switch (alt616) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructGetterParserRuleCall_0=ruleTStructGetter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.start):null), (TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.stop):null), grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructSetterParserRuleCall_1=ruleTStructSetter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.start):null), (TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.stop):null), grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructMethodParserRuleCall_2=ruleTStructMethod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.start):null), (TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.stop):null), grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TStructFieldParserRuleCall_3=ruleTStructField();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.start):null), (TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.stop):null), grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMethod() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMethod();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTStructMethod_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMethod_return ruleTStructMethod() throws RecognitionException {
        InternalN4JSParser.ruleTStructMethod_return retval = new InternalN4JSParser.ruleTStructMethod_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0_0_3=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_1 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            int alt617=2;
            int LA617_0 = input.LA(1);
            if ( (LA617_0==LessThanSign) ) {
                alt617=1;
            }
            switch (alt617) {
                case 1 :
                    {
                    pushFollow(FOLLOW_14);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getTStructMethodAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_42);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructMethodAccess().getNameAssignment_0_0_2());
            }
            }
            }
            LeftParenthesisKeyword_0_0_3=(Token)match(input,LeftParenthesis,FOLLOW_193); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(LeftParenthesisKeyword_0_0_3, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3());
            }
            }
            }
            pushFollow(FOLLOW_71);
            TAnonymousFormalParameterListParserRuleCall_1=ruleTAnonymousFormalParameterList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.start):null), (TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.stop):null), grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2());
            }
            int alt618=2;
            int LA618_0 = input.LA(1);
            if ( (LA618_0==Colon) ) {
                alt618=1;
            }
            switch (alt618) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepReturnTypeRefParserRuleCall_3=ruleColonSepReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepReturnTypeRefParserRuleCall_3!=null?((Token)ColonSepReturnTypeRefParserRuleCall_3.start):null), (ColonSepReturnTypeRefParserRuleCall_3!=null?((Token)ColonSepReturnTypeRefParserRuleCall_3.stop):null), grammarAccess.getTStructMethodAccess().getColonSepReturnTypeRefParserRuleCall_3()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleTypeVariables_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeVariables_return ruleTypeVariables() throws RecognitionException {
        InternalN4JSParser.ruleTypeVariables_return retval = new InternalN4JSParser.ruleTypeVariables_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_2_1_0 = null;
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_192); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LessThanSignKeyword_0, grammarAccess.getTypeVariablesAccess().getLessThanSignKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_113);
            TypeVarsTypeVariableParserRuleCall_1_0=ruleTypeVariable();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_1());
            }
            }
            }
            loop619:
            do {
                int alt619=2;
                int LA619_0 = input.LA(1);
                if ( (LA619_0==Comma) ) {
                    alt619=1;
                }
                switch (alt619) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_192); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getTypeVariablesAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_113);
            	    TypeVarsTypeVariableParserRuleCall_2_1_0=ruleTypeVariable();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop619;
                }
            } while (true);
            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GreaterThanSignKeyword_3, grammarAccess.getTypeVariablesAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleColonSepDeclaredTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ruleColonSepDeclaredTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return retval = new InternalN4JSParser.ruleColonSepDeclaredTypeRef_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_0 = null;
        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_0, grammarAccess.getColonSepDeclaredTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            DeclaredTypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepDeclaredTypeRefAccess().getDeclaredTypeRefAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleColonSepTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleColonSepTypeRef_return ruleColonSepTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleColonSepTypeRef_return retval = new InternalN4JSParser.ruleColonSepTypeRef_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0=null;
        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_1_0 = null;
        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeRefTypeRefParserRuleCall_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_0.start):null), (TypeRefTypeRefParserRuleCall_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepTypeRefAccess().getTypeRefAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleColonSepReturnTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleColonSepReturnTypeRef_return ruleColonSepReturnTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleColonSepReturnTypeRef_return retval = new InternalN4JSParser.ruleColonSepReturnTypeRef_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0=null;
        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_0 = null;
        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_0, grammarAccess.getColonSepReturnTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReturnTypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ReturnTypeRefTypeRefParserRuleCall_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepReturnTypeRefAccess().getReturnTypeRefAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructField() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructField();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTStructField_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructField_return ruleTStructField() throws RecognitionException {
        InternalN4JSParser.ruleTStructField_return retval = new InternalN4JSParser.ruleTStructField_return();
        retval.start = input.LT(1);
        Token OptionalQuestionMarkKeyword_1_0=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_2 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_202);
            NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getTStructFieldAccess().getNameAssignment_0());
            }
            }
            }
            int alt620=2;
            int LA620_0 = input.LA(1);
            if ( (LA620_0==QuestionMark) ) {
                alt620=1;
            }
            switch (alt620) {
                case 1 :
                    {
                    {
                    OptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalQuestionMarkKeyword_1_0, grammarAccess.getTStructFieldAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            int alt621=2;
            int LA621_0 = input.LA(1);
            if ( (LA621_0==Colon) ) {
                alt621=1;
            }
            switch (alt621) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_2=ruleColonSepTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_2!=null?((Token)ColonSepTypeRefParserRuleCall_2.start):null), (ColonSepTypeRefParserRuleCall_2!=null?((Token)ColonSepTypeRefParserRuleCall_2.stop):null), grammarAccess.getTStructFieldAccess().getColonSepTypeRefParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructGetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructGetter();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTStructGetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructGetter_return ruleTStructGetter() throws RecognitionException {
        InternalN4JSParser.ruleTStructGetter_return retval = new InternalN4JSParser.ruleTStructGetter_return();
        retval.start = input.LT(1);
        Token GetKeyword_0_0_1=null;
        Token OptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_4 = null;
        try {
            {
            {
            {
            {
            GetKeyword_0_0_1=(Token)match(input,Get,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(GetKeyword_0_0_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1());
            }
            {
            {
            pushFollow(FOLLOW_107);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructGetterAccess().getNameAssignment_0_0_2());
            }
            }
            }
            }
            }
            int alt622=2;
            int LA622_0 = input.LA(1);
            if ( (LA622_0==QuestionMark) ) {
                alt622=1;
            }
            switch (alt622) {
                case 1 :
                    {
                    {
                    OptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalQuestionMarkKeyword_1_0, grammarAccess.getTStructGetterAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_2());
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_3());
            }
            int alt623=2;
            int LA623_0 = input.LA(1);
            if ( (LA623_0==Colon) ) {
                alt623=1;
            }
            switch (alt623) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepDeclaredTypeRefParserRuleCall_4=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_4!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_4.start):null), (ColonSepDeclaredTypeRefParserRuleCall_4!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_4.stop):null), grammarAccess.getTStructGetterAccess().getColonSepDeclaredTypeRefParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructSetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructSetter();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTStructSetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructSetter_return ruleTStructSetter() throws RecognitionException {
        InternalN4JSParser.ruleTStructSetter_return retval = new InternalN4JSParser.ruleTStructSetter_return();
        retval.start = input.LT(1);
        Token SetKeyword_0_0_1=null;
        Token OptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparTAnonymousFormalParameterParserRuleCall_3_0 = null;
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(SetKeyword_0_0_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1());
            }
            {
            {
            pushFollow(FOLLOW_107);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructSetterAccess().getNameAssignment_0_0_2());
            }
            }
            }
            }
            }
            int alt624=2;
            int LA624_0 = input.LA(1);
            if ( (LA624_0==QuestionMark) ) {
                alt624=1;
            }
            switch (alt624) {
                case 1 :
                    {
                    {
                    OptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalQuestionMarkKeyword_1_0, grammarAccess.getTStructSetterAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_195); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_71);
            FparTAnonymousFormalParameterParserRuleCall_3_0=ruleTAnonymousFormalParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((FparTAnonymousFormalParameterParserRuleCall_3_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_3_0.start):null), (FparTAnonymousFormalParameterParserRuleCall_3_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getTStructSetterAccess().getFparAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_4());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyUseSiteOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypingStrategyUseSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return retval = new InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return();
        retval.start = input.LT(1);
        Token TildeKeyword_0=null;
        Token TildeKeyword_1_0=null;
        try {
            {
            {
            TildeKeyword_0=(Token)match(input,Tilde,FOLLOW_203); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(TildeKeyword_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0());
            }
            int alt625=3;
            int LA625_0 = input.LA(1);
            if ( (LA625_0==Tilde) ) {
                alt625=1;
            }
            else if ( (LA625_0==RULE_STRUCTMODSUFFIX) ) {
                alt625=2;
            }
            switch (alt625) {
                case 1 :
                    {
                    TildeKeyword_1_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(TildeKeyword_1_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyDefSiteOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypingStrategyDefSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return retval = new InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return();
        retval.start = input.LT(1);
        Token TildeKeyword=null;
        try {
            {
            TildeKeyword=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(TildeKeyword, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeTypeRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeTypeRef_return ruleTypeTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleTypeTypeRef_return retval = new InternalN4JSParser.ruleTypeTypeRef_return();
        retval.start = input.LT(1);
        Token TypeKeyword_1_0=null;
        Token ConstructorRefConstructorKeyword_1_1_0=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token RightCurlyBracketKeyword_4=null;
        InternalN4JSParser.ruleTypeArgInTypeTypeRef_return TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0 = null;
        try {
            {
            {
            int alt626=2;
            int LA626_0 = input.LA(1);
            if ( (LA626_0==Type) ) {
                alt626=1;
            }
            else if ( (LA626_0==Constructor) ) {
                alt626=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 626, 0, input);
                throw nvae;
            }
            switch (alt626) {
                case 1 :
                    {
                    TypeKeyword_1_0=(Token)match(input,Type,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(TypeKeyword_1_0, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    ConstructorRefConstructorKeyword_1_1_0=(Token)match(input,Constructor,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(ConstructorRefConstructorKeyword_1_1_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0());
                    }
                    }
                    }
                    }
                    break;
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_204); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_2, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_23);
            TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0=ruleTypeArgInTypeTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.start):null), (TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.stop):null), grammarAccess.getTypeTypeRefAccess().getTypeArgAssignment_3());
            }
            }
            }
            RightCurlyBracketKeyword_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_4, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgument();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArgument_return ruleTypeArgument() throws RecognitionException {
        InternalN4JSParser.ruleTypeArgument_return retval = new InternalN4JSParser.ruleTypeArgument_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleWildcard_return WildcardParserRuleCall_0 = null;
        InternalN4JSParser.ruleTypeRef_return TypeRefParserRuleCall_1 = null;
        try {
            {
            int alt627=2;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                int LA627_1 = input.LA(2);
                if ( (LA627_1==EOF||LA627_1==Extends||LA627_1==Super||LA627_1==Comma||LA627_1==GreaterThanSign||LA627_1==RightSquareBracket) ) {
                    alt627=1;
                }
                else if ( (LA627_1==LeftSquareBracket) ) {
                    alt627=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 627, 1, input);
                    throw nvae;
                }
                }
                break;
            case Out:
            case In:
                {
                alt627=1;
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Default:
            case Target:
            case Await:
            case Union:
            case This:
            case This_1:
            case Type:
            case Void:
            case LeftParenthesis:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt627=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 627, 0, input);
                throw nvae;
            }
            switch (alt627) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_0=ruleWildcard();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.start):null), (WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefParserRuleCall_1=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_1!=null?((Token)TypeRefParserRuleCall_1.start):null), (TypeRefParserRuleCall_1!=null?((Token)TypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcard() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcard();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleWildcard_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWildcard_return ruleWildcard() throws RecognitionException {
        InternalN4JSParser.ruleWildcard_return retval = new InternalN4JSParser.ruleWildcard_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleWildcardOldNotation_return WildcardOldNotationParserRuleCall_0 = null;
        InternalN4JSParser.ruleWildcardNewNotation_return WildcardNewNotationParserRuleCall_1 = null;
        try {
            {
            int alt628=2;
            int LA628_0 = input.LA(1);
            if ( (LA628_0==QuestionMark) && (synpred345_InternalN4JSParser())) {
                alt628=1;
            }
            else if ( (LA628_0==Out||LA628_0==In) ) {
                alt628=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 628, 0, input);
                throw nvae;
            }
            switch (alt628) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardOldNotationParserRuleCall_0=ruleWildcardOldNotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardOldNotationParserRuleCall_0!=null?((Token)WildcardOldNotationParserRuleCall_0.start):null), (WildcardOldNotationParserRuleCall_0!=null?((Token)WildcardOldNotationParserRuleCall_0.stop):null), grammarAccess.getWildcardAccess().getWildcardOldNotationParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WildcardNewNotationParserRuleCall_1=ruleWildcardNewNotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.start):null), (WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.stop):null), grammarAccess.getWildcardAccess().getWildcardNewNotationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcardOldNotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcardOldNotation();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleWildcardOldNotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWildcardOldNotation_return ruleWildcardOldNotation() throws RecognitionException {
        InternalN4JSParser.ruleWildcardOldNotation_return retval = new InternalN4JSParser.ruleWildcardOldNotation_return();
        retval.start = input.LT(1);
        Token QuestionMarkKeyword_0_0_1=null;
        Token ExtendsKeyword_1_0_0=null;
        Token SuperKeyword_1_1_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            QuestionMarkKeyword_0_0_1=(Token)match(input,QuestionMark,FOLLOW_205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(QuestionMarkKeyword_0_0_1, grammarAccess.getWildcardOldNotationAccess().getQuestionMarkKeyword_0_0_1());
            }
            }
            }
            int alt629=3;
            int LA629_0 = input.LA(1);
            if ( (LA629_0==Extends) ) {
                alt629=1;
            }
            else if ( (LA629_0==Super) ) {
                alt629=2;
            }
            switch (alt629) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_1_0_0=(Token)match(input,Extends,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ExtendsKeyword_1_0_0, grammarAccess.getWildcardOldNotationAccess().getExtendsKeyword_1_0_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.stop):null), grammarAccess.getWildcardOldNotationAccess().getDeclaredUpperBoundAssignment_1_0_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    SuperKeyword_1_1_0=(Token)match(input,Super,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SuperKeyword_1_1_0, grammarAccess.getWildcardOldNotationAccess().getSuperKeyword_1_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.stop):null), grammarAccess.getWildcardOldNotationAccess().getDeclaredLowerBoundAssignment_1_1_1());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcardOldNotationWithoutBound() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcardOldNotationWithoutBound();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleWildcardOldNotationWithoutBound_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWildcardOldNotationWithoutBound_return ruleWildcardOldNotationWithoutBound() throws RecognitionException {
        InternalN4JSParser.ruleWildcardOldNotationWithoutBound_return retval = new InternalN4JSParser.ruleWildcardOldNotationWithoutBound_return();
        retval.start = input.LT(1);
        Token QuestionMarkKeyword_1=null;
        try {
            {
            {
            QuestionMarkKeyword_1=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(QuestionMarkKeyword_1, grammarAccess.getWildcardOldNotationWithoutBoundAccess().getQuestionMarkKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcardNewNotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcardNewNotation();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleWildcardNewNotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWildcardNewNotation_return ruleWildcardNewNotation() throws RecognitionException {
        InternalN4JSParser.ruleWildcardNewNotation_return retval = new InternalN4JSParser.ruleWildcardNewNotation_return();
        retval.start = input.LT(1);
        Token UsingInOutNotationOutKeyword_0_0_0=null;
        Token UsingInOutNotationInKeyword_1_0_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_0_1_0 = null;
        InternalN4JSParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_0 = null;
        try {
            {
            int alt630=2;
            int LA630_0 = input.LA(1);
            if ( (LA630_0==Out) ) {
                alt630=1;
            }
            else if ( (LA630_0==In) ) {
                alt630=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 630, 0, input);
                throw nvae;
            }
            switch (alt630) {
                case 1 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(UsingInOutNotationOutKeyword_0_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_0_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundAssignment_0_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationInKeyword_1_0_0=(Token)match(input,In,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(UsingInOutNotationInKeyword_1_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundAssignment_1_1());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifier_return ruleBindingIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifier_return retval = new InternalN4JSParser.ruleBindingIdentifier_return();
        retval.start = input.LT(1);
        Token YieldKeyword_1_0=null;
        try {
            {
            int alt631=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt631=1;
                }
                break;
            case Yield:
                {
                alt631=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt631=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 631, 0, input);
                throw nvae;
            }
            switch (alt631) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    YieldKeyword_1_0=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(YieldKeyword_1_0, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0());
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingIdentifier_return norm1_BindingIdentifier() throws RecognitionException {
        InternalN4JSParser.norm1_BindingIdentifier_return retval = new InternalN4JSParser.norm1_BindingIdentifier_return();
        retval.start = input.LT(1);
        try {
            {
            int alt632=2;
            int LA632_0 = input.LA(1);
            if ( (LA632_0==RULE_IDENTIFIER) ) {
                alt632=1;
            }
            else if ( ((LA632_0>=Intersection && LA632_0<=Implements)||(LA632_0>=Promisify && LA632_0<=Abstract)||LA632_0==External||(LA632_0>=Private && LA632_0<=Project)||LA632_0==Public||LA632_0==Static||LA632_0==Target||(LA632_0>=Async && LA632_0<=Await)||LA632_0==Union||LA632_0==This||LA632_0==From||LA632_0==Type||(LA632_0>=Get && LA632_0<=Let)||(LA632_0>=Out && LA632_0<=Set)||LA632_0==As||LA632_0==Of) ) {
                alt632=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 632, 0, input);
                throw nvae;
            }
            switch (alt632) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierName();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIdentifierName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierName_return ruleIdentifierName() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierName_return retval = new InternalN4JSParser.ruleIdentifierName_return();
        retval.start = input.LT(1);
        try {
            {
            int alt633=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt633=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt633=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt633=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 633, 0, input);
                throw nvae;
            }
            switch (alt633) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleReservedWord();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleReservedWord() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReservedWord();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleReservedWord() throws RecognitionException {
        Token BreakKeyword_0=null;
        Token CaseKeyword_1=null;
        Token CatchKeyword_2=null;
        Token ClassKeyword_3=null;
        Token ConstKeyword_4=null;
        Token ContinueKeyword_5=null;
        Token DebuggerKeyword_6=null;
        Token DefaultKeyword_7=null;
        Token DeleteKeyword_8=null;
        Token DoKeyword_9=null;
        Token ElseKeyword_10=null;
        Token ExportKeyword_11=null;
        Token ExtendsKeyword_12=null;
        Token FinallyKeyword_13=null;
        Token ForKeyword_14=null;
        Token FunctionKeyword_15=null;
        Token IfKeyword_16=null;
        Token ImportKeyword_17=null;
        Token InKeyword_18=null;
        Token InstanceofKeyword_19=null;
        Token NewKeyword_20=null;
        Token ReturnKeyword_21=null;
        Token SuperKeyword_22=null;
        Token SwitchKeyword_23=null;
        Token ThisKeyword_24=null;
        Token ThrowKeyword_25=null;
        Token TryKeyword_26=null;
        Token TypeofKeyword_27=null;
        Token VarKeyword_28=null;
        Token VoidKeyword_29=null;
        Token WhileKeyword_30=null;
        Token WithKeyword_31=null;
        Token YieldKeyword_32=null;
        Token NullKeyword_33=null;
        Token TrueKeyword_34=null;
        Token FalseKeyword_35=null;
        Token EnumKeyword_36=null;
        try {
            {
            int alt634=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt634=1;
                }
                break;
            case Case:
                {
                alt634=2;
                }
                break;
            case Catch:
                {
                alt634=3;
                }
                break;
            case Class:
                {
                alt634=4;
                }
                break;
            case Const:
                {
                alt634=5;
                }
                break;
            case Continue:
                {
                alt634=6;
                }
                break;
            case Debugger:
                {
                alt634=7;
                }
                break;
            case Default:
                {
                alt634=8;
                }
                break;
            case Delete:
                {
                alt634=9;
                }
                break;
            case Do:
                {
                alt634=10;
                }
                break;
            case Else:
                {
                alt634=11;
                }
                break;
            case Export:
                {
                alt634=12;
                }
                break;
            case Extends:
                {
                alt634=13;
                }
                break;
            case Finally:
                {
                alt634=14;
                }
                break;
            case For:
                {
                alt634=15;
                }
                break;
            case Function:
                {
                alt634=16;
                }
                break;
            case If:
                {
                alt634=17;
                }
                break;
            case Import:
                {
                alt634=18;
                }
                break;
            case In:
                {
                alt634=19;
                }
                break;
            case Instanceof:
                {
                alt634=20;
                }
                break;
            case New:
                {
                alt634=21;
                }
                break;
            case Return:
                {
                alt634=22;
                }
                break;
            case Super:
                {
                alt634=23;
                }
                break;
            case Switch:
                {
                alt634=24;
                }
                break;
            case This_1:
                {
                alt634=25;
                }
                break;
            case Throw:
                {
                alt634=26;
                }
                break;
            case Try:
                {
                alt634=27;
                }
                break;
            case Typeof:
                {
                alt634=28;
                }
                break;
            case Var:
                {
                alt634=29;
                }
                break;
            case Void:
                {
                alt634=30;
                }
                break;
            case While:
                {
                alt634=31;
                }
                break;
            case With:
                {
                alt634=32;
                }
                break;
            case Yield:
                {
                alt634=33;
                }
                break;
            case Null:
                {
                alt634=34;
                }
                break;
            case True:
                {
                alt634=35;
                }
                break;
            case False:
                {
                alt634=36;
                }
                break;
            case Enum:
                {
                alt634=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 634, 0, input);
                throw nvae;
            }
            switch (alt634) {
                case 1 :
                    {
                    BreakKeyword_0=(Token)match(input,Break,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(BreakKeyword_0, grammarAccess.getReservedWordAccess().getBreakKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    CaseKeyword_1=(Token)match(input,Case,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(CaseKeyword_1, grammarAccess.getReservedWordAccess().getCaseKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    CatchKeyword_2=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(CatchKeyword_2, grammarAccess.getReservedWordAccess().getCatchKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    ClassKeyword_3=(Token)match(input,Class,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ClassKeyword_3, grammarAccess.getReservedWordAccess().getClassKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    ConstKeyword_4=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ConstKeyword_4, grammarAccess.getReservedWordAccess().getConstKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    ContinueKeyword_5=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ContinueKeyword_5, grammarAccess.getReservedWordAccess().getContinueKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    DebuggerKeyword_6=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(DebuggerKeyword_6, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    DefaultKeyword_7=(Token)match(input,Default,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(DefaultKeyword_7, grammarAccess.getReservedWordAccess().getDefaultKeyword_7());
                    }
                    }
                    break;
                case 9 :
                    {
                    DeleteKeyword_8=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(DeleteKeyword_8, grammarAccess.getReservedWordAccess().getDeleteKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    DoKeyword_9=(Token)match(input,Do,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(DoKeyword_9, grammarAccess.getReservedWordAccess().getDoKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    ElseKeyword_10=(Token)match(input,Else,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ElseKeyword_10, grammarAccess.getReservedWordAccess().getElseKeyword_10());
                    }
                    }
                    break;
                case 12 :
                    {
                    ExportKeyword_11=(Token)match(input,Export,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ExportKeyword_11, grammarAccess.getReservedWordAccess().getExportKeyword_11());
                    }
                    }
                    break;
                case 13 :
                    {
                    ExtendsKeyword_12=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ExtendsKeyword_12, grammarAccess.getReservedWordAccess().getExtendsKeyword_12());
                    }
                    }
                    break;
                case 14 :
                    {
                    FinallyKeyword_13=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(FinallyKeyword_13, grammarAccess.getReservedWordAccess().getFinallyKeyword_13());
                    }
                    }
                    break;
                case 15 :
                    {
                    ForKeyword_14=(Token)match(input,For,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ForKeyword_14, grammarAccess.getReservedWordAccess().getForKeyword_14());
                    }
                    }
                    break;
                case 16 :
                    {
                    FunctionKeyword_15=(Token)match(input,Function,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(FunctionKeyword_15, grammarAccess.getReservedWordAccess().getFunctionKeyword_15());
                    }
                    }
                    break;
                case 17 :
                    {
                    IfKeyword_16=(Token)match(input,If,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(IfKeyword_16, grammarAccess.getReservedWordAccess().getIfKeyword_16());
                    }
                    }
                    break;
                case 18 :
                    {
                    ImportKeyword_17=(Token)match(input,Import,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ImportKeyword_17, grammarAccess.getReservedWordAccess().getImportKeyword_17());
                    }
                    }
                    break;
                case 19 :
                    {
                    InKeyword_18=(Token)match(input,In,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(InKeyword_18, grammarAccess.getReservedWordAccess().getInKeyword_18());
                    }
                    }
                    break;
                case 20 :
                    {
                    InstanceofKeyword_19=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(InstanceofKeyword_19, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19());
                    }
                    }
                    break;
                case 21 :
                    {
                    NewKeyword_20=(Token)match(input,New,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(NewKeyword_20, grammarAccess.getReservedWordAccess().getNewKeyword_20());
                    }
                    }
                    break;
                case 22 :
                    {
                    ReturnKeyword_21=(Token)match(input,Return,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ReturnKeyword_21, grammarAccess.getReservedWordAccess().getReturnKeyword_21());
                    }
                    }
                    break;
                case 23 :
                    {
                    SuperKeyword_22=(Token)match(input,Super,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(SuperKeyword_22, grammarAccess.getReservedWordAccess().getSuperKeyword_22());
                    }
                    }
                    break;
                case 24 :
                    {
                    SwitchKeyword_23=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(SwitchKeyword_23, grammarAccess.getReservedWordAccess().getSwitchKeyword_23());
                    }
                    }
                    break;
                case 25 :
                    {
                    ThisKeyword_24=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ThisKeyword_24, grammarAccess.getReservedWordAccess().getThisKeyword_24());
                    }
                    }
                    break;
                case 26 :
                    {
                    ThrowKeyword_25=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ThrowKeyword_25, grammarAccess.getReservedWordAccess().getThrowKeyword_25());
                    }
                    }
                    break;
                case 27 :
                    {
                    TryKeyword_26=(Token)match(input,Try,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(TryKeyword_26, grammarAccess.getReservedWordAccess().getTryKeyword_26());
                    }
                    }
                    break;
                case 28 :
                    {
                    TypeofKeyword_27=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(TypeofKeyword_27, grammarAccess.getReservedWordAccess().getTypeofKeyword_27());
                    }
                    }
                    break;
                case 29 :
                    {
                    VarKeyword_28=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(VarKeyword_28, grammarAccess.getReservedWordAccess().getVarKeyword_28());
                    }
                    }
                    break;
                case 30 :
                    {
                    VoidKeyword_29=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(VoidKeyword_29, grammarAccess.getReservedWordAccess().getVoidKeyword_29());
                    }
                    }
                    break;
                case 31 :
                    {
                    WhileKeyword_30=(Token)match(input,While,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(WhileKeyword_30, grammarAccess.getReservedWordAccess().getWhileKeyword_30());
                    }
                    }
                    break;
                case 32 :
                    {
                    WithKeyword_31=(Token)match(input,With,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(WithKeyword_31, grammarAccess.getReservedWordAccess().getWithKeyword_31());
                    }
                    }
                    break;
                case 33 :
                    {
                    YieldKeyword_32=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(YieldKeyword_32, grammarAccess.getReservedWordAccess().getYieldKeyword_32());
                    }
                    }
                    break;
                case 34 :
                    {
                    NullKeyword_33=(Token)match(input,Null,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(NullKeyword_33, grammarAccess.getReservedWordAccess().getNullKeyword_33());
                    }
                    }
                    break;
                case 35 :
                    {
                    TrueKeyword_34=(Token)match(input,True,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(TrueKeyword_34, grammarAccess.getReservedWordAccess().getTrueKeyword_34());
                    }
                    }
                    break;
                case 36 :
                    {
                    FalseKeyword_35=(Token)match(input,False,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(FalseKeyword_35, grammarAccess.getReservedWordAccess().getFalseKeyword_35());
                    }
                    }
                    break;
                case 37 :
                    {
                    EnumKeyword_36=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(EnumKeyword_36, grammarAccess.getReservedWordAccess().getEnumKeyword_36());
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleN4Keyword() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4Keyword();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleN4Keyword() throws RecognitionException {
        Token GetKeyword_0=null;
        Token SetKeyword_1=null;
        Token LetKeyword_2=null;
        Token ProjectKeyword_3=null;
        Token ExternalKeyword_4=null;
        Token AbstractKeyword_5=null;
        Token StaticKeyword_6=null;
        Token AsKeyword_7=null;
        Token FromKeyword_8=null;
        Token ConstructorKeyword_9=null;
        Token OfKeyword_10=null;
        Token TargetKeyword_11=null;
        Token TypeKeyword_12=null;
        Token UnionKeyword_13=null;
        Token IntersectionKeyword_14=null;
        Token ThisKeyword_15=null;
        Token PromisifyKeyword_16=null;
        Token AwaitKeyword_17=null;
        Token AsyncKeyword_18=null;
        Token ImplementsKeyword_19=null;
        Token InterfaceKeyword_20=null;
        Token PrivateKeyword_21=null;
        Token ProtectedKeyword_22=null;
        Token PublicKeyword_23=null;
        Token OutKeyword_24=null;
        try {
            {
            int alt635=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt635=1;
                }
                break;
            case Set:
                {
                alt635=2;
                }
                break;
            case Let:
                {
                alt635=3;
                }
                break;
            case Project:
                {
                alt635=4;
                }
                break;
            case External:
                {
                alt635=5;
                }
                break;
            case Abstract:
                {
                alt635=6;
                }
                break;
            case Static:
                {
                alt635=7;
                }
                break;
            case As:
                {
                alt635=8;
                }
                break;
            case From:
                {
                alt635=9;
                }
                break;
            case Constructor:
                {
                alt635=10;
                }
                break;
            case Of:
                {
                alt635=11;
                }
                break;
            case Target:
                {
                alt635=12;
                }
                break;
            case Type:
                {
                alt635=13;
                }
                break;
            case Union:
                {
                alt635=14;
                }
                break;
            case Intersection:
                {
                alt635=15;
                }
                break;
            case This:
                {
                alt635=16;
                }
                break;
            case Promisify:
                {
                alt635=17;
                }
                break;
            case Await:
                {
                alt635=18;
                }
                break;
            case Async:
                {
                alt635=19;
                }
                break;
            case Implements:
                {
                alt635=20;
                }
                break;
            case Interface:
                {
                alt635=21;
                }
                break;
            case Private:
                {
                alt635=22;
                }
                break;
            case Protected:
                {
                alt635=23;
                }
                break;
            case Public:
                {
                alt635=24;
                }
                break;
            case Out:
                {
                alt635=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 635, 0, input);
                throw nvae;
            }
            switch (alt635) {
                case 1 :
                    {
                    GetKeyword_0=(Token)match(input,Get,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(GetKeyword_0, grammarAccess.getN4KeywordAccess().getGetKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    SetKeyword_1=(Token)match(input,Set,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(SetKeyword_1, grammarAccess.getN4KeywordAccess().getSetKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    LetKeyword_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(LetKeyword_2, grammarAccess.getN4KeywordAccess().getLetKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    ProjectKeyword_3=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ProjectKeyword_3, grammarAccess.getN4KeywordAccess().getProjectKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    ExternalKeyword_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ExternalKeyword_4, grammarAccess.getN4KeywordAccess().getExternalKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    AbstractKeyword_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(AbstractKeyword_5, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    StaticKeyword_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(StaticKeyword_6, grammarAccess.getN4KeywordAccess().getStaticKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    AsKeyword_7=(Token)match(input,As,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(AsKeyword_7, grammarAccess.getN4KeywordAccess().getAsKeyword_7());
                    }
                    }
                    break;
                case 9 :
                    {
                    FromKeyword_8=(Token)match(input,From,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(FromKeyword_8, grammarAccess.getN4KeywordAccess().getFromKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    ConstructorKeyword_9=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ConstructorKeyword_9, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    OfKeyword_10=(Token)match(input,Of,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(OfKeyword_10, grammarAccess.getN4KeywordAccess().getOfKeyword_10());
                    }
                    }
                    break;
                case 12 :
                    {
                    TargetKeyword_11=(Token)match(input,Target,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(TargetKeyword_11, grammarAccess.getN4KeywordAccess().getTargetKeyword_11());
                    }
                    }
                    break;
                case 13 :
                    {
                    TypeKeyword_12=(Token)match(input,Type,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(TypeKeyword_12, grammarAccess.getN4KeywordAccess().getTypeKeyword_12());
                    }
                    }
                    break;
                case 14 :
                    {
                    UnionKeyword_13=(Token)match(input,Union,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(UnionKeyword_13, grammarAccess.getN4KeywordAccess().getUnionKeyword_13());
                    }
                    }
                    break;
                case 15 :
                    {
                    IntersectionKeyword_14=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(IntersectionKeyword_14, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14());
                    }
                    }
                    break;
                case 16 :
                    {
                    ThisKeyword_15=(Token)match(input,This,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ThisKeyword_15, grammarAccess.getN4KeywordAccess().getThisKeyword_15());
                    }
                    }
                    break;
                case 17 :
                    {
                    PromisifyKeyword_16=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(PromisifyKeyword_16, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16());
                    }
                    }
                    break;
                case 18 :
                    {
                    AwaitKeyword_17=(Token)match(input,Await,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(AwaitKeyword_17, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17());
                    }
                    }
                    break;
                case 19 :
                    {
                    AsyncKeyword_18=(Token)match(input,Async,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(AsyncKeyword_18, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18());
                    }
                    }
                    break;
                case 20 :
                    {
                    ImplementsKeyword_19=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ImplementsKeyword_19, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19());
                    }
                    }
                    break;
                case 21 :
                    {
                    InterfaceKeyword_20=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(InterfaceKeyword_20, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20());
                    }
                    }
                    break;
                case 22 :
                    {
                    PrivateKeyword_21=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(PrivateKeyword_21, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21());
                    }
                    }
                    break;
                case 23 :
                    {
                    ProtectedKeyword_22=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ProtectedKeyword_22, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22());
                    }
                    }
                    break;
                case 24 :
                    {
                    PublicKeyword_23=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(PublicKeyword_23, grammarAccess.getN4KeywordAccess().getPublicKeyword_23());
                    }
                    }
                    break;
                case 25 :
                    {
                    OutKeyword_24=(Token)match(input,Out,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(OutKeyword_24, grammarAccess.getN4KeywordAccess().getOutKeyword_24());
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleVariableStatementKeyword() throws RecognitionException {
        Token VarVarKeyword_0_0=null;
        Token ConstConstKeyword_1_0=null;
        Token LetLetKeyword_2_0=null;
        try {
            {
            int alt636=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt636=1;
                }
                break;
            case Const:
                {
                alt636=2;
                }
                break;
            case Let:
                {
                alt636=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 636, 0, input);
                throw nvae;
            }
            switch (alt636) {
                case 1 :
                    {
                    {
                    VarVarKeyword_0_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(VarVarKeyword_0_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    ConstConstKeyword_1_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ConstConstKeyword_1_0, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    LetLetKeyword_2_0=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(LetLetKeyword_2_0, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void rulePostfixOperator() throws RecognitionException {
        Token IncPlusSignPlusSignKeyword_0_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_1_0=null;
        try {
            {
            int alt637=2;
            int LA637_0 = input.LA(1);
            if ( (LA637_0==PlusSignPlusSign) ) {
                alt637=1;
            }
            else if ( (LA637_0==HyphenMinusHyphenMinus) ) {
                alt637=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 637, 0, input);
                throw nvae;
            }
            switch (alt637) {
                case 1 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_0_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(IncPlusSignPlusSignKeyword_0_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(DecHyphenMinusHyphenMinusKeyword_1_0, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleUnaryOperator() throws RecognitionException {
        Token DeleteDeleteKeyword_0_0=null;
        Token VoidVoidKeyword_1_0=null;
        Token TypeofTypeofKeyword_2_0=null;
        Token IncPlusSignPlusSignKeyword_3_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_4_0=null;
        Token PosPlusSignKeyword_5_0=null;
        Token NegHyphenMinusKeyword_6_0=null;
        Token InvTildeKeyword_7_0=null;
        Token NotExclamationMarkKeyword_8_0=null;
        try {
            {
            int alt638=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt638=1;
                }
                break;
            case Void:
                {
                alt638=2;
                }
                break;
            case Typeof:
                {
                alt638=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt638=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt638=5;
                }
                break;
            case PlusSign:
                {
                alt638=6;
                }
                break;
            case HyphenMinus:
                {
                alt638=7;
                }
                break;
            case Tilde:
                {
                alt638=8;
                }
                break;
            case ExclamationMark:
                {
                alt638=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 638, 0, input);
                throw nvae;
            }
            switch (alt638) {
                case 1 :
                    {
                    {
                    DeleteDeleteKeyword_0_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(DeleteDeleteKeyword_0_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    VoidVoidKeyword_1_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(VoidVoidKeyword_1_0, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    TypeofTypeofKeyword_2_0=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(TypeofTypeofKeyword_2_0, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_3_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(IncPlusSignPlusSignKeyword_3_0, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_4_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(DecHyphenMinusHyphenMinusKeyword_4_0, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    PosPlusSignKeyword_5_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(PosPlusSignKeyword_5_0, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    NegHyphenMinusKeyword_6_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(NegHyphenMinusKeyword_6_0, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6());
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    InvTildeKeyword_7_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(InvTildeKeyword_7_0, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7());
                    }
                    }
                    }
                    break;
                case 9 :
                    {
                    {
                    NotExclamationMarkKeyword_8_0=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(NotExclamationMarkKeyword_8_0, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleMultiplicativeOperator() throws RecognitionException {
        Token TimesAsteriskKeyword_0_0=null;
        Token DivSolidusKeyword_1_0=null;
        Token ModPercentSignKeyword_2_0=null;
        try {
            {
            int alt639=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt639=1;
                }
                break;
            case Solidus:
                {
                alt639=2;
                }
                break;
            case PercentSign:
                {
                alt639=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 639, 0, input);
                throw nvae;
            }
            switch (alt639) {
                case 1 :
                    {
                    {
                    TimesAsteriskKeyword_0_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(TimesAsteriskKeyword_0_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    DivSolidusKeyword_1_0=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(DivSolidusKeyword_1_0, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    ModPercentSignKeyword_2_0=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ModPercentSignKeyword_2_0, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleAdditiveOperator() throws RecognitionException {
        Token AddPlusSignKeyword_0_0=null;
        Token SubHyphenMinusKeyword_1_0=null;
        try {
            {
            int alt640=2;
            int LA640_0 = input.LA(1);
            if ( (LA640_0==PlusSign) ) {
                alt640=1;
            }
            else if ( (LA640_0==HyphenMinus) ) {
                alt640=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 640, 0, input);
                throw nvae;
            }
            switch (alt640) {
                case 1 :
                    {
                    {
                    AddPlusSignKeyword_0_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(AddPlusSignKeyword_0_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    SubHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(SubHyphenMinusKeyword_1_0, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleEqualityOperator() throws RecognitionException {
        Token SameEqualsSignEqualsSignEqualsSignKeyword_0_0=null;
        Token NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=null;
        Token EqEqualsSignEqualsSignKeyword_2_0=null;
        Token NeqExclamationMarkEqualsSignKeyword_3_0=null;
        try {
            {
            int alt641=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt641=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt641=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt641=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt641=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 641, 0, input);
                throw nvae;
            }
            switch (alt641) {
                case 1 :
                    {
                    {
                    SameEqualsSignEqualsSignEqualsSignKeyword_0_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(SameEqualsSignEqualsSignEqualsSignKeyword_0_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    EqEqualsSignEqualsSignKeyword_2_0=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(EqEqualsSignEqualsSignKeyword_2_0, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    NeqExclamationMarkEqualsSignKeyword_3_0=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(NeqExclamationMarkEqualsSignKeyword_3_0, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleN4Modifier() throws RecognitionException {
        Token PrivatePrivateKeyword_0_0=null;
        Token ProjectProjectKeyword_1_0=null;
        Token ProtectedProtectedKeyword_2_0=null;
        Token PublicPublicKeyword_3_0=null;
        Token ExternalExternalKeyword_4_0=null;
        Token AbstractAbstractKeyword_5_0=null;
        Token StaticStaticKeyword_6_0=null;
        Token ConstConstKeyword_7_0=null;
        try {
            {
            int alt642=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt642=1;
                }
                break;
            case Project:
                {
                alt642=2;
                }
                break;
            case Protected:
                {
                alt642=3;
                }
                break;
            case Public:
                {
                alt642=4;
                }
                break;
            case External:
                {
                alt642=5;
                }
                break;
            case Abstract:
                {
                alt642=6;
                }
                break;
            case Static:
                {
                alt642=7;
                }
                break;
            case Const:
                {
                alt642=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 642, 0, input);
                throw nvae;
            }
            switch (alt642) {
                case 1 :
                    {
                    {
                    PrivatePrivateKeyword_0_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(PrivatePrivateKeyword_0_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    ProjectProjectKeyword_1_0=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ProjectProjectKeyword_1_0, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    ProtectedProtectedKeyword_2_0=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ProtectedProtectedKeyword_2_0, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    PublicPublicKeyword_3_0=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(PublicPublicKeyword_3_0, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    ExternalExternalKeyword_4_0=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ExternalExternalKeyword_4_0, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    AbstractAbstractKeyword_5_0=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(AbstractAbstractKeyword_5_0, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    StaticStaticKeyword_6_0=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(StaticStaticKeyword_6_0, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6());
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    ConstConstKeyword_7_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ConstConstKeyword_7_0, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void synpred1_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_152); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred2_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop643:
        do {
            int alt643=2;
            int LA643_0 = input.LA(1);
            if ( ((LA643_0>=Protected && LA643_0<=Abstract)||LA643_0==External||(LA643_0>=Private && LA643_0<=Project)||LA643_0==Public||LA643_0==Static||LA643_0==Const) ) {
                alt643=1;
            }
            switch (alt643) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop643;
            }
        } while (true);
        match(input,Class,FOLLOW_206); if (state.failed) return ;
        int alt644=2;
        int LA644_0 = input.LA(1);
        if ( (LA644_0==Tilde) ) {
            alt644=1;
        }
        switch (alt644) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_207);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt645=2;
        int LA645_0 = input.LA(1);
        if ( ((LA645_0>=Intersection && LA645_0<=Implements)||(LA645_0>=Promisify && LA645_0<=Abstract)||LA645_0==External||(LA645_0>=Private && LA645_0<=Project)||LA645_0==Public||LA645_0==Static||LA645_0==Target||(LA645_0>=Async && LA645_0<=Await)||LA645_0==Union||(LA645_0>=Yield && LA645_0<=This)||LA645_0==From||LA645_0==Type||(LA645_0>=Get && LA645_0<=Let)||(LA645_0>=Out && LA645_0<=Set)||LA645_0==As||LA645_0==Of||LA645_0==RULE_IDENTIFIER) ) {
            alt645=1;
        }
        switch (alt645) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_208);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt646=2;
        int LA646_0 = input.LA(1);
        if ( (LA646_0==RULE_VERSION) ) {
            alt646=1;
        }
        switch (alt646) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred3_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop647:
        do {
            int alt647=2;
            int LA647_0 = input.LA(1);
            if ( ((LA647_0>=Protected && LA647_0<=Abstract)||LA647_0==External||(LA647_0>=Private && LA647_0<=Project)||LA647_0==Public||LA647_0==Static||LA647_0==Const) ) {
                alt647=1;
            }
            switch (alt647) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop647;
            }
        } while (true);
        match(input,Interface,FOLLOW_206); if (state.failed) return ;
        int alt648=2;
        int LA648_0 = input.LA(1);
        if ( (LA648_0==Tilde) ) {
            alt648=1;
        }
        switch (alt648) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_207);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt649=2;
        int LA649_0 = input.LA(1);
        if ( ((LA649_0>=Intersection && LA649_0<=Implements)||(LA649_0>=Promisify && LA649_0<=Abstract)||LA649_0==External||(LA649_0>=Private && LA649_0<=Project)||LA649_0==Public||LA649_0==Static||LA649_0==Target||(LA649_0>=Async && LA649_0<=Await)||LA649_0==Union||(LA649_0>=Yield && LA649_0<=This)||LA649_0==From||LA649_0==Type||(LA649_0>=Get && LA649_0<=Let)||(LA649_0>=Out && LA649_0<=Set)||LA649_0==As||LA649_0==Of||LA649_0==RULE_IDENTIFIER) ) {
            alt649=1;
        }
        switch (alt649) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_208);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt650=2;
        int LA650_0 = input.LA(1);
        if ( (LA650_0==RULE_VERSION) ) {
            alt650=1;
        }
        switch (alt650) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred4_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop651:
        do {
            int alt651=2;
            int LA651_0 = input.LA(1);
            if ( ((LA651_0>=Protected && LA651_0<=Abstract)||LA651_0==External||(LA651_0>=Private && LA651_0<=Project)||LA651_0==Public||LA651_0==Static||LA651_0==Const) ) {
                alt651=1;
            }
            switch (alt651) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop651;
            }
        } while (true);
        match(input,Enum,FOLLOW_207); if (state.failed) return ;
        int alt652=2;
        int LA652_0 = input.LA(1);
        if ( ((LA652_0>=Intersection && LA652_0<=Implements)||(LA652_0>=Promisify && LA652_0<=Abstract)||LA652_0==External||(LA652_0>=Private && LA652_0<=Project)||LA652_0==Public||LA652_0==Static||LA652_0==Target||(LA652_0>=Async && LA652_0<=Await)||LA652_0==Union||(LA652_0>=Yield && LA652_0<=This)||LA652_0==From||LA652_0==Type||(LA652_0>=Get && LA652_0<=Let)||(LA652_0>=Out && LA652_0<=Set)||LA652_0==As||LA652_0==Of||LA652_0==RULE_IDENTIFIER) ) {
            alt652=1;
        }
        switch (alt652) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_208);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt653=2;
        int LA653_0 = input.LA(1);
        if ( (LA653_0==RULE_VERSION) ) {
            alt653=1;
        }
        switch (alt653) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred5_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleImportDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop654:
        do {
            int alt654=2;
            int LA654_0 = input.LA(1);
            if ( ((LA654_0>=Protected && LA654_0<=Abstract)||LA654_0==External||(LA654_0>=Private && LA654_0<=Project)||LA654_0==Public||LA654_0==Static||LA654_0==Const) ) {
                alt654=1;
            }
            switch (alt654) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop654;
            }
        } while (true);
        pushFollow(FOLLOW_45);
        ruleAsyncNoTrailingLineBreak();
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred9_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred10_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred11_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_152); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred12_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop655:
        do {
            int alt655=2;
            int LA655_0 = input.LA(1);
            if ( ((LA655_0>=Protected && LA655_0<=Abstract)||LA655_0==External||(LA655_0>=Private && LA655_0<=Project)||LA655_0==Public||LA655_0==Static||LA655_0==Const) ) {
                alt655=1;
            }
            switch (alt655) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop655;
            }
        } while (true);
        match(input,Class,FOLLOW_206); if (state.failed) return ;
        int alt656=2;
        int LA656_0 = input.LA(1);
        if ( (LA656_0==Tilde) ) {
            alt656=1;
        }
        switch (alt656) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_207);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt657=2;
        int LA657_0 = input.LA(1);
        if ( ((LA657_0>=Intersection && LA657_0<=Implements)||(LA657_0>=Promisify && LA657_0<=Abstract)||LA657_0==External||(LA657_0>=Private && LA657_0<=Project)||LA657_0==Public||LA657_0==Static||LA657_0==Target||(LA657_0>=Async && LA657_0<=Await)||LA657_0==Union||(LA657_0>=Yield && LA657_0<=This)||LA657_0==From||LA657_0==Type||(LA657_0>=Get && LA657_0<=Let)||(LA657_0>=Out && LA657_0<=Set)||LA657_0==As||LA657_0==Of||LA657_0==RULE_IDENTIFIER) ) {
            alt657=1;
        }
        switch (alt657) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_208);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt658=2;
        int LA658_0 = input.LA(1);
        if ( (LA658_0==RULE_VERSION) ) {
            alt658=1;
        }
        switch (alt658) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred13_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop659:
        do {
            int alt659=2;
            int LA659_0 = input.LA(1);
            if ( ((LA659_0>=Protected && LA659_0<=Abstract)||LA659_0==External||(LA659_0>=Private && LA659_0<=Project)||LA659_0==Public||LA659_0==Static||LA659_0==Const) ) {
                alt659=1;
            }
            switch (alt659) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop659;
            }
        } while (true);
        match(input,Interface,FOLLOW_206); if (state.failed) return ;
        int alt660=2;
        int LA660_0 = input.LA(1);
        if ( (LA660_0==Tilde) ) {
            alt660=1;
        }
        switch (alt660) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_207);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt661=2;
        int LA661_0 = input.LA(1);
        if ( ((LA661_0>=Intersection && LA661_0<=Implements)||(LA661_0>=Promisify && LA661_0<=Abstract)||LA661_0==External||(LA661_0>=Private && LA661_0<=Project)||LA661_0==Public||LA661_0==Static||LA661_0==Target||(LA661_0>=Async && LA661_0<=Await)||LA661_0==Union||(LA661_0>=Yield && LA661_0<=This)||LA661_0==From||LA661_0==Type||(LA661_0>=Get && LA661_0<=Let)||(LA661_0>=Out && LA661_0<=Set)||LA661_0==As||LA661_0==Of||LA661_0==RULE_IDENTIFIER) ) {
            alt661=1;
        }
        switch (alt661) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_208);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt662=2;
        int LA662_0 = input.LA(1);
        if ( (LA662_0==RULE_VERSION) ) {
            alt662=1;
        }
        switch (alt662) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred14_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop663:
        do {
            int alt663=2;
            int LA663_0 = input.LA(1);
            if ( ((LA663_0>=Protected && LA663_0<=Abstract)||LA663_0==External||(LA663_0>=Private && LA663_0<=Project)||LA663_0==Public||LA663_0==Static||LA663_0==Const) ) {
                alt663=1;
            }
            switch (alt663) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop663;
            }
        } while (true);
        match(input,Enum,FOLLOW_207); if (state.failed) return ;
        int alt664=2;
        int LA664_0 = input.LA(1);
        if ( ((LA664_0>=Intersection && LA664_0<=Implements)||(LA664_0>=Promisify && LA664_0<=Abstract)||LA664_0==External||(LA664_0>=Private && LA664_0<=Project)||LA664_0==Public||LA664_0==Static||LA664_0==Target||(LA664_0>=Async && LA664_0<=Await)||LA664_0==Union||(LA664_0>=Yield && LA664_0<=This)||LA664_0==From||LA664_0==Type||(LA664_0>=Get && LA664_0<=Let)||(LA664_0>=Out && LA664_0<=Set)||LA664_0==As||LA664_0==Of||LA664_0==RULE_IDENTIFIER) ) {
            alt664=1;
        }
        switch (alt664) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_208);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt665=2;
        int LA665_0 = input.LA(1);
        if ( (LA665_0==RULE_VERSION) ) {
            alt665=1;
        }
        switch (alt665) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred15_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop666:
        do {
            int alt666=2;
            int LA666_0 = input.LA(1);
            if ( ((LA666_0>=Protected && LA666_0<=Abstract)||LA666_0==External||(LA666_0>=Private && LA666_0<=Project)||LA666_0==Public||LA666_0==Static||LA666_0==Const) ) {
                alt666=1;
            }
            switch (alt666) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop666;
            }
        } while (true);
        pushFollow(FOLLOW_45);
        ruleAsyncNoTrailingLineBreak();
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred19_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred22_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred23_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred24_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred25_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred26_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred27_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred28_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred37_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred39_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred43_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred45_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred49_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred51_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred55_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred57_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred58_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred59_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred62_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred63_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop681:
        do {
            int alt681=2;
            int LA681_0 = input.LA(1);
            if ( ((LA681_0>=Protected && LA681_0<=Abstract)||LA681_0==External||(LA681_0>=Private && LA681_0<=Project)||LA681_0==Public||LA681_0==Static||LA681_0==Const) ) {
                alt681=1;
            }
            switch (alt681) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop681;
            }
        } while (true);
        pushFollow(FOLLOW_45);
        ruleAsyncNoTrailingLineBreak();
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred64_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred65_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_93);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred66_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred67_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop682:
        do {
            int alt682=2;
            int LA682_0 = input.LA(1);
            if ( ((LA682_0>=Protected && LA682_0<=Abstract)||LA682_0==External||(LA682_0>=Private && LA682_0<=Project)||LA682_0==Public||LA682_0==Static||LA682_0==Const) ) {
                alt682=1;
            }
            switch (alt682) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop682;
            }
        } while (true);
        pushFollow(FOLLOW_45);
        ruleAsyncNoTrailingLineBreak();
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred68_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred69_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_93);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred70_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_152); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred71_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_152); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred74_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred75_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred76_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred77_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred78_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred79_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred88_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred89_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred90_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred91_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred92_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt683=2;
        int LA683_0 = input.LA(1);
        if ( (LA683_0==Colon) ) {
            alt683=1;
        }
        switch (alt683) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred93_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt684=2;
        int LA684_0 = input.LA(1);
        if ( (LA684_0==Colon) ) {
            alt684=1;
        }
        switch (alt684) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred94_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt685=2;
        int LA685_0 = input.LA(1);
        if ( (LA685_0==Colon) ) {
            alt685=1;
        }
        switch (alt685) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred95_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt686=2;
        int LA686_0 = input.LA(1);
        if ( (LA686_0==Colon) ) {
            alt686=1;
        }
        switch (alt686) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred96_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred97_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred100_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred101_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred102_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred103_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred104_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_77);
        ruleLetIdentifierRef();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        {
        {
        match(input,In,FOLLOW_49); if (state.failed) return ;
        }
        }
        {
        {
        pushFollow(FOLLOW_71);
        norm1_Expression();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred105_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred106_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_78);
        ruleBindingIdentifierAsVariableDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt687=2;
        int LA687_0 = input.LA(1);
        if ( (LA687_0==In) ) {
            alt687=1;
        }
        else if ( (LA687_0==Of) ) {
            alt687=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 687, 0, input);
            throw nvae;
        }
        switch (alt687) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_66); if (state.failed) return ;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_66); if (state.failed) return ;
                }
                }
                }
                break;
        }
        int alt688=2;
        int LA688_0 = input.LA(1);
        if ( ((LA688_0>=Intersection && LA688_0<=Implements)||(LA688_0>=Promisify && LA688_0<=Abstract)||(LA688_0>=External && LA688_0<=Function)||(LA688_0>=Private && LA688_0<=Delete)||(LA688_0>=Import && LA688_0<=Public)||LA688_0==Static||(LA688_0>=Target && LA688_0<=Await)||LA688_0==Class||(LA688_0>=False && LA688_0<=Super)||LA688_0==Union||(LA688_0>=Yield && LA688_0<=This)||(LA688_0>=From && LA688_0<=Void)||(LA688_0>=Get && LA688_0<=Set)||LA688_0==PlusSignPlusSign||(LA688_0>=HyphenMinusHyphenMinus && LA688_0<=SolidusEqualsSign)||LA688_0==As||LA688_0==Of||LA688_0==ExclamationMark||LA688_0==LeftParenthesis||LA688_0==PlusSign||LA688_0==HyphenMinus||LA688_0==Solidus||LA688_0==LessThanSign||(LA688_0>=CommercialAt && LA688_0<=LeftSquareBracket)||LA688_0==LeftCurlyBracket||LA688_0==Tilde||LA688_0==RULE_DOUBLE||(LA688_0>=RULE_HEX_INT && LA688_0<=RULE_LEGACY_OCTAL_INT)||LA688_0==RULE_SCIENTIFIC_INT||LA688_0==RULE_IDENTIFIER||LA688_0==RULE_STRING||(LA688_0>=RULE_TEMPLATE_HEAD && LA688_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA688_0==RULE_INT) ) {
            alt688=1;
        }
        switch (alt688) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred107_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred108_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_77);
        ruleLetIdentifierRef();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        {
        {
        match(input,In,FOLLOW_69); if (state.failed) return ;
        }
        }
        {
        {
        pushFollow(FOLLOW_71);
        norm3_Expression();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred109_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred110_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_78);
        norm2_BindingIdentifierAsVariableDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt689=2;
        int LA689_0 = input.LA(1);
        if ( (LA689_0==In) ) {
            alt689=1;
        }
        else if ( (LA689_0==Of) ) {
            alt689=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 689, 0, input);
            throw nvae;
        }
        switch (alt689) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_66); if (state.failed) return ;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_66); if (state.failed) return ;
                }
                }
                }
                break;
        }
        int alt690=2;
        int LA690_0 = input.LA(1);
        if ( ((LA690_0>=Intersection && LA690_0<=Implements)||(LA690_0>=Promisify && LA690_0<=Abstract)||(LA690_0>=External && LA690_0<=Function)||(LA690_0>=Private && LA690_0<=Delete)||(LA690_0>=Import && LA690_0<=Public)||LA690_0==Static||(LA690_0>=Target && LA690_0<=Await)||LA690_0==Class||(LA690_0>=False && LA690_0<=Super)||LA690_0==Union||(LA690_0>=Yield && LA690_0<=This)||(LA690_0>=From && LA690_0<=Void)||(LA690_0>=Get && LA690_0<=Set)||LA690_0==PlusSignPlusSign||(LA690_0>=HyphenMinusHyphenMinus && LA690_0<=SolidusEqualsSign)||LA690_0==As||LA690_0==Of||LA690_0==ExclamationMark||LA690_0==LeftParenthesis||LA690_0==PlusSign||LA690_0==HyphenMinus||LA690_0==Solidus||LA690_0==LessThanSign||(LA690_0>=CommercialAt && LA690_0<=LeftSquareBracket)||LA690_0==LeftCurlyBracket||LA690_0==Tilde||LA690_0==RULE_DOUBLE||(LA690_0>=RULE_HEX_INT && LA690_0<=RULE_LEGACY_OCTAL_INT)||LA690_0==RULE_SCIENTIFIC_INT||LA690_0==RULE_IDENTIFIER||LA690_0==RULE_STRING||(LA690_0>=RULE_TEMPLATE_HEAD && LA690_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA690_0==RULE_INT) ) {
            alt690=1;
        }
        switch (alt690) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred111_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred118_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred119_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_93);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred121_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred122_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_93);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred126_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_44); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_45);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred127_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_44); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_45);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred128_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt691=2;
        alt691 = dfa691.predict(input);
        switch (alt691) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_106);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_111);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt692=2;
        int LA692_0 = input.LA(1);
        if ( (LA692_0==QuestionMark) ) {
            alt692=1;
        }
        switch (alt692) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_93); if (state.failed) return ;
                }
                }
                break;
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred129_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred130_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_209); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred131_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt693=2;
        int LA693_0 = input.LA(1);
        if ( (LA693_0==LessThanSign) ) {
            alt693=1;
        }
        switch (alt693) {
            case 1 :
                {
                pushFollow(FOLLOW_108);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt694=2;
        alt694 = dfa694.predict(input);
        switch (alt694) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_108);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt695=2;
        int LA695_0 = input.LA(1);
        if ( (LA695_0==Asterisk) ) {
            alt695=1;
        }
        else if ( ((LA695_0>=Intersection && LA695_0<=With)||(LA695_0>=For && LA695_0<=Var)||(LA695_0>=As && LA695_0<=Of)||LA695_0==LeftSquareBracket||LA695_0==RULE_DOUBLE||(LA695_0>=RULE_HEX_INT && LA695_0<=RULE_OCTAL_INT)||LA695_0==RULE_SCIENTIFIC_INT||LA695_0==RULE_IDENTIFIER||LA695_0==RULE_STRING||LA695_0==RULE_INT) ) {
            alt695=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 695, 0, input);
            throw nvae;
        }
        switch (alt695) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_106); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred132_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt696=2;
        alt696 = dfa696.predict(input);
        switch (alt696) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_106);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_111);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt697=2;
        int LA697_0 = input.LA(1);
        if ( (LA697_0==QuestionMark) ) {
            alt697=1;
        }
        switch (alt697) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_93); if (state.failed) return ;
                }
                }
                break;
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred133_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred134_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_209); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred135_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt698=2;
        int LA698_0 = input.LA(1);
        if ( (LA698_0==LessThanSign) ) {
            alt698=1;
        }
        switch (alt698) {
            case 1 :
                {
                pushFollow(FOLLOW_108);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt699=2;
        alt699 = dfa699.predict(input);
        switch (alt699) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_108);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt700=2;
        int LA700_0 = input.LA(1);
        if ( (LA700_0==Asterisk) ) {
            alt700=1;
        }
        else if ( ((LA700_0>=Intersection && LA700_0<=With)||(LA700_0>=For && LA700_0<=Var)||(LA700_0>=As && LA700_0<=Of)||LA700_0==LeftSquareBracket||LA700_0==RULE_DOUBLE||(LA700_0>=RULE_HEX_INT && LA700_0<=RULE_OCTAL_INT)||LA700_0==RULE_SCIENTIFIC_INT||LA700_0==RULE_IDENTIFIER||LA700_0==RULE_STRING||LA700_0==RULE_INT) ) {
            alt700=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 700, 0, input);
            throw nvae;
        }
        switch (alt700) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_106); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred136_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt701=2;
        alt701 = dfa701.predict(input);
        switch (alt701) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_106);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_93);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred137_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred139_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_209); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred142_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt702=2;
        int LA702_0 = input.LA(1);
        if ( (LA702_0==LessThanSign) ) {
            alt702=1;
        }
        switch (alt702) {
            case 1 :
                {
                pushFollow(FOLLOW_108);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt703=2;
        alt703 = dfa703.predict(input);
        switch (alt703) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_108);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt704=2;
        int LA704_0 = input.LA(1);
        if ( (LA704_0==Asterisk) ) {
            alt704=1;
        }
        else if ( ((LA704_0>=Intersection && LA704_0<=With)||(LA704_0>=For && LA704_0<=Var)||(LA704_0>=As && LA704_0<=Of)||LA704_0==LeftSquareBracket||LA704_0==RULE_DOUBLE||(LA704_0>=RULE_HEX_INT && LA704_0<=RULE_OCTAL_INT)||LA704_0==RULE_SCIENTIFIC_INT||LA704_0==RULE_IDENTIFIER||LA704_0==RULE_STRING||LA704_0==RULE_INT) ) {
            alt704=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 704, 0, input);
            throw nvae;
        }
        switch (alt704) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_106); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred145_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt705=2;
        alt705 = dfa705.predict(input);
        switch (alt705) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_106);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_93);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred146_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred148_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_209); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred151_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt706=2;
        int LA706_0 = input.LA(1);
        if ( (LA706_0==LessThanSign) ) {
            alt706=1;
        }
        switch (alt706) {
            case 1 :
                {
                pushFollow(FOLLOW_108);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt707=2;
        alt707 = dfa707.predict(input);
        switch (alt707) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_108);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt708=2;
        int LA708_0 = input.LA(1);
        if ( (LA708_0==Asterisk) ) {
            alt708=1;
        }
        else if ( ((LA708_0>=Intersection && LA708_0<=With)||(LA708_0>=For && LA708_0<=Var)||(LA708_0>=As && LA708_0<=Of)||LA708_0==LeftSquareBracket||LA708_0==RULE_DOUBLE||(LA708_0>=RULE_HEX_INT && LA708_0<=RULE_OCTAL_INT)||LA708_0==RULE_SCIENTIFIC_INT||LA708_0==RULE_IDENTIFIER||LA708_0==RULE_STRING||LA708_0==RULE_INT) ) {
            alt708=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 708, 0, input);
            throw nvae;
        }
        switch (alt708) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_106); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred172_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==QuestionMarkFullStop||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred173_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==QuestionMarkFullStop||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred174_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_121); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred175_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred176_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred177_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred178_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_121); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred179_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred180_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred181_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred182_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred183_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred184_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred185_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred186_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred187_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred188_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred189_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred190_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_49);
        ruleShiftOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred192_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_210);
        ruleShiftOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred194_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_49);
        ruleRelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred196_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_49);
        norm1_RelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred198_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_210);
        ruleRelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred200_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_210);
        norm1_RelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred202_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred203_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred204_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred205_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred206_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred207_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred208_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred209_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred210_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred211_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred212_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred213_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred214_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred215_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred216_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred217_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred218_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred219_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred220_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred221_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred222_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred223_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred224_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred225_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred226_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred227_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred228_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred229_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred230_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred231_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred232_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred233_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred234_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred235_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_147); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred236_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred238_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt721=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt721=1;
            }
            break;
        case Async:
            {
            int LA721_2 = input.LA(2);
            if ( (LA721_2==RULE_NO_LINE_TERMINATOR) && (synpred236_InternalN4JSParser())) {
                alt721=2;
            }
            else if ( (LA721_2==LeftParenthesis) && (synpred236_InternalN4JSParser())) {
                alt721=2;
            }
            else if ( (LA721_2==EqualsSignGreaterThanSign) ) {
                alt721=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 721, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt721=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 721, 0, input);
            throw nvae;
        }
        switch (alt721) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                int alt719=2;
                int LA719_0 = input.LA(1);
                if ( (LA719_0==Colon) ) {
                    alt719=1;
                }
                switch (alt719) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_48); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_42);
                ruleNoLineTerminator();
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt720=2;
                int LA720_0 = input.LA(1);
                if ( (LA720_0==Colon) ) {
                    alt720=1;
                }
                switch (alt720) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                ruleBindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred239_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred240_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred241_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_147); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred242_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred244_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt724=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt724=1;
            }
            break;
        case Async:
            {
            int LA724_2 = input.LA(2);
            if ( (LA724_2==RULE_NO_LINE_TERMINATOR) && (synpred242_InternalN4JSParser())) {
                alt724=2;
            }
            else if ( (LA724_2==LeftParenthesis) && (synpred242_InternalN4JSParser())) {
                alt724=2;
            }
            else if ( (LA724_2==EqualsSignGreaterThanSign) ) {
                alt724=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 724, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt724=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 724, 0, input);
            throw nvae;
        }
        switch (alt724) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                int alt722=2;
                int LA722_0 = input.LA(1);
                if ( (LA722_0==Colon) ) {
                    alt722=1;
                }
                switch (alt722) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_48); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_42);
                ruleNoLineTerminator();
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt723=2;
                int LA723_0 = input.LA(1);
                if ( (LA723_0==Colon) ) {
                    alt723=1;
                }
                switch (alt723) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                ruleBindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred245_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred246_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred247_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_147); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred248_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred250_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt727=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt727=1;
            }
            break;
        case Async:
            {
            int LA727_2 = input.LA(2);
            if ( (LA727_2==RULE_NO_LINE_TERMINATOR) && (synpred248_InternalN4JSParser())) {
                alt727=2;
            }
            else if ( (LA727_2==LeftParenthesis) && (synpred248_InternalN4JSParser())) {
                alt727=2;
            }
            else if ( (LA727_2==EqualsSignGreaterThanSign) ) {
                alt727=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 727, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt727=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 727, 0, input);
            throw nvae;
        }
        switch (alt727) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                int alt725=2;
                int LA725_0 = input.LA(1);
                if ( (LA725_0==Colon) ) {
                    alt725=1;
                }
                switch (alt725) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_51); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_39);
                ruleNoLineTerminator();
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt726=2;
                int LA726_0 = input.LA(1);
                if ( (LA726_0==Colon) ) {
                    alt726=1;
                }
                switch (alt726) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                norm1_BindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred251_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred252_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred253_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_147); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred254_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred256_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt730=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt730=1;
            }
            break;
        case Async:
            {
            int LA730_2 = input.LA(2);
            if ( (LA730_2==EqualsSignGreaterThanSign) ) {
                alt730=3;
            }
            else if ( (LA730_2==RULE_NO_LINE_TERMINATOR) && (synpred254_InternalN4JSParser())) {
                alt730=2;
            }
            else if ( (LA730_2==LeftParenthesis) && (synpred254_InternalN4JSParser())) {
                alt730=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 730, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt730=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 730, 0, input);
            throw nvae;
        }
        switch (alt730) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                int alt728=2;
                int LA728_0 = input.LA(1);
                if ( (LA728_0==Colon) ) {
                    alt728=1;
                }
                switch (alt728) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_51); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_39);
                ruleNoLineTerminator();
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt729=2;
                int LA729_0 = input.LA(1);
                if ( (LA729_0==Colon) ) {
                    alt729=1;
                }
                switch (alt729) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                norm1_BindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred257_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred258_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred259_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred260_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred261_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred270_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred274_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred275_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred278_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop742:
        do {
            int alt742=2;
            int LA742_0 = input.LA(1);
            if ( ((LA742_0>=Protected && LA742_0<=Abstract)||LA742_0==External||(LA742_0>=Private && LA742_0<=Project)||LA742_0==Public||LA742_0==Static||LA742_0==Const) ) {
                alt742=1;
            }
            switch (alt742) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_163);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop742;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        ruleGetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred279_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop743:
        do {
            int alt743=2;
            int LA743_0 = input.LA(1);
            if ( ((LA743_0>=Protected && LA743_0<=Abstract)||LA743_0==External||(LA743_0>=Private && LA743_0<=Project)||LA743_0==Public||LA743_0==Static||LA743_0==Const) ) {
                alt743=1;
            }
            switch (alt743) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_165);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop743;
            }
        } while (true);
        match(input,Set,FOLLOW_209); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred280_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop744:
        do {
            int alt744=2;
            alt744 = dfa744.predict(input);
            switch (alt744) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_162);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop744;
            }
        } while (true);
        int alt745=2;
        int LA745_0 = input.LA(1);
        if ( (LA745_0==LessThanSign) ) {
            alt745=1;
        }
        switch (alt745) {
            case 1 :
                {
                pushFollow(FOLLOW_108);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt746=2;
        int LA746_0 = input.LA(1);
        if ( (LA746_0==Asterisk) ) {
            alt746=1;
        }
        else if ( ((LA746_0>=Intersection && LA746_0<=With)||(LA746_0>=For && LA746_0<=Var)||(LA746_0>=As && LA746_0<=Of)||LA746_0==LeftSquareBracket||LA746_0==RULE_DOUBLE||(LA746_0>=RULE_HEX_INT && LA746_0<=RULE_OCTAL_INT)||LA746_0==RULE_SCIENTIFIC_INT||LA746_0==RULE_IDENTIFIER||LA746_0==RULE_STRING||LA746_0==RULE_INT) ) {
            alt746=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 746, 0, input);
            throw nvae;
        }
        switch (alt746) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_106); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_106);
                ruleAsyncNoTrailingLineBreak();
                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred281_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop747:
        do {
            int alt747=2;
            int LA747_0 = input.LA(1);
            if ( ((LA747_0>=Protected && LA747_0<=Abstract)||LA747_0==External||(LA747_0>=Private && LA747_0<=Project)||LA747_0==Public||LA747_0==Static||LA747_0==Const) ) {
                alt747=1;
            }
            switch (alt747) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_163);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop747;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred282_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop748:
        do {
            int alt748=2;
            int LA748_0 = input.LA(1);
            if ( ((LA748_0>=Protected && LA748_0<=Abstract)||LA748_0==External||(LA748_0>=Private && LA748_0<=Project)||LA748_0==Public||LA748_0==Static||LA748_0==Const) ) {
                alt748=1;
            }
            switch (alt748) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_165);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop748;
            }
        } while (true);
        match(input,Set,FOLLOW_209); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred283_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop749:
        do {
            int alt749=2;
            alt749 = dfa749.predict(input);
            switch (alt749) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_162);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop749;
            }
        } while (true);
        int alt750=2;
        int LA750_0 = input.LA(1);
        if ( (LA750_0==LessThanSign) ) {
            alt750=1;
        }
        switch (alt750) {
            case 1 :
                {
                pushFollow(FOLLOW_108);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt751=2;
        int LA751_0 = input.LA(1);
        if ( (LA751_0==Asterisk) ) {
            alt751=1;
        }
        else if ( ((LA751_0>=Intersection && LA751_0<=With)||(LA751_0>=For && LA751_0<=Var)||(LA751_0>=As && LA751_0<=Of)||LA751_0==LeftSquareBracket||LA751_0==RULE_DOUBLE||(LA751_0>=RULE_HEX_INT && LA751_0<=RULE_OCTAL_INT)||LA751_0==RULE_SCIENTIFIC_INT||LA751_0==RULE_IDENTIFIER||LA751_0==RULE_STRING||LA751_0==RULE_INT) ) {
            alt751=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 751, 0, input);
            throw nvae;
        }
        switch (alt751) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_106); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_106);
                ruleAsyncNoTrailingLineBreak();
                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred284_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop752:
        do {
            int alt752=2;
            int LA752_0 = input.LA(1);
            if ( ((LA752_0>=Protected && LA752_0<=Abstract)||LA752_0==External||(LA752_0>=Private && LA752_0<=Project)||LA752_0==Public||LA752_0==Static||LA752_0==Const) ) {
                alt752=1;
            }
            switch (alt752) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_163);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop752;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        ruleGetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred285_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred286_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop753:
        do {
            int alt753=2;
            int LA753_0 = input.LA(1);
            if ( ((LA753_0>=Protected && LA753_0<=Abstract)||LA753_0==External||(LA753_0>=Private && LA753_0<=Project)||LA753_0==Public||LA753_0==Static||LA753_0==Const) ) {
                alt753=1;
            }
            switch (alt753) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_165);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop753;
            }
        } while (true);
        match(input,Set,FOLLOW_209); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred288_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred289_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop754:
        do {
            int alt754=2;
            alt754 = dfa754.predict(input);
            switch (alt754) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_162);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop754;
            }
        } while (true);
        int alt755=2;
        int LA755_0 = input.LA(1);
        if ( (LA755_0==LessThanSign) ) {
            alt755=1;
        }
        switch (alt755) {
            case 1 :
                {
                pushFollow(FOLLOW_108);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt756=2;
        int LA756_0 = input.LA(1);
        if ( (LA756_0==Asterisk) ) {
            alt756=1;
        }
        else if ( ((LA756_0>=Intersection && LA756_0<=With)||(LA756_0>=For && LA756_0<=Var)||(LA756_0>=As && LA756_0<=Of)||LA756_0==LeftSquareBracket||LA756_0==RULE_DOUBLE||(LA756_0>=RULE_HEX_INT && LA756_0<=RULE_OCTAL_INT)||LA756_0==RULE_SCIENTIFIC_INT||LA756_0==RULE_IDENTIFIER||LA756_0==RULE_STRING||LA756_0==RULE_INT) ) {
            alt756=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 756, 0, input);
            throw nvae;
        }
        switch (alt756) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_106); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_106);
                ruleAsyncNoTrailingLineBreak();
                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred292_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop757:
        do {
            int alt757=2;
            int LA757_0 = input.LA(1);
            if ( ((LA757_0>=Protected && LA757_0<=Abstract)||LA757_0==External||(LA757_0>=Private && LA757_0<=Project)||LA757_0==Public||LA757_0==Static||LA757_0==Const) ) {
                alt757=1;
            }
            switch (alt757) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_163);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop757;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred293_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred294_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop758:
        do {
            int alt758=2;
            int LA758_0 = input.LA(1);
            if ( ((LA758_0>=Protected && LA758_0<=Abstract)||LA758_0==External||(LA758_0>=Private && LA758_0<=Project)||LA758_0==Public||LA758_0==Static||LA758_0==Const) ) {
                alt758=1;
            }
            switch (alt758) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_165);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop758;
            }
        } while (true);
        match(input,Set,FOLLOW_209); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred296_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred297_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop759:
        do {
            int alt759=2;
            alt759 = dfa759.predict(input);
            switch (alt759) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_162);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop759;
            }
        } while (true);
        int alt760=2;
        int LA760_0 = input.LA(1);
        if ( (LA760_0==LessThanSign) ) {
            alt760=1;
        }
        switch (alt760) {
            case 1 :
                {
                pushFollow(FOLLOW_108);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt761=2;
        int LA761_0 = input.LA(1);
        if ( (LA761_0==Asterisk) ) {
            alt761=1;
        }
        else if ( ((LA761_0>=Intersection && LA761_0<=With)||(LA761_0>=For && LA761_0<=Var)||(LA761_0>=As && LA761_0<=Of)||LA761_0==LeftSquareBracket||LA761_0==RULE_DOUBLE||(LA761_0>=RULE_HEX_INT && LA761_0<=RULE_OCTAL_INT)||LA761_0==RULE_SCIENTIFIC_INT||LA761_0==RULE_IDENTIFIER||LA761_0==RULE_STRING||LA761_0==RULE_INT) ) {
            alt761=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 761, 0, input);
            throw nvae;
        }
        switch (alt761) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_106); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_106);
                ruleAsyncNoTrailingLineBreak();
                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred306_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred307_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred308_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred309_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred311_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred313_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred318_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred321_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred322_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_93);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred323_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_93);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred324_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred325_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred326_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred327_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred328_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred329_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred330_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_193); if (state.failed) return ;
        pushFollow(FOLLOW_71);
        ruleTAnonymousFormalParameterList();
        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_47); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred331_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred332_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred333_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred335_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_93);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred337_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred338_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred339_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Get,FOLLOW_14); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred340_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_14); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred341_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt772=2;
        int LA772_0 = input.LA(1);
        if ( (LA772_0==LessThanSign) ) {
            alt772=1;
        }
        switch (alt772) {
            case 1 :
                {
                pushFollow(FOLLOW_14);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_42);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred345_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final boolean synpred22_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA186 dfa186 = new DFA186(this);
    protected DFA185 dfa185 = new DFA185(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA204 dfa204 = new DFA204(this);
    protected DFA203 dfa203 = new DFA203(this);
    protected DFA195 dfa195 = new DFA195(this);
    protected DFA188 dfa188 = new DFA188(this);
    protected DFA225 dfa225 = new DFA225(this);
    protected DFA226 dfa226 = new DFA226(this);
    protected DFA227 dfa227 = new DFA227(this);
    protected DFA228 dfa228 = new DFA228(this);
    protected DFA229 dfa229 = new DFA229(this);
    protected DFA230 dfa230 = new DFA230(this);
    protected DFA233 dfa233 = new DFA233(this);
    protected DFA239 dfa239 = new DFA239(this);
    protected DFA251 dfa251 = new DFA251(this);
    protected DFA252 dfa252 = new DFA252(this);
    protected DFA260 dfa260 = new DFA260(this);
    protected DFA253 dfa253 = new DFA253(this);
    protected DFA256 dfa256 = new DFA256(this);
    protected DFA259 dfa259 = new DFA259(this);
    protected DFA268 dfa268 = new DFA268(this);
    protected DFA261 dfa261 = new DFA261(this);
    protected DFA264 dfa264 = new DFA264(this);
    protected DFA267 dfa267 = new DFA267(this);
    protected DFA270 dfa270 = new DFA270(this);
    protected DFA274 dfa274 = new DFA274(this);
    protected DFA277 dfa277 = new DFA277(this);
    protected DFA279 dfa279 = new DFA279(this);
    protected DFA281 dfa281 = new DFA281(this);
    protected DFA282 dfa282 = new DFA282(this);
    protected DFA313 dfa313 = new DFA313(this);
    protected DFA321 dfa321 = new DFA321(this);
    protected DFA336 dfa336 = new DFA336(this);
    protected DFA337 dfa337 = new DFA337(this);
    protected DFA338 dfa338 = new DFA338(this);
    protected DFA339 dfa339 = new DFA339(this);
    protected DFA342 dfa342 = new DFA342(this);
    protected DFA343 dfa343 = new DFA343(this);
    protected DFA344 dfa344 = new DFA344(this);
    protected DFA345 dfa345 = new DFA345(this);
    protected DFA383 dfa383 = new DFA383(this);
    protected DFA382 dfa382 = new DFA382(this);
    protected DFA385 dfa385 = new DFA385(this);
    protected DFA384 dfa384 = new DFA384(this);
    protected DFA387 dfa387 = new DFA387(this);
    protected DFA386 dfa386 = new DFA386(this);
    protected DFA389 dfa389 = new DFA389(this);
    protected DFA388 dfa388 = new DFA388(this);
    protected DFA391 dfa391 = new DFA391(this);
    protected DFA393 dfa393 = new DFA393(this);
    protected DFA424 dfa424 = new DFA424(this);
    protected DFA430 dfa430 = new DFA430(this);
    protected DFA467 dfa467 = new DFA467(this);
    protected DFA468 dfa468 = new DFA468(this);
    protected DFA480 dfa480 = new DFA480(this);
    protected DFA476 dfa476 = new DFA476(this);
    protected DFA492 dfa492 = new DFA492(this);
    protected DFA488 dfa488 = new DFA488(this);
    protected DFA493 dfa493 = new DFA493(this);
    protected DFA497 dfa497 = new DFA497(this);
    protected DFA501 dfa501 = new DFA501(this);
    protected DFA505 dfa505 = new DFA505(this);
    protected DFA543 dfa543 = new DFA543(this);
    protected DFA549 dfa549 = new DFA549(this);
    protected DFA553 dfa553 = new DFA553(this);
    protected DFA554 dfa554 = new DFA554(this);
    protected DFA572 dfa572 = new DFA572(this);
    protected DFA584 dfa584 = new DFA584(this);
    protected DFA585 dfa585 = new DFA585(this);
    protected DFA587 dfa587 = new DFA587(this);
    protected DFA600 dfa600 = new DFA600(this);
    protected DFA606 dfa606 = new DFA606(this);
    protected DFA607 dfa607 = new DFA607(this);
    protected DFA608 dfa608 = new DFA608(this);
    protected DFA609 dfa609 = new DFA609(this);
    protected DFA616 dfa616 = new DFA616(this);
    protected DFA691 dfa691 = new DFA691(this);
    protected DFA694 dfa694 = new DFA694(this);
    protected DFA696 dfa696 = new DFA696(this);
    protected DFA699 dfa699 = new DFA699(this);
    protected DFA701 dfa701 = new DFA701(this);
    protected DFA703 dfa703 = new DFA703(this);
    protected DFA705 dfa705 = new DFA705(this);
    protected DFA707 dfa707 = new DFA707(this);
    protected DFA744 dfa744 = new DFA744(this);
    protected DFA749 dfa749 = new DFA749(this);
    protected DFA754 dfa754 = new DFA754(this);
    protected DFA759 dfa759 = new DFA759(this);
    static final String dfa_1s = "\124\uffff";
    static final String dfa_2s = "\1\4\13\0\1\uffff\1\0\106\uffff";
    static final String dfa_3s = "\1\u0094\13\0\1\uffff\1\0\106\uffff";
    static final String dfa_4s = "\14\uffff\1\4\1\uffff\1\6\1\7\100\uffff\1\1\1\2\1\3\1\5";
    static final String dfa_5s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\106\uffff}>";
    static final String[] dfa_6s = {
            "\3\17\1\uffff\1\17\1\13\1\4\1\7\2\17\1\6\1\17\3\uffff\1\2\1\3\1\17\1\16\1\15\1\5\1\17\1\10\6\17\1\uffff\1\12\1\11\7\17\2\uffff\1\14\7\17\4\uffff\10\17\5\uffff\1\17\1\uffff\2\17\10\uffff\3\17\1\uffff\1\17\2\uffff\1\17\2\uffff\1\17\2\uffff\1\17\1\uffff\1\17\1\uffff\1\17\1\uffff\2\17\3\uffff\1\1\1\17\2\uffff\1\17\2\uffff\1\17\3\uffff\1\17\1\uffff\4\17\1\uffff\1\17\1\uffff\1\17\2\uffff\1\17\11\uffff\2\17\7\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);
    class DFA2 extends DFA {
        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "95:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedScriptElementParserRuleCall_0= ruleAnnotatedScriptElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ( ( ruleImportDeclaration )=>ImportDeclarationParserRuleCall_4= ruleImportDeclaration ) | ExportDeclarationParserRuleCall_5= ruleExportDeclaration | RootStatementParserRuleCall_6= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_0 = input.LA(1);
                        int index2_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA2_0>=9 && LA2_0<=106 && (s=T2S.M_0[LA2_0-(9)])>=0)) { /* 11 cases */ }
                        else if ( (LA2_0==Enum) && (synpred4_InternalN4JSParser())) {s = 12;}
                        else if ( (LA2_0==Import) ) {s = 13;}
                        else if ( (LA2_0==Export) ) {s = 14;}
                        else if ( ((LA2_0>=Intersection && LA2_0<=Implements)||LA2_0==Promisify||(LA2_0>=Continue && LA2_0<=Debugger)||LA2_0==Function||LA2_0==Delete||LA2_0==Return||(LA2_0>=Switch && LA2_0<=Break)||(LA2_0>=False && LA2_0<=This)||(LA2_0>=From && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||(LA2_0>=HyphenMinusHyphenMinus && LA2_0<=SolidusEqualsSign)||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||LA2_0==PlusSign||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||LA2_0==LeftSquareBracket||LA2_0==LeftCurlyBracket||LA2_0==Tilde||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_HEX_INT && LA2_0<=RULE_LEGACY_OCTAL_INT)||LA2_0==RULE_SCIENTIFIC_INT||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_STRING||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_INT) ) {s = 15;}
                        input.seek(index2_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_1 = input.LA(1);
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_2 = input.LA(1);
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_3 = input.LA(1);
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_4 = input.LA(1);
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_5 = input.LA(1);
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_6 = input.LA(1);
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_7 = input.LA(1);
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_8 = input.LA(1);
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_9 = input.LA(1);
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_10 = input.LA(1);
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_11 = input.LA(1);
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_13 = input.LA(1);
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalN4JSParser()) ) {s = 83;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\17\uffff";
    static final String dfa_8s = "\1\11\2\uffff\10\11\4\uffff";
    static final String dfa_9s = "\1\55\2\uffff\10\55\4\uffff";
    static final String dfa_10s = "\1\uffff\1\1\1\2\10\uffff\2\3\1\4\1\5";
    static final String dfa_11s = "\1\2\2\uffff\1\5\1\7\1\0\1\3\1\6\1\10\1\1\1\4\4\uffff}>";
    static final String[] dfa_12s = {
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);
    class DFA18 extends DFA {
        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "220:2: ( (ExportDeclarationImplParserRuleCall_1_0_1= ruleExportDeclarationImpl ) | (ImportDeclarationImplParserRuleCall_1_1_1= ruleImportDeclarationImpl ) | ( ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=> ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1= ruleAsyncNoTrailingLineBreak ( ( Function )=>FunctionImplParserRuleCall_1_2_1_0_2= ruleFunctionImpl ) ) ) ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (VersionDeclarationParserRuleCall_1_3_0_0_5= ruleVersionDeclaration )? (TypeVariablesParserRuleCall_1_3_0_0_6= ruleTypeVariables )? (ClassExtendsImplementsParserRuleCall_1_3_0_0_7= ruleClassExtendsImplements )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (VersionDeclarationParserRuleCall_1_3_0_1_5= ruleVersionDeclaration )? (TypeVariablesParserRuleCall_1_3_0_1_6= ruleTypeVariables )? (InterfaceExtendsListParserRuleCall_1_3_0_1_7= ruleInterfaceExtendsList )? ) ) MembersParserRuleCall_1_3_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_4_2= Enum ( (NameBindingIdentifierParserRuleCall_1_4_3_0= ruleBindingIdentifier ) ) (VersionDeclarationParserRuleCall_1_4_4= ruleVersionDeclaration )? LeftCurlyBracketKeyword_1_4_5= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_4_6_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_4_7_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_4_8= RightCurlyBracket ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_5 = input.LA(1);
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA18_5==Async) && (synpred7_InternalN4JSParser())) {s = 11;}
                        else if ( (LA18_5==Function) && (synpred7_InternalN4JSParser())) {s = 12;}
                        else if ( (LA18_5==Private) ) {s = 3;}
                        else if ( (LA18_5==Project) ) {s = 4;}
                        else if ( (LA18_5==Protected) ) {s = 5;}
                        else if ( (LA18_5==Public) ) {s = 6;}
                        else if ( (LA18_5==External) ) {s = 7;}
                        else if ( (LA18_5==Abstract) ) {s = 8;}
                        else if ( (LA18_5==Static) ) {s = 9;}
                        else if ( (LA18_5==Const) ) {s = 10;}
                        else if ( (LA18_5==Enum) ) {s = 14;}
                        else if ( (LA18_5==Interface||LA18_5==Class) ) {s = 13;}
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_9 = input.LA(1);
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA18_9==Async) && (synpred7_InternalN4JSParser())) {s = 11;}
                        else if ( (LA18_9==Function) && (synpred7_InternalN4JSParser())) {s = 12;}
                        else if ( (LA18_9==Private) ) {s = 3;}
                        else if ( (LA18_9==Project) ) {s = 4;}
                        else if ( (LA18_9==Protected) ) {s = 5;}
                        else if ( (LA18_9==Public) ) {s = 6;}
                        else if ( (LA18_9==External) ) {s = 7;}
                        else if ( (LA18_9==Abstract) ) {s = 8;}
                        else if ( (LA18_9==Static) ) {s = 9;}
                        else if ( (LA18_9==Const) ) {s = 10;}
                        else if ( (LA18_9==Enum) ) {s = 14;}
                        else if ( (LA18_9==Interface||LA18_9==Class) ) {s = 13;}
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_0 = input.LA(1);
                        int index18_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA18_0>=10 && LA18_0<=35 && (s=T2S.M_1[LA18_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA18_0==Async) && (synpred7_InternalN4JSParser())) {s = 11;}
                        else if ( (LA18_0==Function) && (synpred7_InternalN4JSParser())) {s = 12;}
                        else if ( (LA18_0==Interface||LA18_0==Class) ) {s = 13;}
                        else if ( (LA18_0==Enum) ) {s = 14;}
                        input.seek(index18_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA18_6 = input.LA(1);
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA18_6==Async) && (synpred7_InternalN4JSParser())) {s = 11;}
                        else if ( (LA18_6==Function) && (synpred7_InternalN4JSParser())) {s = 12;}
                        else if ( (LA18_6==Private) ) {s = 3;}
                        else if ( (LA18_6==Project) ) {s = 4;}
                        else if ( (LA18_6==Protected) ) {s = 5;}
                        else if ( (LA18_6==Public) ) {s = 6;}
                        else if ( (LA18_6==External) ) {s = 7;}
                        else if ( (LA18_6==Abstract) ) {s = 8;}
                        else if ( (LA18_6==Static) ) {s = 9;}
                        else if ( (LA18_6==Const) ) {s = 10;}
                        else if ( (LA18_6==Enum) ) {s = 14;}
                        else if ( (LA18_6==Interface||LA18_6==Class) ) {s = 13;}
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA18_10 = input.LA(1);
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA18_10==Interface||LA18_10==Class) ) {s = 13;}
                        else if ( (LA18_10==Private) ) {s = 3;}
                        else if ( (LA18_10==Project) ) {s = 4;}
                        else if ( (LA18_10==Protected) ) {s = 5;}
                        else if ( (LA18_10==Public) ) {s = 6;}
                        else if ( (LA18_10==External) ) {s = 7;}
                        else if ( (LA18_10==Abstract) ) {s = 8;}
                        else if ( (LA18_10==Static) ) {s = 9;}
                        else if ( (LA18_10==Const) ) {s = 10;}
                        else if ( (LA18_10==Async) && (synpred7_InternalN4JSParser())) {s = 11;}
                        else if ( (LA18_10==Function) && (synpred7_InternalN4JSParser())) {s = 12;}
                        else if ( (LA18_10==Enum) ) {s = 14;}
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA18_3 = input.LA(1);
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA18_3==Async) && (synpred7_InternalN4JSParser())) {s = 11;}
                        else if ( (LA18_3==Function) && (synpred7_InternalN4JSParser())) {s = 12;}
                        else if ( (LA18_3==Private) ) {s = 3;}
                        else if ( (LA18_3==Project) ) {s = 4;}
                        else if ( (LA18_3==Protected) ) {s = 5;}
                        else if ( (LA18_3==Public) ) {s = 6;}
                        else if ( (LA18_3==External) ) {s = 7;}
                        else if ( (LA18_3==Abstract) ) {s = 8;}
                        else if ( (LA18_3==Static) ) {s = 9;}
                        else if ( (LA18_3==Const) ) {s = 10;}
                        else if ( (LA18_3==Enum) ) {s = 14;}
                        else if ( (LA18_3==Interface||LA18_3==Class) ) {s = 13;}
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA18_7 = input.LA(1);
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA18_7==Enum) ) {s = 14;}
                        else if ( (LA18_7==Private) ) {s = 3;}
                        else if ( (LA18_7==Project) ) {s = 4;}
                        else if ( (LA18_7==Protected) ) {s = 5;}
                        else if ( (LA18_7==Public) ) {s = 6;}
                        else if ( (LA18_7==External) ) {s = 7;}
                        else if ( (LA18_7==Abstract) ) {s = 8;}
                        else if ( (LA18_7==Static) ) {s = 9;}
                        else if ( (LA18_7==Const) ) {s = 10;}
                        else if ( (LA18_7==Interface||LA18_7==Class) ) {s = 13;}
                        else if ( (LA18_7==Async) && (synpred7_InternalN4JSParser())) {s = 11;}
                        else if ( (LA18_7==Function) && (synpred7_InternalN4JSParser())) {s = 12;}
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA18_4 = input.LA(1);
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA18_4==Enum) ) {s = 14;}
                        else if ( (LA18_4==Private) ) {s = 3;}
                        else if ( (LA18_4==Project) ) {s = 4;}
                        else if ( (LA18_4==Protected) ) {s = 5;}
                        else if ( (LA18_4==Public) ) {s = 6;}
                        else if ( (LA18_4==External) ) {s = 7;}
                        else if ( (LA18_4==Abstract) ) {s = 8;}
                        else if ( (LA18_4==Static) ) {s = 9;}
                        else if ( (LA18_4==Const) ) {s = 10;}
                        else if ( (LA18_4==Interface||LA18_4==Class) ) {s = 13;}
                        else if ( (LA18_4==Async) && (synpred7_InternalN4JSParser())) {s = 11;}
                        else if ( (LA18_4==Function) && (synpred7_InternalN4JSParser())) {s = 12;}
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA18_8 = input.LA(1);
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA18_8==Async) && (synpred7_InternalN4JSParser())) {s = 11;}
                        else if ( (LA18_8==Function) && (synpred7_InternalN4JSParser())) {s = 12;}
                        else if ( (LA18_8==Private) ) {s = 3;}
                        else if ( (LA18_8==Project) ) {s = 4;}
                        else if ( (LA18_8==Protected) ) {s = 5;}
                        else if ( (LA18_8==Public) ) {s = 6;}
                        else if ( (LA18_8==External) ) {s = 7;}
                        else if ( (LA18_8==Abstract) ) {s = 8;}
                        else if ( (LA18_8==Static) ) {s = 9;}
                        else if ( (LA18_8==Const) ) {s = 10;}
                        else if ( (LA18_8==Enum) ) {s = 14;}
                        else if ( (LA18_8==Interface||LA18_8==Class) ) {s = 13;}
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_13s = "\13\uffff";
    static final String dfa_14s = "\11\11\2\uffff";
    static final String dfa_15s = "\11\43\2\uffff";
    static final String dfa_16s = "\11\uffff\1\1\1\2";
    static final String dfa_17s = "\13\uffff}>";
    static final String[] dfa_18s = {
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "",
            ""
    };
    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[][] dfa_18 = unpackEncodedStringArray(dfa_18s);
    class DFA14 extends DFA {
        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "258:4: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (VersionDeclarationParserRuleCall_1_3_0_0_5= ruleVersionDeclaration )? (TypeVariablesParserRuleCall_1_3_0_0_6= ruleTypeVariables )? (ClassExtendsImplementsParserRuleCall_1_3_0_0_7= ruleClassExtendsImplements )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (VersionDeclarationParserRuleCall_1_3_0_1_5= ruleVersionDeclaration )? (TypeVariablesParserRuleCall_1_3_0_1_6= ruleTypeVariables )? (InterfaceExtendsListParserRuleCall_1_3_0_1_7= ruleInterfaceExtendsList )? ) )";
        }
    }
    static final String dfa_19s = "\102\uffff";
    static final String dfa_20s = "\1\4\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\61\uffff";
    static final String dfa_21s = "\1\u0094\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\61\uffff";
    static final String dfa_22s = "\11\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\2\60\uffff";
    static final String dfa_23s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\uffff\1\13\1\14\1\uffff\1\15\61\uffff}>";
    static final String[] dfa_24s = {
            "\3\21\1\uffff\1\21\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\1\21\1\uffff\1\21\1\5\1\uffff\1\10\1\uffff\2\21\1\15\1\21\2\uffff\1\12\1\11\2\21\1\uffff\1\21\1\uffff\2\21\2\uffff\1\14\6\21\6\uffff\1\21\1\20\3\21\1\uffff\1\17\5\uffff\1\21\1\uffff\2\21\10\uffff\1\21\3\uffff\1\21\2\uffff\1\21\2\uffff\1\21\2\uffff\1\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\3\uffff\1\1\1\21\2\uffff\1\21\2\uffff\1\21\3\uffff\1\21\1\uffff\4\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\11\uffff\2\21\7\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[][] dfa_24 = unpackEncodedStringArray(dfa_24s);
    class DFA20 extends DFA {
        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "451:4: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Class | Interface | Enum | Async | Function | Var | Let )=> (ExportedElementExportableElementParserRuleCall_1_3_1_0_0= ruleExportableElement ) ) | ( ( (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0= norm1_AssignmentExpression ) ) SemiParserRuleCall_1_3_1_1_1= ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_0 = input.LA(1);
                        int index20_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA20_0==CommercialAt) ) {s = 1;}
                        else if ( (LA20_0==Private) ) {s = 2;}
                        else if ( (LA20_0==Project) ) {s = 3;}
                        else if ( (LA20_0==Protected) ) {s = 4;}
                        else if ( (LA20_0==Public) ) {s = 5;}
                        else if ( (LA20_0==External) ) {s = 6;}
                        else if ( (LA20_0==Abstract) ) {s = 7;}
                        else if ( (LA20_0==Static) ) {s = 8;}
                        else if ( (LA20_0==Const) && (synpred10_InternalN4JSParser())) {s = 9;}
                        else if ( (LA20_0==Class) ) {s = 10;}
                        else if ( (LA20_0==Interface) ) {s = 11;}
                        else if ( (LA20_0==Enum) && (synpred10_InternalN4JSParser())) {s = 12;}
                        else if ( (LA20_0==Async) ) {s = 13;}
                        else if ( (LA20_0==Function) ) {s = 14;}
                        else if ( (LA20_0==Var) && (synpred10_InternalN4JSParser())) {s = 15;}
                        else if ( (LA20_0==Let) ) {s = 16;}
                        else if ( ((LA20_0>=Intersection && LA20_0<=Implements)||LA20_0==Promisify||LA20_0==Delete||LA20_0==Import||(LA20_0>=Target && LA20_0<=Typeof)||LA20_0==Await||(LA20_0>=False && LA20_0<=Super)||LA20_0==Union||(LA20_0>=Yield && LA20_0<=This)||(LA20_0>=From && LA20_0<=Void)||LA20_0==Get||(LA20_0>=New && LA20_0<=Set)||LA20_0==PlusSignPlusSign||(LA20_0>=HyphenMinusHyphenMinus && LA20_0<=SolidusEqualsSign)||LA20_0==As||LA20_0==Of||LA20_0==ExclamationMark||LA20_0==LeftParenthesis||LA20_0==PlusSign||LA20_0==HyphenMinus||LA20_0==Solidus||LA20_0==LessThanSign||LA20_0==LeftSquareBracket||LA20_0==LeftCurlyBracket||LA20_0==Tilde||LA20_0==RULE_DOUBLE||(LA20_0>=RULE_HEX_INT && LA20_0<=RULE_LEGACY_OCTAL_INT)||LA20_0==RULE_SCIENTIFIC_INT||LA20_0==RULE_IDENTIFIER||LA20_0==RULE_STRING||(LA20_0>=RULE_TEMPLATE_HEAD && LA20_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA20_0==RULE_INT) ) {s = 17;}
                        input.seek(index20_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_1 = input.LA(1);
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_2 = input.LA(1);
                        int index20_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index20_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_3 = input.LA(1);
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA20_4 = input.LA(1);
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA20_5 = input.LA(1);
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA20_6 = input.LA(1);
                        int index20_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index20_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA20_7 = input.LA(1);
                        int index20_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index20_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA20_8 = input.LA(1);
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA20_10 = input.LA(1);
                        int index20_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index20_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA20_11 = input.LA(1);
                        int index20_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index20_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA20_13 = input.LA(1);
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA20_14 = input.LA(1);
                        int index20_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index20_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA20_16 = input.LA(1);
                        int index20_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index20_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_25s = "\72\uffff";
    static final String dfa_26s = "\20\uffff\11\17\41\uffff";
    static final String dfa_27s = "\1\11\1\uffff\7\11\1\4\6\uffff\1\4\7\11\1\17\41\uffff";
    static final String dfa_28s = "\1\152\1\uffff\7\100\1\176\6\uffff\1\u00a4\10\u0098\41\uffff";
    static final String dfa_29s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\2\5\1\6\11\uffff\40\3\1\5";
    static final String dfa_30s = "\1\3\1\uffff\1\16\1\20\1\6\1\11\1\2\1\17\1\21\1\7\6\uffff\1\4\1\14\1\5\1\12\1\10\1\1\1\13\1\0\1\15\41\uffff}>";
    static final String[] dfa_31s = {
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\51\uffff\1\1",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\3\17\1\uffff\1\17\1\20\1\23\1\26\2\uffff\1\25\1\16\3\uffff\1\21\1\22\3\uffff\1\24\1\uffff\1\27\1\uffff\1\17\1\uffff\1\30\1\17\2\uffff\1\12\1\11\3\uffff\1\17\1\uffff\2\17\2\uffff\1\14\1\17\3\uffff\1\17\7\uffff\2\17\1\uffff\2\17\1\uffff\1\17\21\uffff\1\17\3\uffff\1\17\23\uffff\2\17\2\uffff\1\17\17\uffff\1\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\52\1\45\1\57\1\uffff\1\54\1\60\1\62\1\41\2\uffff\1\40\2\uffff\1\67\1\uffff\1\61\1\37\3\uffff\1\63\1\uffff\1\42\1\uffff\1\47\1\uffff\1\56\1\55\7\uffff\1\51\1\uffff\1\33\1\53\3\uffff\1\44\3\uffff\1\50\7\uffff\1\34\1\36\1\uffff\1\64\1\35\23\uffff\1\43\3\uffff\1\46\11\uffff\1\17\3\uffff\2\17\1\66\1\17\6\uffff\1\70\1\uffff\1\17\1\31\14\uffff\1\32\27\uffff\1\17\1\uffff\1\17\13\uffff\1\65",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\16\120\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\40\uffff\1\71\4\uffff\1\17\1\uffff\1\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[][] dfa_31 = unpackEncodedStringArray(dfa_31s);
    class DFA26 extends DFA {
        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = dfa_25;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "602:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedExportableElementParserRuleCall_0= ruleAnnotatedExportableElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_4= ruleFunctionDeclaration ) | ExportedVariableStatementParserRuleCall_5= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_23 = input.LA(1);
                        int index26_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_23==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA26_23==Private) ) {s = 2;}
                        else if ( (LA26_23==Project) ) {s = 3;}
                        else if ( (LA26_23==Protected) ) {s = 4;}
                        else if ( (LA26_23==Public) ) {s = 5;}
                        else if ( (LA26_23==External) ) {s = 6;}
                        else if ( (LA26_23==Abstract) ) {s = 7;}
                        else if ( (LA26_23==Static) ) {s = 8;}
                        else if ( (LA26_23==Const) ) {s = 9;}
                        else if ( (LA26_23==EOF||LA26_23==Let||LA26_23==Var||LA26_23==Comma||(LA26_23>=Colon && LA26_23<=Semicolon)||LA26_23==EqualsSign||LA26_23==RightCurlyBracket||LA26_23==RULE_ML_COMMENT||LA26_23==RULE_EOL) ) {s = 15;}
                        else if ( (LA26_23==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA26_23==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_23==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_23==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        input.seek(index26_23);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_21 = input.LA(1);
                        int index26_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_21==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA26_21==Private) ) {s = 2;}
                        else if ( (LA26_21==Project) ) {s = 3;}
                        else if ( (LA26_21==Protected) ) {s = 4;}
                        else if ( (LA26_21==Public) ) {s = 5;}
                        else if ( (LA26_21==External) ) {s = 6;}
                        else if ( (LA26_21==Abstract) ) {s = 7;}
                        else if ( (LA26_21==Static) ) {s = 8;}
                        else if ( (LA26_21==Const) ) {s = 9;}
                        else if ( (LA26_21==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_21==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_21==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_21==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA26_21==EOF||LA26_21==Let||LA26_21==Var||LA26_21==Comma||(LA26_21>=Colon && LA26_21<=Semicolon)||LA26_21==EqualsSign||LA26_21==RightCurlyBracket||LA26_21==RULE_ML_COMMENT||LA26_21==RULE_EOL) ) {s = 15;}
                        input.seek(index26_21);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_6 = input.LA(1);
                        int index26_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_6==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA26_6==Private) ) {s = 2;}
                        else if ( (LA26_6==Project) ) {s = 3;}
                        else if ( (LA26_6==Protected) ) {s = 4;}
                        else if ( (LA26_6==Public) ) {s = 5;}
                        else if ( (LA26_6==External) ) {s = 6;}
                        else if ( (LA26_6==Abstract) ) {s = 7;}
                        else if ( (LA26_6==Static) ) {s = 8;}
                        else if ( (LA26_6==Const) ) {s = 9;}
                        else if ( (LA26_6==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_6==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_6==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_6==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA26_6==Let||LA26_6==Var) ) {s = 15;}
                        input.seek(index26_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_0 = input.LA(1);
                        int index26_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_0==CommercialAt) && (synpred11_InternalN4JSParser())) {s = 1;}
                        else if ( (LA26_0==Private) ) {s = 2;}
                        else if ( (LA26_0==Project) ) {s = 3;}
                        else if ( (LA26_0==Protected) ) {s = 4;}
                        else if ( (LA26_0==Public) ) {s = 5;}
                        else if ( (LA26_0==External) ) {s = 6;}
                        else if ( (LA26_0==Abstract) ) {s = 7;}
                        else if ( (LA26_0==Static) ) {s = 8;}
                        else if ( (LA26_0==Const) ) {s = 9;}
                        else if ( (LA26_0==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_0==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA26_0==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA26_0==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_0==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_0==Let||LA26_0==Var) ) {s = 15;}
                        input.seek(index26_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_16 = input.LA(1);
                        int index26_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA26_16>=4 && LA26_16<=164 && (s=T2S.M_2[LA26_16-(4)])>=0) && (synpred13_InternalN4JSParser())) { /* 32 cases */ }
                        else if ( (LA26_16==EOF||LA26_16==Comma||(LA26_16>=Colon && LA26_16<=Semicolon)||LA26_16==EqualsSign||LA26_16==RightCurlyBracket||LA26_16==RULE_ML_COMMENT||LA26_16==RULE_EOL) ) {s = 15;}
                        input.seek(index26_16);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_18 = input.LA(1);
                        int index26_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_18==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA26_18==Private) ) {s = 2;}
                        else if ( (LA26_18==Project) ) {s = 3;}
                        else if ( (LA26_18==Protected) ) {s = 4;}
                        else if ( (LA26_18==Public) ) {s = 5;}
                        else if ( (LA26_18==External) ) {s = 6;}
                        else if ( (LA26_18==Abstract) ) {s = 7;}
                        else if ( (LA26_18==Static) ) {s = 8;}
                        else if ( (LA26_18==Const) ) {s = 9;}
                        else if ( (LA26_18==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_18==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_18==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_18==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA26_18==EOF||LA26_18==Let||LA26_18==Var||LA26_18==Comma||(LA26_18>=Colon && LA26_18<=Semicolon)||LA26_18==EqualsSign||LA26_18==RightCurlyBracket||LA26_18==RULE_ML_COMMENT||LA26_18==RULE_EOL) ) {s = 15;}
                        input.seek(index26_18);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_4 = input.LA(1);
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_4==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA26_4==Private) ) {s = 2;}
                        else if ( (LA26_4==Project) ) {s = 3;}
                        else if ( (LA26_4==Protected) ) {s = 4;}
                        else if ( (LA26_4==Public) ) {s = 5;}
                        else if ( (LA26_4==External) ) {s = 6;}
                        else if ( (LA26_4==Abstract) ) {s = 7;}
                        else if ( (LA26_4==Static) ) {s = 8;}
                        else if ( (LA26_4==Const) ) {s = 9;}
                        else if ( (LA26_4==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_4==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_4==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_4==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA26_4==Let||LA26_4==Var) ) {s = 15;}
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_9 = input.LA(1);
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA26_9>=9 && LA26_9<=35 && (s=T2S.M_3[LA26_9-(9)])>=0)) { /* 10 cases */ }
                        else if ( (LA26_9==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_9==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_9==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( ((LA26_9>=Intersection && LA26_9<=Implements)||LA26_9==Promisify||LA26_9==Target||LA26_9==Await||LA26_9==Union||(LA26_9>=Yield && LA26_9<=This)||LA26_9==From||LA26_9==Type||(LA26_9>=Get && LA26_9<=Let)||(LA26_9>=Out && LA26_9<=Set)||LA26_9==Var||LA26_9==As||LA26_9==Of||(LA26_9>=CommercialAt && LA26_9<=LeftSquareBracket)||LA26_9==LeftCurlyBracket||LA26_9==RULE_IDENTIFIER) ) {s = 15;}
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_20 = input.LA(1);
                        int index26_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_20==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_20==Private) ) {s = 2;}
                        else if ( (LA26_20==Project) ) {s = 3;}
                        else if ( (LA26_20==Protected) ) {s = 4;}
                        else if ( (LA26_20==Public) ) {s = 5;}
                        else if ( (LA26_20==External) ) {s = 6;}
                        else if ( (LA26_20==Abstract) ) {s = 7;}
                        else if ( (LA26_20==Static) ) {s = 8;}
                        else if ( (LA26_20==Const) ) {s = 9;}
                        else if ( (LA26_20==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA26_20==EOF||LA26_20==Let||LA26_20==Var||LA26_20==Comma||(LA26_20>=Colon && LA26_20<=Semicolon)||LA26_20==EqualsSign||LA26_20==RightCurlyBracket||LA26_20==RULE_ML_COMMENT||LA26_20==RULE_EOL) ) {s = 15;}
                        else if ( (LA26_20==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA26_20==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_20==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        input.seek(index26_20);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA26_5 = input.LA(1);
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_5==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_5==Private) ) {s = 2;}
                        else if ( (LA26_5==Project) ) {s = 3;}
                        else if ( (LA26_5==Protected) ) {s = 4;}
                        else if ( (LA26_5==Public) ) {s = 5;}
                        else if ( (LA26_5==External) ) {s = 6;}
                        else if ( (LA26_5==Abstract) ) {s = 7;}
                        else if ( (LA26_5==Static) ) {s = 8;}
                        else if ( (LA26_5==Const) ) {s = 9;}
                        else if ( (LA26_5==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA26_5==Let||LA26_5==Var) ) {s = 15;}
                        else if ( (LA26_5==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA26_5==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_5==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA26_19 = input.LA(1);
                        int index26_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_19==EOF||LA26_19==Let||LA26_19==Var||LA26_19==Comma||(LA26_19>=Colon && LA26_19<=Semicolon)||LA26_19==EqualsSign||LA26_19==RightCurlyBracket||LA26_19==RULE_ML_COMMENT||LA26_19==RULE_EOL) ) {s = 15;}
                        else if ( (LA26_19==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA26_19==Private) ) {s = 2;}
                        else if ( (LA26_19==Project) ) {s = 3;}
                        else if ( (LA26_19==Protected) ) {s = 4;}
                        else if ( (LA26_19==Public) ) {s = 5;}
                        else if ( (LA26_19==External) ) {s = 6;}
                        else if ( (LA26_19==Abstract) ) {s = 7;}
                        else if ( (LA26_19==Static) ) {s = 8;}
                        else if ( (LA26_19==Const) ) {s = 9;}
                        else if ( (LA26_19==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_19==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_19==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_19==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        input.seek(index26_19);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA26_22 = input.LA(1);
                        int index26_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_22==EOF||LA26_22==Let||LA26_22==Var||LA26_22==Comma||(LA26_22>=Colon && LA26_22<=Semicolon)||LA26_22==EqualsSign||LA26_22==RightCurlyBracket||LA26_22==RULE_ML_COMMENT||LA26_22==RULE_EOL) ) {s = 15;}
                        else if ( (LA26_22==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA26_22==Private) ) {s = 2;}
                        else if ( (LA26_22==Project) ) {s = 3;}
                        else if ( (LA26_22==Protected) ) {s = 4;}
                        else if ( (LA26_22==Public) ) {s = 5;}
                        else if ( (LA26_22==External) ) {s = 6;}
                        else if ( (LA26_22==Abstract) ) {s = 7;}
                        else if ( (LA26_22==Static) ) {s = 8;}
                        else if ( (LA26_22==Const) ) {s = 9;}
                        else if ( (LA26_22==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_22==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_22==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_22==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        input.seek(index26_22);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA26_17 = input.LA(1);
                        int index26_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_17==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_17==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_17==Private) ) {s = 2;}
                        else if ( (LA26_17==Project) ) {s = 3;}
                        else if ( (LA26_17==Protected) ) {s = 4;}
                        else if ( (LA26_17==Public) ) {s = 5;}
                        else if ( (LA26_17==External) ) {s = 6;}
                        else if ( (LA26_17==Abstract) ) {s = 7;}
                        else if ( (LA26_17==Static) ) {s = 8;}
                        else if ( (LA26_17==Const) ) {s = 9;}
                        else if ( (LA26_17==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_17==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA26_17==EOF||LA26_17==Let||LA26_17==Var||LA26_17==Comma||(LA26_17>=Colon && LA26_17<=Semicolon)||LA26_17==EqualsSign||LA26_17==RightCurlyBracket||LA26_17==RULE_ML_COMMENT||LA26_17==RULE_EOL) ) {s = 15;}
                        else if ( (LA26_17==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        input.seek(index26_17);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA26_24 = input.LA(1);
                        int index26_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_24==EOF||LA26_24==Comma||(LA26_24>=Colon && LA26_24<=Semicolon)||LA26_24==EqualsSign||LA26_24==RightCurlyBracket||LA26_24==RULE_ML_COMMENT||LA26_24==RULE_EOL) ) {s = 15;}
                        else if ( (LA26_24==RULE_NO_LINE_TERMINATOR) && (synpred15_InternalN4JSParser())) {s = 57;}
                        else if ( (LA26_24==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        input.seek(index26_24);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA26_2 = input.LA(1);
                        int index26_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_2==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_2==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_2==Private) ) {s = 2;}
                        else if ( (LA26_2==Project) ) {s = 3;}
                        else if ( (LA26_2==Protected) ) {s = 4;}
                        else if ( (LA26_2==Public) ) {s = 5;}
                        else if ( (LA26_2==External) ) {s = 6;}
                        else if ( (LA26_2==Abstract) ) {s = 7;}
                        else if ( (LA26_2==Static) ) {s = 8;}
                        else if ( (LA26_2==Const) ) {s = 9;}
                        else if ( (LA26_2==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_2==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA26_2==Let||LA26_2==Var) ) {s = 15;}
                        else if ( (LA26_2==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        input.seek(index26_2);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA26_7 = input.LA(1);
                        int index26_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_7==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA26_7==Private) ) {s = 2;}
                        else if ( (LA26_7==Project) ) {s = 3;}
                        else if ( (LA26_7==Protected) ) {s = 4;}
                        else if ( (LA26_7==Public) ) {s = 5;}
                        else if ( (LA26_7==External) ) {s = 6;}
                        else if ( (LA26_7==Abstract) ) {s = 7;}
                        else if ( (LA26_7==Static) ) {s = 8;}
                        else if ( (LA26_7==Const) ) {s = 9;}
                        else if ( (LA26_7==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_7==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_7==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_7==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA26_7==Let||LA26_7==Var) ) {s = 15;}
                        input.seek(index26_7);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA26_3 = input.LA(1);
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_3==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA26_3==Private) ) {s = 2;}
                        else if ( (LA26_3==Project) ) {s = 3;}
                        else if ( (LA26_3==Protected) ) {s = 4;}
                        else if ( (LA26_3==Public) ) {s = 5;}
                        else if ( (LA26_3==External) ) {s = 6;}
                        else if ( (LA26_3==Abstract) ) {s = 7;}
                        else if ( (LA26_3==Static) ) {s = 8;}
                        else if ( (LA26_3==Const) ) {s = 9;}
                        else if ( (LA26_3==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_3==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_3==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA26_3==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA26_3==Let||LA26_3==Var) ) {s = 15;}
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA26_8 = input.LA(1);
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_8==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA26_8==Private) ) {s = 2;}
                        else if ( (LA26_8==Project) ) {s = 3;}
                        else if ( (LA26_8==Protected) ) {s = 4;}
                        else if ( (LA26_8==Public) ) {s = 5;}
                        else if ( (LA26_8==External) ) {s = 6;}
                        else if ( (LA26_8==Abstract) ) {s = 7;}
                        else if ( (LA26_8==Static) ) {s = 8;}
                        else if ( (LA26_8==Const) ) {s = 9;}
                        else if ( (LA26_8==Let||LA26_8==Var) ) {s = 15;}
                        else if ( (LA26_8==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA26_8==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA26_8==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA26_8==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_32s = "\26\uffff";
    static final String dfa_33s = "\15\uffff\11\12";
    static final String dfa_34s = "\10\11\1\4\4\uffff\1\17\7\11\1\4";
    static final String dfa_35s = "\10\100\1\176\4\uffff\11\u0098";
    static final String dfa_36s = "\11\uffff\1\1\1\2\1\3\1\4\11\uffff";
    static final String dfa_37s = "\26\uffff}>";
    static final String[] dfa_38s = {
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\3\12\1\uffff\1\12\1\25\1\20\1\23\2\uffff\1\22\1\11\3\uffff\1\16\1\17\3\uffff\1\21\1\uffff\1\24\1\uffff\1\12\1\uffff\1\15\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\2\12\1\uffff\1\12\21\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\17\uffff\1\12",
            "",
            "",
            "",
            "",
            "\1\11\120\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\40\uffff\1\11\4\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\3\13\1\uffff\4\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\14\uffff\1\13\27\uffff\1\12\1\uffff\1\12"
    };
    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);
    class DFA41 extends DFA {
        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = dfa_32;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "734:2: ( ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_0_2= ruleAsyncNoTrailingLineBreak FunctionImplParserRuleCall_1_0_3= ruleFunctionImpl ) | ( ( ( ruleN4Modifier ) )* ( ( ruleVariableStatementKeyword ) ) ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0= ruleExportedVariableDeclarationOrBinding ) ) (CommaKeyword_1_1_4_0= Comma ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0= ruleExportedVariableDeclarationOrBinding ) ) )* SemiParserRuleCall_1_1_5= ruleSemi ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsImplementsParserRuleCall_1_2_0_0_6= ruleClassExtendsImplements )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceExtendsListParserRuleCall_1_2_0_1_6= ruleInterfaceExtendsList )? ) ) MembersParserRuleCall_1_2_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_3_2= Enum ( (NameBindingIdentifierParserRuleCall_1_3_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_3_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_3_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_3_7= RightCurlyBracket ) )";
        }
    }
    static final String dfa_39s = "\14\uffff";
    static final String dfa_40s = "\4\uffff\10\1";
    static final String dfa_41s = "\1\12\1\uffff\1\4\1\uffff\1\4\7\12";
    static final String dfa_42s = "\1\100\1\uffff\1\176\1\uffff\10\u0098";
    static final String dfa_43s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_44s = "\14\uffff}>";
    static final String[] dfa_45s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\7\1\12\2\uffff\1\11\4\uffff\1\5\1\6\3\uffff\1\10\1\uffff\1\13\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\27\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1"
    };
    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[][] dfa_45 = unpackEncodedStringArray(dfa_45s);
    class DFA28 extends DFA {
        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "()* loopback of 746:4: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA38 extends DFA {
        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "780:4: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsImplementsParserRuleCall_1_2_0_0_6= ruleClassExtendsImplements )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceExtendsListParserRuleCall_1_2_0_1_6= ruleInterfaceExtendsList )? ) )";
        }
    }
    static final String dfa_46s = "\36\uffff";
    static final String dfa_47s = "\1\uffff\33\35\2\uffff";
    static final String dfa_48s = "\1\4\33\122\2\uffff";
    static final String dfa_49s = "\1\176\33\160\2\uffff";
    static final String dfa_50s = "\34\uffff\1\2\1\1";
    static final String dfa_51s = "\36\uffff}>";
    static final String[] dfa_52s = {
            "\1\21\1\14\1\26\1\34\1\23\1\27\1\31\1\10\2\34\1\7\4\34\1\30\1\6\3\34\1\32\1\34\1\11\1\34\1\16\1\34\1\25\1\24\7\34\1\20\1\34\1\2\1\22\3\34\1\13\3\34\1\17\2\34\4\uffff\1\34\1\3\1\5\1\34\1\33\1\4\2\34\21\uffff\1\12\3\34\1\15\47\uffff\1\1",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "",
            ""
    };
    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[][] dfa_52 = unpackEncodedStringArray(dfa_52s);
    class DFA49 extends DFA {
        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = dfa_46;
            this.eof = dfa_47;
            this.min = dfa_48;
            this.max = dfa_49;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_52;
        }
        public String getDescription() {
            return "1037:1: ( ( (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1= ruleBindingIdentifier ) ) | ( ( (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1= ruleIdentifierName ) ) AsKeyword_1_1= As ( (AliasBindingIdentifierParserRuleCall_1_2_0= ruleBindingIdentifier ) ) ) )";
        }
    }
    static final String dfa_53s = "\135\uffff";
    static final String dfa_54s = "\1\2\1\uffff\1\7\4\uffff\1\134\125\uffff";
    static final String dfa_55s = "\1\4\1\0\1\4\2\uffff\1\0\1\uffff\1\0\125\uffff";
    static final String dfa_56s = "\1\u0098\1\0\1\u0094\2\uffff\1\0\1\uffff\1\0\125\uffff";
    static final String dfa_57s = "\3\uffff\2\1\1\uffff\1\2\1\uffff\125\1";
    static final String dfa_58s = "\1\2\1\1\1\4\2\uffff\1\3\1\uffff\1\0\125\uffff}>";
    static final String[] dfa_59s = {
            "\3\6\1\uffff\11\6\2\uffff\16\6\1\uffff\23\6\4\uffff\10\6\5\uffff\1\6\1\uffff\2\6\6\uffff\1\6\1\uffff\3\6\1\uffff\1\6\2\uffff\1\6\2\uffff\1\6\2\uffff\1\6\1\uffff\1\6\1\uffff\1\6\1\uffff\1\1\1\6\3\uffff\2\6\2\uffff\1\6\1\uffff\1\5\1\6\3\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\6\2\uffff\1\6\11\uffff\2\6\7\uffff\1\6\1\uffff\1\4\1\uffff\1\3",
            "\1\uffff",
            "\1\50\1\43\1\54\1\uffff\1\52\1\23\1\14\1\17\1\120\1\127\1\16\1\31\1\132\2\uffff\1\12\1\13\1\103\1\26\1\25\1\15\1\122\1\20\1\124\1\45\1\105\1\30\1\53\1\121\1\uffff\1\22\1\21\1\73\1\61\1\125\1\47\1\116\1\36\1\51\1\133\1\131\1\24\1\42\1\75\1\60\1\72\1\46\1\104\1\123\4\uffff\1\117\1\37\1\33\1\57\1\55\1\40\1\126\1\32\5\uffff\1\106\1\uffff\1\107\1\77\6\uffff\1\10\1\uffff\1\41\1\115\1\114\1\uffff\1\44\2\uffff\1\113\2\uffff\1\56\2\uffff\1\110\1\uffff\1\111\1\uffff\1\76\1\uffff\1\34\1\62\3\uffff\1\11\1\100\2\uffff\1\27\1\uffff\1\130\1\112\3\uffff\1\63\1\uffff\1\70\1\65\1\66\1\67\1\uffff\1\71\1\uffff\1\35\2\uffff\1\74\11\uffff\1\102\1\101\7\uffff\1\64",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final short[][] dfa_59 = unpackEncodedStringArray(dfa_59s);
    class DFA52 extends DFA {
        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_58;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "1175:2: ( ( ruleSemi )=>SemiParserRuleCall_1= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_7 = input.LA(1);
                        int index52_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_7==EOF) && (synpred19_InternalN4JSParser())) {s = 92;}
                        input.seek(index52_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA52_1 = input.LA(1);
                        int index52_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSParser()) ) {s = 4;}
                        else if ( (true) ) {s = 6;}
                        input.seek(index52_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA52_0 = input.LA(1);
                        int index52_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_0==Semicolon) ) {s = 1;}
                        else if ( (LA52_0==EOF) ) {s = 2;}
                        else if ( (LA52_0==RULE_EOL) && (synpred19_InternalN4JSParser())) {s = 3;}
                        else if ( (LA52_0==RULE_ML_COMMENT) && (synpred19_InternalN4JSParser())) {s = 4;}
                        else if ( (LA52_0==RightCurlyBracket) ) {s = 5;}
                        else if ( ((LA52_0>=Intersection && LA52_0<=Implements)||(LA52_0>=Promisify && LA52_0<=Default)||(LA52_0>=Private && LA52_0<=Break)||(LA52_0>=Class && LA52_0<=With)||(LA52_0>=For && LA52_0<=Var)||LA52_0==PlusSignPlusSign||(LA52_0>=HyphenMinusHyphenMinus && LA52_0<=SolidusEqualsSign)||LA52_0==CommercialAtCommercialAt||(LA52_0>=As && LA52_0<=If)||LA52_0==Of||LA52_0==ExclamationMark||LA52_0==LeftParenthesis||LA52_0==PlusSign||LA52_0==HyphenMinus||LA52_0==Solidus||LA52_0==LessThanSign||(LA52_0>=CommercialAt && LA52_0<=LeftSquareBracket)||LA52_0==LeftCurlyBracket||LA52_0==Tilde||LA52_0==RULE_DOUBLE||(LA52_0>=RULE_HEX_INT && LA52_0<=RULE_LEGACY_OCTAL_INT)||LA52_0==RULE_SCIENTIFIC_INT||LA52_0==RULE_IDENTIFIER||LA52_0==RULE_STRING||(LA52_0>=RULE_TEMPLATE_HEAD && LA52_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA52_0==RULE_INT) ) {s = 6;}
                        input.seek(index52_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA52_5 = input.LA(1);
                        int index52_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSParser()) ) {s = 91;}
                        else if ( (true) ) {s = 6;}
                        input.seek(index52_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA52_2 = input.LA(1);
                        int index52_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_2==EOF) ) {s = 7;}
                        else if ((LA52_2>=-1 && LA52_2<=148 && (s=T2S.M_4[LA52_2-(-1)])>=0) && (synpred19_InternalN4JSParser())) { /* 85 cases */ }
                        input.seek(index52_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_60s = "\131\uffff";
    static final String dfa_61s = "\1\2\130\uffff";
    static final String dfa_62s = "\1\4\1\0\127\uffff";
    static final String dfa_63s = "\1\u0098\1\0\127\uffff";
    static final String dfa_64s = "\2\uffff\1\2\125\uffff\1\1";
    static final String dfa_65s = "\1\uffff\1\0\127\uffff}>";
    static final String[] dfa_66s = {
            "\3\2\1\uffff\11\2\2\uffff\16\2\1\uffff\23\2\4\uffff\10\2\5\uffff\1\2\1\uffff\2\2\6\uffff\1\2\1\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final char[] dfa_62 = DFA.unpackEncodedStringToUnsignedChars(dfa_62s);
    static final char[] dfa_63 = DFA.unpackEncodedStringToUnsignedChars(dfa_63s);
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final short[][] dfa_66 = unpackEncodedStringArray(dfa_66s);
    class DFA75 extends DFA {
        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "1451:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA75_1 = input.LA(1);
                        int index75_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_InternalN4JSParser()) ) {s = 88;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index75_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA76 extends DFA {
        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "1469:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA76_1 = input.LA(1);
                        int index76_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_InternalN4JSParser()) ) {s = 88;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index76_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_67s = "\100\uffff";
    static final String dfa_68s = "\1\4\1\0\76\uffff";
    static final String dfa_69s = "\1\u0094\1\0\76\uffff";
    static final String dfa_70s = "\2\uffff\1\2\74\uffff\1\1";
    static final String dfa_71s = "\1\uffff\1\0\76\uffff}>";
    static final String[] dfa_72s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\5\2\7\uffff\1\2\1\uffff\2\2\10\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final char[] dfa_68 = DFA.unpackEncodedStringToUnsignedChars(dfa_68s);
    static final char[] dfa_69 = DFA.unpackEncodedStringToUnsignedChars(dfa_69s);
    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final short[][] dfa_72 = unpackEncodedStringArray(dfa_72s);
    class DFA82 extends DFA {
        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1767:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA82_1 = input.LA(1);
                        int index82_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index82_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA86 extends DFA {
        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1916:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA86_1 = input.LA(1);
                        int index86_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index86_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA90 extends DFA {
        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "2065:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA90_1 = input.LA(1);
                        int index90_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index90_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 90, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA94 extends DFA {
        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "2214:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA94_1 = input.LA(1);
                        int index94_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index94_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 94, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_73s = "\121\uffff";
    static final String dfa_74s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\60\uffff";
    static final String dfa_75s = "\1\u0094\13\0\1\uffff\1\0\1\uffff\22\0\60\uffff";
    static final String dfa_76s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_77s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\60\uffff}>";
    static final String[] dfa_78s = {
            "\1\32\1\25\1\36\1\uffff\1\34\1\37\1\4\1\7\1\106\1\115\1\6\1\13\3\uffff\1\2\1\3\1\41\1\uffff\1\41\1\5\1\110\1\10\1\112\1\27\1\41\1\12\1\35\1\107\1\uffff\1\41\1\11\2\41\1\113\1\31\1\103\1\20\1\33\3\uffff\1\24\3\41\1\30\1\41\1\111\4\uffff\1\103\1\21\1\15\1\41\1\40\1\22\1\114\1\14\5\uffff\1\41\1\uffff\2\41\10\uffff\1\23\1\103\1\102\1\uffff\1\26\2\uffff\1\41\2\uffff\1\41\2\uffff\1\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\3\uffff\1\41\1\uffff\4\41\1\uffff\1\41\1\uffff\1\17\2\uffff\1\41\11\uffff\2\41\7\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final char[] dfa_74 = DFA.unpackEncodedStringToUnsignedChars(dfa_74s);
    static final char[] dfa_75 = DFA.unpackEncodedStringToUnsignedChars(dfa_75s);
    static final short[] dfa_76 = DFA.unpackEncodedString(dfa_76s);
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final short[][] dfa_78 = unpackEncodedStringArray(dfa_78s);
    class DFA123 extends DFA {
        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = dfa_73;
            this.eof = dfa_73;
            this.min = dfa_74;
            this.max = dfa_75;
            this.accept = dfa_76;
            this.special = dfa_77;
            this.transition = dfa_78;
        }
        public String getDescription() {
            return "2832:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= ruleBlock ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= ruleFunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm1_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= ruleLabelledStatement ) | ExpressionStatementParserRuleCall_5= ruleExpressionStatement | IfStatementParserRuleCall_6= ruleIfStatement | IterationStatementParserRuleCall_7= ruleIterationStatement | ContinueStatementParserRuleCall_8= ruleContinueStatement | BreakStatementParserRuleCall_9= ruleBreakStatement | ReturnStatementParserRuleCall_10= ruleReturnStatement | WithStatementParserRuleCall_11= ruleWithStatement | SwitchStatementParserRuleCall_12= ruleSwitchStatement | ThrowStatementParserRuleCall_13= ruleThrowStatement | TryStatementParserRuleCall_14= ruleTryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA123_0 = input.LA(1);
                        int index123_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA123_0>=10 && LA123_0<=110 && (s=T2S.M_5[LA123_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA123_0==Var) && (synpred64_InternalN4JSParser())) {s = 12;}
                        else if ((LA123_0>=4 && LA123_0<=126 && (s=T2S.M_6[LA123_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA123_0==Delete||LA123_0==Import||LA123_0==Typeof||LA123_0==Class||(LA123_0>=False && LA123_0<=Super)||(LA123_0>=Null && LA123_0<=True)||LA123_0==Void||LA123_0==New||LA123_0==PlusSignPlusSign||(LA123_0>=HyphenMinusHyphenMinus && LA123_0<=SolidusEqualsSign)||LA123_0==ExclamationMark||LA123_0==LeftParenthesis||LA123_0==PlusSign||LA123_0==HyphenMinus||LA123_0==Solidus||LA123_0==LessThanSign||(LA123_0>=CommercialAt && LA123_0<=LeftSquareBracket)||LA123_0==Tilde||LA123_0==RULE_DOUBLE||(LA123_0>=RULE_HEX_INT && LA123_0<=RULE_LEGACY_OCTAL_INT)||LA123_0==RULE_SCIENTIFIC_INT||LA123_0==RULE_STRING||(LA123_0>=RULE_TEMPLATE_HEAD && LA123_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA123_0==RULE_INT) ) {s = 33;}
                        else if ( (LA123_0==If) ) {s = 66;}
                        else if ( (LA123_0==While||LA123_0==For||LA123_0==Do) ) {s = 67;}
                        else if ( (LA123_0==Continue) ) {s = 70;}
                        else if ( (LA123_0==Break) ) {s = 71;}
                        else if ( (LA123_0==Return) ) {s = 72;}
                        else if ( (LA123_0==With) ) {s = 73;}
                        else if ( (LA123_0==Switch) ) {s = 74;}
                        else if ( (LA123_0==Throw) ) {s = 75;}
                        else if ( (LA123_0==Try) ) {s = 76;}
                        else if ( (LA123_0==Debugger) ) {s = 77;}
                        input.seek(index123_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA123_1 = input.LA(1);
                        int index123_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA123_2 = input.LA(1);
                        int index123_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA123_3 = input.LA(1);
                        int index123_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA123_4 = input.LA(1);
                        int index123_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA123_5 = input.LA(1);
                        int index123_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA123_6 = input.LA(1);
                        int index123_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA123_7 = input.LA(1);
                        int index123_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA123_8 = input.LA(1);
                        int index123_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA123_9 = input.LA(1);
                        int index123_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred64_InternalN4JSParser()) ) {s = 12;}
                        input.seek(index123_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA123_10 = input.LA(1);
                        int index123_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA123_11 = input.LA(1);
                        int index123_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA123_13 = input.LA(1);
                        int index123_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA123_15 = input.LA(1);
                        int index123_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA123_16 = input.LA(1);
                        int index123_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA123_17 = input.LA(1);
                        int index123_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA123_18 = input.LA(1);
                        int index123_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA123_19 = input.LA(1);
                        int index123_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA123_20 = input.LA(1);
                        int index123_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA123_21 = input.LA(1);
                        int index123_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA123_22 = input.LA(1);
                        int index123_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA123_23 = input.LA(1);
                        int index123_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA123_24 = input.LA(1);
                        int index123_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA123_25 = input.LA(1);
                        int index123_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA123_26 = input.LA(1);
                        int index123_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA123_27 = input.LA(1);
                        int index123_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA123_28 = input.LA(1);
                        int index123_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA123_29 = input.LA(1);
                        int index123_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA123_30 = input.LA(1);
                        int index123_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA123_31 = input.LA(1);
                        int index123_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA123_32 = input.LA(1);
                        int index123_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index123_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_79s = "\1\4\13\0\1\uffff\1\0\1\uffff\21\0\61\uffff";
    static final String dfa_80s = "\1\u0094\13\0\1\uffff\1\0\1\uffff\21\0\61\uffff";
    static final String dfa_81s = "\14\uffff\1\3\1\uffff\1\4\21\uffff\1\6\41\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_82s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\61\uffff}>";
    static final String[] dfa_83s = {
            "\1\31\1\24\1\35\1\uffff\1\33\1\36\1\4\1\7\1\106\1\115\1\6\1\13\3\uffff\1\2\1\3\1\40\1\uffff\1\40\1\5\1\110\1\10\1\112\1\26\1\40\1\12\1\34\1\107\1\uffff\1\40\1\11\2\40\1\113\1\30\1\103\1\40\1\32\3\uffff\1\23\3\40\1\27\1\40\1\111\4\uffff\1\103\1\20\1\15\1\40\1\37\1\21\1\114\1\14\5\uffff\1\40\1\uffff\2\40\10\uffff\1\22\1\103\1\102\1\uffff\1\25\2\uffff\1\40\2\uffff\1\40\2\uffff\1\40\1\uffff\1\40\1\uffff\1\40\1\uffff\1\16\1\40\3\uffff\2\40\2\uffff\1\1\2\uffff\1\40\3\uffff\1\40\1\uffff\4\40\1\uffff\1\40\1\uffff\1\17\2\uffff\1\40\11\uffff\2\40\7\uffff\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_79 = DFA.unpackEncodedStringToUnsignedChars(dfa_79s);
    static final char[] dfa_80 = DFA.unpackEncodedStringToUnsignedChars(dfa_80s);
    static final short[] dfa_81 = DFA.unpackEncodedString(dfa_81s);
    static final short[] dfa_82 = DFA.unpackEncodedString(dfa_82s);
    static final short[][] dfa_83 = unpackEncodedStringArray(dfa_83s);
    class DFA124 extends DFA {
        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = dfa_73;
            this.eof = dfa_73;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_81;
            this.special = dfa_82;
            this.transition = dfa_83;
        }
        public String getDescription() {
            return "2911:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= norm1_Block ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= norm1_FunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm3_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= norm1_LabelledStatement ) | ExpressionStatementParserRuleCall_5= norm1_ExpressionStatement | IfStatementParserRuleCall_6= norm1_IfStatement | IterationStatementParserRuleCall_7= norm1_IterationStatement | ContinueStatementParserRuleCall_8= norm1_ContinueStatement | BreakStatementParserRuleCall_9= norm1_BreakStatement | ReturnStatementParserRuleCall_10= norm1_ReturnStatement | WithStatementParserRuleCall_11= norm1_WithStatement | SwitchStatementParserRuleCall_12= norm1_SwitchStatement | ThrowStatementParserRuleCall_13= norm1_ThrowStatement | TryStatementParserRuleCall_14= norm1_TryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_0 = input.LA(1);
                        int index124_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA124_0>=10 && LA124_0<=110 && (s=T2S.M_5[LA124_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA124_0==Var) && (synpred68_InternalN4JSParser())) {s = 12;}
                        else if ((LA124_0>=4 && LA124_0<=126 && (s=T2S.M_8[LA124_0-(4)])>=0)) { /* 20 cases */ }
                        else if ( (LA124_0==Delete||LA124_0==Import||LA124_0==Typeof||LA124_0==Class||(LA124_0>=False && LA124_0<=Super)||LA124_0==Yield||(LA124_0>=Null && LA124_0<=True)||LA124_0==Void||LA124_0==New||LA124_0==PlusSignPlusSign||(LA124_0>=HyphenMinusHyphenMinus && LA124_0<=SolidusEqualsSign)||LA124_0==ExclamationMark||LA124_0==LeftParenthesis||LA124_0==PlusSign||LA124_0==HyphenMinus||LA124_0==Solidus||LA124_0==LessThanSign||(LA124_0>=CommercialAt && LA124_0<=LeftSquareBracket)||LA124_0==Tilde||LA124_0==RULE_DOUBLE||(LA124_0>=RULE_HEX_INT && LA124_0<=RULE_LEGACY_OCTAL_INT)||LA124_0==RULE_SCIENTIFIC_INT||LA124_0==RULE_STRING||(LA124_0>=RULE_TEMPLATE_HEAD && LA124_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA124_0==RULE_INT) ) {s = 32;}
                        else if ( (LA124_0==If) ) {s = 66;}
                        else if ( (LA124_0==While||LA124_0==For||LA124_0==Do) ) {s = 67;}
                        else if ( (LA124_0==Continue) ) {s = 70;}
                        else if ( (LA124_0==Break) ) {s = 71;}
                        else if ( (LA124_0==Return) ) {s = 72;}
                        else if ( (LA124_0==With) ) {s = 73;}
                        else if ( (LA124_0==Switch) ) {s = 74;}
                        else if ( (LA124_0==Throw) ) {s = 75;}
                        else if ( (LA124_0==Try) ) {s = 76;}
                        else if ( (LA124_0==Debugger) ) {s = 77;}
                        input.seek(index124_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA124_1 = input.LA(1);
                        int index124_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA124_2 = input.LA(1);
                        int index124_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA124_3 = input.LA(1);
                        int index124_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA124_4 = input.LA(1);
                        int index124_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA124_5 = input.LA(1);
                        int index124_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA124_6 = input.LA(1);
                        int index124_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA124_7 = input.LA(1);
                        int index124_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA124_8 = input.LA(1);
                        int index124_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA124_9 = input.LA(1);
                        int index124_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred68_InternalN4JSParser()) ) {s = 12;}
                        input.seek(index124_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA124_10 = input.LA(1);
                        int index124_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA124_11 = input.LA(1);
                        int index124_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA124_13 = input.LA(1);
                        int index124_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA124_15 = input.LA(1);
                        int index124_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA124_16 = input.LA(1);
                        int index124_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA124_17 = input.LA(1);
                        int index124_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA124_18 = input.LA(1);
                        int index124_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA124_19 = input.LA(1);
                        int index124_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA124_20 = input.LA(1);
                        int index124_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA124_21 = input.LA(1);
                        int index124_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA124_22 = input.LA(1);
                        int index124_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA124_23 = input.LA(1);
                        int index124_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA124_24 = input.LA(1);
                        int index124_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA124_25 = input.LA(1);
                        int index124_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA124_26 = input.LA(1);
                        int index124_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA124_27 = input.LA(1);
                        int index124_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA124_28 = input.LA(1);
                        int index124_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA124_29 = input.LA(1);
                        int index124_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA124_30 = input.LA(1);
                        int index124_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA124_31 = input.LA(1);
                        int index124_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index124_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_84s = "\117\uffff";
    static final String dfa_85s = "\1\4\1\0\115\uffff";
    static final String dfa_86s = "\1\u0094\1\0\115\uffff";
    static final String dfa_87s = "\2\uffff\1\2\113\uffff\1\1";
    static final String dfa_88s = "\1\uffff\1\0\115\uffff}>";
    static final String[] dfa_89s = {
            "\3\2\1\uffff\10\2\3\uffff\3\2\1\uffff\12\2\1\uffff\11\2\3\uffff\7\2\4\uffff\10\2\5\uffff\1\2\1\uffff\2\2\10\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final char[] dfa_85 = DFA.unpackEncodedStringToUnsignedChars(dfa_85s);
    static final char[] dfa_86 = DFA.unpackEncodedStringToUnsignedChars(dfa_86s);
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final short[][] dfa_89 = unpackEncodedStringArray(dfa_89s);
    class DFA125 extends DFA {
        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_85;
            this.max = dfa_86;
            this.accept = dfa_87;
            this.special = dfa_88;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "2995:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= ruleAnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA125_1 = input.LA(1);
                        int index125_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index125_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 125, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA126 extends DFA {
        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_85;
            this.max = dfa_86;
            this.accept = dfa_87;
            this.special = dfa_88;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "3020:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= norm1_AnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA126_1 = input.LA(1);
                        int index126_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index126_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_90s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\12\1\7\2\uffff\1\6\4\uffff\1\11\1\5\3\uffff\1\13\1\uffff\1\10\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\27\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1"
    };
    static final short[][] dfa_90 = unpackEncodedStringArray(dfa_90s);
    class DFA129 extends DFA {
        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_90;
        }
        public String getDescription() {
            return "()* loopback of 3145:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_91s = "\35\uffff";
    static final String dfa_92s = "\1\4\34\uffff";
    static final String dfa_93s = "\1\176\34\uffff";
    static final String dfa_94s = "\1\uffff\33\2\1\1";
    static final String dfa_95s = "\1\0\34\uffff}>";
    static final String[] dfa_96s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\1\34\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_91 = DFA.unpackEncodedString(dfa_91s);
    static final char[] dfa_92 = DFA.unpackEncodedStringToUnsignedChars(dfa_92s);
    static final char[] dfa_93 = DFA.unpackEncodedStringToUnsignedChars(dfa_93s);
    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final short[] dfa_95 = DFA.unpackEncodedString(dfa_95s);
    static final short[][] dfa_96 = unpackEncodedStringArray(dfa_96s);
    class DFA141 extends DFA {
        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_92;
            this.max = dfa_93;
            this.accept = dfa_94;
            this.special = dfa_95;
            this.transition = dfa_96;
        }
        public String getDescription() {
            return "()* loopback of 3627:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_0 = input.LA(1);
                        int index141_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA141_0>=4 && LA141_0<=126 && (s=T2S.M_9[LA141_0-(4)])>=0) && (synpred88_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA141_0==CommercialAt) ) {s = 28;}
                        input.seek(index141_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA143 extends DFA {
        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_92;
            this.max = dfa_93;
            this.accept = dfa_94;
            this.special = dfa_95;
            this.transition = dfa_96;
        }
        public String getDescription() {
            return "()* loopback of 3673:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_0 = input.LA(1);
                        int index143_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA143_0>=4 && LA143_0<=126 && (s=T2S.M_9[LA143_0-(4)])>=0) && (synpred89_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA143_0==CommercialAt) ) {s = 28;}
                        input.seek(index143_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_97s = "\34\uffff";
    static final String dfa_98s = "\1\4\33\uffff";
    static final String dfa_99s = "\1\176\33\uffff";
    static final String dfa_100s = "\1\uffff\32\2\1\1";
    static final String dfa_101s = "\1\0\33\uffff}>";
    static final String[] dfa_102s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\1\33\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_97 = DFA.unpackEncodedString(dfa_97s);
    static final char[] dfa_98 = DFA.unpackEncodedStringToUnsignedChars(dfa_98s);
    static final char[] dfa_99 = DFA.unpackEncodedStringToUnsignedChars(dfa_99s);
    static final short[] dfa_100 = DFA.unpackEncodedString(dfa_100s);
    static final short[] dfa_101 = DFA.unpackEncodedString(dfa_101s);
    static final short[][] dfa_102 = unpackEncodedStringArray(dfa_102s);
    class DFA145 extends DFA {
        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = dfa_97;
            this.eof = dfa_97;
            this.min = dfa_98;
            this.max = dfa_99;
            this.accept = dfa_100;
            this.special = dfa_101;
            this.transition = dfa_102;
        }
        public String getDescription() {
            return "()* loopback of 3719:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA145_0 = input.LA(1);
                        int index145_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA145_0>=4 && LA145_0<=126 && (s=T2S.M_11[LA145_0-(4)])>=0) && (synpred90_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA145_0==CommercialAt) ) {s = 27;}
                        input.seek(index145_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA147 extends DFA {
        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = dfa_97;
            this.eof = dfa_97;
            this.min = dfa_98;
            this.max = dfa_99;
            this.accept = dfa_100;
            this.special = dfa_101;
            this.transition = dfa_102;
        }
        public String getDescription() {
            return "()* loopback of 3765:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_0 = input.LA(1);
                        int index147_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA147_0>=4 && LA147_0<=126 && (s=T2S.M_11[LA147_0-(4)])>=0) && (synpred91_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA147_0==CommercialAt) ) {s = 27;}
                        input.seek(index147_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA149 extends DFA {
        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_92;
            this.max = dfa_93;
            this.accept = dfa_94;
            this.special = dfa_95;
            this.transition = dfa_96;
        }
        public String getDescription() {
            return "()* loopback of 3811:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_0 = input.LA(1);
                        int index149_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA149_0>=4 && LA149_0<=126 && (s=T2S.M_9[LA149_0-(4)])>=0) && (synpred92_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA149_0==CommercialAt) ) {s = 28;}
                        input.seek(index149_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA152 extends DFA {
        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_92;
            this.max = dfa_93;
            this.accept = dfa_94;
            this.special = dfa_95;
            this.transition = dfa_96;
        }
        public String getDescription() {
            return "()* loopback of 3867:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA152_0 = input.LA(1);
                        int index152_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA152_0>=4 && LA152_0<=126 && (s=T2S.M_9[LA152_0-(4)])>=0) && (synpred93_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA152_0==CommercialAt) ) {s = 28;}
                        input.seek(index152_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA155 extends DFA {
        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = dfa_97;
            this.eof = dfa_97;
            this.min = dfa_98;
            this.max = dfa_99;
            this.accept = dfa_100;
            this.special = dfa_101;
            this.transition = dfa_102;
        }
        public String getDescription() {
            return "()* loopback of 3923:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_0 = input.LA(1);
                        int index155_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA155_0>=4 && LA155_0<=126 && (s=T2S.M_11[LA155_0-(4)])>=0) && (synpred94_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA155_0==CommercialAt) ) {s = 27;}
                        input.seek(index155_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA158 extends DFA {
        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = dfa_97;
            this.eof = dfa_97;
            this.min = dfa_98;
            this.max = dfa_99;
            this.accept = dfa_100;
            this.special = dfa_101;
            this.transition = dfa_102;
        }
        public String getDescription() {
            return "()* loopback of 3979:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA158_0 = input.LA(1);
                        int index158_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA158_0>=4 && LA158_0<=126 && (s=T2S.M_11[LA158_0-(4)])>=0) && (synpred95_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA158_0==CommercialAt) ) {s = 27;}
                        input.seek(index158_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_103s = "\1\2\1\3\1\1\2\uffff\1\0\1\uffff\1\4\125\uffff}>";
    static final short[] dfa_103 = DFA.unpackEncodedString(dfa_103s);
    class DFA167 extends DFA {
        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_103;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "4402:2: ( ( ruleSemi )=>SemiParserRuleCall_6= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA167_5 = input.LA(1);
                        int index167_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_InternalN4JSParser()) ) {s = 91;}
                        else if ( (true) ) {s = 6;}
                        input.seek(index167_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA167_2 = input.LA(1);
                        int index167_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_2==EOF) ) {s = 7;}
                        else if ((LA167_2>=-1 && LA167_2<=148 && (s=T2S.M_4[LA167_2-(-1)])>=0) && (synpred102_InternalN4JSParser())) { /* 85 cases */ }
                        input.seek(index167_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA167_0 = input.LA(1);
                        int index167_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_0==Semicolon) ) {s = 1;}
                        else if ( (LA167_0==EOF) ) {s = 2;}
                        else if ( (LA167_0==RULE_EOL) && (synpred102_InternalN4JSParser())) {s = 3;}
                        else if ( (LA167_0==RULE_ML_COMMENT) && (synpred102_InternalN4JSParser())) {s = 4;}
                        else if ( (LA167_0==RightCurlyBracket) ) {s = 5;}
                        else if ( ((LA167_0>=Intersection && LA167_0<=Implements)||(LA167_0>=Promisify && LA167_0<=Default)||(LA167_0>=Private && LA167_0<=Break)||(LA167_0>=Class && LA167_0<=With)||(LA167_0>=For && LA167_0<=Var)||LA167_0==PlusSignPlusSign||(LA167_0>=HyphenMinusHyphenMinus && LA167_0<=SolidusEqualsSign)||LA167_0==CommercialAtCommercialAt||(LA167_0>=As && LA167_0<=If)||LA167_0==Of||LA167_0==ExclamationMark||LA167_0==LeftParenthesis||LA167_0==PlusSign||LA167_0==HyphenMinus||LA167_0==Solidus||LA167_0==LessThanSign||(LA167_0>=CommercialAt && LA167_0<=LeftSquareBracket)||LA167_0==LeftCurlyBracket||LA167_0==Tilde||LA167_0==RULE_DOUBLE||(LA167_0>=RULE_HEX_INT && LA167_0<=RULE_LEGACY_OCTAL_INT)||LA167_0==RULE_SCIENTIFIC_INT||LA167_0==RULE_IDENTIFIER||LA167_0==RULE_STRING||(LA167_0>=RULE_TEMPLATE_HEAD && LA167_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA167_0==RULE_INT) ) {s = 6;}
                        input.seek(index167_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA167_1 = input.LA(1);
                        int index167_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_InternalN4JSParser()) ) {s = 4;}
                        else if ( (true) ) {s = 6;}
                        input.seek(index167_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA167_7 = input.LA(1);
                        int index167_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_7==EOF) && (synpred102_InternalN4JSParser())) {s = 92;}
                        input.seek(index167_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 167, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_104s = "\103\uffff";
    static final String dfa_105s = "\1\4\1\0\101\uffff";
    static final String dfa_106s = "\1\u0094\1\0\101\uffff";
    static final String dfa_107s = "\2\uffff\1\2\77\uffff\1\1";
    static final String dfa_108s = "\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_109s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\3\2\1\uffff\1\2\5\uffff\1\2\1\uffff\2\2\10\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_104 = DFA.unpackEncodedString(dfa_104s);
    static final char[] dfa_105 = DFA.unpackEncodedStringToUnsignedChars(dfa_105s);
    static final char[] dfa_106 = DFA.unpackEncodedStringToUnsignedChars(dfa_106s);
    static final short[] dfa_107 = DFA.unpackEncodedString(dfa_107s);
    static final short[] dfa_108 = DFA.unpackEncodedString(dfa_108s);
    static final short[][] dfa_109 = unpackEncodedStringArray(dfa_109s);
    class DFA186 extends DFA {
        public DFA186(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = dfa_104;
            this.eof = dfa_104;
            this.min = dfa_105;
            this.max = dfa_106;
            this.accept = dfa_107;
            this.special = dfa_108;
            this.transition = dfa_109;
        }
        public String getDescription() {
            return "4546:2: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm1_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA186_1 = input.LA(1);
                        int index186_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index186_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 186, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_110s = "\1\4\2\uffff\1\0\76\uffff";
    static final String dfa_111s = "\1\u0094\2\uffff\1\0\76\uffff";
    static final String dfa_112s = "\1\uffff\2\1\1\uffff\1\2\74\uffff\1\3";
    static final String dfa_113s = "\1\0\2\uffff\1\1\76\uffff}>";
    static final String[] dfa_114s = {
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\3\4\1\uffff\1\1\5\uffff\1\4\1\uffff\2\4\10\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\101\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\7\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_110 = DFA.unpackEncodedStringToUnsignedChars(dfa_110s);
    static final char[] dfa_111 = DFA.unpackEncodedStringToUnsignedChars(dfa_111s);
    static final short[] dfa_112 = DFA.unpackEncodedString(dfa_112s);
    static final short[] dfa_113 = DFA.unpackEncodedString(dfa_113s);
    static final short[][] dfa_114 = unpackEncodedStringArray(dfa_114s);
    class DFA185 extends DFA {
        public DFA185(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 185;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_110;
            this.max = dfa_111;
            this.accept = dfa_112;
            this.special = dfa_113;
            this.transition = dfa_114;
        }
        public String getDescription() {
            return "4598:4: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA185_0 = input.LA(1);
                        int index185_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_0==Var) && (synpred105_InternalN4JSParser())) {s = 1;}
                        else if ( (LA185_0==Const) && (synpred105_InternalN4JSParser())) {s = 2;}
                        else if ( (LA185_0==Let) ) {s = 3;}
                        else if ( ((LA185_0>=Intersection && LA185_0<=Implements)||(LA185_0>=Promisify && LA185_0<=Abstract)||(LA185_0>=External && LA185_0<=Function)||(LA185_0>=Private && LA185_0<=Delete)||(LA185_0>=Import && LA185_0<=Public)||LA185_0==Static||(LA185_0>=Target && LA185_0<=Await)||LA185_0==Class||(LA185_0>=False && LA185_0<=Super)||LA185_0==Union||(LA185_0>=Yield && LA185_0<=This)||(LA185_0>=From && LA185_0<=Void)||LA185_0==Get||(LA185_0>=New && LA185_0<=Set)||LA185_0==PlusSignPlusSign||(LA185_0>=HyphenMinusHyphenMinus && LA185_0<=SolidusEqualsSign)||LA185_0==As||LA185_0==Of||LA185_0==ExclamationMark||LA185_0==LeftParenthesis||LA185_0==PlusSign||LA185_0==HyphenMinus||LA185_0==Solidus||LA185_0==LessThanSign||(LA185_0>=CommercialAt && LA185_0<=LeftSquareBracket)||LA185_0==LeftCurlyBracket||LA185_0==Tilde||LA185_0==RULE_DOUBLE||(LA185_0>=RULE_HEX_INT && LA185_0<=RULE_LEGACY_OCTAL_INT)||LA185_0==RULE_SCIENTIFIC_INT||LA185_0==RULE_IDENTIFIER||LA185_0==RULE_STRING||(LA185_0>=RULE_TEMPLATE_HEAD && LA185_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA185_0==RULE_INT) ) {s = 4;}
                        else if ( (LA185_0==Semicolon) ) {s = 65;}
                        input.seek(index185_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA185_3 = input.LA(1);
                        int index185_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 4;}
                        input.seek(index185_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 185, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_115s = "\40\uffff";
    static final String dfa_116s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_117s = "\1\176\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_118s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_119s = "\35\uffff\1\0\1\1\1\uffff}>";
    static final String[] dfa_120s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\2\34\2\uffff\1\34\17\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_115 = DFA.unpackEncodedString(dfa_115s);
    static final char[] dfa_116 = DFA.unpackEncodedStringToUnsignedChars(dfa_116s);
    static final char[] dfa_117 = DFA.unpackEncodedStringToUnsignedChars(dfa_117s);
    static final short[] dfa_118 = DFA.unpackEncodedString(dfa_118s);
    static final short[] dfa_119 = DFA.unpackEncodedString(dfa_119s);
    static final short[][] dfa_120 = unpackEncodedStringArray(dfa_120s);
    class DFA177 extends DFA {
        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = dfa_115;
            this.eof = dfa_115;
            this.min = dfa_116;
            this.max = dfa_117;
            this.accept = dfa_118;
            this.special = dfa_119;
            this.transition = dfa_120;
        }
        public String getDescription() {
            return "4609:6: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA177_29 = input.LA(1);
                        int index177_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_InternalN4JSParser()) ) {s = 31;}
                        else if ( (true) ) {s = 28;}
                        input.seek(index177_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA177_30 = input.LA(1);
                        int index177_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_InternalN4JSParser()) ) {s = 31;}
                        else if ( (true) ) {s = 28;}
                        input.seek(index177_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 177, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_121s = "\1\4\77\uffff";
    static final String dfa_122s = "\1\u0094\77\uffff";
    static final String dfa_123s = "\1\uffff\76\1\1\2";
    static final String dfa_124s = "\1\0\77\uffff}>";
    static final String[] dfa_125s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\62\3\uffff\1\32\1\12\1\66\1\uffff\1\42\1\34\1\uffff\1\15\1\uffff\1\22\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\1\55\1\37\1\52\1\23\1\67\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\71\1\uffff\1\72\1\57\10\uffff\1\16\3\uffff\1\21\2\uffff\1\76\2\uffff\1\3\1\77\1\uffff\1\73\1\uffff\1\74\1\uffff\1\56\2\uffff\1\41\3\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\11\uffff\1\65\1\64\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_121 = DFA.unpackEncodedStringToUnsignedChars(dfa_121s);
    static final char[] dfa_122 = DFA.unpackEncodedStringToUnsignedChars(dfa_122s);
    static final short[] dfa_123 = DFA.unpackEncodedString(dfa_123s);
    static final short[] dfa_124 = DFA.unpackEncodedString(dfa_124s);
    static final short[][] dfa_125 = unpackEncodedStringArray(dfa_125s);
    class DFA170 extends DFA {
        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_121;
            this.max = dfa_122;
            this.accept = dfa_123;
            this.special = dfa_124;
            this.transition = dfa_125;
        }
        public String getDescription() {
            return "4784:9: ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_0 = input.LA(1);
                        int index170_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA170_0>=4 && LA170_0<=148 && (s=T2S.M_18[LA170_0-(4)])>=0) && (synpred107_InternalN4JSParser())) { /* 62 cases */ }
                        else if ( (LA170_0==RightParenthesis) ) {s = 63;}
                        input.seek(index170_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA204 extends DFA {
        public DFA204(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 204;
            this.eot = dfa_104;
            this.eof = dfa_104;
            this.min = dfa_105;
            this.max = dfa_106;
            this.accept = dfa_107;
            this.special = dfa_108;
            this.transition = dfa_109;
        }
        public String getDescription() {
            return "5060:2: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm3_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA204_1 = input.LA(1);
                        int index204_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index204_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 204, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA203 extends DFA {
        public DFA203(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 203;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_110;
            this.max = dfa_111;
            this.accept = dfa_112;
            this.special = dfa_113;
            this.transition = dfa_114;
        }
        public String getDescription() {
            return "5112:4: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA203_0 = input.LA(1);
                        int index203_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA203_0==Var) && (synpred109_InternalN4JSParser())) {s = 1;}
                        else if ( (LA203_0==Const) && (synpred109_InternalN4JSParser())) {s = 2;}
                        else if ( (LA203_0==Let) ) {s = 3;}
                        else if ( ((LA203_0>=Intersection && LA203_0<=Implements)||(LA203_0>=Promisify && LA203_0<=Abstract)||(LA203_0>=External && LA203_0<=Function)||(LA203_0>=Private && LA203_0<=Delete)||(LA203_0>=Import && LA203_0<=Public)||LA203_0==Static||(LA203_0>=Target && LA203_0<=Await)||LA203_0==Class||(LA203_0>=False && LA203_0<=Super)||LA203_0==Union||(LA203_0>=Yield && LA203_0<=This)||(LA203_0>=From && LA203_0<=Void)||LA203_0==Get||(LA203_0>=New && LA203_0<=Set)||LA203_0==PlusSignPlusSign||(LA203_0>=HyphenMinusHyphenMinus && LA203_0<=SolidusEqualsSign)||LA203_0==As||LA203_0==Of||LA203_0==ExclamationMark||LA203_0==LeftParenthesis||LA203_0==PlusSign||LA203_0==HyphenMinus||LA203_0==Solidus||LA203_0==LessThanSign||(LA203_0>=CommercialAt && LA203_0<=LeftSquareBracket)||LA203_0==LeftCurlyBracket||LA203_0==Tilde||LA203_0==RULE_DOUBLE||(LA203_0>=RULE_HEX_INT && LA203_0<=RULE_LEGACY_OCTAL_INT)||LA203_0==RULE_SCIENTIFIC_INT||LA203_0==RULE_IDENTIFIER||LA203_0==RULE_STRING||(LA203_0>=RULE_TEMPLATE_HEAD && LA203_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA203_0==RULE_INT) ) {s = 4;}
                        else if ( (LA203_0==Semicolon) ) {s = 65;}
                        input.seek(index203_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA203_3 = input.LA(1);
                        int index203_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 4;}
                        input.seek(index203_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 203, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_126s = "\37\uffff";
    static final String dfa_127s = "\1\4\32\125\1\uffff\2\0\1\uffff";
    static final String dfa_128s = "\1\176\32\147\1\uffff\2\0\1\uffff";
    static final String dfa_129s = "\33\uffff\1\2\2\uffff\1\1";
    static final String dfa_130s = "\34\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_131s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\2\33\2\uffff\1\33\17\uffff\1\1",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_126 = DFA.unpackEncodedString(dfa_126s);
    static final char[] dfa_127 = DFA.unpackEncodedStringToUnsignedChars(dfa_127s);
    static final char[] dfa_128 = DFA.unpackEncodedStringToUnsignedChars(dfa_128s);
    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final short[] dfa_130 = DFA.unpackEncodedString(dfa_130s);
    static final short[][] dfa_131 = unpackEncodedStringArray(dfa_131s);
    class DFA195 extends DFA {
        public DFA195(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 195;
            this.eot = dfa_126;
            this.eof = dfa_126;
            this.min = dfa_127;
            this.max = dfa_128;
            this.accept = dfa_129;
            this.special = dfa_130;
            this.transition = dfa_131;
        }
        public String getDescription() {
            return "5123:6: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA195_29 = input.LA(1);
                        int index195_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 30;}
                        else if ( (true) ) {s = 27;}
                        input.seek(index195_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA195_28 = input.LA(1);
                        int index195_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 30;}
                        else if ( (true) ) {s = 27;}
                        input.seek(index195_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 195, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_132s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\62\3\uffff\1\31\1\11\1\66\1\uffff\1\42\1\33\1\uffff\1\14\1\uffff\1\21\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\55\1\37\1\52\1\22\1\67\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\71\1\uffff\1\72\1\57\10\uffff\1\15\3\uffff\1\20\2\uffff\1\76\2\uffff\1\3\1\77\1\uffff\1\73\1\uffff\1\74\1\uffff\1\56\2\uffff\1\41\3\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\11\uffff\1\65\1\64\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_132 = unpackEncodedStringArray(dfa_132s);
    class DFA188 extends DFA {
        public DFA188(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 188;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_121;
            this.max = dfa_122;
            this.accept = dfa_123;
            this.special = dfa_124;
            this.transition = dfa_132;
        }
        public String getDescription() {
            return "5298:9: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA188_0 = input.LA(1);
                        int index188_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA188_0>=4 && LA188_0<=148 && (s=T2S.M_19[LA188_0-(4)])>=0) && (synpred111_InternalN4JSParser())) { /* 62 cases */ }
                        else if ( (LA188_0==RightParenthesis) ) {s = 63;}
                        input.seek(index188_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 188, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_133s = "\3\uffff\33\36\2\uffff";
    static final String dfa_134s = "\1\4\2\uffff\33\135\2\uffff";
    static final String dfa_135s = "\1\176\2\uffff\33\144\2\uffff";
    static final String dfa_136s = "\1\uffff\2\1\33\uffff\1\3\1\2";
    static final String dfa_137s = "\1\16\2\uffff\1\25\1\7\1\0\1\10\1\17\1\26\1\1\1\11\1\20\1\27\1\2\1\12\1\21\1\30\1\3\1\13\1\22\1\31\1\4\1\14\1\23\1\32\1\5\1\15\1\24\1\33\1\6\2\uffff}>";
    static final String[] dfa_138s = {
            "\1\23\1\16\1\30\1\uffff\1\25\1\31\1\33\1\12\2\uffff\1\11\4\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\27\1\26\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\3\uffff\1\21\7\uffff\1\5\1\7\1\uffff\1\35\1\6\23\uffff\1\14\3\uffff\1\17\24\uffff\1\2\2\uffff\1\1\17\uffff\1\3",
            "",
            "",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "",
            ""
    };
    static final short[] dfa_133 = DFA.unpackEncodedString(dfa_133s);
    static final char[] dfa_134 = DFA.unpackEncodedStringToUnsignedChars(dfa_134s);
    static final char[] dfa_135 = DFA.unpackEncodedStringToUnsignedChars(dfa_135s);
    static final short[] dfa_136 = DFA.unpackEncodedString(dfa_136s);
    static final short[] dfa_137 = DFA.unpackEncodedString(dfa_137s);
    static final short[][] dfa_138 = unpackEncodedStringArray(dfa_138s);
    class DFA225 extends DFA {
        public DFA225(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 225;
            this.eot = dfa_115;
            this.eof = dfa_133;
            this.min = dfa_134;
            this.max = dfa_135;
            this.accept = dfa_136;
            this.special = dfa_137;
            this.transition = dfa_138;
        }
        public String getDescription() {
            return "6425:1: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= ruleBindingIdentifier ) ) ( ( Colon )=>ColonSepDeclaredTypeRefParserRuleCall_1_0_1= ruleColonSepDeclaredTypeRef ) ) ) | ( (NameBindingIdentifierParserRuleCall_2_0= ruleBindingIdentifier ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA225_5 = input.LA(1);
                        int index225_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_5==EOF||LA225_5==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_5==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA225_9 = input.LA(1);
                        int index225_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_9==EOF||LA225_9==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_9==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA225_13 = input.LA(1);
                        int index225_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_13==EOF||LA225_13==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_13==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA225_17 = input.LA(1);
                        int index225_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_17==EOF||LA225_17==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_17==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA225_21 = input.LA(1);
                        int index225_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_21==EOF||LA225_21==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_21==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA225_25 = input.LA(1);
                        int index225_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_25==EOF||LA225_25==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_25==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_25);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA225_29 = input.LA(1);
                        int index225_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_29==EOF||LA225_29==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_29==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_29);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA225_4 = input.LA(1);
                        int index225_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_4==EOF||LA225_4==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_4==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA225_6 = input.LA(1);
                        int index225_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_6==EOF||LA225_6==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_6==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_6);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA225_10 = input.LA(1);
                        int index225_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_10==EOF||LA225_10==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_10==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA225_14 = input.LA(1);
                        int index225_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_14==EOF||LA225_14==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_14==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_14);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA225_18 = input.LA(1);
                        int index225_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_18==EOF||LA225_18==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_18==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA225_22 = input.LA(1);
                        int index225_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_22==EOF||LA225_22==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_22==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA225_26 = input.LA(1);
                        int index225_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_26==EOF||LA225_26==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_26==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_26);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA225_0 = input.LA(1);
                        int index225_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_0==LeftCurlyBracket) && (synpred118_InternalN4JSParser())) {s = 1;}
                        else if ( (LA225_0==LeftSquareBracket) && (synpred118_InternalN4JSParser())) {s = 2;}
                        else if ((LA225_0>=4 && LA225_0<=126 && (s=T2S.M_20[LA225_0-(4)])>=0)) { /* 27 cases */ }
                        input.seek(index225_0);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA225_7 = input.LA(1);
                        int index225_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_7==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        else if ( (LA225_7==EOF||LA225_7==RightParenthesis) ) {s = 30;}
                        input.seek(index225_7);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA225_11 = input.LA(1);
                        int index225_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_11==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        else if ( (LA225_11==EOF||LA225_11==RightParenthesis) ) {s = 30;}
                        input.seek(index225_11);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA225_15 = input.LA(1);
                        int index225_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_15==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        else if ( (LA225_15==EOF||LA225_15==RightParenthesis) ) {s = 30;}
                        input.seek(index225_15);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA225_19 = input.LA(1);
                        int index225_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_19==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        else if ( (LA225_19==EOF||LA225_19==RightParenthesis) ) {s = 30;}
                        input.seek(index225_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA225_23 = input.LA(1);
                        int index225_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_23==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        else if ( (LA225_23==EOF||LA225_23==RightParenthesis) ) {s = 30;}
                        input.seek(index225_23);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA225_27 = input.LA(1);
                        int index225_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_27==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        else if ( (LA225_27==EOF||LA225_27==RightParenthesis) ) {s = 30;}
                        input.seek(index225_27);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA225_3 = input.LA(1);
                        int index225_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_3==EOF||LA225_3==RightParenthesis) ) {s = 30;}
                        else if ( (LA225_3==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        input.seek(index225_3);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA225_8 = input.LA(1);
                        int index225_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_8==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        else if ( (LA225_8==EOF||LA225_8==RightParenthesis) ) {s = 30;}
                        input.seek(index225_8);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA225_12 = input.LA(1);
                        int index225_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_12==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        else if ( (LA225_12==EOF||LA225_12==RightParenthesis) ) {s = 30;}
                        input.seek(index225_12);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA225_16 = input.LA(1);
                        int index225_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_16==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        else if ( (LA225_16==EOF||LA225_16==RightParenthesis) ) {s = 30;}
                        input.seek(index225_16);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA225_20 = input.LA(1);
                        int index225_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_20==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        else if ( (LA225_20==EOF||LA225_20==RightParenthesis) ) {s = 30;}
                        input.seek(index225_20);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA225_24 = input.LA(1);
                        int index225_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_24==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        else if ( (LA225_24==EOF||LA225_24==RightParenthesis) ) {s = 30;}
                        input.seek(index225_24);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA225_28 = input.LA(1);
                        int index225_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA225_28==Colon) && (synpred119_InternalN4JSParser())) {s = 31;}
                        else if ( (LA225_28==EOF||LA225_28==RightParenthesis) ) {s = 30;}
                        input.seek(index225_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 225, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_139s = "\1\4\2\uffff\32\135\2\uffff";
    static final String dfa_140s = "\1\176\2\uffff\32\144\2\uffff";
    static final String dfa_141s = "\1\uffff\2\1\32\uffff\1\3\1\2";
    static final String dfa_142s = "\1\14\2\uffff\1\23\1\24\1\0\1\6\1\15\1\25\1\1\1\7\1\16\1\26\1\2\1\10\1\17\1\27\1\3\1\11\1\20\1\30\1\4\1\12\1\21\1\31\1\5\1\13\1\22\1\32\2\uffff}>";
    static final String[] dfa_143s = {
            "\1\22\1\15\1\27\1\uffff\1\24\1\30\1\32\1\11\2\uffff\1\10\4\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\26\1\25\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\3\uffff\1\20\7\uffff\1\4\1\6\1\uffff\1\34\1\5\23\uffff\1\13\3\uffff\1\16\24\uffff\1\2\2\uffff\1\1\17\uffff\1\3",
            "",
            "",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "",
            ""
    };
    static final char[] dfa_139 = DFA.unpackEncodedStringToUnsignedChars(dfa_139s);
    static final char[] dfa_140 = DFA.unpackEncodedStringToUnsignedChars(dfa_140s);
    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final short[] dfa_142 = DFA.unpackEncodedString(dfa_142s);
    static final short[][] dfa_143 = unpackEncodedStringArray(dfa_143s);
    class DFA226 extends DFA {
        public DFA226(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 226;
            this.eot = dfa_126;
            this.eof = dfa_126;
            this.min = dfa_139;
            this.max = dfa_140;
            this.accept = dfa_141;
            this.special = dfa_142;
            this.transition = dfa_143;
        }
        public String getDescription() {
            return "6479:1: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= norm1_BindingIdentifier ) ) ( ( Colon )=>ColonSepDeclaredTypeRefParserRuleCall_1_0_1= ruleColonSepDeclaredTypeRef ) ) ) | ( (NameBindingIdentifierParserRuleCall_2_0= norm1_BindingIdentifier ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA226_5 = input.LA(1);
                        int index226_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_5==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_5==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA226_9 = input.LA(1);
                        int index226_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_9==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_9==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA226_13 = input.LA(1);
                        int index226_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_13==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_13==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA226_17 = input.LA(1);
                        int index226_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_17==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_17==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA226_21 = input.LA(1);
                        int index226_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_21==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_21==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA226_25 = input.LA(1);
                        int index226_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_25==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_25==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_25);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA226_6 = input.LA(1);
                        int index226_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_6==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        else if ( (LA226_6==RightParenthesis) ) {s = 29;}
                        input.seek(index226_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA226_10 = input.LA(1);
                        int index226_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_10==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        else if ( (LA226_10==RightParenthesis) ) {s = 29;}
                        input.seek(index226_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA226_14 = input.LA(1);
                        int index226_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_14==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        else if ( (LA226_14==RightParenthesis) ) {s = 29;}
                        input.seek(index226_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA226_18 = input.LA(1);
                        int index226_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_18==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        else if ( (LA226_18==RightParenthesis) ) {s = 29;}
                        input.seek(index226_18);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA226_22 = input.LA(1);
                        int index226_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_22==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        else if ( (LA226_22==RightParenthesis) ) {s = 29;}
                        input.seek(index226_22);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA226_26 = input.LA(1);
                        int index226_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_26==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        else if ( (LA226_26==RightParenthesis) ) {s = 29;}
                        input.seek(index226_26);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA226_0 = input.LA(1);
                        int index226_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_0==LeftCurlyBracket) && (synpred121_InternalN4JSParser())) {s = 1;}
                        else if ( (LA226_0==LeftSquareBracket) && (synpred121_InternalN4JSParser())) {s = 2;}
                        else if ((LA226_0>=4 && LA226_0<=126 && (s=T2S.M_21[LA226_0-(4)])>=0)) { /* 26 cases */ }
                        input.seek(index226_0);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA226_7 = input.LA(1);
                        int index226_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_7==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        else if ( (LA226_7==RightParenthesis) ) {s = 29;}
                        input.seek(index226_7);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA226_11 = input.LA(1);
                        int index226_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_11==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        else if ( (LA226_11==RightParenthesis) ) {s = 29;}
                        input.seek(index226_11);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA226_15 = input.LA(1);
                        int index226_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_15==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        else if ( (LA226_15==RightParenthesis) ) {s = 29;}
                        input.seek(index226_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA226_19 = input.LA(1);
                        int index226_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_19==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        else if ( (LA226_19==RightParenthesis) ) {s = 29;}
                        input.seek(index226_19);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA226_23 = input.LA(1);
                        int index226_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_23==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        else if ( (LA226_23==RightParenthesis) ) {s = 29;}
                        input.seek(index226_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA226_27 = input.LA(1);
                        int index226_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_27==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        else if ( (LA226_27==RightParenthesis) ) {s = 29;}
                        input.seek(index226_27);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA226_3 = input.LA(1);
                        int index226_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_3==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_3==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_3);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA226_4 = input.LA(1);
                        int index226_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_4==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_4==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_4);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA226_8 = input.LA(1);
                        int index226_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_8==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_8==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_8);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA226_12 = input.LA(1);
                        int index226_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_12==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_12==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_12);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA226_16 = input.LA(1);
                        int index226_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_16==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_16==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_16);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA226_20 = input.LA(1);
                        int index226_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_20==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_20==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_20);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA226_24 = input.LA(1);
                        int index226_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_24==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_24==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_24);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA226_28 = input.LA(1);
                        int index226_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_28==RightParenthesis) ) {s = 29;}
                        else if ( (LA226_28==Colon) && (synpred122_InternalN4JSParser())) {s = 30;}
                        input.seek(index226_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 226, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_144s = "\52\uffff";
    static final String dfa_145s = "\4\uffff\1\3\45\uffff";
    static final String dfa_146s = "\1\4\3\uffff\1\6\1\4\14\uffff\11\4\2\uffff\3\4\1\10\11\4";
    static final String dfa_147s = "\1\u0094\3\uffff\1\u00a4\1\176\14\uffff\11\u00a4\2\uffff\6\176\7\u00a4";
    static final String dfa_148s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\17\1\20\2\16\1\7\11\uffff\1\5\1\4\15\uffff";
    static final String dfa_149s = "\4\uffff\1\0\45\uffff}>";
    static final String[] dfa_150s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\14\3\uffff\2\3\2\uffff\1\6\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\15\1\uffff\1\7\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\7\1\1\1\7\1\3\7\uffff\2\3\1\uffff\2\3\12\uffff\1\7\10\uffff\1\3\3\uffff\1\3\5\uffff\1\12\6\uffff\1\7\2\uffff\1\5\3\uffff\1\13\1\10\2\uffff\1\11\6\uffff\1\7\1\uffff\4\7\1\uffff\1\7\1\uffff\1\3\2\uffff\1\7\11\uffff\2\16\7\uffff\1\7",
            "",
            "",
            "",
            "\2\3\7\uffff\1\20\45\uffff\1\3\1\uffff\2\3\10\uffff\14\3\1\uffff\2\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\17\4\uffff\1\3\1\uffff\1\3\13\uffff\1\3",
            "\1\32\1\30\1\33\1\uffff\1\24\3\33\2\uffff\1\33\1\uffff\1\21\2\uffff\2\33\3\uffff\1\33\1\uffff\1\33\1\uffff\1\25\1\uffff\1\33\1\23\7\uffff\1\31\1\uffff\1\33\1\22\3\uffff\1\33\1\uffff\1\21\1\uffff\1\27\1\21\6\uffff\2\33\1\uffff\2\33\23\uffff\1\33\3\uffff\1\33\5\uffff\1\21\13\uffff\1\34\1\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\14\uffff\1\26",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\33\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\33\1\21\16\uffff\1\33\45\uffff\1\36",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\33\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\33\1\21\16\uffff\1\33\45\uffff\1\36",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\33\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\33\1\21\16\uffff\1\33\45\uffff\1\36",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\33\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\33\1\21\16\uffff\1\33\45\uffff\1\36",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\33\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\33\1\21\16\uffff\1\33\45\uffff\1\36",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\13\uffff\2\33\4\uffff\1\33\5\uffff\1\40\17\uffff\1\33\45\uffff\1\33",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\13\uffff\2\33\4\uffff\1\33\5\uffff\1\40\17\uffff\1\33\45\uffff\1\33",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\13\uffff\2\33\4\uffff\1\33\5\uffff\1\41\17\uffff\1\33\45\uffff\1\33",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\13\uffff\2\33\4\uffff\1\33\5\uffff\1\42\17\uffff\1\33\45\uffff\1\33",
            "",
            "",
            "\4\33\1\50\7\33\1\44\13\33\1\46\2\33\1\51\12\33\1\47\10\33\1\45\1\33\4\uffff\10\33\21\uffff\5\33\17\uffff\1\33\27\uffff\1\43",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\4\uffff\1\21\3\uffff\2\21\1\uffff\2\33\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\33\1\21\16\uffff\1\33",
            "\3\21\1\uffff\4\21\2\uffff\1\21\4\uffff\2\21\3\uffff\1\21\1\uffff\1\21\1\uffff\1\21\1\uffff\2\21\7\uffff\1\21\1\uffff\2\21\3\uffff\1\21\3\uffff\1\21\7\uffff\2\21\1\uffff\2\21\23\uffff\1\21\3\uffff\1\21\17\uffff\1\33\7\uffff\1\33\17\uffff\1\21",
            "\1\21\7\uffff\1\21\13\uffff\1\21\2\uffff\1\21\12\uffff\1\21\5\uffff\1\21\2\uffff\1\21\2\uffff\1\33\62\uffff\1\21\24\uffff\1\21",
            "\2\21\2\uffff\1\21\7\uffff\1\21\13\uffff\1\21\2\uffff\1\21\7\uffff\1\21\2\uffff\1\21\5\uffff\1\21\1\uffff\2\21\2\uffff\1\33\45\uffff\1\21\14\uffff\1\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\14\uffff\1\21",
            "\2\21\2\uffff\1\21\7\uffff\1\21\13\uffff\1\21\2\uffff\1\21\7\uffff\1\21\2\uffff\1\21\5\uffff\1\21\1\uffff\2\21\2\uffff\1\33\45\uffff\1\21\14\uffff\1\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\14\uffff\1\21",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\4\uffff\1\21\3\uffff\2\21\1\uffff\2\33\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\33\1\21\16\uffff\1\33\45\uffff\1\21",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\4\uffff\1\21\3\uffff\2\21\1\uffff\2\33\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\33\1\21\16\uffff\1\33\45\uffff\1\21",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\4\uffff\1\21\3\uffff\2\21\1\uffff\2\33\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\33\1\21\16\uffff\1\33\45\uffff\1\21",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\4\uffff\1\21\3\uffff\2\21\1\uffff\2\33\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\33\1\21\16\uffff\1\33\45\uffff\1\21",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\4\uffff\1\21\3\uffff\2\21\1\uffff\2\33\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\33\1\21\16\uffff\1\33\45\uffff\1\21",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\4\uffff\1\21\3\uffff\2\21\1\uffff\2\33\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\33\1\21\16\uffff\1\33\45\uffff\1\21",
            "\61\33\4\uffff\10\33\15\uffff\1\33\3\uffff\5\33\4\uffff\1\21\3\uffff\2\21\1\uffff\2\33\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\33\1\21\16\uffff\1\33\45\uffff\1\21"
    };
    static final short[] dfa_144 = DFA.unpackEncodedString(dfa_144s);
    static final short[] dfa_145 = DFA.unpackEncodedString(dfa_145s);
    static final char[] dfa_146 = DFA.unpackEncodedStringToUnsignedChars(dfa_146s);
    static final char[] dfa_147 = DFA.unpackEncodedStringToUnsignedChars(dfa_147s);
    static final short[] dfa_148 = DFA.unpackEncodedString(dfa_148s);
    static final short[] dfa_149 = DFA.unpackEncodedString(dfa_149s);
    static final short[][] dfa_150 = unpackEncodedStringArray(dfa_150s);
    class DFA227 extends DFA {
        public DFA227(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 227;
            this.eot = dfa_144;
            this.eof = dfa_145;
            this.min = dfa_146;
            this.max = dfa_147;
            this.accept = dfa_148;
            this.special = dfa_149;
            this.transition = dfa_150;
        }
        public String getDescription() {
            return "6610:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= ruleIdentifierRef | JSXFragmentParserRuleCall_3= ruleJSXFragment | JSXElementParserRuleCall_4= ruleJSXElement | ImportCallExpressionParserRuleCall_5= ruleImportCallExpression | ParameterizedCallExpressionParserRuleCall_6= ruleParameterizedCallExpression | LiteralParserRuleCall_7= ruleLiteral | ArrayLiteralParserRuleCall_8= ruleArrayLiteral | ObjectLiteralParserRuleCall_9= ruleObjectLiteral | ParenExpressionParserRuleCall_10= ruleParenExpression | AnnotatedExpressionParserRuleCall_11= ruleAnnotatedExpression | FunctionExpressionParserRuleCall_12= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_13= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_14= ruleN4ClassExpression | TemplateLiteralParserRuleCall_15= ruleTemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA227_4 = input.LA(1);
                        int index227_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA227_4==EOF||(LA227_4>=Implements && LA227_4<=Instanceof)||LA227_4==ExclamationMarkEqualsSignEqualsSign||(LA227_4>=LessThanSignLessThanSignEqualsSign && LA227_4<=EqualsSignEqualsSignEqualsSign)||(LA227_4>=ExclamationMarkEqualsSign && LA227_4<=EqualsSignEqualsSign)||(LA227_4>=QuestionMarkFullStop && LA227_4<=QuestionMarkQuestionMark)||(LA227_4>=CircumflexAccentEqualsSign && LA227_4<=As)||(LA227_4>=In && LA227_4<=VerticalLineVerticalLine)||(LA227_4>=PercentSign && LA227_4<=QuestionMark)||(LA227_4>=LeftSquareBracket && LA227_4<=RightCurlyBracket)||(LA227_4>=RULE_TEMPLATE_HEAD && LA227_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA227_4==RULE_ML_COMMENT||LA227_4==RULE_EOL||LA227_4==RULE_VERSION) ) {s = 3;}
                        else if ( (LA227_4==RULE_NO_LINE_TERMINATOR) && (synpred126_InternalN4JSParser())) {s = 15;}
                        else if ( (LA227_4==Function) && (synpred126_InternalN4JSParser())) {s = 16;}
                        input.seek(index227_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 227, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_151s = "\1\4\3\uffff\1\6\1\4\13\uffff\1\4\1\uffff\10\4\2\uffff\3\4\1\10\11\4";
    static final String dfa_152s = "\1\u0094\3\uffff\1\u00a4\1\176\13\uffff\1\u00a4\1\uffff\10\u00a4\2\uffff\6\176\7\u00a4";
    static final String dfa_153s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\17\1\20\2\16\1\uffff\1\5\10\uffff\1\4\1\7\15\uffff";
    static final String[] dfa_154s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\14\3\uffff\2\3\2\uffff\1\6\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\15\1\uffff\1\7\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\7\1\1\1\7\1\3\7\uffff\2\3\1\uffff\2\3\12\uffff\1\7\10\uffff\1\3\3\uffff\1\3\5\uffff\1\12\6\uffff\1\7\2\uffff\1\5\3\uffff\1\13\1\10\2\uffff\1\11\6\uffff\1\7\1\uffff\4\7\1\uffff\1\7\1\uffff\1\3\2\uffff\1\7\11\uffff\2\16\7\uffff\1\7",
            "",
            "",
            "",
            "\2\3\7\uffff\1\20\45\uffff\1\3\1\uffff\2\3\10\uffff\14\3\1\uffff\2\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\17\4\uffff\1\3\1\uffff\1\3\13\uffff\1\3",
            "\1\27\1\23\1\22\1\uffff\1\31\3\22\2\uffff\1\22\1\uffff\1\34\2\uffff\2\22\3\uffff\1\22\1\uffff\1\22\1\uffff\1\24\1\uffff\1\22\1\32\7\uffff\1\26\1\uffff\1\22\1\30\3\uffff\1\22\1\uffff\1\34\1\uffff\1\25\1\34\6\uffff\2\22\1\uffff\2\22\23\uffff\1\22\3\uffff\1\22\5\uffff\1\34\13\uffff\1\33\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\34\3\uffff\2\34\1\uffff\1\37\1\22\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\22\1\34\16\uffff\1\22\45\uffff\1\35",
            "",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\13\uffff\2\22\4\uffff\1\22\5\uffff\1\40\17\uffff\1\22\45\uffff\1\22",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\34\3\uffff\2\34\1\uffff\1\37\1\22\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\22\1\34\16\uffff\1\22\45\uffff\1\35",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\13\uffff\2\22\4\uffff\1\22\5\uffff\1\40\17\uffff\1\22\45\uffff\1\22",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\13\uffff\2\22\4\uffff\1\22\5\uffff\1\41\17\uffff\1\22\45\uffff\1\22",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\13\uffff\2\22\4\uffff\1\22\5\uffff\1\42\17\uffff\1\22\45\uffff\1\22",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\34\3\uffff\2\34\1\uffff\1\37\1\22\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\22\1\34\16\uffff\1\22\45\uffff\1\35",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\34\3\uffff\2\34\1\uffff\1\37\1\22\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\22\1\34\16\uffff\1\22\45\uffff\1\35",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\34\3\uffff\2\34\1\uffff\1\37\1\22\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\22\1\34\16\uffff\1\22\45\uffff\1\35",
            "",
            "",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\34\3\uffff\2\34\1\uffff\2\22\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\22\1\34\16\uffff\1\22",
            "\3\34\1\uffff\4\34\2\uffff\1\34\4\uffff\2\34\3\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\2\34\7\uffff\1\34\2\uffff\1\34\3\uffff\1\34\3\uffff\1\34\7\uffff\2\34\1\uffff\2\34\23\uffff\1\34\3\uffff\1\34\17\uffff\1\22\7\uffff\1\22\17\uffff\1\34",
            "\4\22\1\46\7\22\1\50\13\22\1\47\2\22\1\45\12\22\1\44\10\22\1\43\1\22\4\uffff\10\22\21\uffff\5\22\17\uffff\1\22\27\uffff\1\51",
            "\1\34\7\uffff\1\34\13\uffff\1\34\2\uffff\1\34\12\uffff\1\34\5\uffff\1\34\2\uffff\1\34\2\uffff\1\22\62\uffff\1\34\24\uffff\1\34",
            "\2\34\2\uffff\1\34\7\uffff\1\34\13\uffff\1\34\2\uffff\1\34\7\uffff\1\34\2\uffff\1\34\5\uffff\1\34\1\uffff\2\34\2\uffff\1\22\45\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\34",
            "\2\34\2\uffff\1\34\7\uffff\1\34\13\uffff\1\34\2\uffff\1\34\7\uffff\1\34\2\uffff\1\34\5\uffff\1\34\1\uffff\2\34\2\uffff\1\22\45\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\34",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\34\3\uffff\2\34\1\uffff\2\22\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\22\1\34\16\uffff\1\22\45\uffff\1\34",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\34\3\uffff\2\34\1\uffff\2\22\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\22\1\34\16\uffff\1\22\45\uffff\1\34",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\34\3\uffff\2\34\1\uffff\2\22\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\22\1\34\16\uffff\1\22\45\uffff\1\34",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\34\3\uffff\2\34\1\uffff\2\22\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\22\1\34\16\uffff\1\22\45\uffff\1\34",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\34\3\uffff\2\34\1\uffff\2\22\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\22\1\34\16\uffff\1\22\45\uffff\1\34",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\34\3\uffff\2\34\1\uffff\2\22\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\22\1\34\16\uffff\1\22\45\uffff\1\34",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\34\3\uffff\2\34\1\uffff\2\22\2\uffff\1\34\1\uffff\1\36\1\34\1\uffff\1\34\2\uffff\1\22\1\34\16\uffff\1\22\45\uffff\1\34"
    };
    static final char[] dfa_151 = DFA.unpackEncodedStringToUnsignedChars(dfa_151s);
    static final char[] dfa_152 = DFA.unpackEncodedStringToUnsignedChars(dfa_152s);
    static final short[] dfa_153 = DFA.unpackEncodedString(dfa_153s);
    static final short[][] dfa_154 = unpackEncodedStringArray(dfa_154s);
    class DFA228 extends DFA {
        public DFA228(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 228;
            this.eot = dfa_144;
            this.eof = dfa_145;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_153;
            this.special = dfa_149;
            this.transition = dfa_154;
        }
        public String getDescription() {
            return "6662:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= norm1_IdentifierRef | JSXFragmentParserRuleCall_3= ruleJSXFragment | JSXElementParserRuleCall_4= ruleJSXElement | ImportCallExpressionParserRuleCall_5= norm1_ImportCallExpression | ParameterizedCallExpressionParserRuleCall_6= norm1_ParameterizedCallExpression | LiteralParserRuleCall_7= ruleLiteral | ArrayLiteralParserRuleCall_8= norm1_ArrayLiteral | ObjectLiteralParserRuleCall_9= norm1_ObjectLiteral | ParenExpressionParserRuleCall_10= norm1_ParenExpression | AnnotatedExpressionParserRuleCall_11= norm1_AnnotatedExpression | FunctionExpressionParserRuleCall_12= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_13= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_14= norm1_N4ClassExpression | TemplateLiteralParserRuleCall_15= norm1_TemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA228_4 = input.LA(1);
                        int index228_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA228_4==EOF||(LA228_4>=Implements && LA228_4<=Instanceof)||LA228_4==ExclamationMarkEqualsSignEqualsSign||(LA228_4>=LessThanSignLessThanSignEqualsSign && LA228_4<=EqualsSignEqualsSignEqualsSign)||(LA228_4>=ExclamationMarkEqualsSign && LA228_4<=EqualsSignEqualsSign)||(LA228_4>=QuestionMarkFullStop && LA228_4<=QuestionMarkQuestionMark)||(LA228_4>=CircumflexAccentEqualsSign && LA228_4<=As)||(LA228_4>=In && LA228_4<=VerticalLineVerticalLine)||(LA228_4>=PercentSign && LA228_4<=QuestionMark)||(LA228_4>=LeftSquareBracket && LA228_4<=RightCurlyBracket)||(LA228_4>=RULE_TEMPLATE_HEAD && LA228_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA228_4==RULE_ML_COMMENT||LA228_4==RULE_EOL||LA228_4==RULE_VERSION) ) {s = 3;}
                        else if ( (LA228_4==RULE_NO_LINE_TERMINATOR) && (synpred127_InternalN4JSParser())) {s = 15;}
                        else if ( (LA228_4==Function) && (synpred127_InternalN4JSParser())) {s = 16;}
                        input.seek(index228_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 228, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_155s = "\1\uffff\33\34\2\uffff";
    static final String dfa_156s = "\34\4\2\uffff";
    static final String dfa_157s = "\1\176\33\u00a4\2\uffff";
    static final String dfa_158s = "\34\uffff\1\1\1\2";
    static final String[] dfa_159s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\47\uffff\1\1",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "\62\34\1\uffff\26\34\1\uffff\2\34\1\uffff\10\34\1\uffff\20\34\1\uffff\6\34\15\uffff\1\34\14\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\35",
            "",
            ""
    };
    static final short[] dfa_155 = DFA.unpackEncodedString(dfa_155s);
    static final char[] dfa_156 = DFA.unpackEncodedStringToUnsignedChars(dfa_156s);
    static final char[] dfa_157 = DFA.unpackEncodedStringToUnsignedChars(dfa_157s);
    static final short[] dfa_158 = DFA.unpackEncodedString(dfa_158s);
    static final short[][] dfa_159 = unpackEncodedStringArray(dfa_159s);
    class DFA229 extends DFA {
        public DFA229(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 229;
            this.eot = dfa_46;
            this.eof = dfa_155;
            this.min = dfa_156;
            this.max = dfa_157;
            this.accept = dfa_158;
            this.special = dfa_51;
            this.transition = dfa_159;
        }
        public String getDescription() {
            return "6772:1: ( ( (IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1= ruleBindingIdentifier ) ) | ( ( (IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1= ruleBindingIdentifier ) ) VersionRequestParserRuleCall_1_2= ruleVersionRequest ) )";
        }
    }
    static final String dfa_160s = "\1\uffff\32\34\2\uffff";
    static final String dfa_161s = "\1\4\32\6\2\uffff";
    static final String dfa_162s = "\1\176\32\u00a4\2\uffff";
    static final String dfa_163s = "\33\uffff\1\2\1\1";
    static final String dfa_164s = "\35\uffff}>";
    static final String[] dfa_165s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\47\uffff\1\1",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "",
            ""
    };
    static final short[] dfa_160 = DFA.unpackEncodedString(dfa_160s);
    static final char[] dfa_161 = DFA.unpackEncodedStringToUnsignedChars(dfa_161s);
    static final char[] dfa_162 = DFA.unpackEncodedStringToUnsignedChars(dfa_162s);
    static final short[] dfa_163 = DFA.unpackEncodedString(dfa_163s);
    static final short[] dfa_164 = DFA.unpackEncodedString(dfa_164s);
    static final short[][] dfa_165 = unpackEncodedStringArray(dfa_165s);
    class DFA230 extends DFA {
        public DFA230(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 230;
            this.eot = dfa_91;
            this.eof = dfa_160;
            this.min = dfa_161;
            this.max = dfa_162;
            this.accept = dfa_163;
            this.special = dfa_164;
            this.transition = dfa_165;
        }
        public String getDescription() {
            return "6799:1: ( ( (IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1= norm1_BindingIdentifier ) ) | ( ( (IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1= norm1_BindingIdentifier ) ) VersionRequestParserRuleCall_1_2= ruleVersionRequest ) )";
        }
    }
    static final String dfa_166s = "\5\uffff";
    static final String dfa_167s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_168s = "\1\154\1\u0094\1\uffff\1\u0094\1\uffff";
    static final String dfa_169s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_170s = "\5\uffff}>";
    static final String[] dfa_171s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\2\4\10\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\7\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\2\4\10\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\7\uffff\1\4",
            ""
    };
    static final short[] dfa_166 = DFA.unpackEncodedString(dfa_166s);
    static final char[] dfa_167 = DFA.unpackEncodedStringToUnsignedChars(dfa_167s);
    static final char[] dfa_168 = DFA.unpackEncodedStringToUnsignedChars(dfa_168s);
    static final short[] dfa_169 = DFA.unpackEncodedString(dfa_169s);
    static final short[] dfa_170 = DFA.unpackEncodedString(dfa_170s);
    static final short[][] dfa_171 = unpackEncodedStringArray(dfa_171s);
    class DFA233 extends DFA {
        public DFA233(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 233;
            this.eot = dfa_166;
            this.eof = dfa_166;
            this.min = dfa_167;
            this.max = dfa_168;
            this.accept = dfa_169;
            this.special = dfa_170;
            this.transition = dfa_171;
        }
        public String getDescription() {
            return "()* loopback of 6887:3: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= ruleArrayElement ) ) )*";
        }
    }
    class DFA239 extends DFA {
        public DFA239(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 239;
            this.eot = dfa_166;
            this.eof = dfa_166;
            this.min = dfa_167;
            this.max = dfa_168;
            this.accept = dfa_169;
            this.special = dfa_170;
            this.transition = dfa_171;
        }
        public String getDescription() {
            return "()* loopback of 6957:3: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_172s = "\116\uffff";
    static final String dfa_173s = "\1\4\1\uffff\104\0\10\uffff";
    static final String dfa_174s = "\1\u0094\1\uffff\104\0\10\uffff";
    static final String dfa_175s = "\1\uffff\1\1\104\uffff\2\5\1\6\1\uffff\1\7\1\2\1\3\1\4";
    static final String dfa_176s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\10\uffff}>";
    static final String[] dfa_177s = {
            "\1\17\1\14\1\75\1\42\1\5\1\76\1\100\1\67\1\25\1\26\1\66\1\36\1\7\1\33\1\34\1\77\1\65\1\27\1\32\1\40\1\101\1\44\1\70\1\46\1\6\1\51\1\74\1\4\1\20\1\22\1\23\1\24\1\60\1\45\1\47\1\16\1\53\1\55\1\3\1\21\1\31\1\61\1\72\1\56\1\12\1\57\1\13\1\2\1\54\1\uffff\1\112\2\uffff\1\35\1\62\1\64\1\43\1\102\1\63\1\50\1\52\21\uffff\1\71\1\30\1\37\1\41\1\73\5\uffff\1\110\1\uffff\1\107\7\uffff\1\106\2\uffff\1\110\1\1\1\105\2\uffff\1\15\2\uffff\1\11\3\uffff\1\104\1\uffff\3\104\2\uffff\1\104\1\uffff\1\10\2\uffff\1\103\22\uffff\1\104",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_172 = DFA.unpackEncodedString(dfa_172s);
    static final char[] dfa_173 = DFA.unpackEncodedStringToUnsignedChars(dfa_173s);
    static final char[] dfa_174 = DFA.unpackEncodedStringToUnsignedChars(dfa_174s);
    static final short[] dfa_175 = DFA.unpackEncodedString(dfa_175s);
    static final short[] dfa_176 = DFA.unpackEncodedString(dfa_176s);
    static final short[][] dfa_177 = unpackEncodedStringArray(dfa_177s);
    class DFA251 extends DFA {
        public DFA251(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 251;
            this.eot = dfa_172;
            this.eof = dfa_172;
            this.min = dfa_173;
            this.max = dfa_174;
            this.accept = dfa_175;
            this.special = dfa_176;
            this.transition = dfa_177;
        }
        public String getDescription() {
            return "7178:1: (AnnotatedPropertyAssignmentParserRuleCall_0= ruleAnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>PropertyNameValuePairParserRuleCall_1= rulePropertyNameValuePair ) | ( ( ( ruleGetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= rulePropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= rulePropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= rulePropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= rulePropertyNameValuePairSingleName | PropertySpreadParserRuleCall_6= rulePropertySpread )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA251_0 = input.LA(1);
                        int index251_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA251_0>=4 && LA251_0<=129 && (s=T2S.M_22[LA251_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA251_0==RULE_DOUBLE||(LA251_0>=RULE_HEX_INT && LA251_0<=RULE_OCTAL_INT)||LA251_0==RULE_SCIENTIFIC_INT||LA251_0==RULE_INT) ) {s = 68;}
                        else if ( (LA251_0==LeftSquareBracket) ) {s = 69;}
                        else if ( (LA251_0==LessThanSign) && (synpred131_InternalN4JSParser())) {s = 70;}
                        else if ( (LA251_0==Asterisk) && (synpred131_InternalN4JSParser())) {s = 71;}
                        else if ( (LA251_0==LeftParenthesis||LA251_0==QuestionMark) ) {s = 72;}
                        else if ( (LA251_0==FullStopFullStopFullStop) ) {s = 74;}
                        input.seek(index251_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA251_2 = input.LA(1);
                        int index251_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA251_3 = input.LA(1);
                        int index251_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA251_4 = input.LA(1);
                        int index251_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA251_5 = input.LA(1);
                        int index251_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA251_6 = input.LA(1);
                        int index251_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA251_7 = input.LA(1);
                        int index251_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA251_8 = input.LA(1);
                        int index251_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA251_9 = input.LA(1);
                        int index251_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA251_10 = input.LA(1);
                        int index251_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA251_11 = input.LA(1);
                        int index251_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA251_12 = input.LA(1);
                        int index251_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA251_13 = input.LA(1);
                        int index251_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA251_14 = input.LA(1);
                        int index251_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA251_15 = input.LA(1);
                        int index251_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA251_16 = input.LA(1);
                        int index251_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA251_17 = input.LA(1);
                        int index251_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA251_18 = input.LA(1);
                        int index251_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA251_19 = input.LA(1);
                        int index251_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA251_20 = input.LA(1);
                        int index251_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA251_21 = input.LA(1);
                        int index251_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA251_22 = input.LA(1);
                        int index251_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA251_23 = input.LA(1);
                        int index251_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA251_24 = input.LA(1);
                        int index251_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA251_25 = input.LA(1);
                        int index251_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA251_26 = input.LA(1);
                        int index251_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA251_27 = input.LA(1);
                        int index251_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA251_28 = input.LA(1);
                        int index251_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA251_29 = input.LA(1);
                        int index251_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA251_30 = input.LA(1);
                        int index251_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA251_31 = input.LA(1);
                        int index251_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA251_32 = input.LA(1);
                        int index251_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA251_33 = input.LA(1);
                        int index251_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA251_34 = input.LA(1);
                        int index251_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA251_35 = input.LA(1);
                        int index251_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA251_36 = input.LA(1);
                        int index251_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA251_37 = input.LA(1);
                        int index251_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA251_38 = input.LA(1);
                        int index251_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA251_39 = input.LA(1);
                        int index251_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA251_40 = input.LA(1);
                        int index251_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA251_41 = input.LA(1);
                        int index251_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA251_42 = input.LA(1);
                        int index251_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA251_43 = input.LA(1);
                        int index251_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA251_44 = input.LA(1);
                        int index251_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA251_45 = input.LA(1);
                        int index251_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA251_46 = input.LA(1);
                        int index251_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA251_47 = input.LA(1);
                        int index251_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA251_48 = input.LA(1);
                        int index251_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA251_49 = input.LA(1);
                        int index251_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA251_50 = input.LA(1);
                        int index251_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA251_51 = input.LA(1);
                        int index251_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred130_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA251_52 = input.LA(1);
                        int index251_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA251_53 = input.LA(1);
                        int index251_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA251_54 = input.LA(1);
                        int index251_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA251_55 = input.LA(1);
                        int index251_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA251_56 = input.LA(1);
                        int index251_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA251_57 = input.LA(1);
                        int index251_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA251_58 = input.LA(1);
                        int index251_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA251_59 = input.LA(1);
                        int index251_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA251_60 = input.LA(1);
                        int index251_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA251_61 = input.LA(1);
                        int index251_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA251_62 = input.LA(1);
                        int index251_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA251_63 = input.LA(1);
                        int index251_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA251_64 = input.LA(1);
                        int index251_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA251_65 = input.LA(1);
                        int index251_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA251_66 = input.LA(1);
                        int index251_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA251_67 = input.LA(1);
                        int index251_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA251_68 = input.LA(1);
                        int index251_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index251_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA251_69 = input.LA(1);
                        int index251_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index251_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 251, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA252 extends DFA {
        public DFA252(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 252;
            this.eot = dfa_172;
            this.eof = dfa_172;
            this.min = dfa_173;
            this.max = dfa_174;
            this.accept = dfa_175;
            this.special = dfa_176;
            this.transition = dfa_177;
        }
        public String getDescription() {
            return "7413:1: (AnnotatedPropertyAssignmentParserRuleCall_0= norm1_AnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>PropertyNameValuePairParserRuleCall_1= norm1_PropertyNameValuePair ) | ( ( ( norm1_GetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= norm1_PropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= norm1_PropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= norm1_PropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= norm1_PropertyNameValuePairSingleName | PropertySpreadParserRuleCall_6= norm1_PropertySpread )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA252_0 = input.LA(1);
                        int index252_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA252_0>=4 && LA252_0<=129 && (s=T2S.M_22[LA252_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA252_0==RULE_DOUBLE||(LA252_0>=RULE_HEX_INT && LA252_0<=RULE_OCTAL_INT)||LA252_0==RULE_SCIENTIFIC_INT||LA252_0==RULE_INT) ) {s = 68;}
                        else if ( (LA252_0==LeftSquareBracket) ) {s = 69;}
                        else if ( (LA252_0==LessThanSign) && (synpred135_InternalN4JSParser())) {s = 70;}
                        else if ( (LA252_0==Asterisk) && (synpred135_InternalN4JSParser())) {s = 71;}
                        else if ( (LA252_0==LeftParenthesis||LA252_0==QuestionMark) ) {s = 72;}
                        else if ( (LA252_0==FullStopFullStopFullStop) ) {s = 74;}
                        input.seek(index252_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA252_2 = input.LA(1);
                        int index252_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA252_3 = input.LA(1);
                        int index252_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA252_4 = input.LA(1);
                        int index252_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA252_5 = input.LA(1);
                        int index252_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA252_6 = input.LA(1);
                        int index252_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA252_7 = input.LA(1);
                        int index252_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA252_8 = input.LA(1);
                        int index252_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA252_9 = input.LA(1);
                        int index252_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA252_10 = input.LA(1);
                        int index252_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA252_11 = input.LA(1);
                        int index252_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA252_12 = input.LA(1);
                        int index252_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA252_13 = input.LA(1);
                        int index252_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA252_14 = input.LA(1);
                        int index252_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA252_15 = input.LA(1);
                        int index252_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA252_16 = input.LA(1);
                        int index252_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA252_17 = input.LA(1);
                        int index252_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA252_18 = input.LA(1);
                        int index252_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA252_19 = input.LA(1);
                        int index252_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA252_20 = input.LA(1);
                        int index252_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA252_21 = input.LA(1);
                        int index252_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA252_22 = input.LA(1);
                        int index252_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA252_23 = input.LA(1);
                        int index252_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA252_24 = input.LA(1);
                        int index252_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA252_25 = input.LA(1);
                        int index252_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA252_26 = input.LA(1);
                        int index252_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA252_27 = input.LA(1);
                        int index252_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA252_28 = input.LA(1);
                        int index252_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA252_29 = input.LA(1);
                        int index252_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA252_30 = input.LA(1);
                        int index252_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA252_31 = input.LA(1);
                        int index252_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA252_32 = input.LA(1);
                        int index252_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA252_33 = input.LA(1);
                        int index252_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA252_34 = input.LA(1);
                        int index252_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA252_35 = input.LA(1);
                        int index252_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA252_36 = input.LA(1);
                        int index252_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA252_37 = input.LA(1);
                        int index252_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA252_38 = input.LA(1);
                        int index252_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA252_39 = input.LA(1);
                        int index252_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA252_40 = input.LA(1);
                        int index252_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA252_41 = input.LA(1);
                        int index252_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA252_42 = input.LA(1);
                        int index252_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA252_43 = input.LA(1);
                        int index252_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA252_44 = input.LA(1);
                        int index252_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA252_45 = input.LA(1);
                        int index252_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA252_46 = input.LA(1);
                        int index252_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA252_47 = input.LA(1);
                        int index252_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA252_48 = input.LA(1);
                        int index252_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA252_49 = input.LA(1);
                        int index252_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA252_50 = input.LA(1);
                        int index252_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA252_51 = input.LA(1);
                        int index252_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred134_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA252_52 = input.LA(1);
                        int index252_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA252_53 = input.LA(1);
                        int index252_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA252_54 = input.LA(1);
                        int index252_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA252_55 = input.LA(1);
                        int index252_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA252_56 = input.LA(1);
                        int index252_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA252_57 = input.LA(1);
                        int index252_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA252_58 = input.LA(1);
                        int index252_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA252_59 = input.LA(1);
                        int index252_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA252_60 = input.LA(1);
                        int index252_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA252_61 = input.LA(1);
                        int index252_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA252_62 = input.LA(1);
                        int index252_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA252_63 = input.LA(1);
                        int index252_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA252_64 = input.LA(1);
                        int index252_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA252_65 = input.LA(1);
                        int index252_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA252_66 = input.LA(1);
                        int index252_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA252_67 = input.LA(1);
                        int index252_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA252_68 = input.LA(1);
                        int index252_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index252_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA252_69 = input.LA(1);
                        int index252_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index252_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 252, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_178s = "\115\uffff";
    static final String dfa_179s = "\1\4\104\0\10\uffff";
    static final String dfa_180s = "\1\u0094\104\0\10\uffff";
    static final String dfa_181s = "\105\uffff\2\4\1\5\1\uffff\1\6\1\1\1\2\1\3";
    static final String dfa_182s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\10\uffff}>";
    static final String[] dfa_183s = {
            "\1\16\1\13\1\74\1\41\1\4\1\75\1\77\1\66\1\24\1\25\1\65\1\35\1\6\1\32\1\33\1\76\1\64\1\26\1\31\1\37\1\100\1\43\1\67\1\45\1\5\1\50\1\73\1\3\1\17\1\21\1\22\1\23\1\57\1\44\1\46\1\15\1\52\1\54\1\2\1\20\1\30\1\60\1\71\1\55\1\11\1\56\1\12\1\1\1\53\1\uffff\1\111\2\uffff\1\34\1\61\1\63\1\42\1\101\1\62\1\47\1\51\21\uffff\1\70\1\27\1\36\1\40\1\72\5\uffff\1\107\1\uffff\1\106\7\uffff\1\105\2\uffff\1\107\1\uffff\1\104\2\uffff\1\14\2\uffff\1\10\3\uffff\1\103\1\uffff\3\103\2\uffff\1\103\1\uffff\1\7\2\uffff\1\102\22\uffff\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_178 = DFA.unpackEncodedString(dfa_178s);
    static final char[] dfa_179 = DFA.unpackEncodedStringToUnsignedChars(dfa_179s);
    static final char[] dfa_180 = DFA.unpackEncodedStringToUnsignedChars(dfa_180s);
    static final short[] dfa_181 = DFA.unpackEncodedString(dfa_181s);
    static final short[] dfa_182 = DFA.unpackEncodedString(dfa_182s);
    static final short[][] dfa_183 = unpackEncodedStringArray(dfa_183s);
    class DFA260 extends DFA {
        public DFA260(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 260;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_179;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "7655:2: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( ruleGetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (DeclaredOptionalQuestionMarkKeyword_1_2_1_0= QuestionMark ) )? LeftParenthesisKeyword_1_2_2= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_3_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_2_4= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_5_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0= rulePropertyNameValuePairSingleNamePart ) ) ) | (FullStopFullStopFullStopKeyword_1_5_1= FullStopFullStopFullStop ( (ExpressionAssignmentExpressionParserRuleCall_1_5_2_0= norm1_AssignmentExpression ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA260_0 = input.LA(1);
                        int index260_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA260_0>=4 && LA260_0<=129 && (s=T2S.M_24[LA260_0-(4)])>=0)) { /* 66 cases */ }
                        else if ( (LA260_0==RULE_DOUBLE||(LA260_0>=RULE_HEX_INT && LA260_0<=RULE_OCTAL_INT)||LA260_0==RULE_SCIENTIFIC_INT||LA260_0==RULE_INT) ) {s = 67;}
                        else if ( (LA260_0==LeftSquareBracket) ) {s = 68;}
                        else if ( (LA260_0==LessThanSign) && (synpred142_InternalN4JSParser())) {s = 69;}
                        else if ( (LA260_0==Asterisk) && (synpred142_InternalN4JSParser())) {s = 70;}
                        else if ( (LA260_0==LeftParenthesis||LA260_0==QuestionMark) ) {s = 71;}
                        else if ( (LA260_0==FullStopFullStopFullStop) ) {s = 73;}
                        input.seek(index260_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA260_1 = input.LA(1);
                        int index260_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA260_2 = input.LA(1);
                        int index260_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA260_3 = input.LA(1);
                        int index260_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA260_4 = input.LA(1);
                        int index260_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA260_5 = input.LA(1);
                        int index260_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA260_6 = input.LA(1);
                        int index260_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA260_7 = input.LA(1);
                        int index260_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA260_8 = input.LA(1);
                        int index260_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA260_9 = input.LA(1);
                        int index260_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA260_10 = input.LA(1);
                        int index260_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA260_11 = input.LA(1);
                        int index260_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA260_12 = input.LA(1);
                        int index260_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA260_13 = input.LA(1);
                        int index260_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA260_14 = input.LA(1);
                        int index260_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA260_15 = input.LA(1);
                        int index260_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA260_16 = input.LA(1);
                        int index260_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA260_17 = input.LA(1);
                        int index260_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA260_18 = input.LA(1);
                        int index260_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA260_19 = input.LA(1);
                        int index260_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA260_20 = input.LA(1);
                        int index260_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA260_21 = input.LA(1);
                        int index260_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA260_22 = input.LA(1);
                        int index260_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA260_23 = input.LA(1);
                        int index260_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA260_24 = input.LA(1);
                        int index260_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA260_25 = input.LA(1);
                        int index260_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA260_26 = input.LA(1);
                        int index260_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA260_27 = input.LA(1);
                        int index260_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA260_28 = input.LA(1);
                        int index260_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA260_29 = input.LA(1);
                        int index260_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA260_30 = input.LA(1);
                        int index260_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA260_31 = input.LA(1);
                        int index260_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA260_32 = input.LA(1);
                        int index260_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA260_33 = input.LA(1);
                        int index260_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA260_34 = input.LA(1);
                        int index260_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA260_35 = input.LA(1);
                        int index260_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA260_36 = input.LA(1);
                        int index260_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA260_37 = input.LA(1);
                        int index260_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA260_38 = input.LA(1);
                        int index260_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA260_39 = input.LA(1);
                        int index260_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA260_40 = input.LA(1);
                        int index260_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA260_41 = input.LA(1);
                        int index260_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA260_42 = input.LA(1);
                        int index260_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA260_43 = input.LA(1);
                        int index260_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA260_44 = input.LA(1);
                        int index260_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA260_45 = input.LA(1);
                        int index260_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA260_46 = input.LA(1);
                        int index260_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA260_47 = input.LA(1);
                        int index260_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA260_48 = input.LA(1);
                        int index260_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA260_49 = input.LA(1);
                        int index260_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA260_50 = input.LA(1);
                        int index260_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred139_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA260_51 = input.LA(1);
                        int index260_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA260_52 = input.LA(1);
                        int index260_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA260_53 = input.LA(1);
                        int index260_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA260_54 = input.LA(1);
                        int index260_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA260_55 = input.LA(1);
                        int index260_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA260_56 = input.LA(1);
                        int index260_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA260_57 = input.LA(1);
                        int index260_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA260_58 = input.LA(1);
                        int index260_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA260_59 = input.LA(1);
                        int index260_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA260_60 = input.LA(1);
                        int index260_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA260_61 = input.LA(1);
                        int index260_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA260_62 = input.LA(1);
                        int index260_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA260_63 = input.LA(1);
                        int index260_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA260_64 = input.LA(1);
                        int index260_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA260_65 = input.LA(1);
                        int index260_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA260_66 = input.LA(1);
                        int index260_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA260_67 = input.LA(1);
                        int index260_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index260_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA260_68 = input.LA(1);
                        int index260_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index260_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 260, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_184s = "\10\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_185s = "\1\u0094\7\u00a4\1\uffff\1\u0094\4\156\1\uffff";
    static final String dfa_186s = "\10\uffff\1\1\5\uffff\1\2";
    static final String dfa_187s = "\17\uffff}>";
    static final String[] dfa_188s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\3\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\22\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            ""
    };
    static final char[] dfa_184 = DFA.unpackEncodedStringToUnsignedChars(dfa_184s);
    static final char[] dfa_185 = DFA.unpackEncodedStringToUnsignedChars(dfa_185s);
    static final short[] dfa_186 = DFA.unpackEncodedString(dfa_186s);
    static final short[] dfa_187 = DFA.unpackEncodedString(dfa_187s);
    static final short[][] dfa_188 = unpackEncodedStringArray(dfa_188s);
    class DFA253 extends DFA {
        public DFA253(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 253;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "7673:6: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_189s = "\10\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_190s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\7\uffff\1\16\14\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\3\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\22\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\11\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            ""
    };
    static final char[] dfa_189 = DFA.unpackEncodedStringToUnsignedChars(dfa_189s);
    static final short[][] dfa_190 = unpackEncodedStringArray(dfa_190s);
    class DFA256 extends DFA {
        public DFA256(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 256;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_189;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_190;
        }
        public String getDescription() {
            return "8029:6: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_191s = "\15\uffff";
    static final String dfa_192s = "\2\uffff\11\13\1\uffff\1\13";
    static final String dfa_193s = "\1\4\1\uffff\5\4\4\140\1\uffff\1\4";
    static final String dfa_194s = "\1\176\1\uffff\11\u00a4\1\uffff\1\176";
    static final String dfa_195s = "\1\uffff\1\1\11\uffff\1\2\1\uffff";
    static final String dfa_196s = "\15\uffff}>";
    static final String[] dfa_197s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1"
    };
    static final short[] dfa_191 = DFA.unpackEncodedString(dfa_191s);
    static final short[] dfa_192 = DFA.unpackEncodedString(dfa_192s);
    static final char[] dfa_193 = DFA.unpackEncodedStringToUnsignedChars(dfa_193s);
    static final char[] dfa_194 = DFA.unpackEncodedStringToUnsignedChars(dfa_194s);
    static final short[] dfa_195 = DFA.unpackEncodedString(dfa_195s);
    static final short[] dfa_196 = DFA.unpackEncodedString(dfa_196s);
    static final short[][] dfa_197 = unpackEncodedStringArray(dfa_197s);
    class DFA259 extends DFA {
        public DFA259(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 259;
            this.eot = dfa_191;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "8086:4: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }
    class DFA268 extends DFA {
        public DFA268(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 268;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_179;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "8126:2: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( norm1_GetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (DeclaredOptionalQuestionMarkKeyword_1_2_1_0= QuestionMark ) )? LeftParenthesisKeyword_1_2_2= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_3_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_2_4= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_5_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0= norm1_PropertyNameValuePairSingleNamePart ) ) ) | (FullStopFullStopFullStopKeyword_1_5_1= FullStopFullStopFullStop ( (ExpressionAssignmentExpressionParserRuleCall_1_5_2_0= norm3_AssignmentExpression ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA268_0 = input.LA(1);
                        int index268_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA268_0>=4 && LA268_0<=129 && (s=T2S.M_24[LA268_0-(4)])>=0)) { /* 66 cases */ }
                        else if ( (LA268_0==RULE_DOUBLE||(LA268_0>=RULE_HEX_INT && LA268_0<=RULE_OCTAL_INT)||LA268_0==RULE_SCIENTIFIC_INT||LA268_0==RULE_INT) ) {s = 67;}
                        else if ( (LA268_0==LeftSquareBracket) ) {s = 68;}
                        else if ( (LA268_0==LessThanSign) && (synpred151_InternalN4JSParser())) {s = 69;}
                        else if ( (LA268_0==Asterisk) && (synpred151_InternalN4JSParser())) {s = 70;}
                        else if ( (LA268_0==LeftParenthesis||LA268_0==QuestionMark) ) {s = 71;}
                        else if ( (LA268_0==FullStopFullStopFullStop) ) {s = 73;}
                        input.seek(index268_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA268_1 = input.LA(1);
                        int index268_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA268_2 = input.LA(1);
                        int index268_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA268_3 = input.LA(1);
                        int index268_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA268_4 = input.LA(1);
                        int index268_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA268_5 = input.LA(1);
                        int index268_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA268_6 = input.LA(1);
                        int index268_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA268_7 = input.LA(1);
                        int index268_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA268_8 = input.LA(1);
                        int index268_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA268_9 = input.LA(1);
                        int index268_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA268_10 = input.LA(1);
                        int index268_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA268_11 = input.LA(1);
                        int index268_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA268_12 = input.LA(1);
                        int index268_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA268_13 = input.LA(1);
                        int index268_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA268_14 = input.LA(1);
                        int index268_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA268_15 = input.LA(1);
                        int index268_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA268_16 = input.LA(1);
                        int index268_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA268_17 = input.LA(1);
                        int index268_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA268_18 = input.LA(1);
                        int index268_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA268_19 = input.LA(1);
                        int index268_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA268_20 = input.LA(1);
                        int index268_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA268_21 = input.LA(1);
                        int index268_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA268_22 = input.LA(1);
                        int index268_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA268_23 = input.LA(1);
                        int index268_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA268_24 = input.LA(1);
                        int index268_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA268_25 = input.LA(1);
                        int index268_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA268_26 = input.LA(1);
                        int index268_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA268_27 = input.LA(1);
                        int index268_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA268_28 = input.LA(1);
                        int index268_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA268_29 = input.LA(1);
                        int index268_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA268_30 = input.LA(1);
                        int index268_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA268_31 = input.LA(1);
                        int index268_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA268_32 = input.LA(1);
                        int index268_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA268_33 = input.LA(1);
                        int index268_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA268_34 = input.LA(1);
                        int index268_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA268_35 = input.LA(1);
                        int index268_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA268_36 = input.LA(1);
                        int index268_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA268_37 = input.LA(1);
                        int index268_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA268_38 = input.LA(1);
                        int index268_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA268_39 = input.LA(1);
                        int index268_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA268_40 = input.LA(1);
                        int index268_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA268_41 = input.LA(1);
                        int index268_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA268_42 = input.LA(1);
                        int index268_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA268_43 = input.LA(1);
                        int index268_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA268_44 = input.LA(1);
                        int index268_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA268_45 = input.LA(1);
                        int index268_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA268_46 = input.LA(1);
                        int index268_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA268_47 = input.LA(1);
                        int index268_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA268_48 = input.LA(1);
                        int index268_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA268_49 = input.LA(1);
                        int index268_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA268_50 = input.LA(1);
                        int index268_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred148_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA268_51 = input.LA(1);
                        int index268_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA268_52 = input.LA(1);
                        int index268_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA268_53 = input.LA(1);
                        int index268_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA268_54 = input.LA(1);
                        int index268_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA268_55 = input.LA(1);
                        int index268_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA268_56 = input.LA(1);
                        int index268_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA268_57 = input.LA(1);
                        int index268_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA268_58 = input.LA(1);
                        int index268_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA268_59 = input.LA(1);
                        int index268_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA268_60 = input.LA(1);
                        int index268_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA268_61 = input.LA(1);
                        int index268_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA268_62 = input.LA(1);
                        int index268_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA268_63 = input.LA(1);
                        int index268_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA268_64 = input.LA(1);
                        int index268_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA268_65 = input.LA(1);
                        int index268_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA268_66 = input.LA(1);
                        int index268_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA268_67 = input.LA(1);
                        int index268_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index268_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA268_68 = input.LA(1);
                        int index268_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index268_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 268, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA261 extends DFA {
        public DFA261(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 261;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "8144:6: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA264 extends DFA {
        public DFA264(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 264;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_189;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_190;
        }
        public String getDescription() {
            return "8500:6: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String[] dfa_198s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1"
    };
    static final short[][] dfa_198 = unpackEncodedStringArray(dfa_198s);
    class DFA267 extends DFA {
        public DFA267(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 267;
            this.eot = dfa_191;
            this.eof = dfa_191;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_198;
        }
        public String getDescription() {
            return "8557:4: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }
    class DFA270 extends DFA {
        public DFA270(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 270;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_189;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_190;
        }
        public String getDescription() {
            return "8641:4: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA274 extends DFA {
        public DFA274(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 274;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_189;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_190;
        }
        public String getDescription() {
            return "8744:4: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_199s = "\20\uffff";
    static final String dfa_200s = "\10\4\1\uffff\1\4\4\144\1\uffff\1\4";
    static final String dfa_201s = "\1\u0094\7\u00a4\1\uffff\1\u0094\4\156\1\uffff\1\u0094";
    static final String dfa_202s = "\10\uffff\1\1\5\uffff\1\2\1\uffff";
    static final String dfa_203s = "\20\uffff}>";
    static final String[] dfa_204s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\3\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\22\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\4\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\15\uffff\1\16\6\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10"
    };
    static final short[] dfa_199 = DFA.unpackEncodedString(dfa_199s);
    static final char[] dfa_200 = DFA.unpackEncodedStringToUnsignedChars(dfa_200s);
    static final char[] dfa_201 = DFA.unpackEncodedStringToUnsignedChars(dfa_201s);
    static final short[] dfa_202 = DFA.unpackEncodedString(dfa_202s);
    static final short[] dfa_203 = DFA.unpackEncodedString(dfa_203s);
    static final short[][] dfa_204 = unpackEncodedStringArray(dfa_204s);
    class DFA277 extends DFA {
        public DFA277(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 277;
            this.eot = dfa_199;
            this.eof = dfa_199;
            this.min = dfa_200;
            this.max = dfa_201;
            this.accept = dfa_202;
            this.special = dfa_203;
            this.transition = dfa_204;
        }
        public String getDescription() {
            return "8833:4: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA279 extends DFA {
        public DFA279(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 279;
            this.eot = dfa_199;
            this.eof = dfa_199;
            this.min = dfa_200;
            this.max = dfa_201;
            this.accept = dfa_202;
            this.special = dfa_203;
            this.transition = dfa_204;
        }
        public String getDescription() {
            return "8898:4: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA281 extends DFA {
        public DFA281(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 281;
            this.eot = dfa_191;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "8947:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }
    class DFA282 extends DFA {
        public DFA282(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 282;
            this.eot = dfa_191;
            this.eof = dfa_191;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_198;
        }
        public String getDescription() {
            return "8970:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_205s = "\71\uffff";
    static final String dfa_206s = "\2\4\67\uffff";
    static final String dfa_207s = "\2\u0094\67\uffff";
    static final String dfa_208s = "\2\uffff\1\3\1\1\65\2";
    static final String dfa_209s = "\1\uffff\1\0\67\uffff}>";
    static final String[] dfa_210s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\12\uffff\1\2\10\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\37\1\16\2\uffff\1\15\1\65\3\uffff\1\36\1\14\2\uffff\1\43\1\40\1\uffff\1\17\1\uffff\1\24\1\uffff\1\33\1\32\2\uffff\1\66\1\uffff\1\54\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\56\1\5\1\53\1\25\7\uffff\1\11\1\13\1\4\1\41\1\12\12\uffff\1\60\10\uffff\1\20\3\uffff\1\23\5\uffff\1\63\5\uffff\1\3\1\57\2\uffff\1\42\3\uffff\1\64\1\61\2\uffff\1\62\6\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\7\2\uffff\1\55\11\uffff\1\70\1\67\7\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_205 = DFA.unpackEncodedString(dfa_205s);
    static final char[] dfa_206 = DFA.unpackEncodedStringToUnsignedChars(dfa_206s);
    static final char[] dfa_207 = DFA.unpackEncodedStringToUnsignedChars(dfa_207s);
    static final short[] dfa_208 = DFA.unpackEncodedString(dfa_208s);
    static final short[] dfa_209 = DFA.unpackEncodedString(dfa_209s);
    static final short[][] dfa_210 = unpackEncodedStringArray(dfa_210s);
    class DFA313 extends DFA {
        public DFA313(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 313;
            this.eot = dfa_205;
            this.eof = dfa_205;
            this.min = dfa_206;
            this.max = dfa_207;
            this.accept = dfa_208;
            this.special = dfa_209;
            this.transition = dfa_210;
        }
        public String getDescription() {
            return "10116:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= ruleMemberExpression ) ) ( ( LessThanSign )=>ConcreteTypeArgumentsParserRuleCall_1_2= ruleConcreteTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= ruleArguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0= QuestionMarkFullStop ) )? ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0= ruleTemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= rulePrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0= QuestionMarkFullStop ) )? ( (TemplateTemplateLiteralParserRuleCall_2_1_2_2_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA313_1 = input.LA(1);
                        int index313_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA313_1==FullStop) && (synpred174_InternalN4JSParser())) {s = 3;}
                        else if ((LA313_1>=4 && LA313_1<=148 && (s=T2S.M_26[LA313_1-(4)])>=0) && (synpred175_InternalN4JSParser())) { /* 54 cases */ }
                        input.seek(index313_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 313, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_211s = "\70\uffff";
    static final String dfa_212s = "\2\4\66\uffff";
    static final String dfa_213s = "\2\u0094\66\uffff";
    static final String dfa_214s = "\2\uffff\1\3\1\1\64\2";
    static final String dfa_215s = "\1\uffff\1\0\66\uffff}>";
    static final String[] dfa_216s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\12\uffff\1\2\10\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\64\3\uffff\1\35\1\13\2\uffff\1\42\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\55\1\5\1\52\1\24\7\uffff\1\10\1\12\1\4\1\40\1\11\12\uffff\1\57\10\uffff\1\17\3\uffff\1\22\5\uffff\1\62\5\uffff\1\3\1\56\2\uffff\1\41\3\uffff\1\63\1\60\2\uffff\1\61\6\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\11\uffff\1\67\1\66\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_211 = DFA.unpackEncodedString(dfa_211s);
    static final char[] dfa_212 = DFA.unpackEncodedStringToUnsignedChars(dfa_212s);
    static final char[] dfa_213 = DFA.unpackEncodedStringToUnsignedChars(dfa_213s);
    static final short[] dfa_214 = DFA.unpackEncodedString(dfa_214s);
    static final short[] dfa_215 = DFA.unpackEncodedString(dfa_215s);
    static final short[][] dfa_216 = unpackEncodedStringArray(dfa_216s);
    class DFA321 extends DFA {
        public DFA321(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 321;
            this.eot = dfa_211;
            this.eof = dfa_211;
            this.min = dfa_212;
            this.max = dfa_213;
            this.accept = dfa_214;
            this.special = dfa_215;
            this.transition = dfa_216;
        }
        public String getDescription() {
            return "10254:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>ConcreteTypeArgumentsParserRuleCall_1_2= ruleConcreteTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= norm1_Arguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0= QuestionMarkFullStop ) )? ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0= norm1_TemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= norm1_PrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0= QuestionMarkFullStop ) )? ( (TemplateTemplateLiteralParserRuleCall_2_1_2_2_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA321_1 = input.LA(1);
                        int index321_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA321_1==FullStop) && (synpred178_InternalN4JSParser())) {s = 3;}
                        else if ((LA321_1>=4 && LA321_1<=148 && (s=T2S.M_27[LA321_1-(4)])>=0) && (synpred179_InternalN4JSParser())) { /* 53 cases */ }
                        input.seek(index321_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 321, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_217s = "\1\1\101\uffff";
    static final String dfa_218s = "\1\7\1\uffff\1\4\77\uffff";
    static final String dfa_219s = "\1\u0098\1\uffff\1\u0094\77\uffff";
    static final String dfa_220s = "\1\uffff\1\2\1\uffff\77\1";
    static final String dfa_221s = "\1\1\1\uffff\1\0\77\uffff}>";
    static final String[] dfa_222s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\3\1\1\1\2\2\uffff\6\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\37\1\16\2\uffff\1\15\1\65\3\uffff\1\36\1\14\1\71\1\uffff\1\43\1\40\1\uffff\1\17\1\uffff\1\24\1\73\1\33\1\32\2\uffff\1\66\1\uffff\1\54\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\56\1\5\1\53\1\25\1\72\6\uffff\1\11\1\13\1\4\1\41\1\12\7\uffff\1\74\1\uffff\1\75\1\60\10\uffff\1\20\3\uffff\1\23\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\42\1\1\2\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\7\2\uffff\1\55\11\uffff\1\70\1\67\7\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_217 = DFA.unpackEncodedString(dfa_217s);
    static final char[] dfa_218 = DFA.unpackEncodedStringToUnsignedChars(dfa_218s);
    static final char[] dfa_219 = DFA.unpackEncodedStringToUnsignedChars(dfa_219s);
    static final short[] dfa_220 = DFA.unpackEncodedString(dfa_220s);
    static final short[] dfa_221 = DFA.unpackEncodedString(dfa_221s);
    static final short[][] dfa_222 = unpackEncodedStringArray(dfa_222s);
    class DFA336 extends DFA {
        public DFA336(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 336;
            this.eot = dfa_19;
            this.eof = dfa_217;
            this.min = dfa_218;
            this.max = dfa_219;
            this.accept = dfa_220;
            this.special = dfa_221;
            this.transition = dfa_222;
        }
        public String getDescription() {
            return "()* loopback of 10801:2: ( ( ( ( ( ( ruleAdditiveOperator ) ) ) )=> ( ( ( ruleAdditiveOperator ) ) ) ) ( (RhsMultiplicativeExpressionParserRuleCall_1_1_0= ruleMultiplicativeExpression ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA336_2 = input.LA(1);
                        int index336_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA336_2==EqualsSign) ) {s = 1;}
                        else if ((LA336_2>=4 && LA336_2<=148 && (s=T2S.M_28[LA336_2-(4)])>=0) && (synpred188_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index336_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA336_0 = input.LA(1);
                        int index336_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA336_0==EOF||LA336_0==Instanceof||LA336_0==ExclamationMarkEqualsSignEqualsSign||(LA336_0>=LessThanSignLessThanSignEqualsSign && LA336_0<=EqualsSignEqualsSignEqualsSign)||(LA336_0>=ExclamationMarkEqualsSign && LA336_0<=AsteriskEqualsSign)||LA336_0==PlusSignEqualsSign||(LA336_0>=SolidusEqualsSign && LA336_0<=EqualsSignEqualsSign)||LA336_0==QuestionMarkQuestionMark||LA336_0==CircumflexAccentEqualsSign||(LA336_0>=In && LA336_0<=VerticalLineVerticalLine)||LA336_0==Ampersand||LA336_0==RightParenthesis||LA336_0==Comma||(LA336_0>=Colon && LA336_0<=QuestionMark)||(LA336_0>=RightSquareBracket && LA336_0<=CircumflexAccent)||(LA336_0>=VerticalLine && LA336_0<=RightCurlyBracket)||LA336_0==RULE_ML_COMMENT||LA336_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA336_0==HyphenMinus) ) {s = 2;}
                        else if ( (LA336_0==PlusSign) && (synpred188_InternalN4JSParser())) {s = 3;}
                        input.seek(index336_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 336, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_223s = "\101\uffff";
    static final String dfa_224s = "\1\1\100\uffff";
    static final String dfa_225s = "\1\7\1\uffff\1\4\76\uffff";
    static final String dfa_226s = "\1\u0098\1\uffff\1\u0094\76\uffff";
    static final String dfa_227s = "\1\uffff\1\2\1\uffff\76\1";
    static final String dfa_228s = "\1\0\1\uffff\1\1\76\uffff}>";
    static final String[] dfa_229s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\3\1\1\1\2\2\uffff\6\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\64\3\uffff\1\35\1\13\1\70\1\uffff\1\42\1\37\1\uffff\1\16\1\uffff\1\23\1\72\1\32\1\31\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\55\1\5\1\52\1\24\1\71\6\uffff\1\10\1\12\1\4\1\40\1\11\7\uffff\1\73\1\uffff\1\74\1\57\10\uffff\1\17\3\uffff\1\22\2\uffff\1\100\2\uffff\1\62\2\uffff\1\75\1\uffff\1\76\1\uffff\1\56\2\uffff\1\41\1\1\2\uffff\1\63\1\60\2\uffff\1\61\2\uffff\1\77\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\11\uffff\1\67\1\66\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_223 = DFA.unpackEncodedString(dfa_223s);
    static final short[] dfa_224 = DFA.unpackEncodedString(dfa_224s);
    static final char[] dfa_225 = DFA.unpackEncodedStringToUnsignedChars(dfa_225s);
    static final char[] dfa_226 = DFA.unpackEncodedStringToUnsignedChars(dfa_226s);
    static final short[] dfa_227 = DFA.unpackEncodedString(dfa_227s);
    static final short[] dfa_228 = DFA.unpackEncodedString(dfa_228s);
    static final short[][] dfa_229 = unpackEncodedStringArray(dfa_229s);
    class DFA337 extends DFA {
        public DFA337(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 337;
            this.eot = dfa_223;
            this.eof = dfa_224;
            this.min = dfa_225;
            this.max = dfa_226;
            this.accept = dfa_227;
            this.special = dfa_228;
            this.transition = dfa_229;
        }
        public String getDescription() {
            return "()* loopback of 10837:2: ( ( ( ( ( ( ruleAdditiveOperator ) ) ) )=> ( ( ( ruleAdditiveOperator ) ) ) ) ( (RhsMultiplicativeExpressionParserRuleCall_1_1_0= norm1_MultiplicativeExpression ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA337_0 = input.LA(1);
                        int index337_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA337_0==EOF||LA337_0==Instanceof||LA337_0==ExclamationMarkEqualsSignEqualsSign||(LA337_0>=LessThanSignLessThanSignEqualsSign && LA337_0<=EqualsSignEqualsSignEqualsSign)||(LA337_0>=ExclamationMarkEqualsSign && LA337_0<=AsteriskEqualsSign)||LA337_0==PlusSignEqualsSign||(LA337_0>=SolidusEqualsSign && LA337_0<=EqualsSignEqualsSign)||LA337_0==QuestionMarkQuestionMark||LA337_0==CircumflexAccentEqualsSign||(LA337_0>=In && LA337_0<=VerticalLineVerticalLine)||LA337_0==Ampersand||LA337_0==RightParenthesis||LA337_0==Comma||(LA337_0>=Colon && LA337_0<=QuestionMark)||(LA337_0>=RightSquareBracket && LA337_0<=CircumflexAccent)||(LA337_0>=VerticalLine && LA337_0<=RightCurlyBracket)||LA337_0==RULE_ML_COMMENT||LA337_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA337_0==HyphenMinus) ) {s = 2;}
                        else if ( (LA337_0==PlusSign) && (synpred189_InternalN4JSParser())) {s = 3;}
                        input.seek(index337_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA337_2 = input.LA(1);
                        int index337_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA337_2>=4 && LA337_2<=148 && (s=T2S.M_29[LA337_2-(4)])>=0) && (synpred189_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA337_2==EqualsSign) ) {s = 1;}
                        input.seek(index337_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 337, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_230s = "\104\uffff";
    static final String dfa_231s = "\1\1\103\uffff";
    static final String dfa_232s = "\1\7\1\uffff\1\4\1\uffff\2\4\76\uffff";
    static final String dfa_233s = "\1\u0098\1\uffff\1\u0094\1\uffff\2\u0094\76\uffff";
    static final String dfa_234s = "\1\uffff\1\2\1\uffff\1\1\2\uffff\76\1";
    static final String dfa_235s = "\1\1\3\uffff\1\2\1\0\76\uffff}>";
    static final String[] dfa_236s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\3\2\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\1\uffff\2\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\7\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\67\3\uffff\1\40\1\16\1\73\1\uffff\1\45\1\42\1\uffff\1\21\1\uffff\1\26\1\75\1\35\1\34\2\uffff\1\70\1\uffff\1\56\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\60\1\7\1\55\1\27\1\74\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\76\1\uffff\1\77\1\62\10\uffff\1\22\3\uffff\1\25\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\1\1\5\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\11\2\uffff\1\57\11\uffff\1\72\1\71\7\uffff\1\47",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\67\3\uffff\1\40\1\16\1\73\1\uffff\1\45\1\42\1\uffff\1\21\1\uffff\1\26\1\75\1\35\1\34\2\uffff\1\70\1\uffff\1\56\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\60\1\7\1\55\1\27\1\74\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\76\1\uffff\1\77\1\62\10\uffff\1\22\3\uffff\1\25\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\1\2\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\11\2\uffff\1\57\11\uffff\1\72\1\71\7\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_230 = DFA.unpackEncodedString(dfa_230s);
    static final short[] dfa_231 = DFA.unpackEncodedString(dfa_231s);
    static final char[] dfa_232 = DFA.unpackEncodedStringToUnsignedChars(dfa_232s);
    static final char[] dfa_233 = DFA.unpackEncodedStringToUnsignedChars(dfa_233s);
    static final short[] dfa_234 = DFA.unpackEncodedString(dfa_234s);
    static final short[] dfa_235 = DFA.unpackEncodedString(dfa_235s);
    static final short[][] dfa_236 = unpackEncodedStringArray(dfa_236s);
    class DFA338 extends DFA {
        public DFA338(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 338;
            this.eot = dfa_230;
            this.eof = dfa_231;
            this.min = dfa_232;
            this.max = dfa_233;
            this.accept = dfa_234;
            this.special = dfa_235;
            this.transition = dfa_236;
        }
        public String getDescription() {
            return "()* loopback of 10878:2: ( ( ( ( ( ruleShiftOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsAdditiveExpressionParserRuleCall_1_0_2_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA338_5 = input.LA(1);
                        int index338_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA338_5==EqualsSign) ) {s = 1;}
                        else if ((LA338_5>=4 && LA338_5<=148 && (s=T2S.M_30[LA338_5-(4)])>=0) && (synpred190_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index338_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA338_0 = input.LA(1);
                        int index338_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA338_0==EOF||LA338_0==Instanceof||LA338_0==ExclamationMarkEqualsSignEqualsSign||(LA338_0>=LessThanSignLessThanSignEqualsSign && LA338_0<=EqualsSignEqualsSignEqualsSign)||(LA338_0>=ExclamationMarkEqualsSign && LA338_0<=AsteriskEqualsSign)||LA338_0==PlusSignEqualsSign||LA338_0==SolidusEqualsSign||(LA338_0>=LessThanSignEqualsSign && LA338_0<=EqualsSignEqualsSign)||LA338_0==QuestionMarkQuestionMark||LA338_0==CircumflexAccentEqualsSign||(LA338_0>=In && LA338_0<=VerticalLineVerticalLine)||LA338_0==Ampersand||LA338_0==RightParenthesis||(LA338_0>=Comma && LA338_0<=HyphenMinus)||(LA338_0>=Colon && LA338_0<=EqualsSign)||LA338_0==QuestionMark||(LA338_0>=RightSquareBracket && LA338_0<=CircumflexAccent)||(LA338_0>=VerticalLine && LA338_0<=RightCurlyBracket)||LA338_0==RULE_ML_COMMENT||LA338_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA338_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA338_0==LessThanSignLessThanSign) && (synpred190_InternalN4JSParser())) {s = 3;}
                        input.seek(index338_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA338_4 = input.LA(1);
                        int index338_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA338_4==GreaterThanSign) ) {s = 5;}
                        else if ( (LA338_4==EqualsSign) ) {s = 1;}
                        else if ((LA338_4>=4 && LA338_4<=148 && (s=T2S.M_31[LA338_4-(4)])>=0) && (synpred190_InternalN4JSParser())) { /* 62 cases */ }
                        input.seek(index338_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 338, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_237s = "\1\1\102\uffff";
    static final String dfa_238s = "\1\7\1\uffff\1\4\1\uffff\2\4\75\uffff";
    static final String dfa_239s = "\1\u0098\1\uffff\1\u0094\1\uffff\2\u0094\75\uffff";
    static final String dfa_240s = "\1\uffff\1\2\1\uffff\1\1\2\uffff\75\1";
    static final String dfa_241s = "\1\0\3\uffff\1\2\1\1\75\uffff}>";
    static final String[] dfa_242s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\3\2\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\1\uffff\2\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\7\uffff\1\1",
            "",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\66\3\uffff\1\37\1\15\1\72\1\uffff\1\44\1\41\1\uffff\1\20\1\uffff\1\25\1\74\1\34\1\33\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\57\1\7\1\54\1\26\1\73\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\75\1\uffff\1\76\1\61\10\uffff\1\21\3\uffff\1\24\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\43\1\1\1\5\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\11\uffff\1\71\1\70\7\uffff\1\46",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\66\3\uffff\1\37\1\15\1\72\1\uffff\1\44\1\41\1\uffff\1\20\1\uffff\1\25\1\74\1\34\1\33\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\57\1\7\1\54\1\26\1\73\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\75\1\uffff\1\76\1\61\10\uffff\1\21\3\uffff\1\24\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\43\1\1\2\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\11\uffff\1\71\1\70\7\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_237 = DFA.unpackEncodedString(dfa_237s);
    static final char[] dfa_238 = DFA.unpackEncodedStringToUnsignedChars(dfa_238s);
    static final char[] dfa_239 = DFA.unpackEncodedStringToUnsignedChars(dfa_239s);
    static final short[] dfa_240 = DFA.unpackEncodedString(dfa_240s);
    static final short[] dfa_241 = DFA.unpackEncodedString(dfa_241s);
    static final short[][] dfa_242 = unpackEncodedStringArray(dfa_242s);
    class DFA339 extends DFA {
        public DFA339(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 339;
            this.eot = dfa_104;
            this.eof = dfa_237;
            this.min = dfa_238;
            this.max = dfa_239;
            this.accept = dfa_240;
            this.special = dfa_241;
            this.transition = dfa_242;
        }
        public String getDescription() {
            return "()* loopback of 11091:2: ( ( ( ( ( ruleShiftOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsAdditiveExpressionParserRuleCall_1_0_2_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA339_0 = input.LA(1);
                        int index339_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA339_0==EOF||LA339_0==Instanceof||LA339_0==ExclamationMarkEqualsSignEqualsSign||(LA339_0>=LessThanSignLessThanSignEqualsSign && LA339_0<=EqualsSignEqualsSignEqualsSign)||(LA339_0>=ExclamationMarkEqualsSign && LA339_0<=AsteriskEqualsSign)||LA339_0==PlusSignEqualsSign||LA339_0==SolidusEqualsSign||(LA339_0>=LessThanSignEqualsSign && LA339_0<=EqualsSignEqualsSign)||LA339_0==QuestionMarkQuestionMark||LA339_0==CircumflexAccentEqualsSign||(LA339_0>=In && LA339_0<=VerticalLineVerticalLine)||LA339_0==Ampersand||LA339_0==RightParenthesis||(LA339_0>=Comma && LA339_0<=HyphenMinus)||(LA339_0>=Colon && LA339_0<=EqualsSign)||LA339_0==QuestionMark||(LA339_0>=RightSquareBracket && LA339_0<=CircumflexAccent)||(LA339_0>=VerticalLine && LA339_0<=RightCurlyBracket)||LA339_0==RULE_ML_COMMENT||LA339_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA339_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA339_0==LessThanSignLessThanSign) && (synpred192_InternalN4JSParser())) {s = 3;}
                        input.seek(index339_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA339_5 = input.LA(1);
                        int index339_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA339_5==EqualsSign) ) {s = 1;}
                        else if ((LA339_5>=4 && LA339_5<=148 && (s=T2S.M_32[LA339_5-(4)])>=0) && (synpred192_InternalN4JSParser())) { /* 62 cases */ }
                        input.seek(index339_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA339_4 = input.LA(1);
                        int index339_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA339_4==GreaterThanSign) ) {s = 5;}
                        else if ( (LA339_4==EqualsSign) ) {s = 1;}
                        else if ((LA339_4>=4 && LA339_4<=148 && (s=T2S.M_33[LA339_4-(4)])>=0) && (synpred192_InternalN4JSParser())) { /* 61 cases */ }
                        input.seek(index339_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 339, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_243s = "\105\uffff";
    static final String dfa_244s = "\1\1\104\uffff";
    static final String dfa_245s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_246s = "\1\160\1\uffff\1\u0094\102\uffff";
    static final String dfa_247s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_248s = "\1\1\1\uffff\1\0\102\uffff}>";
    static final String[] dfa_249s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\2\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\70\3\uffff\1\41\1\17\1\74\1\uffff\1\46\1\43\1\uffff\1\22\1\uffff\1\27\1\76\1\36\1\35\2\uffff\1\71\1\uffff\1\57\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\61\1\10\1\56\1\30\1\75\6\uffff\1\14\1\16\1\7\1\44\1\15\7\uffff\1\77\1\uffff\1\100\1\63\10\uffff\1\23\3\uffff\1\26\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\6\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\12\2\uffff\1\60\11\uffff\1\73\1\72\7\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_243 = DFA.unpackEncodedString(dfa_243s);
    static final short[] dfa_244 = DFA.unpackEncodedString(dfa_244s);
    static final char[] dfa_245 = DFA.unpackEncodedStringToUnsignedChars(dfa_245s);
    static final char[] dfa_246 = DFA.unpackEncodedStringToUnsignedChars(dfa_246s);
    static final short[] dfa_247 = DFA.unpackEncodedString(dfa_247s);
    static final short[] dfa_248 = DFA.unpackEncodedString(dfa_248s);
    static final short[][] dfa_249 = unpackEncodedStringArray(dfa_249s);
    class DFA342 extends DFA {
        public DFA342(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 342;
            this.eot = dfa_243;
            this.eof = dfa_244;
            this.min = dfa_245;
            this.max = dfa_246;
            this.accept = dfa_247;
            this.special = dfa_248;
            this.transition = dfa_249;
        }
        public String getDescription() {
            return "()* loopback of 11338:2: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA342_2 = input.LA(1);
                        int index342_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA342_2>=4 && LA342_2<=148 && (s=T2S.M_34[LA342_2-(4)])>=0) && (synpred194_InternalN4JSParser())) { /* 63 cases */ }
                        else if ( (LA342_2==GreaterThanSign) ) {s = 1;}
                        input.seek(index342_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA342_0 = input.LA(1);
                        int index342_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA342_0==EOF||LA342_0==ExclamationMarkEqualsSignEqualsSign||(LA342_0>=LessThanSignLessThanSignEqualsSign && LA342_0<=EqualsSignEqualsSignEqualsSign)||(LA342_0>=ExclamationMarkEqualsSign && LA342_0<=AsteriskEqualsSign)||LA342_0==PlusSignEqualsSign||LA342_0==SolidusEqualsSign||LA342_0==EqualsSignEqualsSign||LA342_0==QuestionMarkQuestionMark||LA342_0==CircumflexAccentEqualsSign||(LA342_0>=In && LA342_0<=VerticalLineVerticalLine)||LA342_0==Ampersand||(LA342_0>=Comma && LA342_0<=HyphenMinus)||LA342_0==Semicolon||LA342_0==EqualsSign||LA342_0==QuestionMark||LA342_0==CircumflexAccent||(LA342_0>=VerticalLine && LA342_0<=RightCurlyBracket)) ) {s = 1;}
                        else if ( (LA342_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA342_0==LessThanSign) && (synpred194_InternalN4JSParser())) {s = 3;}
                        else if ( (LA342_0==LessThanSignEqualsSign) && (synpred194_InternalN4JSParser())) {s = 4;}
                        else if ( (LA342_0==Instanceof) && (synpred194_InternalN4JSParser())) {s = 5;}
                        input.seek(index342_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 342, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_250s = "\106\uffff";
    static final String dfa_251s = "\1\1\105\uffff";
    static final String dfa_252s = "\1\7\1\uffff\1\4\103\uffff";
    static final String dfa_253s = "\1\u0098\1\uffff\1\u0094\103\uffff";
    static final String dfa_254s = "\1\uffff\1\2\1\uffff\103\1";
    static final String dfa_255s = "\1\0\1\uffff\1\1\103\uffff}>";
    static final String[] dfa_256s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\1\6\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\40\1\uffff\1\35\1\41\1\43\1\22\2\uffff\1\21\1\71\3\uffff\1\42\1\20\1\75\1\uffff\1\47\1\44\1\uffff\1\23\1\uffff\1\30\1\77\1\37\1\36\2\uffff\1\72\1\uffff\1\60\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\62\1\11\1\57\1\31\1\76\6\uffff\1\15\1\17\1\10\1\45\1\16\7\uffff\1\100\1\uffff\1\101\1\64\10\uffff\1\24\3\uffff\1\27\2\uffff\1\105\2\uffff\1\67\2\uffff\1\102\1\uffff\1\103\1\uffff\1\63\2\uffff\1\46\1\7\1\1\1\uffff\1\70\1\65\2\uffff\1\66\2\uffff\1\104\3\uffff\1\50\1\uffff\1\55\1\52\1\53\1\54\1\uffff\1\56\1\uffff\1\13\2\uffff\1\61\11\uffff\1\74\1\73\7\uffff\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_250 = DFA.unpackEncodedString(dfa_250s);
    static final short[] dfa_251 = DFA.unpackEncodedString(dfa_251s);
    static final char[] dfa_252 = DFA.unpackEncodedStringToUnsignedChars(dfa_252s);
    static final char[] dfa_253 = DFA.unpackEncodedStringToUnsignedChars(dfa_253s);
    static final short[] dfa_254 = DFA.unpackEncodedString(dfa_254s);
    static final short[] dfa_255 = DFA.unpackEncodedString(dfa_255s);
    static final short[][] dfa_256 = unpackEncodedStringArray(dfa_256s);
    class DFA343 extends DFA {
        public DFA343(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 343;
            this.eot = dfa_250;
            this.eof = dfa_251;
            this.min = dfa_252;
            this.max = dfa_253;
            this.accept = dfa_254;
            this.special = dfa_255;
            this.transition = dfa_256;
        }
        public String getDescription() {
            return "()* loopback of 11551:2: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA343_0 = input.LA(1);
                        int index343_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA343_0==EOF||LA343_0==ExclamationMarkEqualsSignEqualsSign||(LA343_0>=LessThanSignLessThanSignEqualsSign && LA343_0<=EqualsSignEqualsSignEqualsSign)||(LA343_0>=ExclamationMarkEqualsSign && LA343_0<=AsteriskEqualsSign)||LA343_0==PlusSignEqualsSign||LA343_0==SolidusEqualsSign||LA343_0==EqualsSignEqualsSign||LA343_0==QuestionMarkQuestionMark||LA343_0==CircumflexAccentEqualsSign||(LA343_0>=VerticalLineEqualsSign && LA343_0<=VerticalLineVerticalLine)||LA343_0==Ampersand||LA343_0==RightParenthesis||(LA343_0>=Comma && LA343_0<=HyphenMinus)||(LA343_0>=Colon && LA343_0<=Semicolon)||LA343_0==EqualsSign||LA343_0==QuestionMark||(LA343_0>=RightSquareBracket && LA343_0<=CircumflexAccent)||(LA343_0>=VerticalLine && LA343_0<=RightCurlyBracket)||LA343_0==RULE_ML_COMMENT||LA343_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA343_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA343_0==LessThanSign) && (synpred196_InternalN4JSParser())) {s = 3;}
                        else if ( (LA343_0==LessThanSignEqualsSign) && (synpred196_InternalN4JSParser())) {s = 4;}
                        else if ( (LA343_0==Instanceof) && (synpred196_InternalN4JSParser())) {s = 5;}
                        else if ( (LA343_0==In) && (synpred196_InternalN4JSParser())) {s = 6;}
                        input.seek(index343_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA343_2 = input.LA(1);
                        int index343_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA343_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA343_2>=4 && LA343_2<=148 && (s=T2S.M_35[LA343_2-(4)])>=0) && (synpred196_InternalN4JSParser())) { /* 64 cases */ }
                        input.seek(index343_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 343, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_257s = "\1\7\1\uffff\1\4\101\uffff";
    static final String dfa_258s = "\1\157\1\uffff\1\u0094\101\uffff";
    static final String dfa_259s = "\1\uffff\1\2\1\uffff\101\1";
    static final String dfa_260s = "\1\0\1\uffff\1\1\101\uffff}>";
    static final String[] dfa_261s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\67\3\uffff\1\40\1\16\1\73\1\uffff\1\45\1\42\1\uffff\1\21\1\uffff\1\26\1\75\1\35\1\34\2\uffff\1\70\1\uffff\1\56\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\60\1\10\1\55\1\27\1\74\6\uffff\1\13\1\15\1\7\1\43\1\14\7\uffff\1\76\1\uffff\1\77\1\62\10\uffff\1\22\3\uffff\1\25\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\6\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\12\2\uffff\1\57\11\uffff\1\72\1\71\7\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_257 = DFA.unpackEncodedStringToUnsignedChars(dfa_257s);
    static final char[] dfa_258 = DFA.unpackEncodedStringToUnsignedChars(dfa_258s);
    static final short[] dfa_259 = DFA.unpackEncodedString(dfa_259s);
    static final short[] dfa_260 = DFA.unpackEncodedString(dfa_260s);
    static final short[][] dfa_261 = unpackEncodedStringArray(dfa_261s);
    class DFA344 extends DFA {
        public DFA344(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 344;
            this.eot = dfa_230;
            this.eof = dfa_231;
            this.min = dfa_257;
            this.max = dfa_258;
            this.accept = dfa_259;
            this.special = dfa_260;
            this.transition = dfa_261;
        }
        public String getDescription() {
            return "()* loopback of 11764:2: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA344_0 = input.LA(1);
                        int index344_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA344_0==EOF||LA344_0==ExclamationMarkEqualsSignEqualsSign||(LA344_0>=LessThanSignLessThanSignEqualsSign && LA344_0<=EqualsSignEqualsSignEqualsSign)||(LA344_0>=ExclamationMarkEqualsSign && LA344_0<=AsteriskEqualsSign)||LA344_0==PlusSignEqualsSign||LA344_0==SolidusEqualsSign||LA344_0==EqualsSignEqualsSign||LA344_0==QuestionMarkQuestionMark||LA344_0==CircumflexAccentEqualsSign||(LA344_0>=In && LA344_0<=VerticalLineVerticalLine)||LA344_0==Ampersand||(LA344_0>=Comma && LA344_0<=HyphenMinus)||LA344_0==Semicolon||LA344_0==EqualsSign||LA344_0==QuestionMark||LA344_0==CircumflexAccent||LA344_0==VerticalLine) ) {s = 1;}
                        else if ( (LA344_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA344_0==LessThanSign) && (synpred198_InternalN4JSParser())) {s = 3;}
                        else if ( (LA344_0==LessThanSignEqualsSign) && (synpred198_InternalN4JSParser())) {s = 4;}
                        else if ( (LA344_0==Instanceof) && (synpred198_InternalN4JSParser())) {s = 5;}
                        input.seek(index344_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA344_2 = input.LA(1);
                        int index344_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA344_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA344_2>=4 && LA344_2<=148 && (s=T2S.M_36[LA344_2-(4)])>=0) && (synpred198_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index344_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 344, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_262s = "\1\u0098\1\uffff\1\u0094\102\uffff";
    static final String[] dfa_263s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\1\6\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\70\3\uffff\1\41\1\17\1\74\1\uffff\1\46\1\43\1\uffff\1\22\1\uffff\1\27\1\76\1\36\1\35\2\uffff\1\71\1\uffff\1\57\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\61\1\11\1\56\1\30\1\75\6\uffff\1\14\1\16\1\10\1\44\1\15\7\uffff\1\77\1\uffff\1\100\1\63\10\uffff\1\23\3\uffff\1\26\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\7\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\13\2\uffff\1\60\11\uffff\1\73\1\72\7\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_262 = DFA.unpackEncodedStringToUnsignedChars(dfa_262s);
    static final short[][] dfa_263 = unpackEncodedStringArray(dfa_263s);
    class DFA345 extends DFA {
        public DFA345(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 345;
            this.eot = dfa_243;
            this.eof = dfa_244;
            this.min = dfa_245;
            this.max = dfa_262;
            this.accept = dfa_247;
            this.special = dfa_248;
            this.transition = dfa_263;
        }
        public String getDescription() {
            return "()* loopback of 11974:2: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA345_2 = input.LA(1);
                        int index345_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA345_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA345_2>=4 && LA345_2<=148 && (s=T2S.M_37[LA345_2-(4)])>=0) && (synpred200_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index345_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA345_0 = input.LA(1);
                        int index345_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA345_0==EOF||LA345_0==ExclamationMarkEqualsSignEqualsSign||(LA345_0>=LessThanSignLessThanSignEqualsSign && LA345_0<=EqualsSignEqualsSignEqualsSign)||(LA345_0>=ExclamationMarkEqualsSign && LA345_0<=AsteriskEqualsSign)||LA345_0==PlusSignEqualsSign||LA345_0==SolidusEqualsSign||LA345_0==EqualsSignEqualsSign||LA345_0==QuestionMarkQuestionMark||LA345_0==CircumflexAccentEqualsSign||(LA345_0>=VerticalLineEqualsSign && LA345_0<=VerticalLineVerticalLine)||LA345_0==Ampersand||LA345_0==RightParenthesis||(LA345_0>=Comma && LA345_0<=HyphenMinus)||(LA345_0>=Colon && LA345_0<=Semicolon)||LA345_0==EqualsSign||LA345_0==QuestionMark||(LA345_0>=RightSquareBracket && LA345_0<=CircumflexAccent)||(LA345_0>=VerticalLine && LA345_0<=RightCurlyBracket)||LA345_0==RULE_ML_COMMENT||LA345_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA345_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA345_0==LessThanSign) && (synpred200_InternalN4JSParser())) {s = 3;}
                        else if ( (LA345_0==LessThanSignEqualsSign) && (synpred200_InternalN4JSParser())) {s = 4;}
                        else if ( (LA345_0==Instanceof) && (synpred200_InternalN4JSParser())) {s = 5;}
                        else if ( (LA345_0==In) && (synpred200_InternalN4JSParser())) {s = 6;}
                        input.seek(index345_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 345, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_264s = "\1\4\35\0\44\uffff";
    static final String dfa_265s = "\1\u0094\35\0\44\uffff";
    static final String dfa_266s = "\36\uffff\1\4\40\uffff\1\1\1\3\1\2";
    static final String dfa_267s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\44\uffff}>";
    static final String[] dfa_268s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\36\3\uffff\1\32\1\12\1\36\1\uffff\1\36\1\34\1\uffff\1\15\1\uffff\1\22\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\3\36\1\23\1\36\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\36\1\uffff\2\36\10\uffff\1\16\3\uffff\1\21\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\7\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_264 = DFA.unpackEncodedStringToUnsignedChars(dfa_264s);
    static final char[] dfa_265 = DFA.unpackEncodedStringToUnsignedChars(dfa_265s);
    static final short[] dfa_266 = DFA.unpackEncodedString(dfa_266s);
    static final short[] dfa_267 = DFA.unpackEncodedString(dfa_267s);
    static final short[][] dfa_268 = unpackEncodedStringArray(dfa_268s);
    class DFA383 extends DFA {
        public DFA383(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 383;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_264;
            this.max = dfa_265;
            this.accept = dfa_266;
            this.special = dfa_267;
            this.transition = dfa_268;
        }
        public String getDescription() {
            return "13576:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= ruleAwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= rulePromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters ( ruleColonSepReturnTypeRef )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator ( ( LeftParenthesis )=> ruleStrictFormalParameters ) ) ) ( ruleColonSepReturnTypeRef )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= ruleArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= ruleConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA383_1 = input.LA(1);
                        int index383_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_InternalN4JSParser()) ) {s = 63;}
                        else if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA383_2 = input.LA(1);
                        int index383_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA383_3 = input.LA(1);
                        int index383_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA383_4 = input.LA(1);
                        int index383_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA383_5 = input.LA(1);
                        int index383_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA383_6 = input.LA(1);
                        int index383_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA383_7 = input.LA(1);
                        int index383_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA383_8 = input.LA(1);
                        int index383_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA383_9 = input.LA(1);
                        int index383_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA383_10 = input.LA(1);
                        int index383_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA383_11 = input.LA(1);
                        int index383_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA383_12 = input.LA(1);
                        int index383_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA383_13 = input.LA(1);
                        int index383_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA383_14 = input.LA(1);
                        int index383_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA383_15 = input.LA(1);
                        int index383_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA383_16 = input.LA(1);
                        int index383_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA383_17 = input.LA(1);
                        int index383_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA383_18 = input.LA(1);
                        int index383_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA383_19 = input.LA(1);
                        int index383_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA383_20 = input.LA(1);
                        int index383_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA383_21 = input.LA(1);
                        int index383_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA383_22 = input.LA(1);
                        int index383_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA383_23 = input.LA(1);
                        int index383_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA383_24 = input.LA(1);
                        int index383_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA383_25 = input.LA(1);
                        int index383_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA383_26 = input.LA(1);
                        int index383_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA383_27 = input.LA(1);
                        int index383_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA383_28 = input.LA(1);
                        int index383_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA383_29 = input.LA(1);
                        int index383_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index383_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 383, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_269s = "\16\uffff";
    static final String dfa_270s = "\1\14\15\uffff";
    static final String dfa_271s = "\1\67\13\0\2\uffff";
    static final String dfa_272s = "\1\160\13\0\2\uffff";
    static final String dfa_273s = "\14\uffff\1\2\1\1";
    static final String dfa_274s = "\1\uffff\1\4\1\7\1\12\1\2\1\5\1\11\1\0\1\3\1\6\1\10\1\1\2\uffff}>";
    static final String[] dfa_275s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\7\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\1\6\3\uffff\1\14\1\uffff\1\1\1\10\7\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_269 = DFA.unpackEncodedString(dfa_269s);
    static final short[] dfa_270 = DFA.unpackEncodedString(dfa_270s);
    static final char[] dfa_271 = DFA.unpackEncodedStringToUnsignedChars(dfa_271s);
    static final char[] dfa_272 = DFA.unpackEncodedStringToUnsignedChars(dfa_272s);
    static final short[] dfa_273 = DFA.unpackEncodedString(dfa_273s);
    static final short[] dfa_274 = DFA.unpackEncodedString(dfa_274s);
    static final short[][] dfa_275 = unpackEncodedStringArray(dfa_275s);
    class DFA382 extends DFA {
        public DFA382(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 382;
            this.eot = dfa_269;
            this.eof = dfa_270;
            this.min = dfa_271;
            this.max = dfa_272;
            this.accept = dfa_273;
            this.special = dfa_274;
            this.transition = dfa_275;
        }
        public String getDescription() {
            return "13649:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA382_7 = input.LA(1);
                        int index382_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index382_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA382_11 = input.LA(1);
                        int index382_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index382_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA382_4 = input.LA(1);
                        int index382_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index382_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA382_8 = input.LA(1);
                        int index382_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index382_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA382_1 = input.LA(1);
                        int index382_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index382_1);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA382_5 = input.LA(1);
                        int index382_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index382_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA382_9 = input.LA(1);
                        int index382_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index382_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA382_2 = input.LA(1);
                        int index382_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index382_2);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA382_10 = input.LA(1);
                        int index382_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index382_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA382_6 = input.LA(1);
                        int index382_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index382_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA382_3 = input.LA(1);
                        int index382_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index382_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 382, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA385 extends DFA {
        public DFA385(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 385;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_264;
            this.max = dfa_265;
            this.accept = dfa_266;
            this.special = dfa_267;
            this.transition = dfa_268;
        }
        public String getDescription() {
            return "13686:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm1_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm1_PromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters ( ruleColonSepReturnTypeRef )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator ( ( LeftParenthesis )=> ruleStrictFormalParameters ) ) ) ( ruleColonSepReturnTypeRef )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm1_ArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= norm1_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA385_1 = input.LA(1);
                        int index385_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 63;}
                        else if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA385_2 = input.LA(1);
                        int index385_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA385_3 = input.LA(1);
                        int index385_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA385_4 = input.LA(1);
                        int index385_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA385_5 = input.LA(1);
                        int index385_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA385_6 = input.LA(1);
                        int index385_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA385_7 = input.LA(1);
                        int index385_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA385_8 = input.LA(1);
                        int index385_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA385_9 = input.LA(1);
                        int index385_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA385_10 = input.LA(1);
                        int index385_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA385_11 = input.LA(1);
                        int index385_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA385_12 = input.LA(1);
                        int index385_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA385_13 = input.LA(1);
                        int index385_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA385_14 = input.LA(1);
                        int index385_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA385_15 = input.LA(1);
                        int index385_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA385_16 = input.LA(1);
                        int index385_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA385_17 = input.LA(1);
                        int index385_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA385_18 = input.LA(1);
                        int index385_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA385_19 = input.LA(1);
                        int index385_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA385_20 = input.LA(1);
                        int index385_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA385_21 = input.LA(1);
                        int index385_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA385_22 = input.LA(1);
                        int index385_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA385_23 = input.LA(1);
                        int index385_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA385_24 = input.LA(1);
                        int index385_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA385_25 = input.LA(1);
                        int index385_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA385_26 = input.LA(1);
                        int index385_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA385_27 = input.LA(1);
                        int index385_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA385_28 = input.LA(1);
                        int index385_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA385_29 = input.LA(1);
                        int index385_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index385_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 385, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_276s = "\1\u0098\13\0\2\uffff";
    static final String dfa_277s = "\1\uffff\1\7\1\0\1\3\1\6\1\10\1\11\1\4\1\2\1\12\1\1\1\5\2\uffff}>";
    static final String[] dfa_278s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\7\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\1\6\2\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\45\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_276 = DFA.unpackEncodedStringToUnsignedChars(dfa_276s);
    static final short[] dfa_277 = DFA.unpackEncodedString(dfa_277s);
    static final short[][] dfa_278 = unpackEncodedStringArray(dfa_278s);
    class DFA384 extends DFA {
        public DFA384(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 384;
            this.eot = dfa_269;
            this.eof = dfa_270;
            this.min = dfa_271;
            this.max = dfa_276;
            this.accept = dfa_273;
            this.special = dfa_277;
            this.transition = dfa_278;
        }
        public String getDescription() {
            return "13759:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA384_2 = input.LA(1);
                        int index384_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index384_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA384_10 = input.LA(1);
                        int index384_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index384_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA384_8 = input.LA(1);
                        int index384_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index384_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA384_3 = input.LA(1);
                        int index384_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index384_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA384_7 = input.LA(1);
                        int index384_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index384_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA384_11 = input.LA(1);
                        int index384_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index384_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA384_4 = input.LA(1);
                        int index384_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index384_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA384_1 = input.LA(1);
                        int index384_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index384_1);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA384_5 = input.LA(1);
                        int index384_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index384_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA384_6 = input.LA(1);
                        int index384_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index384_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA384_9 = input.LA(1);
                        int index384_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index384_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 384, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_279s = "\1\4\34\0\45\uffff";
    static final String dfa_280s = "\1\u0094\34\0\45\uffff";
    static final String dfa_281s = "\35\uffff\1\4\1\5\40\uffff\1\1\1\3\1\2";
    static final String dfa_282s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\45\uffff}>";
    static final String[] dfa_283s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\36\3\uffff\1\31\1\11\1\36\1\uffff\1\36\1\33\1\uffff\1\14\1\uffff\1\21\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\3\36\1\22\1\36\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\36\1\uffff\2\36\10\uffff\1\15\3\uffff\1\20\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\7\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_279 = DFA.unpackEncodedStringToUnsignedChars(dfa_279s);
    static final char[] dfa_280 = DFA.unpackEncodedStringToUnsignedChars(dfa_280s);
    static final short[] dfa_281 = DFA.unpackEncodedString(dfa_281s);
    static final short[] dfa_282 = DFA.unpackEncodedString(dfa_282s);
    static final short[][] dfa_283 = unpackEncodedStringArray(dfa_283s);
    class DFA387 extends DFA {
        public DFA387(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 387;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_279;
            this.max = dfa_280;
            this.accept = dfa_281;
            this.special = dfa_282;
            this.transition = dfa_283;
        }
        public String getDescription() {
            return "13796:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm2_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm2_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters ( ruleColonSepReturnTypeRef )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator ( ( LeftParenthesis )=> norm1_StrictFormalParameters ) ) ) ( ruleColonSepReturnTypeRef )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm2_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= ruleYieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm2_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA387_1 = input.LA(1);
                        int index387_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 63;}
                        else if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA387_2 = input.LA(1);
                        int index387_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA387_3 = input.LA(1);
                        int index387_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA387_4 = input.LA(1);
                        int index387_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA387_5 = input.LA(1);
                        int index387_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA387_6 = input.LA(1);
                        int index387_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA387_7 = input.LA(1);
                        int index387_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA387_8 = input.LA(1);
                        int index387_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA387_9 = input.LA(1);
                        int index387_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA387_10 = input.LA(1);
                        int index387_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA387_11 = input.LA(1);
                        int index387_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA387_12 = input.LA(1);
                        int index387_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA387_13 = input.LA(1);
                        int index387_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA387_14 = input.LA(1);
                        int index387_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA387_15 = input.LA(1);
                        int index387_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA387_16 = input.LA(1);
                        int index387_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA387_17 = input.LA(1);
                        int index387_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA387_18 = input.LA(1);
                        int index387_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA387_19 = input.LA(1);
                        int index387_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA387_20 = input.LA(1);
                        int index387_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA387_21 = input.LA(1);
                        int index387_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA387_22 = input.LA(1);
                        int index387_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA387_23 = input.LA(1);
                        int index387_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA387_24 = input.LA(1);
                        int index387_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA387_25 = input.LA(1);
                        int index387_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA387_26 = input.LA(1);
                        int index387_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA387_27 = input.LA(1);
                        int index387_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA387_28 = input.LA(1);
                        int index387_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index387_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 387, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_284s = "\1\150\13\0\2\uffff";
    static final String dfa_285s = "\1\uffff\1\4\1\0\1\5\1\1\1\6\1\7\1\10\1\3\1\11\1\2\1\12\2\uffff}>";
    static final String[] dfa_286s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\7\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\1\6\3\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_284 = DFA.unpackEncodedStringToUnsignedChars(dfa_284s);
    static final short[] dfa_285 = DFA.unpackEncodedString(dfa_285s);
    static final short[][] dfa_286 = unpackEncodedStringArray(dfa_286s);
    class DFA386 extends DFA {
        public DFA386(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 386;
            this.eot = dfa_269;
            this.eof = dfa_270;
            this.min = dfa_271;
            this.max = dfa_284;
            this.accept = dfa_273;
            this.special = dfa_285;
            this.transition = dfa_286;
        }
        public String getDescription() {
            return "13871:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA386_2 = input.LA(1);
                        int index386_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index386_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA386_4 = input.LA(1);
                        int index386_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index386_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA386_10 = input.LA(1);
                        int index386_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index386_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA386_8 = input.LA(1);
                        int index386_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index386_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA386_1 = input.LA(1);
                        int index386_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index386_1);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA386_3 = input.LA(1);
                        int index386_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index386_3);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA386_5 = input.LA(1);
                        int index386_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index386_5);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA386_6 = input.LA(1);
                        int index386_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index386_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA386_7 = input.LA(1);
                        int index386_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index386_7);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA386_9 = input.LA(1);
                        int index386_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index386_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA386_11 = input.LA(1);
                        int index386_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index386_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 386, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA389 extends DFA {
        public DFA389(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 389;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_279;
            this.max = dfa_280;
            this.accept = dfa_281;
            this.special = dfa_282;
            this.transition = dfa_283;
        }
        public String getDescription() {
            return "13908:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm3_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm3_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters ( ruleColonSepReturnTypeRef )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator ( ( LeftParenthesis )=> norm1_StrictFormalParameters ) ) ) ( ruleColonSepReturnTypeRef )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm3_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= norm1_YieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm3_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA389_1 = input.LA(1);
                        int index389_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 63;}
                        else if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA389_2 = input.LA(1);
                        int index389_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA389_3 = input.LA(1);
                        int index389_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA389_4 = input.LA(1);
                        int index389_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA389_5 = input.LA(1);
                        int index389_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA389_6 = input.LA(1);
                        int index389_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA389_7 = input.LA(1);
                        int index389_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA389_8 = input.LA(1);
                        int index389_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA389_9 = input.LA(1);
                        int index389_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA389_10 = input.LA(1);
                        int index389_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA389_11 = input.LA(1);
                        int index389_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA389_12 = input.LA(1);
                        int index389_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA389_13 = input.LA(1);
                        int index389_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA389_14 = input.LA(1);
                        int index389_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA389_15 = input.LA(1);
                        int index389_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA389_16 = input.LA(1);
                        int index389_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA389_17 = input.LA(1);
                        int index389_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA389_18 = input.LA(1);
                        int index389_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA389_19 = input.LA(1);
                        int index389_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA389_20 = input.LA(1);
                        int index389_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA389_21 = input.LA(1);
                        int index389_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA389_22 = input.LA(1);
                        int index389_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA389_23 = input.LA(1);
                        int index389_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA389_24 = input.LA(1);
                        int index389_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA389_25 = input.LA(1);
                        int index389_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA389_26 = input.LA(1);
                        int index389_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA389_27 = input.LA(1);
                        int index389_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA389_28 = input.LA(1);
                        int index389_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index389_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 389, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_287s = "\1\uffff\1\10\1\4\1\11\1\5\1\12\1\7\1\0\1\3\1\1\1\6\1\2\2\uffff}>";
    static final short[] dfa_287 = DFA.unpackEncodedString(dfa_287s);
    class DFA388 extends DFA {
        public DFA388(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 388;
            this.eot = dfa_269;
            this.eof = dfa_270;
            this.min = dfa_271;
            this.max = dfa_276;
            this.accept = dfa_273;
            this.special = dfa_287;
            this.transition = dfa_278;
        }
        public String getDescription() {
            return "13983:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA388_7 = input.LA(1);
                        int index388_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index388_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA388_9 = input.LA(1);
                        int index388_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index388_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA388_11 = input.LA(1);
                        int index388_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index388_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA388_8 = input.LA(1);
                        int index388_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index388_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA388_2 = input.LA(1);
                        int index388_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index388_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA388_4 = input.LA(1);
                        int index388_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index388_4);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA388_10 = input.LA(1);
                        int index388_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index388_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA388_6 = input.LA(1);
                        int index388_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index388_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA388_1 = input.LA(1);
                        int index388_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index388_1);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA388_3 = input.LA(1);
                        int index388_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index388_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA388_5 = input.LA(1);
                        int index388_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index388_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 388, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_288s = "\114\uffff";
    static final String dfa_289s = "\1\77\113\uffff";
    static final String dfa_290s = "\1\4\17\uffff\1\0\36\uffff\1\0\14\uffff\1\0\17\uffff";
    static final String dfa_291s = "\1\u0094\17\uffff\1\0\36\uffff\1\0\14\uffff\1\0\17\uffff";
    static final String dfa_292s = "\1\uffff\17\1\1\uffff\36\1\1\uffff\14\1\1\uffff\2\1\1\2\14\uffff";
    static final String dfa_293s = "\1\0\17\uffff\1\1\36\uffff\1\2\14\uffff\1\3\17\uffff}>";
    static final String[] dfa_294s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\62\3\uffff\1\31\1\11\1\66\1\uffff\1\42\1\33\1\uffff\1\14\1\uffff\1\21\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\55\1\37\1\52\1\22\1\67\3\uffff\1\77\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\77\1\uffff\2\77\1\71\1\77\1\72\1\57\7\uffff\1\77\1\15\2\uffff\1\77\1\20\1\77\1\uffff\1\76\2\uffff\1\3\2\uffff\1\73\1\77\1\74\1\uffff\1\56\1\uffff\1\77\1\41\2\77\1\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\11\uffff\1\65\1\64\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_288 = DFA.unpackEncodedString(dfa_288s);
    static final short[] dfa_289 = DFA.unpackEncodedString(dfa_289s);
    static final char[] dfa_290 = DFA.unpackEncodedStringToUnsignedChars(dfa_290s);
    static final char[] dfa_291 = DFA.unpackEncodedStringToUnsignedChars(dfa_291s);
    static final short[] dfa_292 = DFA.unpackEncodedString(dfa_292s);
    static final short[] dfa_293 = DFA.unpackEncodedString(dfa_293s);
    static final short[][] dfa_294 = unpackEncodedStringArray(dfa_294s);
    class DFA391 extends DFA {
        public DFA391(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 391;
            this.eot = dfa_288;
            this.eof = dfa_289;
            this.min = dfa_290;
            this.max = dfa_291;
            this.accept = dfa_292;
            this.special = dfa_293;
            this.transition = dfa_294;
        }
        public String getDescription() {
            return "14042:2: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA391_0 = input.LA(1);
                        int index391_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA391_0>=5 && LA391_0<=126 && (s=T2S.M_38[LA391_0-(5)])>=0) && (synpred259_InternalN4JSParser())) { /* 15 cases */ }
                        else if ( (LA391_0==Of) ) {s = 16;}
                        else if ((LA391_0>=4 && LA391_0<=148 && (s=T2S.M_39[LA391_0-(4)])>=0) && (synpred259_InternalN4JSParser())) { /* 31 cases */ }
                        else if ( (LA391_0==SolidusEqualsSign) ) {s = 47;}
                        else if ((LA391_0>=15 && LA391_0<=140 && (s=T2S.M_40[LA391_0-(15)])>=0) && (synpred259_InternalN4JSParser())) { /* 13 cases */ }
                        else if ( (LA391_0==HyphenMinus) ) {s = 60;}
                        else if ( (LA391_0==Tilde) && (synpred259_InternalN4JSParser())) {s = 61;}
                        else if ( (LA391_0==ExclamationMark) && (synpred259_InternalN4JSParser())) {s = 62;}
                        else if ( (LA391_0==EOF||LA391_0==LessThanSignLessThanSignEqualsSign||LA391_0==PercentSignEqualsSign||(LA391_0>=AmpersandEqualsSign && LA391_0<=AsteriskEqualsSign)||LA391_0==PlusSignEqualsSign||LA391_0==CircumflexAccentEqualsSign||LA391_0==In||LA391_0==VerticalLineEqualsSign||LA391_0==Comma||LA391_0==Semicolon||(LA391_0>=EqualsSign && LA391_0<=GreaterThanSign)) ) {s = 63;}
                        input.seek(index391_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA391_16 = input.LA(1);
                        int index391_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index391_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA391_47 = input.LA(1);
                        int index391_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index391_47);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA391_60 = input.LA(1);
                        int index391_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index391_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 391, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_295s = "\1\77\120\uffff";
    static final String dfa_296s = "\1\4\56\uffff\1\0\14\uffff\1\0\24\uffff";
    static final String dfa_297s = "\1\u0098\56\uffff\1\0\14\uffff\1\0\24\uffff";
    static final String dfa_298s = "\1\uffff\56\1\1\uffff\14\1\1\uffff\2\1\1\2\21\uffff";
    static final String dfa_299s = "\1\0\56\uffff\1\1\14\uffff\1\2\24\uffff}>";
    static final String[] dfa_300s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\62\3\uffff\1\31\1\11\1\66\1\uffff\1\42\1\33\1\uffff\1\14\1\uffff\1\21\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\55\1\37\1\52\1\22\1\67\3\uffff\1\77\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\77\1\uffff\2\77\1\71\1\77\1\72\1\57\7\uffff\1\77\1\15\3\uffff\1\20\1\77\1\uffff\1\76\2\uffff\1\3\1\77\1\uffff\1\73\1\77\1\74\1\uffff\1\56\2\77\1\41\2\77\1\uffff\1\2\1\60\1\77\1\uffff\1\61\1\uffff\1\77\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\11\uffff\1\65\1\64\7\uffff\1\44\1\uffff\1\77\1\uffff\1\77",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_295 = DFA.unpackEncodedString(dfa_295s);
    static final char[] dfa_296 = DFA.unpackEncodedStringToUnsignedChars(dfa_296s);
    static final char[] dfa_297 = DFA.unpackEncodedStringToUnsignedChars(dfa_297s);
    static final short[] dfa_298 = DFA.unpackEncodedString(dfa_298s);
    static final short[] dfa_299 = DFA.unpackEncodedString(dfa_299s);
    static final short[][] dfa_300 = unpackEncodedStringArray(dfa_300s);
    class DFA393 extends DFA {
        public DFA393(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 393;
            this.eot = dfa_73;
            this.eof = dfa_295;
            this.min = dfa_296;
            this.max = dfa_297;
            this.accept = dfa_298;
            this.special = dfa_299;
            this.transition = dfa_300;
        }
        public String getDescription() {
            return "14126:2: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA393_0 = input.LA(1);
                        int index393_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA393_0>=4 && LA393_0<=148 && (s=T2S.M_41[LA393_0-(4)])>=0) && (synpred261_InternalN4JSParser())) { /* 46 cases */ }
                        else if ( (LA393_0==SolidusEqualsSign) ) {s = 47;}
                        else if ((LA393_0>=15 && LA393_0<=140 && (s=T2S.M_40[LA393_0-(15)])>=0) && (synpred261_InternalN4JSParser())) { /* 13 cases */ }
                        else if ( (LA393_0==HyphenMinus) ) {s = 60;}
                        else if ( (LA393_0==Tilde) && (synpred261_InternalN4JSParser())) {s = 61;}
                        else if ( (LA393_0==ExclamationMark) && (synpred261_InternalN4JSParser())) {s = 62;}
                        else if ( (LA393_0==EOF||LA393_0==LessThanSignLessThanSignEqualsSign||LA393_0==PercentSignEqualsSign||(LA393_0>=AmpersandEqualsSign && LA393_0<=AsteriskEqualsSign)||LA393_0==PlusSignEqualsSign||LA393_0==CircumflexAccentEqualsSign||LA393_0==VerticalLineEqualsSign||LA393_0==RightParenthesis||LA393_0==Comma||(LA393_0>=Colon && LA393_0<=Semicolon)||(LA393_0>=EqualsSign && LA393_0<=GreaterThanSign)||LA393_0==RightSquareBracket||LA393_0==RightCurlyBracket||LA393_0==RULE_ML_COMMENT||LA393_0==RULE_EOL) ) {s = 63;}
                        input.seek(index393_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA393_47 = input.LA(1);
                        int index393_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index393_47);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA393_60 = input.LA(1);
                        int index393_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index393_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 393, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_301s = "\136\uffff";
    static final String dfa_302s = "\1\2\135\uffff";
    static final String dfa_303s = "\1\4\1\0\134\uffff";
    static final String dfa_304s = "\1\u0094\1\0\134\uffff";
    static final String dfa_305s = "\2\uffff\1\2\132\uffff\1\1";
    static final String dfa_306s = "\1\uffff\1\0\134\uffff}>";
    static final String[] dfa_307s = {
            "\61\2\1\uffff\1\2\2\uffff\10\2\5\uffff\1\2\1\uffff\2\2\6\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff\1\1\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_301 = DFA.unpackEncodedString(dfa_301s);
    static final short[] dfa_302 = DFA.unpackEncodedString(dfa_302s);
    static final char[] dfa_303 = DFA.unpackEncodedStringToUnsignedChars(dfa_303s);
    static final char[] dfa_304 = DFA.unpackEncodedStringToUnsignedChars(dfa_304s);
    static final short[] dfa_305 = DFA.unpackEncodedString(dfa_305s);
    static final short[] dfa_306 = DFA.unpackEncodedString(dfa_306s);
    static final short[][] dfa_307 = unpackEncodedStringArray(dfa_307s);
    class DFA424 extends DFA {
        public DFA424(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 424;
            this.eot = dfa_301;
            this.eof = dfa_302;
            this.min = dfa_303;
            this.max = dfa_304;
            this.accept = dfa_305;
            this.special = dfa_306;
            this.transition = dfa_307;
        }
        public String getDescription() {
            return "15403:2: ( ( ( LeftParenthesis )=>LeftParenthesisKeyword_1_0= LeftParenthesis ) ( ( (ArgsAnnotationArgumentParserRuleCall_1_1_0_0= ruleAnnotationArgument ) ) (CommaKeyword_1_1_1_0= Comma ( (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0= ruleAnnotationArgument ) ) )* )? RightParenthesisKeyword_1_2= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA424_1 = input.LA(1);
                        int index424_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 93;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index424_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 424, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_308s = "\12\uffff";
    static final String dfa_309s = "\1\uffff\7\11\2\uffff";
    static final String dfa_310s = "\1\10\7\4\2\uffff";
    static final String dfa_311s = "\1\176\7\u00a4\2\uffff";
    static final String dfa_312s = "\10\uffff\1\1\1\2";
    static final String dfa_313s = "\12\uffff}>";
    static final String[] dfa_314s = {
            "\1\4\7\uffff\1\6\13\uffff\1\5\2\uffff\1\3\12\uffff\1\2\10\uffff\1\1\112\uffff\1\7",
            "\62\11\1\uffff\27\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\62\11\1\uffff\27\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\62\11\1\uffff\27\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\62\11\1\uffff\27\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\62\11\1\uffff\27\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\62\11\1\uffff\27\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\62\11\1\uffff\27\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "",
            ""
    };
    static final short[] dfa_308 = DFA.unpackEncodedString(dfa_308s);
    static final short[] dfa_309 = DFA.unpackEncodedString(dfa_309s);
    static final char[] dfa_310 = DFA.unpackEncodedStringToUnsignedChars(dfa_310s);
    static final char[] dfa_311 = DFA.unpackEncodedStringToUnsignedChars(dfa_311s);
    static final short[] dfa_312 = DFA.unpackEncodedString(dfa_312s);
    static final short[] dfa_313 = DFA.unpackEncodedString(dfa_313s);
    static final short[][] dfa_314 = unpackEncodedStringArray(dfa_314s);
    class DFA430 extends DFA {
        public DFA430(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 430;
            this.eot = dfa_308;
            this.eof = dfa_309;
            this.min = dfa_310;
            this.max = dfa_311;
            this.accept = dfa_312;
            this.special = dfa_313;
            this.transition = dfa_314;
        }
        public String getDescription() {
            return "15616:2: ( ( (AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1= ruleTypeReferenceName ) ) FullStopKeyword_0_1= FullStop )?";
        }
    }
    static final String dfa_315s = "\112\uffff";
    static final String dfa_316s = "\1\4\1\uffff\12\0\2\uffff\70\0\4\uffff";
    static final String dfa_317s = "\1\u0094\1\uffff\12\0\2\uffff\70\0\4\uffff";
    static final String dfa_318s = "\1\uffff\1\1\12\uffff\2\4\70\uffff\1\6\1\2\1\3\1\5";
    static final String dfa_319s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\4\uffff}>";
    static final String[] dfa_320s = {
            "\1\74\1\67\1\100\1\42\1\76\1\101\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\16\1\77\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\102\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\106\1\uffff\1\15\7\uffff\1\14\3\uffff\1\1\1\105\11\uffff\1\104\1\uffff\3\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\22\uffff\1\104",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_315 = DFA.unpackEncodedString(dfa_315s);
    static final char[] dfa_316 = DFA.unpackEncodedStringToUnsignedChars(dfa_316s);
    static final char[] dfa_317 = DFA.unpackEncodedStringToUnsignedChars(dfa_317s);
    static final short[] dfa_318 = DFA.unpackEncodedString(dfa_318s);
    static final short[] dfa_319 = DFA.unpackEncodedString(dfa_319s);
    static final short[][] dfa_320 = unpackEncodedStringArray(dfa_320s);
    class DFA467 extends DFA {
        public DFA467(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 467;
            this.eot = dfa_315;
            this.eof = dfa_315;
            this.min = dfa_316;
            this.max = dfa_317;
            this.accept = dfa_318;
            this.special = dfa_319;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "16239:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= ruleAnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= ruleN4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= ruleN4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= ruleN4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= ruleN4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= ruleN4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA467_0 = input.LA(1);
                        int index467_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA467_0>=10 && LA467_0<=106 && (s=T2S.M_43[LA467_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA467_0==LessThanSign) && (synpred280_InternalN4JSParser())) {s = 12;}
                        else if ( (LA467_0==Asterisk) && (synpred280_InternalN4JSParser())) {s = 13;}
                        else if ((LA467_0>=4 && LA467_0<=129 && (s=T2S.M_44[LA467_0-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA467_0==RULE_DOUBLE||(LA467_0>=RULE_HEX_INT && LA467_0<=RULE_OCTAL_INT)||LA467_0==RULE_SCIENTIFIC_INT||LA467_0==RULE_INT) ) {s = 68;}
                        else if ( (LA467_0==LeftSquareBracket) ) {s = 69;}
                        else if ( (LA467_0==LeftParenthesis) ) {s = 70;}
                        input.seek(index467_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA467_2 = input.LA(1);
                        int index467_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA467_3 = input.LA(1);
                        int index467_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA467_4 = input.LA(1);
                        int index467_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA467_5 = input.LA(1);
                        int index467_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA467_6 = input.LA(1);
                        int index467_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA467_7 = input.LA(1);
                        int index467_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA467_8 = input.LA(1);
                        int index467_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA467_9 = input.LA(1);
                        int index467_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA467_10 = input.LA(1);
                        int index467_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA467_11 = input.LA(1);
                        int index467_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA467_14 = input.LA(1);
                        int index467_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_14);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA467_15 = input.LA(1);
                        int index467_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA467_16 = input.LA(1);
                        int index467_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA467_17 = input.LA(1);
                        int index467_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_17);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA467_18 = input.LA(1);
                        int index467_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA467_19 = input.LA(1);
                        int index467_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_19);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA467_20 = input.LA(1);
                        int index467_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_20);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA467_21 = input.LA(1);
                        int index467_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_21);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA467_22 = input.LA(1);
                        int index467_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_22);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA467_23 = input.LA(1);
                        int index467_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_23);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA467_24 = input.LA(1);
                        int index467_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_24);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA467_25 = input.LA(1);
                        int index467_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_25);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA467_26 = input.LA(1);
                        int index467_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_26);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA467_27 = input.LA(1);
                        int index467_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_27);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA467_28 = input.LA(1);
                        int index467_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA467_29 = input.LA(1);
                        int index467_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA467_30 = input.LA(1);
                        int index467_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA467_31 = input.LA(1);
                        int index467_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA467_32 = input.LA(1);
                        int index467_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA467_33 = input.LA(1);
                        int index467_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA467_34 = input.LA(1);
                        int index467_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA467_35 = input.LA(1);
                        int index467_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA467_36 = input.LA(1);
                        int index467_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA467_37 = input.LA(1);
                        int index467_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA467_38 = input.LA(1);
                        int index467_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA467_39 = input.LA(1);
                        int index467_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA467_40 = input.LA(1);
                        int index467_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA467_41 = input.LA(1);
                        int index467_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA467_42 = input.LA(1);
                        int index467_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA467_43 = input.LA(1);
                        int index467_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA467_44 = input.LA(1);
                        int index467_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA467_45 = input.LA(1);
                        int index467_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA467_46 = input.LA(1);
                        int index467_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA467_47 = input.LA(1);
                        int index467_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA467_48 = input.LA(1);
                        int index467_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA467_49 = input.LA(1);
                        int index467_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA467_50 = input.LA(1);
                        int index467_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA467_51 = input.LA(1);
                        int index467_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA467_52 = input.LA(1);
                        int index467_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA467_53 = input.LA(1);
                        int index467_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA467_54 = input.LA(1);
                        int index467_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA467_55 = input.LA(1);
                        int index467_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA467_56 = input.LA(1);
                        int index467_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA467_57 = input.LA(1);
                        int index467_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA467_58 = input.LA(1);
                        int index467_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA467_59 = input.LA(1);
                        int index467_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA467_60 = input.LA(1);
                        int index467_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA467_61 = input.LA(1);
                        int index467_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA467_62 = input.LA(1);
                        int index467_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA467_63 = input.LA(1);
                        int index467_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA467_64 = input.LA(1);
                        int index467_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA467_65 = input.LA(1);
                        int index467_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA467_66 = input.LA(1);
                        int index467_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA467_67 = input.LA(1);
                        int index467_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA467_68 = input.LA(1);
                        int index467_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA467_69 = input.LA(1);
                        int index467_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index467_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 467, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA468 extends DFA {
        public DFA468(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 468;
            this.eot = dfa_315;
            this.eof = dfa_315;
            this.min = dfa_316;
            this.max = dfa_317;
            this.accept = dfa_318;
            this.special = dfa_319;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "16462:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= norm1_N4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= norm1_N4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= norm1_N4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= norm1_N4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= norm1_N4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA468_0 = input.LA(1);
                        int index468_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA468_0>=10 && LA468_0<=106 && (s=T2S.M_43[LA468_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA468_0==LessThanSign) && (synpred283_InternalN4JSParser())) {s = 12;}
                        else if ( (LA468_0==Asterisk) && (synpred283_InternalN4JSParser())) {s = 13;}
                        else if ((LA468_0>=4 && LA468_0<=129 && (s=T2S.M_44[LA468_0-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA468_0==RULE_DOUBLE||(LA468_0>=RULE_HEX_INT && LA468_0<=RULE_OCTAL_INT)||LA468_0==RULE_SCIENTIFIC_INT||LA468_0==RULE_INT) ) {s = 68;}
                        else if ( (LA468_0==LeftSquareBracket) ) {s = 69;}
                        else if ( (LA468_0==LeftParenthesis) ) {s = 70;}
                        input.seek(index468_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA468_2 = input.LA(1);
                        int index468_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA468_3 = input.LA(1);
                        int index468_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA468_4 = input.LA(1);
                        int index468_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA468_5 = input.LA(1);
                        int index468_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA468_6 = input.LA(1);
                        int index468_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA468_7 = input.LA(1);
                        int index468_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA468_8 = input.LA(1);
                        int index468_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA468_9 = input.LA(1);
                        int index468_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA468_10 = input.LA(1);
                        int index468_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA468_11 = input.LA(1);
                        int index468_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA468_14 = input.LA(1);
                        int index468_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_14);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA468_15 = input.LA(1);
                        int index468_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA468_16 = input.LA(1);
                        int index468_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA468_17 = input.LA(1);
                        int index468_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_17);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA468_18 = input.LA(1);
                        int index468_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA468_19 = input.LA(1);
                        int index468_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_19);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA468_20 = input.LA(1);
                        int index468_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_20);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA468_21 = input.LA(1);
                        int index468_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_21);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA468_22 = input.LA(1);
                        int index468_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_22);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA468_23 = input.LA(1);
                        int index468_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_23);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA468_24 = input.LA(1);
                        int index468_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_24);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA468_25 = input.LA(1);
                        int index468_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_25);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA468_26 = input.LA(1);
                        int index468_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_26);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA468_27 = input.LA(1);
                        int index468_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_27);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA468_28 = input.LA(1);
                        int index468_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA468_29 = input.LA(1);
                        int index468_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA468_30 = input.LA(1);
                        int index468_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA468_31 = input.LA(1);
                        int index468_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA468_32 = input.LA(1);
                        int index468_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA468_33 = input.LA(1);
                        int index468_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA468_34 = input.LA(1);
                        int index468_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA468_35 = input.LA(1);
                        int index468_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA468_36 = input.LA(1);
                        int index468_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA468_37 = input.LA(1);
                        int index468_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA468_38 = input.LA(1);
                        int index468_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA468_39 = input.LA(1);
                        int index468_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA468_40 = input.LA(1);
                        int index468_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA468_41 = input.LA(1);
                        int index468_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA468_42 = input.LA(1);
                        int index468_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA468_43 = input.LA(1);
                        int index468_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA468_44 = input.LA(1);
                        int index468_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA468_45 = input.LA(1);
                        int index468_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA468_46 = input.LA(1);
                        int index468_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA468_47 = input.LA(1);
                        int index468_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA468_48 = input.LA(1);
                        int index468_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA468_49 = input.LA(1);
                        int index468_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA468_50 = input.LA(1);
                        int index468_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA468_51 = input.LA(1);
                        int index468_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA468_52 = input.LA(1);
                        int index468_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA468_53 = input.LA(1);
                        int index468_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA468_54 = input.LA(1);
                        int index468_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA468_55 = input.LA(1);
                        int index468_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA468_56 = input.LA(1);
                        int index468_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA468_57 = input.LA(1);
                        int index468_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA468_58 = input.LA(1);
                        int index468_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA468_59 = input.LA(1);
                        int index468_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA468_60 = input.LA(1);
                        int index468_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA468_61 = input.LA(1);
                        int index468_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA468_62 = input.LA(1);
                        int index468_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA468_63 = input.LA(1);
                        int index468_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA468_64 = input.LA(1);
                        int index468_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA468_65 = input.LA(1);
                        int index468_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA468_66 = input.LA(1);
                        int index468_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA468_67 = input.LA(1);
                        int index468_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA468_68 = input.LA(1);
                        int index468_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA468_69 = input.LA(1);
                        int index468_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index468_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 468, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_321s = "\110\uffff";
    static final String dfa_322s = "\1\4\12\0\2\uffff\70\0\3\uffff";
    static final String dfa_323s = "\1\u0094\12\0\2\uffff\70\0\3\uffff";
    static final String dfa_324s = "\13\uffff\2\3\70\uffff\1\1\1\2\1\4";
    static final String dfa_325s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\3\uffff}>";
    static final String[] dfa_326s = {
            "\1\73\1\66\1\77\1\41\1\75\1\100\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\15\1\76\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\101\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\7\uffff\1\14\7\uffff\1\13\4\uffff\1\104\11\uffff\1\103\1\uffff\3\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\22\uffff\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final short[] dfa_321 = DFA.unpackEncodedString(dfa_321s);
    static final char[] dfa_322 = DFA.unpackEncodedStringToUnsignedChars(dfa_322s);
    static final char[] dfa_323 = DFA.unpackEncodedStringToUnsignedChars(dfa_323s);
    static final short[] dfa_324 = DFA.unpackEncodedString(dfa_324s);
    static final short[] dfa_325 = DFA.unpackEncodedString(dfa_325s);
    static final short[][] dfa_326 = unpackEncodedStringArray(dfa_326s);
    class DFA480 extends DFA {
        public DFA480(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 480;
            this.eot = dfa_321;
            this.eof = dfa_321;
            this.min = dfa_322;
            this.max = dfa_323;
            this.accept = dfa_324;
            this.special = dfa_325;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "16692:2: ( ( ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (DeclaredOptionalQuestionMarkKeyword_1_1_1_0= QuestionMark ) )? LeftParenthesisKeyword_1_1_2= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_3_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_1_4= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_5_0= ruleBlock ) )? (SemicolonKeyword_1_1_6= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= ruleFieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA480_0 = input.LA(1);
                        int index480_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA480_0>=10 && LA480_0<=62 && (s=T2S.M_47[LA480_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA480_0==LessThanSign) && (synpred289_InternalN4JSParser())) {s = 11;}
                        else if ( (LA480_0==Asterisk) && (synpred289_InternalN4JSParser())) {s = 12;}
                        else if ((LA480_0>=4 && LA480_0<=129 && (s=T2S.M_48[LA480_0-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA480_0==RULE_DOUBLE||(LA480_0>=RULE_HEX_INT && LA480_0<=RULE_OCTAL_INT)||LA480_0==RULE_SCIENTIFIC_INT||LA480_0==RULE_INT) ) {s = 67;}
                        else if ( (LA480_0==LeftSquareBracket) ) {s = 68;}
                        input.seek(index480_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA480_1 = input.LA(1);
                        int index480_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA480_2 = input.LA(1);
                        int index480_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA480_3 = input.LA(1);
                        int index480_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA480_4 = input.LA(1);
                        int index480_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA480_5 = input.LA(1);
                        int index480_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA480_6 = input.LA(1);
                        int index480_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA480_7 = input.LA(1);
                        int index480_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA480_8 = input.LA(1);
                        int index480_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA480_9 = input.LA(1);
                        int index480_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA480_10 = input.LA(1);
                        int index480_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA480_13 = input.LA(1);
                        int index480_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA480_14 = input.LA(1);
                        int index480_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA480_15 = input.LA(1);
                        int index480_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA480_16 = input.LA(1);
                        int index480_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA480_17 = input.LA(1);
                        int index480_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA480_18 = input.LA(1);
                        int index480_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA480_19 = input.LA(1);
                        int index480_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA480_20 = input.LA(1);
                        int index480_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA480_21 = input.LA(1);
                        int index480_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA480_22 = input.LA(1);
                        int index480_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA480_23 = input.LA(1);
                        int index480_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA480_24 = input.LA(1);
                        int index480_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA480_25 = input.LA(1);
                        int index480_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA480_26 = input.LA(1);
                        int index480_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA480_27 = input.LA(1);
                        int index480_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA480_28 = input.LA(1);
                        int index480_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA480_29 = input.LA(1);
                        int index480_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA480_30 = input.LA(1);
                        int index480_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA480_31 = input.LA(1);
                        int index480_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA480_32 = input.LA(1);
                        int index480_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA480_33 = input.LA(1);
                        int index480_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA480_34 = input.LA(1);
                        int index480_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA480_35 = input.LA(1);
                        int index480_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA480_36 = input.LA(1);
                        int index480_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA480_37 = input.LA(1);
                        int index480_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA480_38 = input.LA(1);
                        int index480_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA480_39 = input.LA(1);
                        int index480_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA480_40 = input.LA(1);
                        int index480_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA480_41 = input.LA(1);
                        int index480_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA480_42 = input.LA(1);
                        int index480_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA480_43 = input.LA(1);
                        int index480_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA480_44 = input.LA(1);
                        int index480_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA480_45 = input.LA(1);
                        int index480_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA480_46 = input.LA(1);
                        int index480_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA480_47 = input.LA(1);
                        int index480_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA480_48 = input.LA(1);
                        int index480_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA480_49 = input.LA(1);
                        int index480_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA480_50 = input.LA(1);
                        int index480_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA480_51 = input.LA(1);
                        int index480_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA480_52 = input.LA(1);
                        int index480_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA480_53 = input.LA(1);
                        int index480_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA480_54 = input.LA(1);
                        int index480_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA480_55 = input.LA(1);
                        int index480_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA480_56 = input.LA(1);
                        int index480_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA480_57 = input.LA(1);
                        int index480_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA480_58 = input.LA(1);
                        int index480_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA480_59 = input.LA(1);
                        int index480_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA480_60 = input.LA(1);
                        int index480_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA480_61 = input.LA(1);
                        int index480_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA480_62 = input.LA(1);
                        int index480_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA480_63 = input.LA(1);
                        int index480_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA480_64 = input.LA(1);
                        int index480_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA480_65 = input.LA(1);
                        int index480_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA480_66 = input.LA(1);
                        int index480_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA480_67 = input.LA(1);
                        int index480_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA480_68 = input.LA(1);
                        int index480_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index480_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 480, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_327s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_328s = "\1\u0094\1\uffff\10\u0094\1\uffff";
    static final String dfa_329s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_330s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\7\uffff\1\1\7\uffff\1\1\4\uffff\1\1\11\uffff\1\1\1\uffff\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\22\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            ""
    };
    static final char[] dfa_327 = DFA.unpackEncodedStringToUnsignedChars(dfa_327s);
    static final char[] dfa_328 = DFA.unpackEncodedStringToUnsignedChars(dfa_328s);
    static final short[] dfa_329 = DFA.unpackEncodedString(dfa_329s);
    static final short[][] dfa_330 = unpackEncodedStringArray(dfa_330s);
    class DFA476 extends DFA {
        public DFA476(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 476;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_327;
            this.max = dfa_328;
            this.accept = dfa_329;
            this.special = dfa_17;
            this.transition = dfa_330;
        }
        public String getDescription() {
            return "()* loopback of 17050:6: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA492 extends DFA {
        public DFA492(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 492;
            this.eot = dfa_321;
            this.eof = dfa_321;
            this.min = dfa_322;
            this.max = dfa_323;
            this.accept = dfa_324;
            this.special = dfa_325;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "17122:2: ( ( ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (DeclaredOptionalQuestionMarkKeyword_1_1_1_0= QuestionMark ) )? LeftParenthesisKeyword_1_1_2= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_3_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_1_4= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_5_0= norm1_Block ) )? (SemicolonKeyword_1_1_6= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= norm1_FieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA492_0 = input.LA(1);
                        int index492_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA492_0>=10 && LA492_0<=62 && (s=T2S.M_47[LA492_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA492_0==LessThanSign) && (synpred297_InternalN4JSParser())) {s = 11;}
                        else if ( (LA492_0==Asterisk) && (synpred297_InternalN4JSParser())) {s = 12;}
                        else if ((LA492_0>=4 && LA492_0<=129 && (s=T2S.M_48[LA492_0-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA492_0==RULE_DOUBLE||(LA492_0>=RULE_HEX_INT && LA492_0<=RULE_OCTAL_INT)||LA492_0==RULE_SCIENTIFIC_INT||LA492_0==RULE_INT) ) {s = 67;}
                        else if ( (LA492_0==LeftSquareBracket) ) {s = 68;}
                        input.seek(index492_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA492_1 = input.LA(1);
                        int index492_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA492_2 = input.LA(1);
                        int index492_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA492_3 = input.LA(1);
                        int index492_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA492_4 = input.LA(1);
                        int index492_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA492_5 = input.LA(1);
                        int index492_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA492_6 = input.LA(1);
                        int index492_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA492_7 = input.LA(1);
                        int index492_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA492_8 = input.LA(1);
                        int index492_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA492_9 = input.LA(1);
                        int index492_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA492_10 = input.LA(1);
                        int index492_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA492_13 = input.LA(1);
                        int index492_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA492_14 = input.LA(1);
                        int index492_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA492_15 = input.LA(1);
                        int index492_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA492_16 = input.LA(1);
                        int index492_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA492_17 = input.LA(1);
                        int index492_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA492_18 = input.LA(1);
                        int index492_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA492_19 = input.LA(1);
                        int index492_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA492_20 = input.LA(1);
                        int index492_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA492_21 = input.LA(1);
                        int index492_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA492_22 = input.LA(1);
                        int index492_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA492_23 = input.LA(1);
                        int index492_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA492_24 = input.LA(1);
                        int index492_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA492_25 = input.LA(1);
                        int index492_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA492_26 = input.LA(1);
                        int index492_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA492_27 = input.LA(1);
                        int index492_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA492_28 = input.LA(1);
                        int index492_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA492_29 = input.LA(1);
                        int index492_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA492_30 = input.LA(1);
                        int index492_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA492_31 = input.LA(1);
                        int index492_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA492_32 = input.LA(1);
                        int index492_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA492_33 = input.LA(1);
                        int index492_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA492_34 = input.LA(1);
                        int index492_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA492_35 = input.LA(1);
                        int index492_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA492_36 = input.LA(1);
                        int index492_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA492_37 = input.LA(1);
                        int index492_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA492_38 = input.LA(1);
                        int index492_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA492_39 = input.LA(1);
                        int index492_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA492_40 = input.LA(1);
                        int index492_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA492_41 = input.LA(1);
                        int index492_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA492_42 = input.LA(1);
                        int index492_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA492_43 = input.LA(1);
                        int index492_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA492_44 = input.LA(1);
                        int index492_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA492_45 = input.LA(1);
                        int index492_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA492_46 = input.LA(1);
                        int index492_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA492_47 = input.LA(1);
                        int index492_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA492_48 = input.LA(1);
                        int index492_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA492_49 = input.LA(1);
                        int index492_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA492_50 = input.LA(1);
                        int index492_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA492_51 = input.LA(1);
                        int index492_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA492_52 = input.LA(1);
                        int index492_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA492_53 = input.LA(1);
                        int index492_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA492_54 = input.LA(1);
                        int index492_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA492_55 = input.LA(1);
                        int index492_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA492_56 = input.LA(1);
                        int index492_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA492_57 = input.LA(1);
                        int index492_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA492_58 = input.LA(1);
                        int index492_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA492_59 = input.LA(1);
                        int index492_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA492_60 = input.LA(1);
                        int index492_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA492_61 = input.LA(1);
                        int index492_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA492_62 = input.LA(1);
                        int index492_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA492_63 = input.LA(1);
                        int index492_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA492_64 = input.LA(1);
                        int index492_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA492_65 = input.LA(1);
                        int index492_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA492_66 = input.LA(1);
                        int index492_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA492_67 = input.LA(1);
                        int index492_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA492_68 = input.LA(1);
                        int index492_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index492_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 492, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA488 extends DFA {
        public DFA488(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 488;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_327;
            this.max = dfa_328;
            this.accept = dfa_329;
            this.special = dfa_17;
            this.transition = dfa_330;
        }
        public String getDescription() {
            return "()* loopback of 17480:6: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_331s = "\2\uffff\10\1\1\uffff";
    static final String dfa_332s = "\1\u0094\1\uffff\10\u0098\1\uffff";
    static final String[] dfa_333s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\24\uffff\1\1\11\uffff\1\1\1\uffff\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\22\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            ""
    };
    static final short[] dfa_331 = DFA.unpackEncodedString(dfa_331s);
    static final char[] dfa_332 = DFA.unpackEncodedStringToUnsignedChars(dfa_332s);
    static final short[][] dfa_333 = unpackEncodedStringArray(dfa_333s);
    class DFA493 extends DFA {
        public DFA493(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 493;
            this.eot = dfa_13;
            this.eof = dfa_331;
            this.min = dfa_327;
            this.max = dfa_332;
            this.accept = dfa_329;
            this.special = dfa_17;
            this.transition = dfa_333;
        }
        public String getDescription() {
            return "()* loopback of 17551:2: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA497 extends DFA {
        public DFA497(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 497;
            this.eot = dfa_13;
            this.eof = dfa_331;
            this.min = dfa_327;
            this.max = dfa_332;
            this.accept = dfa_329;
            this.special = dfa_17;
            this.transition = dfa_333;
        }
        public String getDescription() {
            return "()* loopback of 17597:2: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA501 extends DFA {
        public DFA501(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 501;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_327;
            this.max = dfa_328;
            this.accept = dfa_329;
            this.special = dfa_17;
            this.transition = dfa_330;
        }
        public String getDescription() {
            return "()* loopback of 17711:4: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA505 extends DFA {
        public DFA505(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 505;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_327;
            this.max = dfa_328;
            this.accept = dfa_329;
            this.special = dfa_17;
            this.transition = dfa_330;
        }
        public String getDescription() {
            return "()* loopback of 17814:4: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_334s = "\1\154\1\176\1\uffff\1\176\1\uffff";
    static final String[] dfa_335s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final char[] dfa_334 = DFA.unpackEncodedStringToUnsignedChars(dfa_334s);
    static final short[][] dfa_335 = unpackEncodedStringArray(dfa_335s);
    class DFA543 extends DFA {
        public DFA543(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 543;
            this.eot = dfa_166;
            this.eof = dfa_166;
            this.min = dfa_167;
            this.max = dfa_334;
            this.accept = dfa_169;
            this.special = dfa_170;
            this.transition = dfa_335;
        }
        public String getDescription() {
            return "()* loopback of 19018:3: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_336s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final short[][] dfa_336 = unpackEncodedStringArray(dfa_336s);
    class DFA549 extends DFA {
        public DFA549(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 549;
            this.eot = dfa_166;
            this.eof = dfa_166;
            this.min = dfa_167;
            this.max = dfa_334;
            this.accept = dfa_169;
            this.special = dfa_170;
            this.transition = dfa_336;
        }
        public String getDescription() {
            return "()* loopback of 19084:3: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_337s = "\1\uffff\1\103\40\uffff\1\103\4\uffff\31\103\5\uffff";
    static final String dfa_338s = "\1\4\1\140\40\uffff\1\140\4\uffff\31\140\5\uffff";
    static final String dfa_339s = "\1\u0094\1\160\40\uffff\1\160\4\uffff\31\160\5\uffff";
    static final String dfa_340s = "\2\uffff\40\1\1\uffff\4\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_341s = "\1\6\1\33\40\uffff\1\20\4\uffff\1\27\1\0\1\3\1\7\1\12\1\15\1\21\1\24\1\30\1\1\1\4\1\10\1\13\1\16\1\22\1\25\1\31\1\2\1\5\1\11\1\14\1\17\1\23\1\26\1\32\5\uffff}>";
    static final String[] dfa_342s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\3\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\22\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_337 = DFA.unpackEncodedString(dfa_337s);
    static final char[] dfa_338 = DFA.unpackEncodedStringToUnsignedChars(dfa_338s);
    static final char[] dfa_339 = DFA.unpackEncodedStringToUnsignedChars(dfa_339s);
    static final short[] dfa_340 = DFA.unpackEncodedString(dfa_340s);
    static final short[] dfa_341 = DFA.unpackEncodedString(dfa_341s);
    static final short[][] dfa_342 = unpackEncodedStringArray(dfa_342s);
    class DFA553 extends DFA {
        public DFA553(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 553;
            this.eot = dfa_243;
            this.eof = dfa_337;
            this.min = dfa_338;
            this.max = dfa_339;
            this.accept = dfa_340;
            this.special = dfa_341;
            this.transition = dfa_342;
        }
        public String getDescription() {
            return "19135:1: ( ( ( ( ( ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= ruleBindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA553_40 = input.LA(1);
                        int index553_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_40==EOF||LA553_40==Comma||LA553_40==EqualsSign||LA553_40==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_40==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_40);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA553_48 = input.LA(1);
                        int index553_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_48==EOF||LA553_48==Comma||LA553_48==EqualsSign||LA553_48==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_48==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_48);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA553_56 = input.LA(1);
                        int index553_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_56==EOF||LA553_56==Comma||LA553_56==EqualsSign||LA553_56==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_56==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_56);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA553_41 = input.LA(1);
                        int index553_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_41==EOF||LA553_41==Comma||LA553_41==EqualsSign||LA553_41==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_41==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_41);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA553_49 = input.LA(1);
                        int index553_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_49==EOF||LA553_49==Comma||LA553_49==EqualsSign||LA553_49==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_49==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_49);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA553_57 = input.LA(1);
                        int index553_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_57==EOF||LA553_57==Comma||LA553_57==EqualsSign||LA553_57==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_57==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_57);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA553_0 = input.LA(1);
                        int index553_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA553_0>=7 && LA553_0<=126 && (s=T2S.M_51[LA553_0-(7)])>=0) && (synpred322_InternalN4JSParser())) { /* 33 cases */ }
                        else if ( (LA553_0==Yield) ) {s = 34;}
                        else if ( (LA553_0==Null) && (synpred322_InternalN4JSParser())) {s = 35;}
                        else if ( (LA553_0==True) && (synpred322_InternalN4JSParser())) {s = 36;}
                        else if ( (LA553_0==False) && (synpred322_InternalN4JSParser())) {s = 37;}
                        else if ( (LA553_0==Enum) && (synpred322_InternalN4JSParser())) {s = 38;}
                        else if ((LA553_0>=4 && LA553_0<=86 && (s=T2S.M_52[LA553_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA553_0==RULE_STRING) && (synpred322_InternalN4JSParser())) {s = 64;}
                        else if ( (LA553_0==RULE_DOUBLE||(LA553_0>=RULE_HEX_INT && LA553_0<=RULE_OCTAL_INT)||LA553_0==RULE_SCIENTIFIC_INT||LA553_0==RULE_INT) && (synpred322_InternalN4JSParser())) {s = 65;}
                        else if ( (LA553_0==LeftSquareBracket) && (synpred322_InternalN4JSParser())) {s = 66;}
                        else if ( (LA553_0==CommercialAt) ) {s = 67;}
                        input.seek(index553_0);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA553_42 = input.LA(1);
                        int index553_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_42==EOF||LA553_42==Comma||LA553_42==EqualsSign||LA553_42==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_42==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_42);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA553_50 = input.LA(1);
                        int index553_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_50==EOF||LA553_50==Comma||LA553_50==EqualsSign||LA553_50==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_50==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_50);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA553_58 = input.LA(1);
                        int index553_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_58==EOF||LA553_58==Comma||LA553_58==EqualsSign||LA553_58==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_58==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_58);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA553_43 = input.LA(1);
                        int index553_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_43==EOF||LA553_43==Comma||LA553_43==EqualsSign||LA553_43==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_43==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA553_51 = input.LA(1);
                        int index553_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_51==EOF||LA553_51==Comma||LA553_51==EqualsSign||LA553_51==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_51==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_51);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA553_59 = input.LA(1);
                        int index553_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_59==EOF||LA553_59==Comma||LA553_59==EqualsSign||LA553_59==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_59==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_59);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA553_44 = input.LA(1);
                        int index553_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_44==EOF||LA553_44==Comma||LA553_44==EqualsSign||LA553_44==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_44==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_44);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA553_52 = input.LA(1);
                        int index553_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_52==EOF||LA553_52==Comma||LA553_52==EqualsSign||LA553_52==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_52==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_52);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA553_60 = input.LA(1);
                        int index553_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_60==EOF||LA553_60==Comma||LA553_60==EqualsSign||LA553_60==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_60==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_60);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA553_34 = input.LA(1);
                        int index553_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_34==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        else if ( (LA553_34==EOF||LA553_34==Comma||LA553_34==EqualsSign||LA553_34==RightCurlyBracket) ) {s = 67;}
                        input.seek(index553_34);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA553_45 = input.LA(1);
                        int index553_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_45==EOF||LA553_45==Comma||LA553_45==EqualsSign||LA553_45==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_45==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_45);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA553_53 = input.LA(1);
                        int index553_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_53==EOF||LA553_53==Comma||LA553_53==EqualsSign||LA553_53==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_53==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_53);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA553_61 = input.LA(1);
                        int index553_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_61==EOF||LA553_61==Comma||LA553_61==EqualsSign||LA553_61==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_61==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_61);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA553_46 = input.LA(1);
                        int index553_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_46==EOF||LA553_46==Comma||LA553_46==EqualsSign||LA553_46==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_46==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_46);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA553_54 = input.LA(1);
                        int index553_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_54==EOF||LA553_54==Comma||LA553_54==EqualsSign||LA553_54==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_54==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_54);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA553_62 = input.LA(1);
                        int index553_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_62==EOF||LA553_62==Comma||LA553_62==EqualsSign||LA553_62==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_62==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_62);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA553_39 = input.LA(1);
                        int index553_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_39==EOF||LA553_39==Comma||LA553_39==EqualsSign||LA553_39==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_39==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_39);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA553_47 = input.LA(1);
                        int index553_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_47==EOF||LA553_47==Comma||LA553_47==EqualsSign||LA553_47==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_47==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_47);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA553_55 = input.LA(1);
                        int index553_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_55==EOF||LA553_55==Comma||LA553_55==EqualsSign||LA553_55==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_55==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_55);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA553_63 = input.LA(1);
                        int index553_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_63==EOF||LA553_63==Comma||LA553_63==EqualsSign||LA553_63==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_63==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_63);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA553_1 = input.LA(1);
                        int index553_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA553_1==EOF||LA553_1==Comma||LA553_1==EqualsSign||LA553_1==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA553_1==Colon) && (synpred322_InternalN4JSParser())) {s = 68;}
                        input.seek(index553_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 553, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_343s = "\1\4\1\140\45\uffff\31\140\5\uffff";
    static final String dfa_344s = "\1\u0094\1\160\45\uffff\31\160\5\uffff";
    static final String dfa_345s = "\2\uffff\45\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_346s = "\1\31\1\32\45\uffff\1\25\1\0\1\3\1\6\1\11\1\14\1\17\1\22\1\26\1\1\1\4\1\7\1\12\1\15\1\20\1\23\1\27\1\2\1\5\1\10\1\13\1\16\1\21\1\24\1\30\5\uffff}>";
    static final String[] dfa_347s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\3\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\22\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_343 = DFA.unpackEncodedStringToUnsignedChars(dfa_343s);
    static final char[] dfa_344 = DFA.unpackEncodedStringToUnsignedChars(dfa_344s);
    static final short[] dfa_345 = DFA.unpackEncodedString(dfa_345s);
    static final short[] dfa_346 = DFA.unpackEncodedString(dfa_346s);
    static final short[][] dfa_347 = unpackEncodedStringArray(dfa_347s);
    class DFA554 extends DFA {
        public DFA554(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 554;
            this.eot = dfa_243;
            this.eof = dfa_243;
            this.min = dfa_343;
            this.max = dfa_344;
            this.accept = dfa_345;
            this.special = dfa_346;
            this.transition = dfa_347;
        }
        public String getDescription() {
            return "19185:1: ( ( ( ( ( ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= norm1_BindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA554_40 = input.LA(1);
                        int index554_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_40==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_40==Comma||LA554_40==EqualsSign||LA554_40==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_40);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA554_48 = input.LA(1);
                        int index554_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_48==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_48==Comma||LA554_48==EqualsSign||LA554_48==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_48);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA554_56 = input.LA(1);
                        int index554_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_56==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_56==Comma||LA554_56==EqualsSign||LA554_56==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_56);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA554_41 = input.LA(1);
                        int index554_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_41==Comma||LA554_41==EqualsSign||LA554_41==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA554_41==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        input.seek(index554_41);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA554_49 = input.LA(1);
                        int index554_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_49==Comma||LA554_49==EqualsSign||LA554_49==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA554_49==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        input.seek(index554_49);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA554_57 = input.LA(1);
                        int index554_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_57==Comma||LA554_57==EqualsSign||LA554_57==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA554_57==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        input.seek(index554_57);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA554_42 = input.LA(1);
                        int index554_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_42==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_42==Comma||LA554_42==EqualsSign||LA554_42==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_42);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA554_50 = input.LA(1);
                        int index554_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_50==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_50==Comma||LA554_50==EqualsSign||LA554_50==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_50);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA554_58 = input.LA(1);
                        int index554_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_58==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_58==Comma||LA554_58==EqualsSign||LA554_58==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_58);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA554_43 = input.LA(1);
                        int index554_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_43==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_43==Comma||LA554_43==EqualsSign||LA554_43==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_43);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA554_51 = input.LA(1);
                        int index554_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_51==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_51==Comma||LA554_51==EqualsSign||LA554_51==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_51);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA554_59 = input.LA(1);
                        int index554_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_59==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_59==Comma||LA554_59==EqualsSign||LA554_59==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_59);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA554_44 = input.LA(1);
                        int index554_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_44==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_44==Comma||LA554_44==EqualsSign||LA554_44==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_44);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA554_52 = input.LA(1);
                        int index554_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_52==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_52==Comma||LA554_52==EqualsSign||LA554_52==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_52);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA554_60 = input.LA(1);
                        int index554_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_60==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_60==Comma||LA554_60==EqualsSign||LA554_60==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_60);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA554_45 = input.LA(1);
                        int index554_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_45==Comma||LA554_45==EqualsSign||LA554_45==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA554_45==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        input.seek(index554_45);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA554_53 = input.LA(1);
                        int index554_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_53==Comma||LA554_53==EqualsSign||LA554_53==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA554_53==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        input.seek(index554_53);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA554_61 = input.LA(1);
                        int index554_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_61==Comma||LA554_61==EqualsSign||LA554_61==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA554_61==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        input.seek(index554_61);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA554_46 = input.LA(1);
                        int index554_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_46==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_46==Comma||LA554_46==EqualsSign||LA554_46==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_46);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA554_54 = input.LA(1);
                        int index554_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_54==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_54==Comma||LA554_54==EqualsSign||LA554_54==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_54);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA554_62 = input.LA(1);
                        int index554_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_62==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_62==Comma||LA554_62==EqualsSign||LA554_62==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_62);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA554_39 = input.LA(1);
                        int index554_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_39==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_39==Comma||LA554_39==EqualsSign||LA554_39==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_39);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA554_47 = input.LA(1);
                        int index554_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_47==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_47==Comma||LA554_47==EqualsSign||LA554_47==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_47);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA554_55 = input.LA(1);
                        int index554_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_55==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_55==Comma||LA554_55==EqualsSign||LA554_55==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_55);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA554_63 = input.LA(1);
                        int index554_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_63==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_63==Comma||LA554_63==EqualsSign||LA554_63==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_63);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA554_0 = input.LA(1);
                        int index554_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA554_0>=7 && LA554_0<=126 && (s=T2S.M_53[LA554_0-(7)])>=0) && (synpred323_InternalN4JSParser())) { /* 38 cases */ }
                        else if ((LA554_0>=4 && LA554_0<=86 && (s=T2S.M_52[LA554_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA554_0==RULE_STRING) && (synpred323_InternalN4JSParser())) {s = 64;}
                        else if ( (LA554_0==RULE_DOUBLE||(LA554_0>=RULE_HEX_INT && LA554_0<=RULE_OCTAL_INT)||LA554_0==RULE_SCIENTIFIC_INT||LA554_0==RULE_INT) && (synpred323_InternalN4JSParser())) {s = 65;}
                        else if ( (LA554_0==LeftSquareBracket) && (synpred323_InternalN4JSParser())) {s = 66;}
                        else if ( (LA554_0==CommercialAt) ) {s = 67;}
                        input.seek(index554_0);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA554_1 = input.LA(1);
                        int index554_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA554_1==Colon) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA554_1==Comma||LA554_1==EqualsSign||LA554_1==RightCurlyBracket) ) {s = 67;}
                        input.seek(index554_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 554, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_348s = "\107\uffff";
    static final String dfa_349s = "\1\106\106\uffff";
    static final String dfa_350s = "\1\4\6\uffff\77\0\1\uffff";
    static final String dfa_351s = "\1\u0094\6\uffff\77\0\1\uffff";
    static final String dfa_352s = "\1\uffff\6\1\77\uffff\1\2";
    static final String dfa_353s = "\1\45\6\uffff\1\77\1\22\1\52\1\41\1\73\1\61\1\12\1\3\1\31\1\23\1\51\1\40\1\72\1\62\1\13\1\4\1\32\1\21\1\53\1\42\1\74\1\63\1\14\1\5\1\33\1\24\1\54\1\43\1\75\1\64\1\15\1\6\1\34\1\25\1\55\1\44\1\76\1\65\1\66\1\56\1\7\1\0\1\26\1\16\1\46\1\35\1\67\1\57\1\10\1\1\1\27\1\17\1\47\1\36\1\70\1\60\1\11\1\2\1\30\1\20\1\50\1\37\1\71\1\uffff}>";
    static final String[] dfa_354s = {
            "\1\73\1\66\1\100\1\33\1\75\1\101\1\103\1\62\1\15\1\16\1\61\1\27\1\17\1\24\1\25\1\102\1\60\1\20\1\23\1\31\1\104\1\35\1\63\1\37\1\70\1\43\1\77\1\76\1\10\1\12\1\13\1\14\1\53\1\36\1\41\1\72\1\46\1\50\1\74\1\11\1\22\1\54\1\65\1\51\1\40\1\52\1\71\1\45\1\47\4\uffff\1\26\1\55\1\57\1\34\1\105\1\56\1\42\1\44\7\uffff\1\106\11\uffff\1\64\1\21\1\30\1\32\1\67\12\uffff\1\106\1\uffff\1\106\3\uffff\2\106\5\uffff\1\106\10\uffff\1\2\1\3\1\4\1\6\1\uffff\1\5\1\uffff\1\7\25\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_348 = DFA.unpackEncodedString(dfa_348s);
    static final short[] dfa_349 = DFA.unpackEncodedString(dfa_349s);
    static final char[] dfa_350 = DFA.unpackEncodedStringToUnsignedChars(dfa_350s);
    static final char[] dfa_351 = DFA.unpackEncodedStringToUnsignedChars(dfa_351s);
    static final short[] dfa_352 = DFA.unpackEncodedString(dfa_352s);
    static final short[] dfa_353 = DFA.unpackEncodedString(dfa_353s);
    static final short[][] dfa_354 = unpackEncodedStringArray(dfa_354s);
    class DFA572 extends DFA {
        public DFA572(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 572;
            this.eot = dfa_348;
            this.eof = dfa_349;
            this.min = dfa_350;
            this.max = dfa_351;
            this.accept = dfa_352;
            this.special = dfa_353;
            this.transition = dfa_354;
        }
        public String getDescription() {
            return "19846:3: ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | RULE_INT | RULE_HEX_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_SCIENTIFIC_INT | RULE_LEGACY_OCTAL_INT | RULE_IDENTIFIER )=> ( RULE_INT | RULE_HEX_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_SCIENTIFIC_INT | RULE_LEGACY_OCTAL_INT | ruleIdentifierName ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA572_48 = input.LA(1);
                        int index572_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_48);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA572_56 = input.LA(1);
                        int index572_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_56);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA572_64 = input.LA(1);
                        int index572_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_64);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA572_14 = input.LA(1);
                        int index572_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA572_22 = input.LA(1);
                        int index572_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_22);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA572_30 = input.LA(1);
                        int index572_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_30);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA572_38 = input.LA(1);
                        int index572_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_38);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA572_47 = input.LA(1);
                        int index572_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_47);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA572_55 = input.LA(1);
                        int index572_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_55);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA572_63 = input.LA(1);
                        int index572_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_63);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA572_13 = input.LA(1);
                        int index572_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_13);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA572_21 = input.LA(1);
                        int index572_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_21);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA572_29 = input.LA(1);
                        int index572_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_29);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA572_37 = input.LA(1);
                        int index572_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_37);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA572_50 = input.LA(1);
                        int index572_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_50);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA572_58 = input.LA(1);
                        int index572_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_58);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA572_66 = input.LA(1);
                        int index572_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_66);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA572_24 = input.LA(1);
                        int index572_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_24);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA572_8 = input.LA(1);
                        int index572_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_8);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA572_16 = input.LA(1);
                        int index572_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_16);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA572_32 = input.LA(1);
                        int index572_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_32);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA572_40 = input.LA(1);
                        int index572_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_40);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA572_49 = input.LA(1);
                        int index572_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_49);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA572_57 = input.LA(1);
                        int index572_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_57);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA572_65 = input.LA(1);
                        int index572_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_65);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA572_15 = input.LA(1);
                        int index572_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_15);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA572_23 = input.LA(1);
                        int index572_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_23);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA572_31 = input.LA(1);
                        int index572_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_31);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA572_39 = input.LA(1);
                        int index572_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_39);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA572_52 = input.LA(1);
                        int index572_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_52);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA572_60 = input.LA(1);
                        int index572_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_60);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA572_68 = input.LA(1);
                        int index572_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_68);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA572_18 = input.LA(1);
                        int index572_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_18);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA572_10 = input.LA(1);
                        int index572_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_10);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA572_26 = input.LA(1);
                        int index572_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_26);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA572_34 = input.LA(1);
                        int index572_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_34);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA572_42 = input.LA(1);
                        int index572_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_42);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA572_0 = input.LA(1);
                        int index572_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_0==RULE_INT) && (synpred326_InternalN4JSParser())) {s = 1;}
                        else if ( (LA572_0==RULE_HEX_INT) && (synpred326_InternalN4JSParser())) {s = 2;}
                        else if ( (LA572_0==RULE_BINARY_INT) && (synpred326_InternalN4JSParser())) {s = 3;}
                        else if ( (LA572_0==RULE_OCTAL_INT) && (synpred326_InternalN4JSParser())) {s = 4;}
                        else if ( (LA572_0==RULE_SCIENTIFIC_INT) && (synpred326_InternalN4JSParser())) {s = 5;}
                        else if ( (LA572_0==RULE_LEGACY_OCTAL_INT) && (synpred326_InternalN4JSParser())) {s = 6;}
                        else if ((LA572_0>=4 && LA572_0<=126 && (s=T2S.M_55[LA572_0-(4)])>=0)) { /* 63 cases */ }
                        else if ( (LA572_0==EOF||LA572_0==HyphenMinusHyphenMinus||LA572_0==HyphenMinus||LA572_0==Solidus||(LA572_0>=EqualsSign && LA572_0<=GreaterThanSign)||LA572_0==LeftCurlyBracket) ) {s = 70;}
                        input.seek(index572_0);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA572_51 = input.LA(1);
                        int index572_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_51);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA572_59 = input.LA(1);
                        int index572_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_59);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA572_67 = input.LA(1);
                        int index572_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_67);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA572_17 = input.LA(1);
                        int index572_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_17);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA572_9 = input.LA(1);
                        int index572_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_9);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA572_25 = input.LA(1);
                        int index572_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_25);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA572_33 = input.LA(1);
                        int index572_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_33);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA572_41 = input.LA(1);
                        int index572_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_41);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA572_46 = input.LA(1);
                        int index572_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA572_54 = input.LA(1);
                        int index572_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_54);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA572_62 = input.LA(1);
                        int index572_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_62);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA572_12 = input.LA(1);
                        int index572_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_12);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA572_20 = input.LA(1);
                        int index572_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_20);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA572_28 = input.LA(1);
                        int index572_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_28);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA572_36 = input.LA(1);
                        int index572_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_36);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA572_44 = input.LA(1);
                        int index572_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_44);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA572_45 = input.LA(1);
                        int index572_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_45);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA572_53 = input.LA(1);
                        int index572_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_53);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA572_61 = input.LA(1);
                        int index572_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_61);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA572_69 = input.LA(1);
                        int index572_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_69);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA572_19 = input.LA(1);
                        int index572_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_19);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA572_11 = input.LA(1);
                        int index572_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_11);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA572_27 = input.LA(1);
                        int index572_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_27);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA572_35 = input.LA(1);
                        int index572_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_35);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA572_43 = input.LA(1);
                        int index572_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_43);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA572_7 = input.LA(1);
                        int index572_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index572_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 572, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_355s = "\23\uffff";
    static final String dfa_356s = "\1\4\1\0\21\uffff";
    static final String dfa_357s = "\1\176\1\0\21\uffff";
    static final String dfa_358s = "\2\uffff\1\2\1\3\15\uffff\1\1\1\4";
    static final String dfa_359s = "\1\uffff\1\0\21\uffff}>";
    static final String[] dfa_360s = {
            "\2\3\2\uffff\1\3\7\uffff\1\3\13\uffff\1\3\2\uffff\1\3\7\uffff\1\3\2\uffff\1\3\5\uffff\1\3\1\uffff\2\3\50\uffff\1\1\16\uffff\1\2\2\uffff\1\3\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_355 = DFA.unpackEncodedString(dfa_355s);
    static final char[] dfa_356 = DFA.unpackEncodedStringToUnsignedChars(dfa_356s);
    static final char[] dfa_357 = DFA.unpackEncodedStringToUnsignedChars(dfa_357s);
    static final short[] dfa_358 = DFA.unpackEncodedString(dfa_358s);
    static final short[] dfa_359 = DFA.unpackEncodedString(dfa_359s);
    static final short[][] dfa_360 = unpackEncodedStringArray(dfa_360s);
    class DFA584 extends DFA {
        public DFA584(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 584;
            this.eot = dfa_355;
            this.eof = dfa_355;
            this.min = dfa_356;
            this.max = dfa_357;
            this.accept = dfa_358;
            this.special = dfa_359;
            this.transition = dfa_360;
        }
        public String getDescription() {
            return "20228:1: ( ( ( ( LeftParenthesis ruleTAnonymousFormalParameterList RightParenthesis EqualsSignGreaterThanSign ) )=>ArrowFunctionTypeExpressionParserRuleCall_0= ruleArrowFunctionTypeExpression ) | IterableTypeExpressionParserRuleCall_1= ruleIterableTypeExpression | TypeRefWithModifiersParserRuleCall_2= ruleTypeRefWithModifiers | (LeftParenthesisKeyword_3_0= LeftParenthesis TypeRefParserRuleCall_3_1= ruleTypeRef RightParenthesisKeyword_3_2= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA584_1 = input.LA(1);
                        int index584_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index584_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 584, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_361s = "\173\uffff";
    static final String dfa_362s = "\1\2\172\uffff";
    static final String dfa_363s = "\1\4\1\0\171\uffff";
    static final String dfa_364s = "\1\u0098\1\0\171\uffff";
    static final String dfa_365s = "\2\uffff\1\2\167\uffff\1\1";
    static final String dfa_366s = "\1\uffff\1\0\171\uffff}>";
    static final String[] dfa_367s = {
            "\62\2\1\uffff\27\2\1\uffff\23\2\1\uffff\6\2\1\1\10\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_361 = DFA.unpackEncodedString(dfa_361s);
    static final short[] dfa_362 = DFA.unpackEncodedString(dfa_362s);
    static final char[] dfa_363 = DFA.unpackEncodedStringToUnsignedChars(dfa_363s);
    static final char[] dfa_364 = DFA.unpackEncodedStringToUnsignedChars(dfa_364s);
    static final short[] dfa_365 = DFA.unpackEncodedString(dfa_365s);
    static final short[] dfa_366 = DFA.unpackEncodedString(dfa_366s);
    static final short[][] dfa_367 = unpackEncodedStringArray(dfa_367s);
    class DFA585 extends DFA {
        public DFA585(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 585;
            this.eot = dfa_361;
            this.eof = dfa_362;
            this.min = dfa_363;
            this.max = dfa_364;
            this.accept = dfa_365;
            this.special = dfa_366;
            this.transition = dfa_367;
        }
        public String getDescription() {
            return "20270:2: ( ( ( QuestionMark ) )=> (FollowedByQuestionMarkQuestionMarkKeyword_1_0= QuestionMark ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA585_1 = input.LA(1);
                        int index585_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_InternalN4JSParser()) ) {s = 122;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index585_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 585, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_368s = {
            "\62\2\1\uffff\27\2\1\uffff\20\2\1\1\2\2\1\uffff\17\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_368 = unpackEncodedStringArray(dfa_368s);
    class DFA587 extends DFA {
        public DFA587(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 587;
            this.eot = dfa_361;
            this.eof = dfa_362;
            this.min = dfa_363;
            this.max = dfa_364;
            this.accept = dfa_365;
            this.special = dfa_366;
            this.transition = dfa_368;
        }
        public String getDescription() {
            return "20302:3: ( ( ( PlusSign ) )=> (DynamicPlusSignKeyword_0_1_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA587_1 = input.LA(1);
                        int index587_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_InternalN4JSParser()) ) {s = 122;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index587_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 587, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_369s = "\1\uffff\1\34\14\uffff\1\34\3\uffff\3\34\11\uffff";
    static final String dfa_370s = "\1\4\1\133\12\uffff\1\144\1\uffff\1\133\3\144\3\133\11\uffff";
    static final String dfa_371s = "\1\176\1\u00a4\12\uffff\1\156\1\uffff\1\u00a4\3\156\3\u00a4\11\uffff";
    static final String dfa_372s = "\2\uffff\12\1\1\uffff\1\1\7\uffff\7\1\1\2\1\1";
    static final String dfa_373s = "\1\10\1\3\12\uffff\1\4\1\uffff\1\1\1\7\1\5\1\11\1\2\1\0\1\6\11\uffff}>";
    static final String[] dfa_374s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\1\uffff\1\34\2\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\1\34\1\uffff\1\17\1\34\6\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\5\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\1",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\64\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\11\uffff\1\34",
            "",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\64\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\64\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\64\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\64\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_369 = DFA.unpackEncodedString(dfa_369s);
    static final char[] dfa_370 = DFA.unpackEncodedStringToUnsignedChars(dfa_370s);
    static final char[] dfa_371 = DFA.unpackEncodedStringToUnsignedChars(dfa_371s);
    static final short[] dfa_372 = DFA.unpackEncodedString(dfa_372s);
    static final short[] dfa_373 = DFA.unpackEncodedString(dfa_373s);
    static final short[][] dfa_374 = unpackEncodedStringArray(dfa_374s);
    class DFA600 extends DFA {
        public DFA600(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 600;
            this.eot = dfa_46;
            this.eof = dfa_369;
            this.min = dfa_370;
            this.max = dfa_371;
            this.accept = dfa_372;
            this.special = dfa_373;
            this.transition = dfa_374;
        }
        public String getDescription() {
            return "20627:2: ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0_0= ruleBindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_0_1= ruleColonSepTypeRef ) ) ) | ( (TypeRefTypeRefParserRuleCall_1_1_0= ruleTypeRef ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA600_19 = input.LA(1);
                        int index600_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA600_19==EOF||LA600_19==Ampersand||LA600_19==RightParenthesis||(LA600_19>=PlusSign && LA600_19<=Comma)||LA600_19==FullStop||(LA600_19>=LessThanSign && LA600_19<=EqualsSign)||LA600_19==QuestionMark||LA600_19==LeftSquareBracket||LA600_19==VerticalLine||LA600_19==RULE_VERSION) ) {s = 28;}
                        else if ( (LA600_19==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        input.seek(index600_19);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA600_14 = input.LA(1);
                        int index600_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA600_14==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        else if ( (LA600_14==EOF||LA600_14==Ampersand||LA600_14==RightParenthesis||(LA600_14>=PlusSign && LA600_14<=Comma)||LA600_14==FullStop||(LA600_14>=LessThanSign && LA600_14<=EqualsSign)||LA600_14==QuestionMark||LA600_14==LeftSquareBracket||LA600_14==VerticalLine||LA600_14==RULE_VERSION) ) {s = 28;}
                        input.seek(index600_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA600_18 = input.LA(1);
                        int index600_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA600_18==EOF||LA600_18==Ampersand||LA600_18==RightParenthesis||(LA600_18>=PlusSign && LA600_18<=Comma)||LA600_18==FullStop||(LA600_18>=LessThanSign && LA600_18<=EqualsSign)||LA600_18==QuestionMark||LA600_18==LeftSquareBracket||LA600_18==VerticalLine||LA600_18==RULE_VERSION) ) {s = 28;}
                        else if ( (LA600_18==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        input.seek(index600_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA600_1 = input.LA(1);
                        int index600_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA600_1==EOF||LA600_1==Ampersand||LA600_1==RightParenthesis||(LA600_1>=PlusSign && LA600_1<=Comma)||LA600_1==FullStop||(LA600_1>=LessThanSign && LA600_1<=EqualsSign)||LA600_1==QuestionMark||LA600_1==LeftSquareBracket||LA600_1==VerticalLine||LA600_1==RULE_VERSION) ) {s = 28;}
                        else if ( (LA600_1==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        input.seek(index600_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA600_12 = input.LA(1);
                        int index600_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA600_12==LeftCurlyBracket) ) {s = 28;}
                        else if ( (LA600_12==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        input.seek(index600_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA600_16 = input.LA(1);
                        int index600_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA600_16==LeftCurlyBracket) ) {s = 28;}
                        else if ( (LA600_16==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        input.seek(index600_16);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA600_20 = input.LA(1);
                        int index600_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA600_20==EOF||LA600_20==Ampersand||LA600_20==RightParenthesis||(LA600_20>=PlusSign && LA600_20<=Comma)||LA600_20==FullStop||(LA600_20>=LessThanSign && LA600_20<=EqualsSign)||LA600_20==QuestionMark||LA600_20==LeftSquareBracket||LA600_20==VerticalLine||LA600_20==RULE_VERSION) ) {s = 28;}
                        else if ( (LA600_20==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        input.seek(index600_20);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA600_15 = input.LA(1);
                        int index600_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA600_15==LeftCurlyBracket) ) {s = 28;}
                        else if ( (LA600_15==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        input.seek(index600_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA600_0 = input.LA(1);
                        int index600_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA600_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA600_0>=11 && LA600_0<=126 && (s=T2S.M_56[LA600_0-(11)])>=0) && (synpred335_InternalN4JSParser())) { /* 11 cases */ }
                        else if ( (LA600_0==Constructor) ) {s = 12;}
                        else if ( (LA600_0==Of) && (synpred335_InternalN4JSParser())) {s = 13;}
                        else if ( (LA600_0==Target) ) {s = 14;}
                        else if ( (LA600_0==Type) ) {s = 15;}
                        else if ( (LA600_0==Union) ) {s = 16;}
                        else if ( (LA600_0==Intersection) ) {s = 17;}
                        else if ( (LA600_0==This) ) {s = 18;}
                        else if ( (LA600_0==Promisify) ) {s = 19;}
                        else if ( (LA600_0==Await) ) {s = 20;}
                        else if ( (LA600_0==Async) && (synpred335_InternalN4JSParser())) {s = 21;}
                        else if ( (LA600_0==Implements) && (synpred335_InternalN4JSParser())) {s = 22;}
                        else if ( (LA600_0==Interface) && (synpred335_InternalN4JSParser())) {s = 23;}
                        else if ( (LA600_0==Private) && (synpred335_InternalN4JSParser())) {s = 24;}
                        else if ( (LA600_0==Protected) && (synpred335_InternalN4JSParser())) {s = 25;}
                        else if ( (LA600_0==Public) && (synpred335_InternalN4JSParser())) {s = 26;}
                        else if ( (LA600_0==Out) && (synpred335_InternalN4JSParser())) {s = 27;}
                        else if ( (LA600_0==Default||LA600_0==This_1||LA600_0==Void||LA600_0==LeftParenthesis||LA600_0==QuestionMark||LA600_0==LeftSquareBracket||LA600_0==LeftCurlyBracket||LA600_0==Tilde) ) {s = 28;}
                        input.seek(index600_0);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA600_17 = input.LA(1);
                        int index600_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA600_17==LeftCurlyBracket) ) {s = 28;}
                        else if ( (LA600_17==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        input.seek(index600_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 600, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_375s = "\22\uffff";
    static final String dfa_376s = "\1\uffff\7\12\3\uffff\7\12";
    static final String dfa_377s = "\1\10\7\4\1\10\2\uffff\7\4";
    static final String dfa_378s = "\1\176\7\u00a4\1\176\2\uffff\7\u00a4";
    static final String dfa_379s = "\11\uffff\1\2\1\1\7\uffff";
    static final String dfa_380s = "\22\uffff}>";
    static final String[] dfa_381s = {
            "\1\4\7\uffff\1\6\13\uffff\1\5\2\uffff\1\3\12\uffff\1\2\10\uffff\1\1\112\uffff\1\7",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\1\16\7\uffff\1\20\13\uffff\1\17\2\uffff\1\15\12\uffff\1\14\10\uffff\1\13\112\uffff\1\21",
            "",
            "",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11"
    };
    static final short[] dfa_375 = DFA.unpackEncodedString(dfa_375s);
    static final short[] dfa_376 = DFA.unpackEncodedString(dfa_376s);
    static final char[] dfa_377 = DFA.unpackEncodedStringToUnsignedChars(dfa_377s);
    static final char[] dfa_378 = DFA.unpackEncodedStringToUnsignedChars(dfa_378s);
    static final short[] dfa_379 = DFA.unpackEncodedString(dfa_379s);
    static final short[] dfa_380 = DFA.unpackEncodedString(dfa_380s);
    static final short[][] dfa_381 = unpackEncodedStringArray(dfa_381s);
    class DFA606 extends DFA {
        public DFA606(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 606;
            this.eot = dfa_375;
            this.eof = dfa_376;
            this.min = dfa_377;
            this.max = dfa_378;
            this.accept = dfa_379;
            this.special = dfa_380;
            this.transition = dfa_381;
        }
        public String getDescription() {
            return "20810:2: (TypeReferenceParserRuleCall_0_0= ruleTypeReference | (TypeReferenceParserRuleCall_0_1_1= ruleTypeReference VersionRequestParserRuleCall_0_1_2= ruleVersionRequest ) )";
        }
    }
    static final String[] dfa_382s = {
            "\62\2\1\uffff\27\2\1\uffff\23\2\1\uffff\3\2\1\1\13\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_382 = unpackEncodedStringArray(dfa_382s);
    class DFA607 extends DFA {
        public DFA607(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 607;
            this.eot = dfa_361;
            this.eof = dfa_362;
            this.min = dfa_363;
            this.max = dfa_364;
            this.accept = dfa_365;
            this.special = dfa_366;
            this.transition = dfa_382;
        }
        public String getDescription() {
            return "20818:2: ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1= ruleTypeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA607_1 = input.LA(1);
                        int index607_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_InternalN4JSParser()) ) {s = 122;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index607_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 607, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_383s = "\25\uffff";
    static final String dfa_384s = "\4\uffff\7\14\3\uffff\7\14";
    static final String dfa_385s = "\1\161\3\10\7\4\2\uffff\1\10\7\4";
    static final String dfa_386s = "\1\161\1\u0092\2\176\7\u00a4\2\uffff\1\176\7\u00a4";
    static final String dfa_387s = "\13\uffff\1\2\1\1\10\uffff";
    static final String dfa_388s = "\25\uffff}>";
    static final String[] dfa_389s = {
            "\1\1",
            "\1\7\7\uffff\1\11\13\uffff\1\10\2\uffff\1\6\12\uffff\1\5\10\uffff\1\4\75\uffff\1\2\14\uffff\1\12\23\uffff\1\3",
            "\1\7\7\uffff\1\11\13\uffff\1\10\2\uffff\1\6\12\uffff\1\5\10\uffff\1\4\112\uffff\1\12",
            "\1\7\7\uffff\1\11\13\uffff\1\10\2\uffff\1\6\12\uffff\1\5\10\uffff\1\4\112\uffff\1\12",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "",
            "",
            "\1\21\7\uffff\1\23\13\uffff\1\22\2\uffff\1\20\12\uffff\1\17\10\uffff\1\16\112\uffff\1\24",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13"
    };
    static final short[] dfa_383 = DFA.unpackEncodedString(dfa_383s);
    static final short[] dfa_384 = DFA.unpackEncodedString(dfa_384s);
    static final char[] dfa_385 = DFA.unpackEncodedStringToUnsignedChars(dfa_385s);
    static final char[] dfa_386 = DFA.unpackEncodedStringToUnsignedChars(dfa_386s);
    static final short[] dfa_387 = DFA.unpackEncodedString(dfa_387s);
    static final short[] dfa_388 = DFA.unpackEncodedString(dfa_388s);
    static final short[][] dfa_389 = unpackEncodedStringArray(dfa_389s);
    class DFA608 extends DFA {
        public DFA608(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 608;
            this.eot = dfa_383;
            this.eof = dfa_384;
            this.min = dfa_385;
            this.max = dfa_386;
            this.accept = dfa_387;
            this.special = dfa_388;
            this.transition = dfa_389;
        }
        public String getDescription() {
            return "20837:2: ( ( ( (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0= ruleTypingStrategyUseSiteOperator ) ) TypeReferenceParserRuleCall_0_0_1= ruleTypeReference ) | ( ( (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0= ruleTypingStrategyUseSiteOperator ) ) TypeReferenceParserRuleCall_0_1_2= ruleTypeReference VersionRequestParserRuleCall_0_1_3= ruleVersionRequest ) )";
        }
    }
    class DFA609 extends DFA {
        public DFA609(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 609;
            this.eot = dfa_361;
            this.eof = dfa_362;
            this.min = dfa_363;
            this.max = dfa_364;
            this.accept = dfa_365;
            this.special = dfa_366;
            this.transition = dfa_382;
        }
        public String getDescription() {
            return "20861:2: ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1= ruleTypeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA609_1 = input.LA(1);
                        int index609_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_InternalN4JSParser()) ) {s = 122;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index609_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 609, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_390s = "\1\4\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_391s = "\1\176\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_392s = "\3\uffff\1\3\75\uffff\1\1\1\4\1\2";
    static final String dfa_393s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\uffff}>";
    static final String[] dfa_394s = {
            "\1\66\1\61\1\73\1\30\1\70\1\74\1\76\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\75\1\53\1\15\1\20\1\26\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\4\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\21\uffff\1\57\1\16\1\25\1\27\1\62\17\uffff\1\3\27\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_390 = DFA.unpackEncodedStringToUnsignedChars(dfa_390s);
    static final char[] dfa_391 = DFA.unpackEncodedStringToUnsignedChars(dfa_391s);
    static final short[] dfa_392 = DFA.unpackEncodedString(dfa_392s);
    static final short[] dfa_393 = DFA.unpackEncodedString(dfa_393s);
    static final short[][] dfa_394 = unpackEncodedStringArray(dfa_394s);
    class DFA616 extends DFA {
        public DFA616(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 616;
            this.eot = dfa_230;
            this.eof = dfa_230;
            this.min = dfa_390;
            this.max = dfa_391;
            this.accept = dfa_392;
            this.special = dfa_393;
            this.transition = dfa_394;
        }
        public String getDescription() {
            return "21050:1: ( ( ( ( Get ( ( ruleIdentifierName ) ) ) )=>TStructGetterParserRuleCall_0= ruleTStructGetter ) | ( ( ( Set ( ( ruleIdentifierName ) ) ) )=>TStructSetterParserRuleCall_1= ruleTStructSetter ) | ( ( ( ( ruleTypeVariables )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>TStructMethodParserRuleCall_2= ruleTStructMethod ) | TStructFieldParserRuleCall_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA616_0 = input.LA(1);
                        int index616_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA616_0==Get) ) {s = 1;}
                        else if ( (LA616_0==Set) ) {s = 2;}
                        else if ( (LA616_0==LessThanSign) && (synpred341_InternalN4JSParser())) {s = 3;}
                        else if ((LA616_0>=4 && LA616_0<=126 && (s=T2S.M_57[LA616_0-(4)])>=0)) { /* 62 cases */ }
                        input.seek(index616_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA616_1 = input.LA(1);
                        int index616_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_InternalN4JSParser()) ) {s = 65;}
                        else if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA616_2 = input.LA(1);
                        int index616_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_InternalN4JSParser()) ) {s = 67;}
                        else if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA616_4 = input.LA(1);
                        int index616_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA616_5 = input.LA(1);
                        int index616_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA616_6 = input.LA(1);
                        int index616_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA616_7 = input.LA(1);
                        int index616_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA616_8 = input.LA(1);
                        int index616_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA616_9 = input.LA(1);
                        int index616_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA616_10 = input.LA(1);
                        int index616_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA616_11 = input.LA(1);
                        int index616_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA616_12 = input.LA(1);
                        int index616_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA616_13 = input.LA(1);
                        int index616_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA616_14 = input.LA(1);
                        int index616_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA616_15 = input.LA(1);
                        int index616_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA616_16 = input.LA(1);
                        int index616_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA616_17 = input.LA(1);
                        int index616_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA616_18 = input.LA(1);
                        int index616_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA616_19 = input.LA(1);
                        int index616_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA616_20 = input.LA(1);
                        int index616_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA616_21 = input.LA(1);
                        int index616_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA616_22 = input.LA(1);
                        int index616_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA616_23 = input.LA(1);
                        int index616_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA616_24 = input.LA(1);
                        int index616_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA616_25 = input.LA(1);
                        int index616_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA616_26 = input.LA(1);
                        int index616_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA616_27 = input.LA(1);
                        int index616_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA616_28 = input.LA(1);
                        int index616_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA616_29 = input.LA(1);
                        int index616_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA616_30 = input.LA(1);
                        int index616_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA616_31 = input.LA(1);
                        int index616_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA616_32 = input.LA(1);
                        int index616_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA616_33 = input.LA(1);
                        int index616_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA616_34 = input.LA(1);
                        int index616_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA616_35 = input.LA(1);
                        int index616_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA616_36 = input.LA(1);
                        int index616_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA616_37 = input.LA(1);
                        int index616_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA616_38 = input.LA(1);
                        int index616_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA616_39 = input.LA(1);
                        int index616_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA616_40 = input.LA(1);
                        int index616_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA616_41 = input.LA(1);
                        int index616_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA616_42 = input.LA(1);
                        int index616_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA616_43 = input.LA(1);
                        int index616_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA616_44 = input.LA(1);
                        int index616_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA616_45 = input.LA(1);
                        int index616_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA616_46 = input.LA(1);
                        int index616_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA616_47 = input.LA(1);
                        int index616_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA616_48 = input.LA(1);
                        int index616_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA616_49 = input.LA(1);
                        int index616_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA616_50 = input.LA(1);
                        int index616_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA616_51 = input.LA(1);
                        int index616_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA616_52 = input.LA(1);
                        int index616_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA616_53 = input.LA(1);
                        int index616_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA616_54 = input.LA(1);
                        int index616_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA616_55 = input.LA(1);
                        int index616_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA616_56 = input.LA(1);
                        int index616_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA616_57 = input.LA(1);
                        int index616_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA616_58 = input.LA(1);
                        int index616_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA616_59 = input.LA(1);
                        int index616_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA616_60 = input.LA(1);
                        int index616_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA616_61 = input.LA(1);
                        int index616_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA616_62 = input.LA(1);
                        int index616_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA616_63 = input.LA(1);
                        int index616_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA616_64 = input.LA(1);
                        int index616_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index616_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 616, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA691 extends DFA {
        public DFA691(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 691;
            this.eot = dfa_199;
            this.eof = dfa_199;
            this.min = dfa_200;
            this.max = dfa_201;
            this.accept = dfa_202;
            this.special = dfa_203;
            this.transition = dfa_204;
        }
        public String getDescription() {
            return "7183:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA694 extends DFA {
        public DFA694(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 694;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_189;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_190;
        }
        public String getDescription() {
            return "7368:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA696 extends DFA {
        public DFA696(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 696;
            this.eot = dfa_199;
            this.eof = dfa_199;
            this.min = dfa_200;
            this.max = dfa_201;
            this.accept = dfa_202;
            this.special = dfa_203;
            this.transition = dfa_204;
        }
        public String getDescription() {
            return "7418:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA699 extends DFA {
        public DFA699(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 699;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_189;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_190;
        }
        public String getDescription() {
            return "7603:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA701 extends DFA {
        public DFA701(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 701;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "7659:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA703 extends DFA {
        public DFA703(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 703;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_189;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_190;
        }
        public String getDescription() {
            return "7994:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA705 extends DFA {
        public DFA705(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 705;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "8130:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA707 extends DFA {
        public DFA707(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 707;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_189;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_190;
        }
        public String getDescription() {
            return "8465:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA744 extends DFA {
        public DFA744(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 744;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_327;
            this.max = dfa_328;
            this.accept = dfa_329;
            this.special = dfa_17;
            this.transition = dfa_330;
        }
        public String getDescription() {
            return "()* loopback of 16413:4: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA749 extends DFA {
        public DFA749(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 749;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_327;
            this.max = dfa_328;
            this.accept = dfa_329;
            this.special = dfa_17;
            this.transition = dfa_330;
        }
        public String getDescription() {
            return "()* loopback of 16636:4: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA754 extends DFA {
        public DFA754(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 754;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_327;
            this.max = dfa_328;
            this.accept = dfa_329;
            this.special = dfa_17;
            this.transition = dfa_330;
        }
        public String getDescription() {
            return "()* loopback of 17014:6: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA759 extends DFA {
        public DFA759(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 759;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_327;
            this.max = dfa_328;
            this.accept = dfa_329;
            this.special = dfa_17;
            this.transition = dfa_330;
        }
        public String getDescription() {
            return "()* loopback of 17444:6: ( ( ruleN4Modifier ) )*";
        }
    }
    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925D0341L,0x0000000000101802L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000200C45D8CE00L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x000000084518CC00L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000C05184C00L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x6C044680D5184F70L,0x4002000000440000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000020040L,0x0000404000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000805184E00L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000200805184C00L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000000007C0001L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0800200C4519CE00L,0x0000440040000001L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000400000000000L,0x0001002000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x7C0FE6BCF5B8CF70L,0x57A24C4A92440341L,0x0000000000101802L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001000000440000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0800200C4518CE00L,0x0000000000000001L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0800000805184C00L,0x0000000000000001L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x6C044680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L,0x0000000000000002L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010000007C0001L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000040008000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004050440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000010440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0000001000002000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6A925D0341L,0x0000000000101802L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L,0x0000001000020000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6A925D0341L,0x0000001000101802L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0020440000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925D0341L,0x0000001000101802L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000000440008000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000404000440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000040010000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x000D048090010130L,0x40024A0010000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x6C444680D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x7C0FC6B4F5B8CF72L,0x57A24C4A92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x7C0FC6B4F5B8CF72L,0x57A24C4A92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_18;
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6A925D0341L,0x0000000000101802L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6A925D0341L,0x0000001000101802L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x7C0FC6BCF5B8CF70L,0x57A24C6A92440341L,0x0000000000101802L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C6A92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x7C0FC6BCF5B8CF70L,0x57A24C6A92440341L,0x0000001000101802L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C6A92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001002000440000L,0x0000000001400000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C6A92440340L,0x0000000001501802L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C6A92440340L,0x0000001001501802L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000080000010000L,0x0001000000000000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000080000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000200040002L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000480000440000L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A25C4B92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4B92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A25C4B92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4B92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0xFE5FFFFFFFFFFFF0L,0x53A34E40507C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0xFE5FFFFFFFFFFFF0L,0x53A24E40507C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0xFE5FFFFFFFFFFFF0L,0x53A24A40507C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24800007C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24800407C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x6C0D4680D5194F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000000L,0x0000021000000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000000L,0x0000000010004000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000002L,0x0000000010004000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x7C07C6B4D598CF72L,0x57A04C4C10444200L,0x0000000000101802L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x7C07C6B4D598CF70L,0x57A04C4810440200L,0x0000000000101802L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000040007C0001L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000140L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000400L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x0000000000000082L,0x0000014000000800L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x0000000000000082L,0x0000014000200800L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x0120000000000002L,0x0000000000001002L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0x0080000000000002L,0x00000182008202B4L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0x7C0FC6B4F5B8CF72L,0x57A24C4AD2440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C4A92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C4A92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0x0000040010000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0x000F849090010130L,0x57A24A0830000200L,0x0000000000100002L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0x000F849090010130L,0x57A24A0810000200L,0x0000000000100002L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x0008040090010100L,0x4000000000000000L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4002404000440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A34C40507C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0x7C0FC6B4D599CF70L,0x57A04C4810440200L,0x0000000000101802L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400000440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24840407C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0x0400000805184C00L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0x4000000805184C00L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24C40507C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0x0000000000000000L,0x000102B000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0x0000000000000000L,0x000100B000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0x0000000000000000L,0x000100A000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A34C00007C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24C00007C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0x6C444680D5184F70L,0x40005C0100440000L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0100440000L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40004108007C0001L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_179 = new BitSet(new long[]{0x0000000000000002L,0x0000000400004000L});
    public static final BitSet FOLLOW_180 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_181 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000100L});
    public static final BitSet FOLLOW_182 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF2L,0x57800002007C0101L,0x0000000000100000L});
    public static final BitSet FOLLOW_183 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_184 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_185 = new BitSet(new long[]{0x2000000000000000L,0x0000020000200000L});
    public static final BitSet FOLLOW_186 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_187 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_188 = new BitSet(new long[]{0x0000000000008000L,0x0000040000000000L});
    public static final BitSet FOLLOW_189 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_190 = new BitSet(new long[]{0x000D048090010130L,0x4002480000000000L});
    public static final BitSet FOLLOW_191 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_192 = new BitSet(new long[]{0x2000040010000100L,0x4000000000200000L});
    public static final BitSet FOLLOW_193 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x40024A0030440000L});
    public static final BitSet FOLLOW_194 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_195 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_196 = new BitSet(new long[]{0x0008040090010102L,0x4000000000000000L});
    public static final BitSet FOLLOW_197 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_198 = new BitSet(new long[]{0x0010000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_199 = new BitSet(new long[]{0x200D048090010130L,0x40025A0010200000L});
    public static final BitSet FOLLOW_200 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010040007C0001L});
    public static final BitSet FOLLOW_201 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010061007C0001L});
    public static final BitSet FOLLOW_202 = new BitSet(new long[]{0x0000000000000002L,0x0000021000000000L});
    public static final BitSet FOLLOW_203 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_204 = new BitSet(new long[]{0x0009040090010100L,0x4000020000000000L});
    public static final BitSet FOLLOW_205 = new BitSet(new long[]{0x0000002000020002L});
    public static final BitSet FOLLOW_206 = new BitSet(new long[]{0x6C044680D5184F72L,0x4002000000440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_207 = new BitSet(new long[]{0x6C044680D5184F72L,0x4000000000440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_208 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_209 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A00800007C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_210 = new BitSet(new long[]{0x7C0FC4B4F5B8CF70L,0x57A24C4A92440340L,0x0000000000101802L});
}
final class T2S{
	final static int[] M_0 = { 11, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 5, 8, -1, -1, 7, -1, -1, -1, -1, 3, 4, -1, 1, 2, 6, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, 10};
	final static int[] M_2 = { 42, 37, 47, -1, 44, 48, 50, 33, -1, -1, 32, -1, -1, 55, -1, 49, 31, -1, -1, -1, 51, -1, 34, -1, 39, -1, 46, 45, -1, -1, -1, -1, -1, -1, -1, 41, -1, 27, 43, -1, -1, -1, 36, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, 28, 30, -1, 52, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53};
	final static int[] M_3 = { 16, 19, 22, -1, -1, 21, -1, -1, -1, -1, 17, 18, -1, -1, -1, 20, -1, 23, -1, -1, -1, 24, -1, -1, -1, -1, 9};
	final static int[] M_4 = { 7, -1, -1, -1, -1, 40, 35, 44, -1, 42, 19, 12, 15, 80, 87, 14, 25, 90, -1, -1, 10, 11, 67, 22, 21, 13, 82, 16, 84, 37, 69, 24, 43, 81, -1, 18, 17, 59, 49, 85, 39, 78, 30, 41, 91, 89, 20, 34, 61, 48, 58, 38, 68, 83, -1, -1, -1, -1, 79, 31, 27, 47, 45, 32, 86, 26, -1, -1, -1, -1, -1, 70, -1, 71, 63, -1, -1, -1, -1, -1, -1, 8, -1, 33, 77, 76, -1, 36, -1, -1, 75, -1, -1, 46, -1, -1, 72, -1, 73, -1, 62, -1, 28, 50, -1, -1, -1, 9, 64, -1, -1, 23, -1, 88, 74, -1, -1, -1, 51, -1, 56, 53, 54, 55, -1, 57, -1, 29, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 65, -1, -1, -1, -1, -1, -1, -1, 52};
	final static int[] M_5 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_6 = { 26, 21, 30, -1, 28, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 32, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_8 = { 25, 20, 29, -1, 27, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 31, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_9 = { 17, 12, 22, -1, 19, 23, 25, 8, -1, -1, 7, -1, -1, -1, -1, 24, 6, -1, -1, -1, 26, -1, 9, -1, 14, -1, 21, 20, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 27, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_11 = { 16, 11, 21, -1, 18, 22, 24, 7, -1, -1, 6, -1, -1, -1, -1, 23, 5, -1, -1, -1, 25, -1, 8, -1, 13, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 26, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_18 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, 50, -1, -1, -1, 26, 10, 54, -1, 34, 28, -1, 13, -1, 18, 56, 4, 1, -1, -1, 51, -1, 43, 32, -1, 20, -1, 6, 22, -1, -1, -1, 15, 45, 31, 42, 19, 55, -1, -1, -1, -1, -1, -1, 7, 9, 30, 29, 8, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, 47, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 62, -1, -1, 3, -1, -1, 59, -1, 60, -1, 46, -1, -1, 33, -1, -1, -1, 2, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 5, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_19 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, 50, -1, -1, -1, 25, 9, 54, -1, 34, 27, -1, 12, -1, 17, 56, 4, 1, -1, -1, 51, -1, 43, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 45, 31, 42, 18, 55, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, 47, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, 62, -1, -1, 3, -1, -1, 59, -1, 60, -1, 46, -1, -1, 33, -1, -1, -1, 2, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 5, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_20 = { 19, 14, 24, -1, 21, 25, 27, 10, -1, -1, 9, -1, -1, -1, -1, 26, 8, -1, -1, -1, 28, -1, 11, -1, 16, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 29, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_21 = { 18, 13, 23, -1, 20, 24, 26, 9, -1, -1, 8, -1, -1, -1, -1, 25, 7, -1, -1, -1, 27, -1, 10, -1, 15, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 28, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_22 = { 15, 12, 61, 34, 5, 62, 64, 55, 21, 22, 54, 30, 7, 27, 28, 63, 53, 23, 26, 32, 65, 36, 56, 38, 6, 41, 60, 4, 16, 18, 19, 20, 48, 37, 39, 14, 43, 45, 3, 17, 25, 49, 58, 46, 10, 47, 11, 2, 44, -1, -1, -1, -1, 29, 50, 52, 35, 66, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 13, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, 67};
	final static int[] M_24 = { 14, 11, 60, 33, 4, 61, 63, 54, 20, 21, 53, 29, 6, 26, 27, 62, 52, 22, 25, 31, 64, 35, 55, 37, 5, 40, 59, 3, 15, 17, 18, 19, 47, 36, 38, 13, 42, 44, 2, 16, 24, 48, 57, 45, 9, 46, 10, 1, 43, -1, -1, -1, -1, 28, 49, 51, 34, 65, 50, 39, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 23, 30, 32, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 66};
	final static int[] M_26 = { 23, 18, 28, -1, 25, 29, 31, 14, -1, -1, 13, 53, -1, -1, -1, 30, 12, -1, -1, 35, 32, -1, 15, -1, 20, -1, 27, 26, -1, -1, 54, -1, 44, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 46, 5, 43, 21, -1, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, 3, 47, -1, -1, 34, -1, -1, -1, 52, 49, -1, -1, 50, -1, -1, -1, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 7, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_27 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 52, -1, -1, -1, 29, 11, -1, -1, 34, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 53, -1, 43, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 45, 5, 42, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 3, 46, -1, -1, 33, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_28 = { 23, 18, 28, -1, 25, 29, 31, 14, -1, -1, 13, 53, -1, -1, -1, 30, 12, 57, -1, 35, 32, -1, 15, -1, 20, 59, 27, 26, -1, -1, 54, -1, 44, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 46, 5, 43, 21, 58, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, 48, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 34, 1, -1, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 7, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_29 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 52, -1, -1, -1, 29, 11, 56, -1, 34, 31, -1, 14, -1, 19, 58, 26, 25, -1, -1, 53, -1, 43, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 45, 5, 42, 20, 57, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, 59, -1, 60, 47, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, 64, -1, -1, 50, -1, -1, 61, -1, 62, -1, 46, -1, -1, 33, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, 63, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_30 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 55, -1, -1, -1, 32, 14, 59, -1, 37, 34, -1, 17, -1, 22, 61, 29, 28, -1, -1, 56, -1, 46, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 48, 7, 45, 23, 60, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, 1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 9, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_31 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 55, -1, -1, -1, 32, 14, 59, -1, 37, 34, -1, 17, -1, 22, 61, 29, 28, -1, -1, 56, -1, 46, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 48, 7, 45, 23, 60, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 9, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_32 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 54, -1, -1, -1, 31, 13, 58, -1, 36, 33, -1, 16, -1, 21, 60, 28, 27, -1, -1, 55, -1, 45, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 47, 7, 44, 22, 59, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, 49, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 35, 1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_33 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 54, -1, -1, -1, 31, 13, 58, -1, 36, 33, -1, 16, -1, 21, 60, 28, 27, -1, -1, 55, -1, 45, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 47, 7, 44, 22, 59, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, 49, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 35, -1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_34 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 56, -1, -1, -1, 33, 15, 60, -1, 38, 35, -1, 18, -1, 23, 62, 30, 29, -1, -1, 57, -1, 47, 9, -1, 25, -1, 11, 27, -1, -1, -1, 20, 49, 8, 46, 24, 61, -1, -1, -1, -1, -1, -1, 12, 14, 7, 36, 13, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, 6, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 10, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_35 = { 27, 22, 32, -1, 29, 33, 35, 18, -1, -1, 17, 57, -1, -1, -1, 34, 16, 61, -1, 39, 36, -1, 19, -1, 24, 63, 31, 30, -1, -1, 58, -1, 48, 10, -1, 26, -1, 12, 28, -1, -1, -1, 21, 50, 9, 47, 25, 62, -1, -1, -1, -1, -1, -1, 13, 15, 8, 37, 14, -1, -1, -1, -1, -1, -1, -1, 64, -1, 65, 52, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, 69, -1, -1, 55, -1, -1, 66, -1, 67, -1, 51, -1, -1, 38, 7, 1, -1, 56, 53, -1, -1, 54, -1, -1, 68, -1, -1, -1, 40, -1, 45, 42, 43, 44, -1, 46, -1, 11, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 59, -1, -1, -1, -1, -1, -1, -1, 41};
	final static int[] M_36 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 55, -1, -1, -1, 32, 14, 59, -1, 37, 34, -1, 17, -1, 22, 61, 29, 28, -1, -1, 56, -1, 46, 9, -1, 24, -1, -1, 26, -1, -1, -1, 19, 48, 8, 45, 23, 60, -1, -1, -1, -1, -1, -1, 11, 13, 7, 35, 12, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, 6, 1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 10, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_37 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 56, -1, -1, -1, 33, 15, 60, -1, 38, 35, -1, 18, -1, 23, 62, 30, 29, -1, -1, 57, -1, 47, 10, -1, 25, -1, -1, 27, -1, -1, -1, 20, 49, 9, 46, 24, 61, -1, -1, -1, -1, -1, -1, 12, 14, 8, 36, 13, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, 7, 1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 11, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_38 = { 15, -1, -1, -1, -1, -1, 11, -1, -1, 10, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 12, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5};
	final static int[] M_39 = { 20, -1, 23, -1, 22, 24, 26, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, 34, 27, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 43, 32, -1, 19, -1, 29, 21, -1, -1, -1, -1, 45, 31, 42, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_40 = { 50, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52};
	final static int[] M_41 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, -1, -1, -1, -1, 25, 9, -1, -1, 34, 27, -1, 12, -1, 17, -1, 4, 1, -1, -1, -1, -1, 43, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 45, 31, 42, 18, -1, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 46, -1, -1, 33, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 5, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_43 = { 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_44 = { 60, 55, 64, 34, 62, 65, -1, -1, 20, 21, -1, 30, 22, 27, 28, -1, -1, 23, 26, 32, -1, 36, -1, 38, 57, 42, 14, 63, 16, 18, 19, -1, 50, 37, 40, 59, 45, 47, 61, 17, 25, 51, 54, 48, 39, 49, 58, 44, 46, -1, -1, -1, -1, 29, -1, 52, 35, 66, -1, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 24, 31, 33, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 67};
	final static int[] M_47 = { 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 10};
	final static int[] M_48 = { 59, 54, 63, 33, 61, 64, -1, -1, 19, 20, -1, 29, 21, 26, 27, -1, -1, 22, 25, 31, -1, 35, -1, 37, 56, 41, 13, 62, 15, 17, 18, -1, 49, 36, 39, 58, 44, 46, 60, 16, 24, 50, 53, 47, 38, 48, 57, 43, 45, -1, -1, -1, -1, 28, -1, 51, 34, 65, -1, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 23, 30, 32, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, 66};
	final static int[] M_51 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_52 = { 53, 48, 58, -1, 55, 59, 61, 44, -1, -1, 43, -1, -1, -1, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_53 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_55 = { 59, 54, 64, 27, 61, 65, 67, 50, 13, 14, 49, 23, 15, 20, 21, 66, 48, 16, 19, 25, 68, 29, 51, 31, 56, 35, 63, 62, 8, 10, 11, 12, 43, 30, 33, 58, 38, 40, 60, 9, 18, 44, 53, 41, 32, 42, 57, 37, 39, -1, -1, -1, -1, 22, 45, 47, 28, 69, 46, 34, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 17, 24, 26, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7};
	final static int[] M_56 = { 8, -1, -1, 7, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_57 = { 54, 49, 59, 24, 56, 60, 62, 45, 10, 11, 44, 20, 12, 17, 18, 61, 43, 13, 16, 22, 63, 26, 46, 28, 51, 32, 58, 57, 5, 7, 8, 9, 40, 27, 30, 53, 35, 37, 55, 6, 15, 41, 48, 38, 29, 39, 52, 34, 36, -1, -1, -1, -1, 19, -1, 42, 25, 64, -1, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 14, 21, 23, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
}