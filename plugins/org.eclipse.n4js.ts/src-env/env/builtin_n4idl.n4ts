/**
 * A {@link MigrationController} schedules the actual execution of migrations. 
 * 
 * That is, based on the set of all declared migrations, it handles the resolution 
 * of migrations for concrete migration arguments. Furthermore, it determines the 
 * order of exe-cution and populates the associated migration context with resulting 
 * context information (e.g. trace links).
 */
public interface MigrationController {
	/**
	 * Migrate the given migration arguments to the given
	 * target model version.
	 * 
	 * Returns the migration results.
	 * 
	 * @param targetVersion The target model version.
	 * @param args The migration arguments.
	 * 
	 * @returns The migration result (possibly a structural ~Object with {out1 : N4Object, out2 : N4Object}) etc.
	 */
	public abstract <TargetType extends Object> migrate(args : Array<?>) : TargetType
	
	/**
	 * Migrate the given migration arguments with the given migration function.
	 * 
	 * Returns the migration results.
	 * 
	 * @param migration A migration function to use for migrating the given arguments.
	 * @param args The migration arguments.
	 * 
	 * @returns The migration result (possibly a structural ~Object with {out1 : N4Object, out2 : N4Object}) etc.
	 */
	public abstract <TargetType extends Object> migrateWith(migration: Function, args : Array<?>) : TargetType
	
	/**
	 * Returns the {@link MigrationContext} this controller operates in. 
	 */
	public abstract get context() : MigrationContext
}

/**
 * The {@link MigrationContext} is the central storage for information during the 
 * execution of migrations.. 
 * 
 * It provides migrations with traceability information such as trace links 
 * and modification detection. It may further serve as a storage for arbitrary user data.
 */
public interface MigrationContext {
	/** 
	 * Returns the targets of all outgoing trace links of the given migration argument.
	 * 
	 * Returns an {@code null} if no such trace link exists.
	 * 
	 * The type of the targets of a trace link is expected to be in accordance with the
	 * correspondingly declared migrations.
	 */
	public abstract getTrace(argument : Object) : Array<?>
	
	/**
	 * Returns {@code true} if the given {@code property} on the 
	 * given object {@code obj} has been modified since it was migrated to 
	 * the current model version. {@code false} otherwise.
	 * 
	 * If {@code property} is omitted, this method checks for any 
	 * modification of {@code obj}.
	 * 
	 * Always returns {@code true} if the given object does not represent
	 * the output of a migration.
	 * 
	 * @param obj The object to check for modifications with.
	 * @param property The optional name of the property of {@code obj} to check for modifications. 
	 */
	public abstract isModified(obj : Object, property : string = undefined) : boolean
	
	/**
	 * Associates the given user data {@code value} with the given {@code key}
	 * in the scope of this context.
	 */
	public abstract setUserData(key : string, value : any) : void
	
	/**
	 * Returns the user data that has been stored for the given {@code key} in the 
	 * scope of this context.
	 * 
	 * Returns {@code null} if no value has been associated with the given key. 
	 * 
	 * @see #setUserData
	 */
	public abstract getUserData(key : string) : any 
}