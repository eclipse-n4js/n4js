/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */


// 15  Standard Built-in ECMAScript Objects, page 102 (PDF: 114) [ECMA5]

// uncomment for stand-alone editing
// primitive void{}primitive string{}primitive number{}primitive boolean{}primitive any{}


// see also http://www.w3schools.com/jsref/default.asp

/**
 * When Object is called as a function rather than as a constructor, it performs a type conversion.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 *
 * @see ES5, 15.2  Object Objects, page 111 (PDF: 123) [ECMA5]
 */
public providedByRuntime object Object @Global {

	/**
	 * TODO finalize signature
	 */
	(...args: any): Object

	/**
	 * The built-in ES5 property "__proto__", here modeled as a read-only property (i.e. no setter provided), because
	 * changing an object's prototype after creation is strongly discouraged in todays Javascript engines.
	 */
	public get __proto__(): Object

	/**
	 * The initial value of Object.prototype is the standard built-in Object prototype object (15.2.4).
	 *
	 * Remark: Modeled as getter to emulate const and to allow for overriding.
	 * @see ES5, 15.2.3.1
	 */
	public static get prototype(): Object

	/**
	 * Returns the prototype of the given object.
	 *
	 * @see ES5, 15.2.3.2
	 */
	public static getPrototypeOf(obj: Object): Object
	/**
	 * Returns the property descriptor of the given object. This descriptor has been directly
	 * defined for the object and not inherited by the prototype of the object.
	 *
	 * @see ES5, 15.2.3.3
	 */
	public static getOwnPropertyDescriptor(obj: Object, prop: string): Object
	/**
	 * Lists the names of the own defined properties in the given object. (So no inherited properties are listed.)
	 *
	 * @see ES5, 15.2.3.4
	 */
	public static getOwnPropertyNames(obj: Object): Array<string>
	/**
	 * Creates a new object (with new Object) and sets the prototype to proto. Passes props to defineProperties.
	 *
	 * @see ES5, 15.2.3.5
	 */
	public static create(proto: Object, props: Object = undefined): Object
	/**
	 * Adds/changes a property to/of the given object.
	 *
	 * @see ES5, 15.2.3.6
	 */
	public static <T extends Object> defineProperty(obj: T, property: string, desc: Object): T
	/**
	 * Adds/changes one or more properties to/of the given object.
	 *
	 * @see ES5, 15.2.3.7
	 */
	public static <T extends Object> defineProperties(obj: T, props: Object): T
	/**
	 * Sets object's configurable flag to false.
	 *
	 * @see ES5, 15.2.3.8
	 */
	public static <T extends Object> seal(obj: T): T
	/**
	 * Sets object's writable flag to false.
	 *
	 * @see ES5, 15.2.3.9
	 */
	public static <T extends Object> freeze(obj: T): T
	/**
	 * Sets the extensible flag of this object to false.
	 *
	 * @see ES5, 15.2.3.10
	 */
	public static <T extends Object> preventExtensions(obj: T): T
	/**
	 * Returns false, if object is configurable, true otherwise.
	 *
	 * @see ES5, 15.2.3.11
	 */
	public static isSealed(obj: Object): boolean
	/**
	 * Returns false, if object is writable, true otherwise.
	 *
	 * @see ES5, 15.2.3.12
	 */
	public static isFrozen(obj: Object): boolean
	/**
	 * Returns true, if the extensible flag is true, false otherwise.
	 *
	 * @see ES5, 15.2.3.13
	 */
	public static isExtensible(obj: Object): boolean
	/**
	 * Returns only the names of enumerable properties and methods. To get the names of all
	 * enumerable and unenumerable properties you have to call Object.getOwnPropertyNames.
	 *
	 * @see ES5, 15.2.3.14
	 */
	public static keys(obj: Object): Array<string>


	/**
	 * Standard built-in Object-constructor.
	 * @see ES5, 15.2.4.1
	 */
	public constructor(value: any = undefined): void
	/**
	 * Returns either "[object undefined]", "[object null]" or "[object " + class + and "]"
	 *
	 * @see ES5, 15.2.4.2
	 */
	public toString(): string
	/**
	 * Delegates here only to toString. Sub classes may implement this method specifically.
	 * Currently, Array, Number, and Date provide their own locale-sensitive toLocaleString methods.
	 *
	 * @see ES5, 15.2.4.3
	 */
	public toLocaleString(): string
	/**
	 * Calls ToObject with this argument. Either the object or the host object used to call the constructor is returned.
	 *
	 * @see ES5, 15.2.4.4
	 */
	public valueOf(): any // any as inherited by sub classes as well
	/**
	 * Returns true, if for the given property name a property descriptor can be found at the current object.
	 *
	 * @param string propertyName <br />
	 * @return boolean <br /><br />
	 *
	 * @see ES5, 15.2.4.5
	 */
	public hasOwnProperty(propertyName: union{string, symbol}): boolean
	/**
	 * Returns true, if the given object is equal to the prototype of the current object (this method has been invoked on).
	 *
	 * @param Object o <br />
	 * @return Object <br /><br />
	 *
	 * @see ES5, 15.2.4.6
	 */
	public isPrototypeOf(o: Object): boolean
	/**
	 * Returns the enumerable flag of the property descriptor found for the given property name, or if there is no descriptor, return false.
	 *
	 * @return boolean <br /><br />
	 *
	 * @see ES5, 15.2.4.7
	 */
	public propertyIsEnumerable(propertyName: string): boolean

	// since ECMAScript 6

//	// 15.2.3.15, ECMAScript 6
//	public static getOwnPropertyKeys(obj: Object): Array
//	// 15.2.3.16, ECMAScript 6
	public static is(value1: any, value2: any): boolean
//	// 15.2.3.17, ECMAScript 6
//	public static assign(target: Object, Object... source): Object
//	// 15.2.3.19, ECMAScript 6
//	public static setPrototypeOf(object: Object, proto: Object): Object


}


/**
 * A representation of a function
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.3  Function Objects, page 117 (PDF: 129) [ECMA5]
 */
public providedByRuntime final object Function extends Object @Global {

	/**
	 * The Function prototype object is itself a Function object (its [[Class]] is "Function") that, when invoked, accepts any arguments and returns undefined.
	 *
	 */
	public static get prototype(): Function

	/**
	 * The value of the prototype property is used to initialize the [[Prototype]] internal property of a newly created object before the Function object is invoked as a constructor for that newly created object. This property has the attribute { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }.
	 *	NOTE Function objects created using Function.prototype.bind do not have a prototype property.
	 *
	 * @see ES5 15.3.5.2
	 */
	public get prototype(): Object

	/**
	 * Invoking 'Function' directly has the same effect as creating an instance with 'new'. See documentation of
	 * constructor for more details.
	 */
	(... args: string): Function

	/**
	 * The last argument specifies the body (executable code) of a function; any preceding arguments specify formal
     * parameters.
	 *
	 * @see ES5, 15.3.4.1
	 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function#Syntax
	 */
	// in WebStorm: new Function(args: Arguments = undefined)
	// in TypeScript: new Function(...args : string[])
	public constructor (...args: string): void // note: keep this signature (except return type) aligned with the callable constructor above

	// toString: inherited
	// @see ES5, 15.3.4.2

	/**
	 * Call each argArray element, collect the results inside a list and return the list
	 * The length property of the apply method is 2
	 *
	 * @see ES5, 15.3.4.3
	 */
	public apply(thisArg: any, argArray: Array<?>): any
	/**
	 * If this method was called with more than one argument then in left to right order starting with  arg1 append
     * each argument as the last element of argList
     * Return the result providing thisArg as the this value and argList as the list of arguments.
     * The length property of the call method is 1
	 *
	 * @see ES5, 15.3.4.4
	 */
	// in WebStorm: call(thisArg: Object, any... args): any
	// in TypeScript: call(thisArg : any, ...args : any[]) : any
	public call(thisArg: any, ...args: any): any

	/**
	 * The  bind  method  takes  one  or  more  arguments,  thisArg and  (optionally)  arg1,  arg2,  etc,  and  returns  a  new
     * function object
	 *
	 * @see ES5, 15.3.4.5
	 */
	// TODO: support annotation in type systems
	// in WebStorm: bind(thisArg: T, any... args): function(this:%T%)
	// in TypeScript: bind(thisArg : any, ...args : any[]) : any
	public bind(thisArg: any, ...args: any): {function(... args: any): any}

	/**
	 * The value of the length property is an integer that indicates the ―typical‖ number of arguments expected by
     * the function. However, the language permits the function to be invoked with some other number of arguments.
     * The behavior of a function when invoked on a number of arguments other than the number specified by its
     * length property depends on the function.
	 *
	 * @see ES5, 15.3.5.1
	 */
    public get length(): number

    // prototype: inherited
    // @see ES5, 15.3.5.2

	/**
	 * Arguments of a Function as array-like object
	 */
	public get arguments(): ArgumentsType
}

/**
 * Array objects give special treatment to a certain class of property names. A property name P (in the form of a
 * String value) is an array index if and only if ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal to
 * 2^32 - 1. A property whose property name is an array index is also called an element. Every Array object has a
 * length property  whose  value  is  always  a  nonnegative  integer  less  than  2^32.  The  value  of  the  length
 * property is numerically greater than the name of every property whose name is an array index; whenever a
 * property of an Array object is created or changed, other properties are adjusted as necessary to maintain this
 * invariant. Specifically, whenever a property is added whose name is an array index, the  length property is
 * changed, if necessary, to be one more than the numeric value of that array index; and whenever the length
 * property is changed, every property whose name is an array index whose value is not smaller than the new
 * length  is  automatically  deleted.  This  constraint  applies  only  to  own  properties  of  an  Array  object  and  is
 * unaffected by length or array index properties that may be inherited from its prototypes.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.4  Array Objects, page 122 (PDF: 134) [ECMA5]
 */
public providedByRuntime  object Array<T> extends Object indexed T @Global {

	/**
	 * The initial value of Array.prototype is the Array prototype object (15.4.4).
	 *
	 * @see ES5 15.4.3.1
	 */
	public static get prototype(): Array<? extends any>

	/*
	 * The isArray function takes one argument arg, and returns the Boolean value true if the argument is an object
     * whose class internal property is "Array"; otherwise it returns false.
	 *
     * @see ES5, 15.4.3.2
	 */
	public static isArray(obj: any): boolean

	/**
	 * Initializes an array either with a certain length or with the given list of items.
	 *
	 * @see ES5, 15.4.4.1
	 */
	// in WebStorm: new Array(...*)
	// in TypeScript: new Array(arrayLength) or new Array(...items : any[])
	public constructor(first: union{number, T} = undefined, ...items: T): void  // TODO: signature is type unsafe, allows to create arrays with elements of wrong type, new Array<string>(5, "x", "y"), but cannot write constructor(items : union {number, T... items} = undefined)

	// 15.4.4.2 Array.prototype.toString ( ) inherited
	// 15.4.4.3 Array.prototype.toLocaleString ( ) inherited


	/**
	 * When  the  concat method  is  called  with  zero  or  more  arguments  item1,  item2,  etc.,  it  returns  an  array
	 * containing the array elements of the object followed by the array elements of each argument in order.
	 *
	 * @see ES5, 15.4.4.4
	 */
	public concat(...items: union {T, Array<T>}): Array<T>
	/**
	 * The elements of the array are converted to Strings, and these Strings are then concatenated, separated by
     * occurrences of the separator. If no separator is provided, a single comma is used as the separator.
	 *
	 * @see ES5, 15.4.4.5
	 */
	public join(separator: string = undefined): string
	/**
	 * The last element of the array is removed from the array and returned.
	 *
	 * @see ES5, 15.4.4.6
	 */
	public pop(): T
	/**
	 * The arguments are appended to the end of the array, in the order in which they appear. The new length of the
     * array is returned as the result of the call.
	 *
	 * @see ES5, 15.4.4.7
	 */
	public push(...items: T): number
	/**
	 * The elements of the array are rearranged so as to reverse their order. The object is returned as the result of the call.
	 *
	 * @see ES5, 15.4.4.8
	 */
	public reverse(): Array<T>
	/**
	 * The first element of the array is removed from the array and returned.
	 *
     * @see ES5, 15.4.4.9
	 */
	public shift(): T
	/**
	 * The slice method takes two arguments, start and end, and returns an array containing the elements of the
     * array  from  element  start  up  to,  but  not  including,  element  end  (or  through  the  end  of  the  array  if  end  is
     * undefined).  If  start is  negative,  it  is  treated  as  length + start where  length is  the  length of  the  array.  If  end is
     * negative, it is treated as length + end where length is the length of the array.
	 *
     * @see ES5, 15.4.4.10
	 */
	public slice(start: number = undefined, end: number = undefined): Array<T>
	/**
	 * The elements of this array are sorted. The sort is not necessarily stable (that is, elements that compare equal
     * do not necessarily remain in their original order). If  compareFn is not undefined, it should be a function that
     * accepts two arguments x and y and returns a negative value if x &lt; y, zero if x = y, or a positive value if x &gt; y.
	 *
     * @see ES5, 15.4.4.11
	 */
	public sort(compareFn: {function (x: T, y: T) : number} = undefined): Array<T>
	/**
	 * When the splice method is called with two or more arguments start, deleteCount and (optionally) item1, item2,
     * etc., the deleteCount elements of the array starting at array index  start are replaced by the arguments item1,
     * item2, etc. An Array object containing the deleted elements (if any) is returned.
	 *
     * @see ES5, 15.4.4.12
	 */
	public splice(start: number = undefined, deleteCount: number = undefined, ...items: T): Array<T>
	/**
	 * The arguments are prepended to the start of the array, such that their order within the array is the same as the
     * order in which they appear in the argument list.
	 *
     * @see ES5, 15.4.4.13
	 */
	public unshift(...items: T): number

		/**
	 * indexOf compares  searchElement to the elements of the array, in ascending order, using the internal Strict
     * Equality Comparison Algorithm (11.9.6), and if found at one or more positions, returns the index of the first
     * such position; otherwise, -1 is returned.
     * <p>The optional second argument fromIndex defaults to 0 (i.e. the whole array is searched). If it is greater than or
     * equal to the length of the array, -1 is returned, i.e. the array will not be searched. If it is negative, it is used as
     * the offset from the end of the array to compute fromIndex. If the computed index is less than 0, the whole array
     * will be searched.
	 *
     * @see ES5, 15.4.4.14
	 */
	public indexOf(searchElement: any, fromIndex: number = undefined): number
	/**
	 * lastIndexOf compares  searchElement to  the  elements  of  the  array  in  descending  order using  the  internal
     * Strict Equality Comparison Algorithm (11.9.6), and if found at one or more positions, returns the index of the
     * last such position; otherwise, -1 is returned.
     * <p>The  optional  second  argument  fromIndex  defaults  to  the  array's  length  minus  one  (i.e.  the  whole  array  is
     * searched).  If  it  is  greater  than  or  equal  to  the  length  of  the  array,  the  whole  array  will  be  searched.  If  it  is
     * negative, it is used as the offset from the end of the array to compute fromIndex. If the computed index is less
     * than 0, -1 is returned.
	 *
     * @see ES5, 15.4.4.15
	 */
	public lastIndexOf(searchElement: any, fromIndex: number = undefined): number
	/**
	 * callback  should  be  a  function  that  accepts  three  arguments  and  returns  a  value  that  is  coercible  to  the
	 * Boolean value true or false. every calls callback once for each element present in the array, in ascending
	 * order, until it finds one where callback returns false. If such an element is found, every immediately returns
	 * false. Otherwise, if callback returned true for all elements, every will return true. callback is called only for
	 * elements of the array which actually exist; it is not called for missing elements of the array.
	 * <p>If a thisArg parameter is provided, it will be used as the this value for each invocation of callback. If it is not
	 * provided, undefined is used instead.
	 * <p>callback is called with three arguments: the value of the element, the index of the element, and the object
	 * being traversed.
	 * <p>every does not directly mutate the object on which it is called but the object may be mutated by the calls to
	 * callback.
	 * <p>The  range  of  elements  processed  by  every is  set  before  the  first  call  to  callback.  Elements  which  are
	 * appended to the array after the call to every begins will not be visited by callback. If existing elements of the
	 * array  are  changed,  their  value  as  passed  to  callback  will  be  the  value  at  the  time  every visits  them;
	 * elements that are deleted after the call to every begins and before being visited are not visited. every acts
	 * like the "for all" quantifier in mathematics. In particular, for an empty array, it returns true.
	 *
     * @see ES5, 15.4.4.16
	 */
	public <ThisT extends Object> every(callback: {function(value: T, index: number, traversedObject: Array<T>)}, thisObject: ThisT = undefined): boolean
		/**
	 * callback  should  be  a  function  that  accepts  three  arguments  and  returns  a  value  that  is  coercible  to  the
	 * Boolean value true or false. some calls callback once for each element present in the array, in ascending
	 * order, until it finds one where callback returns true. If such an element is found, some immediately returns
	 * true. Otherwise, some returns false. callback is called only for elements of the array which actually exist; it is
	 * not called for missing elements of the array.
	 * <p>If a thisArg parameter is provided, it will be used as the this value for each invocation of callback. If it is not
	 * provided, undefined is used instead.
	 * <p>callback is called with three arguments: the value of the element, the index of the element, and the object
	 * being traversed.
	 * <p>some does not directly mutate the object on which it is called but the object may be mutated by the calls to
	 * callback.
	 * <p>The range of elements processed by some is set before the first call to callback. Elements that are appended
	 * to the array after the call to some begins will not be visited by callback. If existing elements of the array are
	 * changed, their value as passed to callback will be the value at the time that some visits them; elements that
	 * are deleted after the call to some begins and before being visited are not visited.  some acts like the "exists"
	 * quantifier in mathematics. In particular, for an empty array, it returns false.
	 *
     * @see ES5, 15.4.4.17
	 */
	public <ThisT extends Object> some(callback: {function(value: T, index: number, traversedObject: Array<T>) : boolean}, thisObject: ThisT = undefined): boolean
	/**
	 * callback should be a function that accepts three arguments. forEach calls callback once for each element
	 * present in the array, in ascending order. callback is called only for elements of the array which actually exist;
	 * it is not called for missing elements of the array.
	 * <p>If a thisArg parameter is provided, it will be used as the this value for each invocation of callback. If it is not
	 * provided, undefined is used instead.
	 * <p>callback is called with three arguments: the value of the element, the index of the  element, and the object
	 * being traversed.
	 * <p>forEach does not directly mutate the object on which it is called but the object may be mutated by the calls to
	 * callback.
	 * <p>The  range  of  elements  processed  by  forEach is  set  before  the  first  call  to  callback.  Elements  which  are
	 * appended to the array after the call to forEach begins will not be visited by callback. If existing elements of
	 * the array are changed, their value as passed to callback will be the value at the time  forEach visits them;
	 * elements that are deleted after the call to forEach begins and before being visited are not visited.
	 *
     * @see ES5, 15.4.4.18
	 */
	public <ThisT extends Object> forEach(callback: {function(value: T, index: number, traversedObject: Array<T>) : void}, thisObject: ThisT = undefined): void
	/**
	 * callback should be a function that accepts three arguments. map calls callback once for each element in the
	 * array, in ascending order, and constructs a new Array from the results. callback is called only for elements of
	 * the array which actually exist; it is not called for missing elements of the array.
	 * <p>If a thisArg parameter is provided, it will be used as the this value for each invocation of callback. If it is not
	 * provided, undefined is used instead.
	 * <p>callback is called with three arguments: the value of the element, the index of the element, and the object
	 * being traversed.
	 * <p>map does not directly mutate the object on  which it is called but the object may  be mutated by the calls to
	 * callback.
	 * <p>The  range  of  elements  processed  by  map is  set  before  the  first  call  to  callback.  Elements  which  are
	 * appended to the array after the call to map begins will not be visited by callback. If existing elements of the
	 * array are changed, their value as passed to callback will be the value at the time map visits them; elements
	 * that are deleted after the call to map begins and before being visited are not visited.
	 *
     * @see ES5, 15.4.4.19
	 */
	public <U, ThisT extends Object> map(callback: {function(value: T, index: number, traversedObject: Array<T>) : U}, thisObject: ThisT = undefined): Array<U>

	/**
	 * callback  should  be  a  function  that  accepts  three  arguments  and  returns  a  value  that  is  coercible  to  the
	 * Boolean value true or false. filter calls callback once for each element in the array, in ascending order,
	 * and  constructs  a  new  array  of  all  the values  for  which  callback  returns  true.  callback  is  called  only  for
	 * elements of the array which actually exist; it is not called for missing elements of the array.
	 * If a thisArg parameter is provided, it will be used as the this value for each invocation of callback. If it is not
	 * provided, undefined is used instead.
	 * <p>callback is called with three arguments: the value of the element, the index of the element, and the object
	 * being traversed.
	 * <p>filter does not directly mutate the object on which it is called but the object may be mutated by the calls to
	 * callback.
	 * <p>The  range  of  elements  processed  by  filter is  set  before  the  first  call  to  callback.  Elements  which  are
	 * appended to the array after the call to filter begins will not be visited by callback. If existing elements of
	 * the array  are changed their value as passed to  callback will be the  value at the time  filter visits them;
	 * elements that are deleted after the call to filter begins and before being visited are not visited.
	 *
     * @see ES5, 15.4.4.20
	 */
	public <ThisT extends Object> filter(callback: {function(value: T, index: number, traversedObject: Array<T>) : boolean}, thisObject: ThisT = undefined): Array<T>
	// since ECMAScript 5

	/**
	 * callback should be a function that takes four arguments. reduce calls the callback, as a function, once for
	 * each element present in the array, in ascending order.
	 * <p>callback is called with four arguments: the previousValue (or value from the previous call to callback), the
	 * currentValue (value of the current element), the currentIndex, and the object being traversed.  The first time
	 * that callback is  called, the  previousValue and currentValue can  be one of two  values. If an  initialValue  was
	 * provided in the call to reduce, then previousValue will be equal to initialValue and currentValue will be equal
	 * to the first value in the array. If no initialValue was provided, then previousValue will be equal to the first value
	 * in the array and currentValue will be equal to the second. It is a TypeError if the array contains no elements
	 * and initialValue is not provided.
	 * <p>reduce does not directly mutate the object on which it is called but the object may be mutated by the calls to
	 * callback.
	 * <p>The  range  of  elements  processed  by  reduce is  set  before  the  first  call  to  callback.  Elements  that  are
	 * appended to the array after the call to reduce begins will not be visited by callback. If existing elements of
	 * the array are changed, their value as passed to  callback will be the value at the time reduce visits them;
	 * elements that are deleted after the call to reduce begins and before being visited are not visited.
	 *
	 * @see ES5, 15.4.4.21
	 */
	public <MemoT> reduce(callback: {function(previousValue: MemoT, currentValue: T, index: number, traversedObject: Array<T>) : MemoT}, initialValue: MemoT = undefined): MemoT
	/**
	 * callback  should  be  a  function  that  takes  four  arguments.  reduceRight calls  the  callback,  as  a  function,
	 * once for each element present in the array, in descending order.
	 * <p>callback  is called  with four arguments: the  previousValue (or value from the previous call to  callback), the
	 * currentValue (value of the current element), the currentIndex, and the object being traversed. The first time the
	 * function is called, the previousValue and currentValue can be one of two values. If an initialValue was provided
	 * in the call to reduceRight, then previousValue will be equal to initialValue and currentValue will be equal to the
	 * last value in the array. If no initialValue was provided, then previousValue will be equal to the last value in the
	 * array  and  currentValue  will  be  equal  to  the  second-to-last  value. It  is  a  TypeError if  the  array  contains  no
	 * elements and initialValue is not provided.
	 * <p>reduceRight does not directly mutate the object on which it is called but the object may be mutated by the
	 * calls to callback.
	 * <p>The range of elements processed by reduceRight is set before the first call to callback. Elements that are
	 * appended  to  the  array  after  the  call  to  reduceRight begins  will  not  be  visited  by  callback.  If  existing
	 * elements of the array are changed by callback, their value as passed to callback will be the value at the
	 * time reduceRight visits them; elements that are deleted after the call to reduceRight begins and before
	 * being visited are not visited.
	 *
	 * @see ES5, 15.4.4.22
	 */
	public <MemoT> reduceRight(callback: {function(previousValue: MemoT, currentValue: T, index: number, traversedObject: Array<T>) : MemoT}, initialValue: MemoT = undefined): MemoT

	/**
	 * The length property of this Array object is a data property whose value is always numerically greater than
	 * the name of every deletable property whose name is an array index.
	 *
     * @see ES5, 15.4.5.2
	 */
	public get length(): number

	/**
	 * The length property of this Array object is a data property whose value is always numerically greater than the name
	 * of every deletable property whose name is an array index.
	 * <p>NOTE
	 * Attempting to set the length property of an Array object to a value that is numerically less than or equal to the
	 * largest numeric property name of an existing array indexed non-deletable property of the array will result in the
	 * length being set to a numeric value that is one greater than that largest numeric property name. See 15.4.5.1.
	 * @see ES5, 15.4.5.2
	 */
	public set length(length: number)

	/**
	 * Returns the default iterator for this array.
	 */
	public [Symbol.iterator](): Iterator<T>
}

/**
 * Representation of a char sequence.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.5  String Objects, page 141 (PDF: 153) [ECMA5]
 */
public providedByRuntime final object String extends Object indexed string @Global {

	/**
	 * TODO finalize signature
	 */
	(...args: any): string

	// 15.5.3.1 String.prototype inherited (Object)

    /**
	 * Returns a String value containing as many characters as the number of arguments. Each argument specifies
     * one character of the resulting String, with the first argument specifying the first character, and so on, from left
     * to right. An argument is converted to a character by applying the operation ToUint16 (9.7) and regarding the
     * resulting 16-bit integer as the code unit value of a character. If no arguments are supplied, the result is the
     * empty String.
	 *
	 * @see ES5, 15.5.3.2
	 */
	public static fromCharCode(...chars: number): string

    /**
	 * When called as function, it returns a  String  value (not a String  object) computed by  ToString(value).
	 * If value is not supplied, the empty String "" is returned.
	 *
	 * @see ES5, 15.5.4.1 String.prototype.constructor
	 */
	public constructor(value: any = undefined): void

	// 15.5.4.2 String.prototype.toString ( ) inherited

	/**
	 * Returns this String value.
	 *
	 * @see ES5, 15.5.4.3
	 */
	public valueOf(): string

	/**
	 * Returns a String containing the character at position pos in the String resulting from converting this object to a
	 * String. If there is no character at that position, the result is the empty String. The result is a String value, not a
	 * String object.
	 * <p>If pos is a value of Number type that is an integer, then the result of x.charAt(pos) is equal to the result of
	 * x.substring(pos, pos+1).
	 *
	 * @see ES5, 15.5.4.4
	 */
	public charAt(pos: number): string
	/**
	 * Returns a Number (a nonnegative integer less than 2^16) representing the code unit value of the character at
	 * position  pos  in  the  String  resulting  from  converting  this  object  to  a  String.  If  there  is  no  character  at  that
	 * position, the result is NaN.
	 *
	 * @see ES5, 15.5.4.5
	 */
	public charCodeAt(index: number): number
	/**
	 * When  the  concat method  is  called  with  zero  or  more  arguments  string1,  string2,  etc.,  it  returns  a  String
	 * consisting of the characters of this object (converted to a String) followed by the characters of each of string1,
	 * string2, etc. (where each argument is converted to a String). The result is a String value, not a String object.
	 *
	 * @see ES5, 15.5.4.6
	 */
	public concat(...strings: string): string
	/**
	 * If searchString appears as a substring of the result of converting this object to a String, at one or more positions
	 * that  are  greater  than  or  equal  to  position,  then  the  index  of  the  smallest  such  position  is  returned;
	 * otherwise, -1 is returned. If position is undefined, 0 is assumed, so as to search all of the String.
	 *
	 * @see ES5, 15.5.4.7
	 */
	public indexOf(searchString: string, position: number = undefined): number
	/**
	 * If searchString appears as a substring of the result of converting this object to a String at one or more positions
	 * that  are  smaller  than  or  equal  to  position,  then  the  index  of  the  greatest  such  position  is  returned;
	 * otherwise, -1 is returned. If position is undefined, the length of the String value is assumed, so as to search
	 * all of the String.
	 *
	 * @see ES5, 15.5.4.8
	 */
	public lastIndexOf(searchString: string, position: number = undefined): number
	/**
	 * When the localeCompare method is called with one argument that, it returns a Number other than NaN that
	 * represents the result of a locale-sensitive String comparison of the this value (converted to a String) with that
	 * (converted to a String). The two Strings are S and That. The two Strings are compared in an implementation-
	 * defined fashion. The result is intended to order String values in the sort order specified by the system default
	 * locale, and will be negative, zero, or positive, depending on whether S comes before That in the sort order, the
	 * Strings are equal, or S comes after That in the sort order, respectively.
	 *
	 * optional parameters see MDN, are declared as "reserved" in ECMAScript 6
	 * @see ES5, 15.5.4.9
	 */
	public localeCompare(that: string, locales: string = undefined, options: any+ = undefined): number
	/**
	 * Searches the given string for a match against a regular expression and returns the matches as an Array object.
	 *
	 * @see ES5, 15.5.4.10
	 */
// TODO use the following after fixing IDEBUG-273:
//	public ~Array<string> with {index: number; input: string;} match(regexp: RegExp)
	public match(regexp: RegExp): TEMP_ReturnTypeOfMatchExec
	/**
	 * Searches the given string for the replace value string or a regular expression and returns a new
	 * string where the specified values are replaced.
	 *
	 * @see ES5, 15.5.4.11
	 */
	public replace(searchValue: union{RegExp, string}, replaceValue: union{string, Function}): string
	/**
	 * Searches the given string for the specified value or regular expression and returns the position
	 * of the match or -1 if no match is found.
	 *
	 * @see ES5, 15.5.4.12
	 */
	public search(regexp: any): number
	/**
	 * The slice method takes two arguments, start and end, and returns a substring of the result of converting this
	 * object to a String, starting from character position start and running to, but not including, character position end
	 * (or  through  the  end  of  the  String  if  end is  undefined).  If  start is  negative,  it  is  treated  as  sourceLength+start
	 * where  sourceLength  is  the  length  of  the  String.  If  end  is  negative,  it  is  treated  as  sourceLength+end  where
	 * sourceLength is the length of the String. The result is a String value, not a String object.
	 *
	 * @see ES5, 15.5.4.13
	 */
	public slice(start: number, end: number = undefined): string
	/**
	 * Returns  an  Array  object  into  which  substrings  of  the  result  of  converting  this  object  to  a  String  have  been
	 * stored.  The  substrings  are  determined  by  searching  from  left  to  right  for  occurrences  of  separator;  these
	 * occurrences are not part of any substring in the returned array, but serve to divide up the String value. The
	 * value of separator may be a String of any length or it may be a RegExp object (i.e., an object whose [[Class]]
	 * internal property is "RegExp"; see 15.10).
	 * <p>The value of separator may be an empty String, an empty regular expression, or a regular expression that can
	 * match an empty String. In this case, separator does not match the empty substring at the beginning or end of
	 * the  input  String,  nor  does  it  match  the  empty  substring  at  the  end  of  the  previous  separator  match.  (For
	 * example, if separator is the empty String, the String is split up into individual characters; the length of the result
	 * array  equals  the  length  of  the  String,  and  each  substring  contains  one  character.)  If  separator is  a  regular
	 * expression, only the first match at a given position of the this String is considered, even if backtracking could
	 * yield  a  non-empty-substring  match  at  that  position.
	 * <p>If the this object is (or converts to) the empty String, the result depends on whether separator can match the
	 * empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element,
	 * which is the empty String.
	 * <p>If separator is a regular expression that contains capturing parentheses, then each time separator is matched
	 * the results (including any  undefined results) of the capturing parentheses are spliced into the output array.
	 * <p>If separator is undefined, then the result array contains just one String, which is the this value (converted to a
	 * String).  If  limit  is  not  undefined,  then  the  output  array  is  truncated  so  that  it  contains  no  more  than  limit
	 * elements.
	 *
	 * @see ES5, 15.5.4.14
	 */
	public split(separator: any, limit: number = undefined): Array<string>
	/**
	 * The substring method takes two arguments, start and end, and returns a substring of the result of converting
	 * this object to a String, starting from character position start and running to, but not including, character position
	 * end of the String (or through the end of the String is end is undefined). The result is a String value, not a String
	 * object.
	 * <p>If either argument is NaN or negative, it is replaced with zero; if either argument is larger than the length of the
	 * String, it is replaced with the length of the String.
	 * <p>If start is larger than end, they are swapped.
	 *
	 * @see ES5, 15.5.4.15
	 */
	public substring(start: number, end: number = undefined): string
	/**
	 * Produces a String where each of its characters are either the Unicode lowercase equivalent of the corresponding
     * character in the given String or the actual corresponding character of the given String if no Unicode lowercase equivalent exists.
	 *
	 * @host String <br />
	 * @return string <br /><br />
	 *
	 * @see ES5, 15.5.4.16
	 */
	public toLowerCase(): string
	/**
	 * This function works exactly the same as toLowerCase except that its result is intended to yield the correct
	 * result for the host environment‘s current locale, rather than a locale-independent result. There will only be a
	 * difference  in  the  few  cases  (such  as  Turkish)  where  the  rules  for  that  language  conflict  with  the  regular
	 * Unicode case mappings.
	 *
	 * @see ES5, 15.5.4.17
	 */
	public toLocaleLowerCase(): string
	/**
	 * This  function  behaves  in  exactly  the  same  way  as  String.prototype.toLowerCase,  except  that
	 * characters are mapped to their uppercase equivalents as specified in the Unicode Character Database.
	 *
	 * @see ES5, 15.5.4.18
	 */
	public toUpperCase(): string
	/**
	 * This function works exactly the same as toUpperCase except that its result is intended to yield the correct
	 * result for the host environment‘s current locale, rather than a locale-independent result. There will only be a
	 * difference  in  the  few  cases  (such  as  Turkish)  where  the  rules  for  that  language  conflict  with  the  regular
	 * Unicode case mappings.
	 *
	 * @see ES5, 15.5.4.19
	 */
	public toLocaleUpperCase(): string


	// since ECMAScript 5

	/**
	 * Removes whitespace from both sides of a string.
	 *
	 * @see ES5, 15.5.4.20
	 */
	public trim(): string

	/**<p>The length property represents the length of a string.
	 * <p>This property returns the number of code units in the string. <a href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a>,
	 * the string format used by JavaScript,
	 * uses a single 16-bit code unit to represent the most common characters, but needs to use two code units
	 * for less commonly-used characters, so it's possible for the value returned by length to not match
	 * the actual number of characters in the string.
	 *
	 * @see ES5, 15.5.5.1
	 */
    public get length(): number

//    /**
//     * The String.raw function may be called with a variable number of arguments.
//     * The first argument is template and the remainder of the arguments form the List substitutions.
//     *
//     * @see ES6, 21.1.2.4
//     */
//    // TODO actually it should be Array<String>, any... substitutions
//    // but therefore we'd need deconstruction of a template in the context of a tagged value
//    public static raw(t: Template): string

	/**
	 * Returns a new Iterator object that iterates over the code points of a String value, returning each code point as
	 * a String value.
	 */
	public [Symbol.iterator](): Iterator<string>
}

/**
 * Representation of a boolean value, either true or false.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.6  Boolean Objects, page 152 (PDF: 164) [ECMA5]
 */
public providedByRuntime final object Boolean extends Object @Global {

    /**
	 * Returns a Boolean value (not a Boolean object) computed by ToBoolean(value).
	 *
	 * @see ES5, 15.6.2
	 */
	public constructor(value: any = undefined): void

	/**
	 * @see ES5, 15.6.4.3
	 */
	public valueOf(): boolean
}

/**
 * Representation of a number.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.7  Number Objects, page 154 (PDF: 166) [ECMA5]
 */
public providedByRuntime final object Number extends Object @Global {

	/**
	 * TODO finalize signature
	 */
	(... args: any): number

   	/**
	 *
	 * @see ES5, 15.7.3.2
	 */
	public const MAX_VALUE: number
	/**
	 * @see ES5, 15.7.3.3
	 */
	public const MIN_VALUE: number
	/**
	 * @see ES5, 15.7.3.4
	 */
	public const NaN: number
	/**
	 * @see ES5, 15.7.3.5
	 */
	public const NEGATIVE_INFINITY: number
	/**
	 * @see ES5, 15.7.3.6
	 */
	public const POSITIVE_INFINITY: number

	 /**
	 * When called as function, it returns  a  Number  value  (not  a  Number  object)  computed  by
	 * ToNumber(value) if  value  was  supplied,  else returns +0.
	 *
	 * @see ES5, 15.7.4.1
	 */
	public constructor(value: any = undefined): void
	/**
	 * The optional radix should be an integer value in the inclusive range 2 to 36. If radix not present or is undefined
     * the Number 10 is used as the value of radix. If ToInteger(radix) is the Number 10 then this Number value is
     * given as an argument to the ToString abstract operation; the resulting String value is returned.
     * <p>If  ToInteger(radix)   is  not  an  integer  between  2  and  36  inclusive  throw  a  RangeError  exception.  If
     * ToInteger(radix) is an integer from 2 to 36, but not 10, the result is a String representation of this Number value
     * using the specified radix. Letters a-z are used for digits with values 10 through 35. The precise algorithm is
     * implementation-dependent  if  the  radix  is  not  10,  however  the  algorithm  should  be  a  generalization  of  that
     * specified in 9.8.1.
	 *
	 * @see ES5, 15.7.4.2
	 */
	public toString(radix: number = undefined): string

	// 15.7.4.3 Number.prototype.toLocaleString() inherited

	/**
	 * Returns this Number value.
	 *
	 * @see ES5, 15.7.4.4
	 */
	public valueOf(): number
	/**
	 * Return  a  String  containing  this  Number  value  represented  in  decimal  fixed-point  notation  with  fractionDigits
     * digits after the decimal point. If fractionDigits is undefined, 0 is assumed.
	 *
	 * @see ES5, 15.7.4.5
	 */
	public toFixed(fractionalDigits: number = undefined): string
	/**
	 * Return a String containing this Number value represented in decimal exponential notation with one digit before
     * the significand's decimal point and fractionDigits digits after the significand's decimal point. If fractionDigits is
     * undefined,  include  as  many  significant  digits  as  necessary  to  uniquely  specify  the  Number  (just  like  in
     * ToString except that in this case the Number is always output in exponential notation).
	 *
	 * @see ES5, 15.7.4.6
	 */
	public toExponential(fractionalDigits: number = undefined): string

	/**
	 * Return a String containing this Number value represented either in decimal exponential notation with one digit
     * before the significand's decimal point and precision–1 digits after the significand's decimal point or in decimal
     * fixed  notation  with  precision  significand digits.  If  precision  is  undefined,  call  ToString  (9.8.1)  instead.
	 *
	 * @see ES5, 15.7.4.7
	 */
	public toPrecision(precision: number = undefined): string

}

/**
 * See [ECMA6] Section 19.4.
 *
 * A symbol is a unique and immutable data type and may be used as an identifier for object properties. The symbol
 * object is an implicit object wrapper for the symbol primitive data type.
 *
 * TODO in ES6 this is defined to be a property of the global object and a constructor function
 */
public providedByRuntime final object Symbol extends Object @Global {

	/**
	 * Creates a new, primitive symbol.
	 *
	 * @param description A description of the symbol which can be used for debugging but not to access the symbol itself.
	 */
	(description: string = undefined): symbol

	/**
	 * TODO doc
	 */
	public const iterator: symbol

	/**
	 * Returns the shared symbol with the given key from the Javascript engine's shared symbol registry.
	 * Creates a new symbol if not found.
	 *
	 * @see ES6, 19.4.2.1
	 */
	public static for(key: string): symbol

	/**
	 * Returns the key for the given shared symbol if found in the Javascript engine's shared symbol registry.
	 * Otherwise 'undefined' is returned.
	 *
	 * @see ES6, 19.4.2.5
	 */
	public static keyFor(sym: symbol): string
}

/**
 * Mathematical attributes and operations. This object has no constructor and thus cannot be called with new.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.8  The Math Object, page 159 (PDF: 171) [ECMA5]
 */
public providedByRuntime final object Math extends Object @Global  {
	/**
	 * The Number value for e, the base of the natural logarithms, which is approximately 2.7182818284590452354.
	 *
	 * @see ES5, 15.8.1.1
	 */
	public const E: number
	/**
	 * The Number value for the natural logarithm of 10, which is approximately 2.302585092994046.
	 *
	 * @see ES5, 15.8.1.2
	 */
	public const LN10: number
	/**
	 * The Number value for the natural logarithm of 2, which is approximately 0.6931471805599453.
	 *
	 * @see ES5, 15.8.1.3
	 */
	public const LN2: number
	/**
	 * The Number value for the base-2 logarithm of e, the base of the natural logarithms; this value is approximately
     * 1.4426950408889634.
	 *
	 * @see ES5, 15.8.1.4
	 */
	public const LOG2E: number
	/**
	 * The  Number  value  for  the  base-10  logarithm  of  e,  the  base  of  the  natural  logarithms;  this  value  is
     * approximately 0.4342944819032518.
	 *
	 * @see ES5, 15.8.1.5
	 */
	public const LOG10E: number
	/**
	 * The  Number  value  for  n,  the  ratio  of  the  circumference  of  a  circle  to  its  diameter,  which  is  approximately
     * 3.1415926535897932.
	 *
	 * @see ES5, 15.8.1.6
	 */
	public const PI: number
	/**
	 * The Number value for the square root of ½, which is approximately 0.7071067811865476.
	 *
	 * @see ES5, 15.8.1.7
	 */
	public const SQRT1_2: number
	/**
	 * The Number value for the square root of 2, which is approximately 1.4142135623730951.
	 *
	 * @see ES5, 15.8.1.8
	 */
	public const SQRT2: number

	/**
	 * Returns the absolute value of x; the result has the same magnitude as x but has positive sign.
	 *
	 * @see ES5, 15.8.2.1
	 */
	public static abs(x: number): number
	/**
	 * Returns an implementation-dependent approximation to the arc cosine of x. The result is expressed in radians
     * and ranges from +0 to +n.
	 *
	 * @see ES5, 15.8.2.2
	 */
	public static acos(x: number): number
	/**
	 * Returns an implementation-dependent approximation to the arc sine of x. The result is expressed in radians
     * and ranges from -n/2 to +n/2.
	 *
	 * @see ES5, 15.8.2.3
	 */
	public static asin(x: number): number
	/**
	 * Returns  an  implementation-dependent  approximation  to  the  arc  tangent  of  x.  The  result  is  expressed  in
     * radians and ranges from -n/2 to +n/2.
	 *
	 * @see ES5, 15.8.2.4
	 */
	public static atan(x: number): number
	/**
	 * Returns an implementation-dependent approximation to the arc tangent of the quotient y/x of the arguments y
     * and x, where the signs of y and x are used to determine the quadrant of the result. Note that it is intentional
     * and traditional for the two-argument arc tangent function that the argument named y be first and the argument
     * named x be second. The result is expressed in radians and ranges from -n to +n.
	 *
	 * @see ES5, 15.8.2.5
	 */
	public static atan2(x: number, y: number): number
	/**
	 * Returns  the  smallest  (closest  to  negative infinity)  Number  value  that  is  not  less  than  x  and  is  equal  to  a  mathematical
     * integer. If x is already an integer, the result is x.
	 *
	 * @see ES5, 15.8.2.6
	 */
	public static ceil(x: number): number
	/**
	 * Returns an implementation-dependent approximation to the cosine of x. The argument is expressed in radians.
	 *
	 * @see ES5, 15.8.2.7
	 */
	public static cos(x: number): number
	/**
	 * Returns an implementation-dependent approximation to the exponential function of x (e raised to the power of
     * x, where e is the base of the natural logarithms).
	 *
	 * @see ES5, 15.8.2.8
	 */
	public static exp(x: number): number
	/**
	 * Returns the greatest (closest to positive infinity) Number value that is not greater than x and is equal to a mathematical
     * integer. If x is already an integer, the result is x.
	 *
	 * @see ES5, 15.8.2.9
	 */
	public static floor(x: number): number
	/**
	 * Returns an implementation-dependent approximation to the natural logarithm of x.
	 *
	 * @see ES5, 15.8.2.10
	 */
	public static log(x: number): number
	/**
	 * Given  zero  or  more  arguments,  calls  ToNumber  on  each  of  the  arguments  and  returns  the  largest  of  the
     * resulting values.
	 *
	 * @see ES5, 15.8.2.11
	 */
	public static max(...x: number): number
	/**
	 * Given  zero  or  more  arguments,  calls  ToNumber  on  each  of  the  arguments  and  returns  the  smallest  of  the
     * resulting values.
	 *
	 * @see ES5, 15.8.2.12
	 */
	public static min(...x: number): number
	/**
	 * Returns an implementation-dependent approximation to the result of raising x to the power y.
	 *
	 * @see ES5, 15.8.2.13
	 */
	public static pow(x: number, y: number): number
	/**
	 * Returns a Number value  with positive sign, greater  than or equal to 0 but less than 1, chosen randomly  or
     * pseudo randomly with approximately uniform distribution over that range, using an implementation-dependent
     * algorithm or strategy. This function takes no arguments.
	 *
	 * @see ES5, 15.8.2.14
	 */
	public static random(): number
	/**
	 * Returns the Number value that is closest to x and is equal to a mathematical integer. If two integer Number
     * values are equally close to x, then the result is the Number value that is closer to +. If x is already an integer,
     * the result is x.
	 *
	 * @see ES5, 15.8.2.15
	 */
	public static round(x: number): number
	/**
	 * Returns an implementation-dependent approximation to the sine of x. The argument is expressed in radians.
	 *
	 * @see ES5, 15.8.2.16
	 */
	public static sin(x: number): number
	/**
	 * Returns an implementation-dependent approximation to the square root of x.
	 *
	 * @see ES5, 15.8.2.17
	 */
	public static sqrt(x: number): number
	/**
	 * Returns  an  implementation-dependent  approximation  to  the  tangent  of  x.
	 *
	 * @see ES5, 15.8.2.18
	 */
	public static tan(x: number): number

}

/*
 * <p>The following functions are abstract operations that operate on time values.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.9  The Date Object, page 165 (PDF: 177) [ECMA5]
 */
public providedByRuntime final object Date extends Object @Global {

	/**
	 * TODO finalize signature
	 */
	(... args: any): string

	/**
	 * The parse function applies the ToString operator to its argument and interprets the resulting String as a date
     * and time; it returns a Number, the  UTC time value corresponding  to the date and time. The String may be
     * interpreted as a local time, a UTC time, or a time in some other time zone, depending on the contents of the
     * String. The function first attempts to parse the format of the String according to the rules called out in Date
     * Time String Format (15.9.1.15). If the String does not conform to that format the function may fall back to any
     * implementation-specific  heuristics  or  implementation-specific  date  formats.  Unrecognizable  Strings  or  dates
     * containing illegal element values in the format String shall cause Date.parse to return NaN.
	 *
	 * @see ES5, 15.9.3.2
	 */
	public static parse(dateString: string): number
	/**
	 * When the UTC function is called with fewer than two arguments, the behavior is implementation-dependent.
     * When  the  UTC function  is  called  with  two  to  seven  arguments,  it  computes  the  date  from  year,  month  and
     * (optionally) date, hours, minutes, seconds and ms.
     *
	 *
	 * @see ES5, 15.9.3.3
	 */
	public static UTC(year: number, month: number, date: number = undefined, hours: number = undefined, minutes: number = undefined, seconds: number = undefined, milliseconds: number = undefined): number

	// 	since ECMAScript 5
	/**
	 * The  now function  return  a  Number  value  that  is  the  time  value  designating  the  UTC  date  and  time  of  the
     * occurrence of the call to now.
     *
	 * @host Date <br />
	 * @return number <br /><br />
	 *
	 * @see ES5, 15.9.3.4
	 */
	public static now(): number

//    public constructor(): void
//    public constructor(value: number): void
//    public constructor(value: string): void
//    public constructor(year: number, month: number = undefined, day: number = undefined, hours: number = undefined, minutes: number = undefined, seconds: number = undefined, ms: number = undefined): void
    /*
     * <p>TODO: is it correctly defined? - see single line comments above?: answer: no - only one optional parameter allowed and no record types
     *
     * @see ES5, 15.9.5.1
     */
    public constructor(numberOrStringOrYear: union{string, number} = undefined, month: number = undefined, date: number = undefined, hours: number = undefined, minutes: number = undefined, seconds: number = undefined, ms: number = undefined): void
	/**
	 * This  function  returns  a  String  value.  The  contents  of  the  String  are  implementation-dependent,  but  are
     * intended to represent the Date in the current time zone in a convenient, human-readable form.
	 *
	 * @see ES5, 15.9.5.2
	 */
	public toString(): string
	/**
	 * This  function  returns  a  String  value.  The  contents  of  the  String  are  implementation-dependent,  but  are
     * intended to represent the ―date‖ portion of the Date in the current time zone in a convenient, human-readable
     * form.
	 *
	 * @see ES5, 15.9.5.3
	 */
	public toDateString(): string
	/**
	 * This  function  returns  a  String  value.  The  contents  of  the  String  are  implementation-dependent,  but  are
     * intended to represent the ―time‖ portion of the Date in the current time zone in a convenient, human-readable
     * form.
     *
	 * @see ES5, 15.9.5.4
	 */
	public toTimeString(): string
	/**
	 * This  function  returns  a  String  value.  The  contents  of  the  String  are  implementation-dependent,  but  are
     * intended  to  represent  the  Date  in  the  current  time  zone  in  a  convenient,  human-readable  form  that
     * corresponds to the conventions of the host environment‘s current locale.
     *
     * The first parameter to this function is likely to be used in a future version of this standard;
     * it is recommended that implementations do not use this parameter position for anything else.
     *
     * ES6: The meaning of the optional parameters to this method are defined in the ECMA-402 specification;
     * implementations that do not include ECMA-402 support must not use those parameter positions for anything else.
	 *
	 * @see ES5, 15.9.5.5
	 */
	public toLocaleString(): string
	/**
	 * This  function  returns  a  String  value.  The  contents  of  the  String  are  implementation-dependent,  but  are
     * intended to represent the ―date‖ portion of the Date in the current time zone in a convenient, human-readable
     * form that corresponds to the conventions of the host environment‘s current locale.
     *
     * The first parameter to this function is likely to be used in a future version of this standard;
     * it is recommended that implementations do not use this parameter position for anything else.
     *
     * ES6: The meaning of the optional parameters to this method are defined in the ECMA-402 specification;
     * implementations that do not include ECMA-402 support must not use those parameter positions for anything else.
	 *
	 * @see ES5, 15.9.5.6
	 */
	public toLocaleDateString(): string
	/**
	 * This  function  returns  a  String  value.  The  contents  of  the  String  are  implementation-dependent,  but  are
     * intended to represent the ―time‖ portion of the Date in the current time zone in a convenient, human-readable
     * form that corresponds to the conventions of the host environment‘s current locale.
     *
     * optional parameters: see MDN
	 *
	 * @see ES5, 15.9.5.7
	 */
	public toLocaleTimeString(): string
	/**
	 * The valueOf function returns a Number, which is this time value.
	 *
	 * @see ES5, 15.9.5.8
	 */
	public valueOf(): number
	/**
	 * @see ES5, 15.9.5.9
	 */
	public getTime(): number
	/**
	 * @see ES5, 15.9.5.10
	 */
	public getFullYear(): number
	/**
	 * @see ES5, 15.9.5.11
	 */
	public getUTCFullYear(): number
	/**
	 * @see ES5, 15.9.5.12
	 */
	public getMonth(): number
	/**
	 * @see ES5, 15.9.5.13
	 */
	public getUTCMonth(): number
	/**
	 * @see ES5, 15.9.5.14
	 */
	public getDate(): number
	/**
	 * @see ES5, 15.9.5.15
	 */
	public getUTCDate(): number
	/**
	 * @see ES5, 15.9.5.16
	 */
	public getDay(): number
	/**
	 * @see ES5, 15.9.5.17
	 */
	public getUTCDay(): number
	/**
	 * @see ES5, 15.9.5.18
	 */
	public getHours(): number
	/**
	 * @see ES5, 15.9.5.19
	 */
	public getUTCHours(): number
	/**
	 * @see ES5, 15.9.5.20
	 */
	public getMinutes(): number
	/**
	 * @see ES5, 15.9.5.21
	 */
	public getUTCMinutes(): number
	/**
	 * @see ES5, 15.9.5.22
	 */
	public getSeconds(): number
	/**
	 * @see ES5, 15.9.5.23
	 */
	public getUTCSeconds(): number
	/**
	 * @see ES5, 15.9.5.24
	 */
	public getMilliseconds(): number
	/**
	 * @see ES5, 15.9.5.25
	 */
	public getUTCMilliseconds(): number
	/**
	 * @see ES5, 15.9.5.26
	 */
	public getTimezoneOffset(): number
	/**
	 * @see ES5, 15.9.5.27
	 */
	public setTime(value: number): number
	/**
	 * @see ES5, 15.9.5.28
	 */
	public setMilliseconds(ms: number): number
	/**
	 * @see ES5, 15.9.5.29
	 */
	public setUTCMilliseconds(ms: number): number
	/*
	 * @see ES5, 15.9.5.30
	 */
	public setSeconds(sec: number, ms: number = undefined): number
	/**
	 * @see ES5, 15.9.5.31
	 */
	public setUTCSeconds(sec: number, ms: number = undefined): number
	/**
	 * @see ES5, 15.9.5.32
	 */
	public setMinutes(min: number, sec: number = undefined, ms: number = undefined): number
	/**
	 * @see ES5, 15.9.5.33
	 */
	public setUTCMinutes(min: number, sec: number = undefined, ms: number = undefined): number
	/**
	 * @see ES5, 15.9.5.34
	 */
	public setHours(hour: number, min: number = undefined, sec: number = undefined, ms: number = undefined): number
	/**
	 * @see ES5, 15.9.5.35
	 */
	public setUTCHours(hour: number, min: number = undefined, sec: number = undefined, ms: number = undefined): number
	/**
	 * @see ES5, 15.9.5.36
	 */
	public setDate(date: number): number
	/**
	 * @see ES5, 15.9.5.37
	 */
	public setUTCDate(date: number): number
	/**
	 * @see ES5, 15.9.5.38
	 */
	public setMonth(month: number, date: number = undefined): number
	/**
	 * @see ES5, 15.9.5.39
	 */
	public setUTCMonth(month: number, date: number = undefined): number
	/**
	 * @see ES5, 15.9.5.40
	 */
	public setFullYear(year: number, month: number = undefined, date: number = undefined): number
	/**
	 * @see ES5, 15.9.5.41
	 */
	public setUTCFullYear(year: number, month: number = undefined, date: number = undefined): number
	/**
	 * This  function  returns  a  String  value.  The  contents  of  the  String  are  implementation-dependent,  but  are
     * intended to represent the Date in a convenient, human-readable form in UTC.
     *
	 * @see ES5, 15.9.5.42
	 */
	public toUTCString(): string
	/**
	 * This function returns a String value represent the instance in time represented by this Date object. The format
     * of the String is the Date Time string format defined in 15.9.1.15. All fields are present in the String. The time
     * zone  is  always  UTC,  denoted  by  the  suffix  Z.  If  the  time  value  of  this  object  is  not  a  finite  Number  a
     * RangeError exception is thrown.
     *
	 * @see ES5, 15.9.5.43
	 */
	public toISOString(): string
	/**
	 * This function provides a String representation of a Date object for use by JSON.stringify.
	 *
	 * Note: the argument is ignored!
	 *
	 * @see ES5, 15.9.5.44
	 */
	public toJSON(key: any = undefined): string


	// Additional properties of prototype
	// http://en.wikipedia.org/wiki/Comparison_of_layout_engines_%28ECMAScript%29#Date_object
	// public getYear(): number
	// public setYear(value: number): void
	// public toGMTString(): string


}

/**
 * A RegExp object contains a regular expression and the associated flags.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.10  RegExp (Regular Expression) Objects, page 180 (PDF: 192) [ECMA5]
 */
public providedByRuntime final object RegExp extends Object @Global {



	// in TypeScript it is provided from $1 until $9, in JetBrains WebStorm it is $1 until $5, ES specification says $1 until $99
	/**
	 * Returns match at index 1
	 */
	public static $1: string;
	/**
	 * Returns match at index 2
	 *
	 */
	public static $2: string;
	/**
	 * Returns match at index 3
	 */
	public static $3: string;
	/**
	 * Returns match at index 4
	 */
	public static $4: string;
	/**
	 * Returns match at index 5
	 */
	public static $5: string;
	/**
	 * Returns match at index 6
	 */
	public static $6: string;
	/**
	 * Returns match at index 7
	 */
	public static $7: string;
	/**
	 * Returns match at index 8
	 */
	public static $8: string;
	/**
	 * Returns match at index 9
	 */
	public static $9: string;

	/**
	 * Regular expression pattern and flags like 'g', 'i', 'm' (resp. a combination of them)
	 *
	 * @see ES5, 15.10.6.1
	 */
	public constructor(pattern: string = undefined, flags: string = undefined): void
	/**
	 * Performs  a  regular  expression  match  of  string  against  the  regular  expression  and  returns  an  Array  object
     * containing the results of the match, or null if string did not match.
     *
	 * @see ES5, 15.10.6.2
	 */
	// in TypeScript return value is RegExpExecArray, in JetBrains WebStorm it is Array|{index : number input : string}
// TODO use the following after fixing IDEBUG-273:
//	public ~Array<string> with {index: number; input: string;} exec(str: string = undefined)
	public exec(str: string = undefined): TEMP_ReturnTypeOfMatchExec

	/**
	 * Executes exec with given str and returns true, if matched, false otherwise.
	 *
	 * @see ES5, 15.10.6.3
	 */
	public test(str: string = undefined): boolean
	/**
	 * Return the String value formed by concatenating the Strings "/", the String value of the source property of
     * this RegExp object, and "/"; plus "g" if the global property is true, "i" if the ignoreCase property is true,
     * and "m" if the multiline property is true.
     *
	 * @see ES5, 15.10.6.4
	 */
	public toString(): string

	/**
	 * The  value  of  the  source property  is  a  String  in  the  form  of  a  Pattern  representing  the  current  regular
     * expression.
     *
	 * @see ES5, 15.10.7.1
	 */
	public source: string
	/**
	 * The value of the global property is a Boolean value indicating whether the flags contained the character "g".
	 *
	 * @see ES5, 15.10.7.2
	 */
	public get global(): boolean
	/**
	 * The  value  of  the  ignoreCase property  is  a  Boolean  value  indicating  whether  the  flags  contained  the character "i".
	 *
	 * @see ES5, 15.10.7.3
	 */
	public get ignoreCase(): boolean
	/**
	 * The value of the multiline property is a Boolean value indicating whether the flags contained the character "m".
	 *
	 * @see ES5, 15.10.7.4
	 */
	public multiline: boolean
	/**
	 * The  value  of  the  lastIndex property  specifies  the  String  position  at  which  to  start  the  next  match.  It  is
     * coerced to an integer when used (see 15.10.6.2).
     *
	 * @see ES5, 15.10.7.5
	 */
	public lastIndex: number

}

// TODO: to be used as return parameter of RegExp.exec(str: string = undefined) ???
// project object RegExpExecArray extends Array<string> {
// 	public input: string
// }

/**
 * Instances of Error objects are thrown as exceptions when runtime errors occur. The Error objects may also
 * serve as base objects for user-defined exception classes.
 *
 * <p>The function call Error(...) is same to object creation new Error(...).
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES 5, 15.11  Error Objects, page 197 (PDF: 209) [ECMA5]
 */
public providedByRuntime object Error extends Object @Global {

	/**
	 * @see ES 5, 15.11.4.1
	 */
	public constructor(message: string = undefined): void

	/**
	 * The id of this error type, the initial value is "Error".
	 *
	 * @see ES 5, 15.11.4.2
	 */
	public name?: string /* = "Error";*/
	/**
	 * The explaining error message, the initial value is the empty string.
	 *
	 * @see ES 5, 15.11.4.3
	 */
	public message?: string /* = "";*/

	/**
	 * @see ES5, 15.11.4.4
	 */
	public toString(): string
}

/**
 * This exception is not currently used within this specification. This object remains for compatibility with previous
 * editions of this specification.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.11.6.1 EvalError
 */
public providedByRuntime object EvalError extends Error @Global { }

/**
 * Indicates  a  numeric  value  has  exceeded  the  allowable  range.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.11.6.2 RangeError
 */
public providedByRuntime object RangeError extends Error @Global { }

/**
 * Indicate  that  an  invalid  reference  value  has  been detected.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.11.6.3 ReferenceError
 */
public providedByRuntime object ReferenceError extends Error @Global { }

/**
 * Indicates that a parsing error has occurred.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.11.6.4 SyntaxError
 */
public providedByRuntime object SyntaxError extends Error @Global  { }

/**
 * Indicates the actual type of an operand is different than the expected type.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.11.6.5 TypeError
 */
public providedByRuntime object TypeError extends Error @Global { }

/**
 * Indicates  that  one  of  the  global  URI  handling  functions  was  used  in  a  way  that  is  incompatible  with  its
 * definition.
 *
 * <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.11.6.6 URIError
 */
public providedByRuntime object URIError extends Error @Global { }

/**
* <p>API description is copied from
 * ECMAScript Language Specification / ISO/IEC. Geneva, Switzerland, June 2011 (ECMA-262, 5.1 Edition).
 * International Standard. <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">[URL]</a>
 * <br/><b>Copyright (C) 2011 Ecma International</b>
 * <br/>(see license documents (about/license) for complete copyright notice)
 *
 * @see ES5, 15.12  The JSON Object, page 201 (PDF: 213) [ECMA5]
 */
public providedByRuntime final object JSON extends Object @Global {

	// since ECMAScript 5

	// syntax in TypeScript:
	// var json: JSON = null;
	// var value : any = null
	// var reviver1: (key : string, value : any) => any = null
	// var replacer: any[] = null
	// var space1 : any
	// json.stringify(value)
	// json.stringify(value, reviver1)
	// json.stringify(value, replacer)
	// json.stringify(value, reviver1, space1)
	// json.stringify(value, replacer, space1)

	/**
	 * The parse function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The
	 * JSON  format  is  a  restricted  form  of  ECMAScript  literal.  JSON  objects  are  realized  as  ECMAScript  objects.
	 * JSON arrays are realized as ECMAScript arrays. JSON strings, numbers, booleans, and null are realized as
	 * ECMAScript Strings, Numbers, Booleans, and null. JSON uses a more limited set of white space characters
	 * than WhiteSpace and allows Unicode code points U+2028 and U+2029 to directly appear in JSONString literals
	 * without using an escape sequence. The process of parsing is similar to 11.1.4 and 11.1.5 as constrained by
	 * the JSON grammar.
	 * <p>The  optional  reviver parameter  is  a  function  that  takes  two  parameters,  (key and  value).  It  can  filter  and
	 * transform the results. It is called with each of the key/value pairs produced by the parse, and its return value is
	 * used  instead  of  the  original  value.  If  it  returns  what  it  received,  the  structure  is  not  modified.  If  it  returns
	 * undefined then the property is deleted from the result.
	 *
	 * @see 15.12.2
     */
	public static parse(jsonString: string, reviver: {function(key: any, value: any) : any} = undefined): any

	// https://developer.mozilla.org/en-US/docs/Using_native_JSON#The_replacer_parameter
	/**
	 * The stringify function returns a String in JSON format representing an ECMAScript value. It can take three
	 * parameters. The first parameter is required. The value parameter is an ECMAScript value, which is usually an
	 * object or array, although it can also be a String, Boolean, Number or null. The optional replacer parameter is
	 * either a function that alters the way objects and arrays are stringified, or an array of Strings and Numbers that
	 * acts as a white list for selecting the object properties that will be stringified. The optional space parameter is a
	 * String or Number that allows the result to have white space injected into it to improve human readability.
	 *
	 * @see 15.12.3
     */
	public static stringify(value: any, replacer: union{Array<?>, {function(key: string, value: any) : any} } = undefined, space: union{number , string} = undefined): string


}

// see also B.2   Additional Properties (page 232 resp. 244 in PDF) for properties that have been removed in ECMAScript 5


/**
 * Type of all implicit arguments-variables in function/method/function-expression bodies.
 * The arguments are accessible through index-access in the order they are passed in at function call time.
 * Cf. §10.6 Arguments Object, page 60 (PDF: 72) [ECMA5]
 */
virtualBase ArgumentsType indexed any {
	/**
	 * number of actually passed in arguments of a function/method call. may be modified.
	 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments/length
	 * */
	public length: number;
	/**
	 * @deprecated forbidden in strict mode of ES5.
	 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments/callee
	 */
	public callee: any;
	/**
	 * @deprecated since ever
	 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments/caller
	 */
	//public caller:  any;
}


/**
 * An iterator over a collection, defining a standard way to produce a sequence of values (either finite
 * or infinite).
 * <p>
 * Note that in ECMAScript 6 this is not a built-in type, but a protocol. This protocol can be implemented
 * by any object respecting some conventions.
 */
public providedByRuntime interface ~Iterator<out T> {
	/**
	 * A zero arguments function that returns an object with two properties:
	 * <ul>
	 * <li>done (boolean)<br>
	 *     Has the value true if the iterator is past the end of the iterated sequence. In this case value
	 *     optionally specifies the return value of the iterator. The return values are explained here.
	 *     Has the value false if the iterator was able to produce the next value in the sequence. This is
	 *     equivalent of not specifying the done property altogether.
	 * <li>value<br>
	 *     any JavaScript value returned by the iterator. Can be omitted when done is true.
	 * </ul>
	 */
	public abstract next(): IteratorEntry<T>
}

/**
 * The value returned by an Iterator's method next().
 */
public providedByRuntime interface ~IteratorEntry<out T> {
	/**
	 * Has the value true if the iterator is past the end of the iterated sequence. In this case value
	 * optionally specifies the return value of the iterator. The return values are explained here.
	 * Has the value false if the iterator was able to produce the next value in the sequence. This is
	 * equivalent of not specifying the done property altogether.
	 */
	public done: boolean;
//	public get done(): boolean
	/**
	 * Any JavaScript value returned by the iterator. Can be omitted when done is true.
	 */
	// TODO dirty hack: to use covariant T as type of field 'value', we make the field final; but usually fields
	// in interfaces cannot be final - only works because no validation in n4ts!
	public final value?: T;
	// this would be the alternative, but then we would lose the optionality of 'value':
//	public get value(): T
}

/**
 * An object that can be iterated over. Whenever an object needs to be iterated (such as at the beginning
 * of a for..of loop), its <code>[Symbol.iterator]</code> method is called with no arguments, and the
 * returned iterator is used to obtain the values to be iterated.
 * <p>
 * Note that in ECMAScript 6 this is not a built-in type, but a protocol. This protocol can be implemented
 * by any object respecting some conventions.
 */
public providedByRuntime interface ~Iterable<out T> {
	/**
	 * A zero arguments function that returns an object, conforming to the iterator protocol.
	 */
	public abstract [Symbol.iterator](): Iterator<T>
}


/**
 * An iterator over a collection, defining a standard way to produce a sequence of values (either finite
 * or infinite).
 * <p>
 * Note that in ECMAScript 6 this is not a built-in type, but a protocol. This protocol can be implemented
 * by any object respecting some conventions.
 */
public providedByRuntime interface Generator<out TYield, out TReturn, in TNext>
	extends Iterable<TYield>, Iterator<TYield> {

	/**
	 * A one (optional) argument function. The (optional) argument <code>value</code> is passed to the
	 * current yield expression in the generator function. The return is an <code>IteratorEntry</code>
	 * with two properties:
	 * <ul>
	 * <li>done (boolean)<br>
	 *     Has the value true if the iterator is past the end of the iterated sequence. In this case value
	 *     optionally specifies the return value of the iterator. The return values are explained here.
	 *     Has the value false if the iterator was able to produce the next value in the sequence. This is
	 *     equivalent of not specifying the done property altogether.
	 * <li>value<br>
	 *     any JavaScript value returned by the iterator. Can be omitted when done is true.
	 * </ul>
	 */
	public abstract next(value: TNext = undefined): IteratorEntry<TYield>

	/**
	 * A zero arguments function that returns the <code>this</code> object, conforming to the iterator
	 * interface.
	 * <p>
	 * Note that the iterator can only be iterated once.
	 */
	public abstract [Symbol.iterator](): Generator<TYield, TReturn, TNext>

	/**
	 * A one argument function. The argument <code>exception</code> is thrown at the current yield
	 * expression in the generator function. The return is an <code>IteratorEntry</code> with two
	 * properties:
	 * <ul>
	 * <li>done (boolean)<br>
	 *     Has the value true if the iterator is past the end of the iterated sequence. In this case value
	 *     optionally specifies the return value of the iterator. The return values are explained here.
	 *     Has the value false if the iterator was able to produce the next value in the sequence. This is
	 *     equivalent of not specifying the done property altogether.
	 * <li>value<br>
	 *     any JavaScript value returned by the iterator. Can be omitted when done is true.
	 * </ul>
	 */
	public abstract throw(exception: any): IteratorEntry<TYield>;

    /**
	 * A one (optional) argument function. The (optional) argument <code>value</code> is passed to the
	 * current yield expression in the generator function. The return is an <code>IteratorEntry</code> with
	 * two properties:
	 * <ul>
	 * <li>done (boolean)<br>
	 *     Has the value true if the iterator is past the end of the iterated sequence. In this case value
	 *     optionally specifies the return value of the iterator. The return values are explained here.
	 *     Has the value false if the iterator was able to produce the next value in the sequence. This is
	 *     equivalent of not specifying the done property altogether.
	 * <li>value<br>
	 *     any JavaScript value returned by the iterator. Can be omitted when done is true.
	 * </ul>
	 */
	public abstract return(value: TNext = undefined): IteratorEntry<TReturn>;
}

/**
 * A promise represents a proxy for a value that is usually not yet known
 * when the promise is created.
 * <p>
 * A promise can exist in either of two states: "pending" and "settled".
 * If the result value of a promise is not yet determined, the promise is
 * "pending". Once the value has been determined, the promise becomes
 * "settled".
 * <p>
 * A promise can either be fulfilled or rejected. A fulfilled promise
 * indicates a successful completion of whatever asynchronous process it
 * encapsulates. A rejected promise indicates erroneous or abnormal completion
 * of the process.
 */
public providedByRuntime class Promise<out S, out F> extends Object @Global {

    public constructor(
        executor: {function(
            resolveFn:{function(arg: S = undefined):void},
            rejectFn: {function(arg: F = undefined):void}
        ): void}
    ): void

    public <Snew, Fnew> then(
        onFulfilled: {function(arg:S = undefined): union{Snew, Promise<Snew, Fnew>}?},
        onRejected: {function(arg:F = undefined): union{Fnew, Promise<Snew, Fnew>}?} = undefined
    ): Promise<Snew, Fnew>

    public <Snew, Fnew> catch(
        onRejected: {function(arg:F = undefined): union{Fnew, Promise<Snew, Fnew>}?}
    ): Promise<Snew, Fnew>

    public static <S, F> reject(f: F): Promise<S, F>
    public static <S, F> resolve(
        s: union{
            Promise<S, F>,
            ~Object with { then(...args: any): Promise<S, F>; }, // i.e. thenable
            S
        }
    ): Promise<S, F>

    public static <T> all(iterable: Iterable<union{Promise<T,?>, T}>): Promise<Array<T>, any>
    public static <T> race(iterable: Iterable<union{Promise<T,?>, T}>): Promise<T, any>
}

/**
 * Work-around:
 * Temporary class to define the return type of methods String#match() and RegExp#exec(), because
 * .n4ts files do not properly support "with"-clauses of structural types (see IDEBUG-273).
 */
public providedByRuntime class TEMP_ReturnTypeOfMatchExec extends Array<string> {
	public index: number;
	public input: string;
}
