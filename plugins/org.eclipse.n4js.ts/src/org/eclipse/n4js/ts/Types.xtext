/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
grammar org.eclipse.n4js.ts.Types with org.eclipse.n4js.ts.TypeExpressions hidden(WS, ML_COMMENT, SL_COMMENT,EOL)

import "http://www.eclipse.org/n4js/ts/Types"
import "http://www.eclipse.org/n4js/ts/TypeRefs"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


// ****************************************************************************************************
// Root, only used in case types are explicitly defined, e.g., for built-in types.
// ****************************************************************************************************
TypeDefs:
	types+=Type*;

// ****************************************************************************************************
// Annotations
// ****************************************************************************************************

terminal STRING	:
	"'" SINGLE_STRING_CHAR* "'"
;
terminal fragment SINGLE_STRING_CHAR:
	  !(LINE_TERMINATOR_FRAGMENT | "'" | '\\')
	| '\\' ( LINE_TERMINATOR_SEQUENCE_FRAGMENT | !LINE_TERMINATOR_FRAGMENT)
;


// cf. N4JSSpec ยง9
TAnnotation: =>('@' name=IDENTIFIER) (=>'(' (args+=TAnnotationArgument (','args+=TAnnotationArgument)*)?  ')')?;

TAnnotationArgument:
	TAnnotationStringArgument | TAnnotationTypeRefArgument
;
TAnnotationStringArgument:
	value = STRING
;
TAnnotationTypeRefArgument:
	typeRef = TypeRef
;



// ****************************************************************************************************
// The References
// ****************************************************************************************************

/* The following built-in types are to be defined externally:
 * ECMAScript:
 * 		Object, Number, Boolean, String
 * extended ECMAScript:
 * 		Int, Array
 * N4:
 * 		N4Object, PathSelector, I18NKey, TypeName
 */


// ****************************************************************************************************
// The types themselves
// ****************************************************************************************************

enum TypeAccessModifier: project | publicInternal | public;
enum MemberAccessModifier: private | project | protectedInternal | protected | publicInternal | public;

// TODO jvp: more type information, cf. types model
/*
 * We cannot define a TypeVariableRef, as this cannot be distinguished from a ParameterizedTypeRef. That is,
 * we cannot distinguish whether 'T' is a type variable T, or a type with name 'T'. Thus,
 * type variables are handled similar to types (and are actually types).
 */
Type: 	  TObjectPrototype
		| TClass
		| TInterface
		| TEnum
		| AnyType
		| VoidType
		| UndefinedType
		| NullType
		| PrimitiveType
		| TFunction
		| TypeVariable
		| VirtualBaseType
;

@Override
TypeRef:
	TypeRefWithoutModifiers followedByQuestionMark?='?'?
;

PrimitiveType:
	'primitive' name=VoidOrBindingIdentifier
	( '<' typeVars+=TypeVariable '>' )?
	('indexed' declaredElementType=ParameterizedTypeRefNominal)?
	'{'
		('autoboxedType' autoboxedType=[TClassifier|TypeReferenceName])?
		('assignmnentCompatible' assignmentCompatible=[PrimitiveType|TypeReferenceName])?
	'}'
;

@Override
TypeReferenceName: 'void' | 'any' | 'undefined' | 'null' | 'indexed' | IDENTIFIER ('/' IDENTIFIER)*;

// These will be defined only once to be able to load them as singletons and refer to them via x-refs
AnyType: {AnyType} name='any' '{' '}';
VoidType: {VoidType} name='void' '{' '}';
UndefinedType: {UndefinedType} name='undefined' '{' '}';
NullType: {NullType} name='null' '{' '}';

TypesIdentifier:
	TypesSpecificKeywords | IdentifierName
;

BindingTypesIdentifier:
	TypesSpecificKeywords | BindingIdentifier<Yield=false>
;

// Also allows void as identifier although it is a reserved keyword as of [ECM15]
VoidOrBindingIdentifier:
	'void' | BindingTypesIdentifier
;

// These keywords are specific to the types language when comparing with N4JS
TypesSpecificKeywords:
	// Types keywords
	'any'
	// no ECMAScript keywords, used in certain [ECM13] and N4JS contexts
	| 'undefined'
	// no ECMAScript nor N4JS keyword, used in types only
	| 'object'
	| 'virtualBase'
	| 'primitive'
	| 'autoboxedType'
	| 'assignmnentCompatible'
	// must not be used: 'notnull'|'nullable'
;

// see rule "ComputedPropertyName" in ECMAScript 6 specification (e.g. Section 12.2.5)
TypesComputedPropertyName:
	'[' (TypesSymbolLiteralComputedName | TypesStringLiteralComputedName) ']'
;

TypesSymbolLiteralComputedName:
	TypesIdentifier '.' TypesIdentifier
;

TypesStringLiteralComputedName:
	STRING
;


TObjectPrototype:
	declaredTypeAccessModifier=TypeAccessModifier
	(declaredProvidedByRuntime?='providedByRuntime')?
	(declaredFinal?='final')?
	'object' name=BindingTypesIdentifier
	TypeVariables?
	('extends'  superType=ParameterizedTypeRefNominal)?
	('indexed' declaredElementType=ParameterizedTypeRefNominal)?
	annotations+=TAnnotation*
	'{'
		ownedMembers+=TMember*
		(
			callableCtor=CallableCtor
			ownedMembers+=TMember*
		)?
	'}'
;

/*
 * Virtual base type, not visible to N4JS users.
 * Used to define common super types, e.g. for all enumerations.
 */
VirtualBaseType: {VirtualBaseType}
	'virtualBase' name=BindingTypesIdentifier
	('indexed' declaredElementType=ParameterizedTypeRefNominal)?
	'{'
		(ownedMembers+=TMember)*
	'}'
;

TClass:
	declaredTypeAccessModifier=TypeAccessModifier
	(declaredProvidedByRuntime?='providedByRuntime')?
	(declaredAbstract?='abstract')?
	(declaredFinal?='final')?
	'class' TClassOrInterfaceHeader
	('extends'  superClassRef=ParameterizedTypeRefNominal)?
	('implements' implementedInterfaceRefs+=ParameterizedTypeRefNominal (',' implementedInterfaceRefs+=ParameterizedTypeRefNominal)*)?
	annotations+=TAnnotation*
	'{'
		ownedMembers+=TMember*
		(
			callableCtor=CallableCtor
			ownedMembers+=TMember*
		)?
	'}'
;

TInterface:
	declaredTypeAccessModifier=TypeAccessModifier
	(declaredProvidedByRuntime?='providedByRuntime')?
	'interface' TClassOrInterfaceHeader 
	('extends' superInterfaceRefs+=ParameterizedTypeRefNominal (',' superInterfaceRefs+=ParameterizedTypeRefNominal)*)?
	annotations+=TAnnotation*
	'{' (ownedMembers+=TMember)* '}'
;

@Override
TypeVariable returns TypeVariable:
	name=IDENTIFIER ('extends' declaredUpperBound=TypeRef)?;

fragment TClassOrInterfaceHeader*:
	typingStrategy=TypingStrategyDefSiteOperator? name=BindingTypesIdentifier
	( '<' typeVars+=super::TypeVariable (',' typeVars+=super::TypeVariable)* '>' )?
;

CallableCtor returns TMethod:
	{TMethod}
	TFormalParameters
	ColonSepReturnTypeRef?
	';'?
;

fragment TFormalParameters*:
	'(' (fpars += TFormalParameter (',' fpars += TFormalParameter)*)? ')'
;

TMember: TGetter | TSetter | TMethod | TField ;

TMethod: =>
	(
	 	declaredMemberAccessModifier=MemberAccessModifier
	 	(declaredAbstract?='abstract'|declaredStatic?='static')?
	 	(declaredAsync?='async')?
	 	TypeVariables?
	 	(name=TypesIdentifier | name=TypesComputedPropertyName)
	->TFormalParameters)
	ColonSepReturnTypeRef
	';'?
;

TField:
	declaredMemberAccessModifier=MemberAccessModifier
 	(declaredStatic?='static' | const?='const' | declaredFinal?='final')?
	(name=TypesIdentifier | name=TypesComputedPropertyName)
	(optional?='?')?
	ColonSepTypeRef
	';'?
;

TGetter: =>
	(
		declaredMemberAccessModifier=MemberAccessModifier
		(declaredAbstract?='abstract' | declaredStatic?='static')?
		'get'
	  	(name=TypesIdentifier | name=TypesComputedPropertyName)
  	)
	(optional?='?')?
  	'(' ')' ColonSepDeclaredTypeRef
;

TSetter: =>
	(
		declaredMemberAccessModifier=MemberAccessModifier
		(declaredAbstract?='abstract' | declaredStatic?='static')?
	 	'set'
	 	(name=TypesIdentifier | name=TypesComputedPropertyName)
 	)
	(optional?='?')?
 	'(' fpar=TFormalParameter ')'
;

TFunction:
	declaredTypeAccessModifier=TypeAccessModifier
	(declaredProvidedByRuntime?='providedByRuntime')?
	'function'
	TypeVariables?
	name=BindingTypesIdentifier
	TFormalParameters
	ColonSepReturnTypeRef
;

TEnum:
	declaredTypeAccessModifier=TypeAccessModifier
	(declaredProvidedByRuntime?='providedByRuntime')?
	'enum' name=BindingTypesIdentifier
	'{' literals+=TEnumLiteral (',' literals+=TEnumLiteral)* '}'
;

TEnumLiteral:
	name=IDENTIFIER
;
