package org.eclipse.n4js.ts.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.n4js.ts.services.TypesGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
/**
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@SuppressWarnings("all")
public class InternalTypesParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AssignmnentCompatible", "ProtectedInternal", "ProvidedByRuntime", "PublicInternal", "AutoboxedType", "Intersection", "Constructor", "VirtualBase", "Implements", "Instanceof", "Promisify", "Interface", "Primitive", "Protected", "Undefined", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Indexed", "Private", "Project", "Delete", "Export", "Import", "Object", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Final", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "FullStopFullStopFullStop", "Any", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "EqualsSignGreaterThanSign", "As", "Do", "If", "In", "Of", "Ampersand", "LeftParenthesis", "RightParenthesis", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "LeftCurlyBracket", "RightCurlyBracket", "Tilde", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_IDENTIFIER_PART", "RULE_IDENTIFIER", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_INT", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_HEX_INT", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_VERSION", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=30;
    public static final int Enum=56;
    public static final int Import=32;
    public static final int EqualsSignGreaterThanSign=74;
    public static final int Var=73;
    public static final int Break=42;
    public static final int False=46;
    public static final int LessThanSign=90;
    public static final int LeftParenthesis=81;
    public static final int RULE_VERSION=136;
    public static final int Throw=49;
    public static final int VirtualBase=11;
    public static final int Private=28;
    public static final int Extends=25;
    public static final int GreaterThanSign=92;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=120;
    public static final int RULE_STRUCTMODSUFFIX=100;
    public static final int RULE_EOL=124;
    public static final int ProtectedInternal=5;
    public static final int Out=70;
    public static final int RULE_ZWNJ=133;
    public static final int Project=29;
    public static final int Switch=37;
    public static final int RULE_OCTAL_INT=111;
    public static final int PlusSign=83;
    public static final int RULE_INT=105;
    public static final int Get=67;
    public static final int RULE_ML_COMMENT=122;
    public static final int Object=33;
    public static final int LeftSquareBracket=95;
    public static final int If=77;
    public static final int Finally=26;
    public static final int Intersection=9;
    public static final int Set=71;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=128;
    public static final int In=78;
    public static final int Catch=43;
    public static final int RULE_SCIENTIFIC_INT=114;
    public static final int RULE_EXPONENT_PART=107;
    public static final int Union=50;
    public static final int Case=54;
    public static final int Comma=84;
    public static final int RULE_SL_COMMENT_FRAGMENT=139;
    public static final int Target=38;
    public static final int As=75;
    public static final int HyphenMinus=85;
    public static final int RULE_IDENTIFIER_PART=102;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=138;
    public static final int Export=31;
    public static final int Solidus=87;
    public static final int RightCurlyBracket=98;
    public static final int Final=47;
    public static final int RULE_HEX_INT=113;
    public static final int FullStop=86;
    public static final int Constructor=10;
    public static final int Abstract=19;
    public static final int Promisify=14;
    public static final int RULE_SIGNED_INT=115;
    public static final int Default=24;
    public static final int CommercialAt=94;
    public static final int Semicolon=89;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=119;
    public static final int Type=61;
    public static final int QuestionMark=93;
    public static final int PublicInternal=7;
    public static final int Else=55;
    public static final int RULE_HEX_DIGIT=127;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=132;
    public static final int Yield=52;
    public static final int Interface=15;
    public static final int New=69;
    public static final int Null=58;
    public static final int Typeof=39;
    public static final int True=60;
    public static final int ProvidedByRuntime=6;
    public static final int FullStopFullStopFullStop=64;
    public static final int RULE_IDENTIFIER_START=101;
    public static final int Implements=12;
    public static final int RULE_WHITESPACE_FRAGMENT=125;
    public static final int Super=48;
    public static final int Async=40;
    public static final int This=53;
    public static final int Try=72;
    public static final int Ampersand=80;
    public static final int Void=62;
    public static final int RightSquareBracket=96;
    public static final int Undefined=18;
    public static final int RULE_BINARY_INT=110;
    public static final int Protected=17;
    public static final int AutoboxedType=8;
    public static final int Const=45;
    public static final int For=66;
    public static final int RightParenthesis=82;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=130;
    public static final int Public=34;
    public static final int Do=76;
    public static final int RULE_LEGACY_OCTAL_INT=112;
    public static final int RULE_DOUBLE_STRING_CHAR=116;
    public static final int This_1=59;
    public static final int RULE_DOT_DOT=135;
    public static final int External=22;
    public static final int Class=44;
    public static final int Static=36;
    public static final int Debugger=21;
    public static final int RULE_SINGLE_STRING_CHAR=117;
    public static final int RULE_INT_SUFFIX=109;
    public static final int AssignmnentCompatible=4;
    public static final int RULE_IDENTIFIER=103;
    public static final int RULE_ML_COMMENT_FRAGMENT=121;
    public static final int RULE_STRING=118;
    public static final int Continue=20;
    public static final int Any=65;
    public static final int With=63;
    public static final int RULE_SL_COMMENT=123;
    public static final int Function=23;
    public static final int EqualsSign=91;
    public static final int RULE_ZWJ=134;
    public static final int Primitive=16;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=131;
    public static final int RULE_DOUBLE=108;
    public static final int Instanceof=13;
    public static final int Colon=88;
    public static final int EOF=-1;
    public static final int Indexed=27;
    public static final int Return=35;
    public static final int RULE_WS=126;
    public static final int RULE_BOM=137;
    public static final int LeftCurlyBracket=97;
    public static final int Tilde=99;
    public static final int While=51;
    public static final int From=57;
    public static final int RULE_ANY_OTHER=140;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=129;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=106;
    public static final int Of=79;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=104;
    public static final int Let=68;
    public static final int Await=41;

    // delegates
    // delegators


        public InternalTypesParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalTypesParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalTypesParser.tokenNames; }
    public String getGrammarFileName() { return "InternalTypesParser.g"; }



     	private TypesGrammarAccess grammarAccess;

        public InternalTypesParser(TokenStream input, TypesGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "TypeDefs";
       	}

       	@Override
       	protected TypesGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}




    // $ANTLR start "entryRuleTypeDefs"
    // InternalTypesParser.g:65:1: entryRuleTypeDefs returns [EObject current=null] : iv_ruleTypeDefs= ruleTypeDefs EOF ;
    public final EObject entryRuleTypeDefs() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeDefs = null;


        try {
            // InternalTypesParser.g:65:49: (iv_ruleTypeDefs= ruleTypeDefs EOF )
            // InternalTypesParser.g:66:2: iv_ruleTypeDefs= ruleTypeDefs EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeDefsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeDefs=ruleTypeDefs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeDefs; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeDefs"


    // $ANTLR start "ruleTypeDefs"
    // InternalTypesParser.g:72:1: ruleTypeDefs returns [EObject current=null] : ( (lv_types_0_0= ruleType ) )* ;
    public final EObject ruleTypeDefs() throws RecognitionException {
        EObject current = null;

        EObject lv_types_0_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:78:2: ( ( (lv_types_0_0= ruleType ) )* )
            // InternalTypesParser.g:79:2: ( (lv_types_0_0= ruleType ) )*
            {
            // InternalTypesParser.g:79:2: ( (lv_types_0_0= ruleType ) )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==PublicInternal||LA1_0==VirtualBase||LA1_0==Primitive||LA1_0==Undefined||LA1_0==Project||LA1_0==Public||LA1_0==Null||LA1_0==Void||LA1_0==Any||LA1_0==RULE_IDENTIFIER) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // InternalTypesParser.g:80:3: (lv_types_0_0= ruleType )
            	    {
            	    // InternalTypesParser.g:80:3: (lv_types_0_0= ruleType )
            	    // InternalTypesParser.g:81:4: lv_types_0_0= ruleType
            	    {
            	    if ( state.backtracking==0 ) {

            	      				newCompositeNode(grammarAccess.getTypeDefsAccess().getTypesTypeParserRuleCall_0());
            	      			
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_types_0_0=ruleType();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				if (current==null) {
            	      					current = createModelElementForParent(grammarAccess.getTypeDefsRule());
            	      				}
            	      				add(
            	      					current,
            	      					"types",
            	      					lv_types_0_0,
            	      					"org.eclipse.n4js.ts.Types.Type");
            	      				afterParserOrEnumRuleCall();
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeDefs"


    // $ANTLR start "entryRuleTAnnotation"
    // InternalTypesParser.g:101:1: entryRuleTAnnotation returns [EObject current=null] : iv_ruleTAnnotation= ruleTAnnotation EOF ;
    public final EObject entryRuleTAnnotation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTAnnotation = null;


        try {
            // InternalTypesParser.g:101:52: (iv_ruleTAnnotation= ruleTAnnotation EOF )
            // InternalTypesParser.g:102:2: iv_ruleTAnnotation= ruleTAnnotation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnnotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnnotation=ruleTAnnotation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnnotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTAnnotation"


    // $ANTLR start "ruleTAnnotation"
    // InternalTypesParser.g:108:1: ruleTAnnotation returns [EObject current=null] : ( ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) ) ) ( ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis )? ) ;
    public final EObject ruleTAnnotation() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_args_3_0 = null;

        EObject lv_args_5_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:114:2: ( ( ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) ) ) ( ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis )? ) )
            // InternalTypesParser.g:115:2: ( ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) ) ) ( ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis )? )
            {
            // InternalTypesParser.g:115:2: ( ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) ) ) ( ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis )? )
            // InternalTypesParser.g:116:3: ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) ) ) ( ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis )?
            {
            // InternalTypesParser.g:116:3: ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) ) )
            // InternalTypesParser.g:117:4: ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) )
            {
            // InternalTypesParser.g:126:4: (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) )
            // InternalTypesParser.g:127:5: otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) )
            {
            otherlv_0=(Token)match(input,CommercialAt,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_0, grammarAccess.getTAnnotationAccess().getCommercialAtKeyword_0_0_0());
              				
            }
            // InternalTypesParser.g:131:5: ( (lv_name_1_0= RULE_IDENTIFIER ) )
            // InternalTypesParser.g:132:6: (lv_name_1_0= RULE_IDENTIFIER )
            {
            // InternalTypesParser.g:132:6: (lv_name_1_0= RULE_IDENTIFIER )
            // InternalTypesParser.g:133:7: lv_name_1_0= RULE_IDENTIFIER
            {
            lv_name_1_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							newLeafNode(lv_name_1_0, grammarAccess.getTAnnotationAccess().getNameIDENTIFIERTerminalRuleCall_0_0_1_0());
              						
            }
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElement(grammarAccess.getTAnnotationRule());
              							}
              							setWithLastConsumed(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IDENTIFIER");
              						
            }

            }


            }


            }


            }

            // InternalTypesParser.g:151:3: ( ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LeftParenthesis) && (synpred2_InternalTypesParser())) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // InternalTypesParser.g:152:4: ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis
                    {
                    // InternalTypesParser.g:152:4: ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis )
                    // InternalTypesParser.g:153:5: ( LeftParenthesis )=>otherlv_2= LeftParenthesis
                    {
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getTAnnotationAccess().getLeftParenthesisKeyword_1_0());
                      				
                    }

                    }

                    // InternalTypesParser.g:159:4: ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )?
                    int alt3=2;
                    int LA3_0 = input.LA(1);

                    if ( ((LA3_0>=Intersection && LA3_0<=Constructor)||LA3_0==Undefined||LA3_0==Indexed||LA3_0==Union||(LA3_0>=Null && LA3_0<=This_1)||(LA3_0>=Type && LA3_0<=Void)||LA3_0==Any||LA3_0==LeftCurlyBracket||LA3_0==Tilde||LA3_0==RULE_IDENTIFIER||LA3_0==RULE_STRING) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // InternalTypesParser.g:160:5: ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )*
                            {
                            // InternalTypesParser.g:160:5: ( (lv_args_3_0= ruleTAnnotationArgument ) )
                            // InternalTypesParser.g:161:6: (lv_args_3_0= ruleTAnnotationArgument )
                            {
                            // InternalTypesParser.g:161:6: (lv_args_3_0= ruleTAnnotationArgument )
                            // InternalTypesParser.g:162:7: lv_args_3_0= ruleTAnnotationArgument
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getTAnnotationAccess().getArgsTAnnotationArgumentParserRuleCall_1_1_0_0());
                              						
                            }
                            pushFollow(FOLLOW_7);
                            lv_args_3_0=ruleTAnnotationArgument();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTAnnotationRule());
                              							}
                              							add(
                              								current,
                              								"args",
                              								lv_args_3_0,
                              								"org.eclipse.n4js.ts.Types.TAnnotationArgument");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }

                            // InternalTypesParser.g:179:5: (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )*
                            loop2:
                            do {
                                int alt2=2;
                                int LA2_0 = input.LA(1);

                                if ( (LA2_0==Comma) ) {
                                    alt2=1;
                                }


                                switch (alt2) {
                            	case 1 :
                            	    // InternalTypesParser.g:180:6: otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) )
                            	    {
                            	    otherlv_4=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      						newLeafNode(otherlv_4, grammarAccess.getTAnnotationAccess().getCommaKeyword_1_1_1_0());
                            	      					
                            	    }
                            	    // InternalTypesParser.g:184:6: ( (lv_args_5_0= ruleTAnnotationArgument ) )
                            	    // InternalTypesParser.g:185:7: (lv_args_5_0= ruleTAnnotationArgument )
                            	    {
                            	    // InternalTypesParser.g:185:7: (lv_args_5_0= ruleTAnnotationArgument )
                            	    // InternalTypesParser.g:186:8: lv_args_5_0= ruleTAnnotationArgument
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								newCompositeNode(grammarAccess.getTAnnotationAccess().getArgsTAnnotationArgumentParserRuleCall_1_1_1_1_0());
                            	      							
                            	    }
                            	    pushFollow(FOLLOW_7);
                            	    lv_args_5_0=ruleTAnnotationArgument();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getTAnnotationRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"args",
                            	      									lv_args_5_0,
                            	      									"org.eclipse.n4js.ts.Types.TAnnotationArgument");
                            	      								afterParserOrEnumRuleCall();
                            	      							
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop2;
                                }
                            } while (true);


                            }
                            break;

                    }

                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getTAnnotationAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTAnnotation"


    // $ANTLR start "entryRuleTAnnotationArgument"
    // InternalTypesParser.g:214:1: entryRuleTAnnotationArgument returns [EObject current=null] : iv_ruleTAnnotationArgument= ruleTAnnotationArgument EOF ;
    public final EObject entryRuleTAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTAnnotationArgument = null;


        try {
            // InternalTypesParser.g:214:60: (iv_ruleTAnnotationArgument= ruleTAnnotationArgument EOF )
            // InternalTypesParser.g:215:2: iv_ruleTAnnotationArgument= ruleTAnnotationArgument EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnnotationArgument=ruleTAnnotationArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTAnnotationArgument"


    // $ANTLR start "ruleTAnnotationArgument"
    // InternalTypesParser.g:221:1: ruleTAnnotationArgument returns [EObject current=null] : (this_TAnnotationStringArgument_0= ruleTAnnotationStringArgument | this_TAnnotationTypeRefArgument_1= ruleTAnnotationTypeRefArgument ) ;
    public final EObject ruleTAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject this_TAnnotationStringArgument_0 = null;

        EObject this_TAnnotationTypeRefArgument_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:227:2: ( (this_TAnnotationStringArgument_0= ruleTAnnotationStringArgument | this_TAnnotationTypeRefArgument_1= ruleTAnnotationTypeRefArgument ) )
            // InternalTypesParser.g:228:2: (this_TAnnotationStringArgument_0= ruleTAnnotationStringArgument | this_TAnnotationTypeRefArgument_1= ruleTAnnotationTypeRefArgument )
            {
            // InternalTypesParser.g:228:2: (this_TAnnotationStringArgument_0= ruleTAnnotationStringArgument | this_TAnnotationTypeRefArgument_1= ruleTAnnotationTypeRefArgument )
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==RULE_STRING) ) {
                alt5=1;
            }
            else if ( ((LA5_0>=Intersection && LA5_0<=Constructor)||LA5_0==Undefined||LA5_0==Indexed||LA5_0==Union||(LA5_0>=Null && LA5_0<=This_1)||(LA5_0>=Type && LA5_0<=Void)||LA5_0==Any||LA5_0==LeftCurlyBracket||LA5_0==Tilde||LA5_0==RULE_IDENTIFIER) ) {
                alt5=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }
            switch (alt5) {
                case 1 :
                    // InternalTypesParser.g:229:3: this_TAnnotationStringArgument_0= ruleTAnnotationStringArgument
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTAnnotationArgumentAccess().getTAnnotationStringArgumentParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TAnnotationStringArgument_0=ruleTAnnotationStringArgument();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TAnnotationStringArgument_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:238:3: this_TAnnotationTypeRefArgument_1= ruleTAnnotationTypeRefArgument
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTAnnotationArgumentAccess().getTAnnotationTypeRefArgumentParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TAnnotationTypeRefArgument_1=ruleTAnnotationTypeRefArgument();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TAnnotationTypeRefArgument_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTAnnotationArgument"


    // $ANTLR start "entryRuleTAnnotationStringArgument"
    // InternalTypesParser.g:250:1: entryRuleTAnnotationStringArgument returns [EObject current=null] : iv_ruleTAnnotationStringArgument= ruleTAnnotationStringArgument EOF ;
    public final EObject entryRuleTAnnotationStringArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTAnnotationStringArgument = null;


        try {
            // InternalTypesParser.g:250:66: (iv_ruleTAnnotationStringArgument= ruleTAnnotationStringArgument EOF )
            // InternalTypesParser.g:251:2: iv_ruleTAnnotationStringArgument= ruleTAnnotationStringArgument EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnnotationStringArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnnotationStringArgument=ruleTAnnotationStringArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnnotationStringArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTAnnotationStringArgument"


    // $ANTLR start "ruleTAnnotationStringArgument"
    // InternalTypesParser.g:257:1: ruleTAnnotationStringArgument returns [EObject current=null] : ( (lv_value_0_0= RULE_STRING ) ) ;
    public final EObject ruleTAnnotationStringArgument() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            // InternalTypesParser.g:263:2: ( ( (lv_value_0_0= RULE_STRING ) ) )
            // InternalTypesParser.g:264:2: ( (lv_value_0_0= RULE_STRING ) )
            {
            // InternalTypesParser.g:264:2: ( (lv_value_0_0= RULE_STRING ) )
            // InternalTypesParser.g:265:3: (lv_value_0_0= RULE_STRING )
            {
            // InternalTypesParser.g:265:3: (lv_value_0_0= RULE_STRING )
            // InternalTypesParser.g:266:4: lv_value_0_0= RULE_STRING
            {
            lv_value_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getTAnnotationStringArgumentAccess().getValueSTRINGTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getTAnnotationStringArgumentRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.STRING");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTAnnotationStringArgument"


    // $ANTLR start "entryRuleTAnnotationTypeRefArgument"
    // InternalTypesParser.g:285:1: entryRuleTAnnotationTypeRefArgument returns [EObject current=null] : iv_ruleTAnnotationTypeRefArgument= ruleTAnnotationTypeRefArgument EOF ;
    public final EObject entryRuleTAnnotationTypeRefArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTAnnotationTypeRefArgument = null;


        try {
            // InternalTypesParser.g:285:67: (iv_ruleTAnnotationTypeRefArgument= ruleTAnnotationTypeRefArgument EOF )
            // InternalTypesParser.g:286:2: iv_ruleTAnnotationTypeRefArgument= ruleTAnnotationTypeRefArgument EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnnotationTypeRefArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnnotationTypeRefArgument=ruleTAnnotationTypeRefArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnnotationTypeRefArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTAnnotationTypeRefArgument"


    // $ANTLR start "ruleTAnnotationTypeRefArgument"
    // InternalTypesParser.g:292:1: ruleTAnnotationTypeRefArgument returns [EObject current=null] : ( (lv_typeRef_0_0= ruleTypeRef ) ) ;
    public final EObject ruleTAnnotationTypeRefArgument() throws RecognitionException {
        EObject current = null;

        EObject lv_typeRef_0_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:298:2: ( ( (lv_typeRef_0_0= ruleTypeRef ) ) )
            // InternalTypesParser.g:299:2: ( (lv_typeRef_0_0= ruleTypeRef ) )
            {
            // InternalTypesParser.g:299:2: ( (lv_typeRef_0_0= ruleTypeRef ) )
            // InternalTypesParser.g:300:3: (lv_typeRef_0_0= ruleTypeRef )
            {
            // InternalTypesParser.g:300:3: (lv_typeRef_0_0= ruleTypeRef )
            // InternalTypesParser.g:301:4: lv_typeRef_0_0= ruleTypeRef
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getTAnnotationTypeRefArgumentAccess().getTypeRefTypeRefParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_typeRef_0_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getTAnnotationTypeRefArgumentRule());
              				}
              				set(
              					current,
              					"typeRef",
              					lv_typeRef_0_0,
              					"org.eclipse.n4js.ts.Types.TypeRef");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTAnnotationTypeRefArgument"


    // $ANTLR start "entryRuleType"
    // InternalTypesParser.g:321:1: entryRuleType returns [EObject current=null] : iv_ruleType= ruleType EOF ;
    public final EObject entryRuleType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleType = null;


        try {
            // InternalTypesParser.g:321:45: (iv_ruleType= ruleType EOF )
            // InternalTypesParser.g:322:2: iv_ruleType= ruleType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleType=ruleType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleType"


    // $ANTLR start "ruleType"
    // InternalTypesParser.g:328:1: ruleType returns [EObject current=null] : (this_TClass_0= ruleTClass | this_TInterface_1= ruleTInterface | this_TEnum_2= ruleTEnum | this_AnyType_3= ruleAnyType | this_VoidType_4= ruleVoidType | this_UndefinedType_5= ruleUndefinedType | this_NullType_6= ruleNullType | this_PrimitiveType_7= rulePrimitiveType | this_TFunction_8= ruleTFunction | this_TypeVariable_9= ruleTypeVariable | this_VirtualBaseType_10= ruleVirtualBaseType ) ;
    public final EObject ruleType() throws RecognitionException {
        EObject current = null;

        EObject this_TClass_0 = null;

        EObject this_TInterface_1 = null;

        EObject this_TEnum_2 = null;

        EObject this_AnyType_3 = null;

        EObject this_VoidType_4 = null;

        EObject this_UndefinedType_5 = null;

        EObject this_NullType_6 = null;

        EObject this_PrimitiveType_7 = null;

        EObject this_TFunction_8 = null;

        EObject this_TypeVariable_9 = null;

        EObject this_VirtualBaseType_10 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:334:2: ( (this_TClass_0= ruleTClass | this_TInterface_1= ruleTInterface | this_TEnum_2= ruleTEnum | this_AnyType_3= ruleAnyType | this_VoidType_4= ruleVoidType | this_UndefinedType_5= ruleUndefinedType | this_NullType_6= ruleNullType | this_PrimitiveType_7= rulePrimitiveType | this_TFunction_8= ruleTFunction | this_TypeVariable_9= ruleTypeVariable | this_VirtualBaseType_10= ruleVirtualBaseType ) )
            // InternalTypesParser.g:335:2: (this_TClass_0= ruleTClass | this_TInterface_1= ruleTInterface | this_TEnum_2= ruleTEnum | this_AnyType_3= ruleAnyType | this_VoidType_4= ruleVoidType | this_UndefinedType_5= ruleUndefinedType | this_NullType_6= ruleNullType | this_PrimitiveType_7= rulePrimitiveType | this_TFunction_8= ruleTFunction | this_TypeVariable_9= ruleTypeVariable | this_VirtualBaseType_10= ruleVirtualBaseType )
            {
            // InternalTypesParser.g:335:2: (this_TClass_0= ruleTClass | this_TInterface_1= ruleTInterface | this_TEnum_2= ruleTEnum | this_AnyType_3= ruleAnyType | this_VoidType_4= ruleVoidType | this_UndefinedType_5= ruleUndefinedType | this_NullType_6= ruleNullType | this_PrimitiveType_7= rulePrimitiveType | this_TFunction_8= ruleTFunction | this_TypeVariable_9= ruleTypeVariable | this_VirtualBaseType_10= ruleVirtualBaseType )
            int alt6=11;
            alt6 = dfa6.predict(input);
            switch (alt6) {
                case 1 :
                    // InternalTypesParser.g:336:3: this_TClass_0= ruleTClass
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getTClassParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TClass_0=ruleTClass();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TClass_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:345:3: this_TInterface_1= ruleTInterface
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getTInterfaceParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TInterface_1=ruleTInterface();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TInterface_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:354:3: this_TEnum_2= ruleTEnum
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getTEnumParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TEnum_2=ruleTEnum();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TEnum_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:363:3: this_AnyType_3= ruleAnyType
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getAnyTypeParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnyType_3=ruleAnyType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnyType_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:372:3: this_VoidType_4= ruleVoidType
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getVoidTypeParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VoidType_4=ruleVoidType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VoidType_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalTypesParser.g:381:3: this_UndefinedType_5= ruleUndefinedType
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getUndefinedTypeParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UndefinedType_5=ruleUndefinedType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UndefinedType_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalTypesParser.g:390:3: this_NullType_6= ruleNullType
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getNullTypeParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NullType_6=ruleNullType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NullType_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalTypesParser.g:399:3: this_PrimitiveType_7= rulePrimitiveType
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PrimitiveType_7=rulePrimitiveType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PrimitiveType_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalTypesParser.g:408:3: this_TFunction_8= ruleTFunction
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getTFunctionParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TFunction_8=ruleTFunction();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TFunction_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalTypesParser.g:417:3: this_TypeVariable_9= ruleTypeVariable
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getTypeVariableParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeVariable_9=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeVariable_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalTypesParser.g:426:3: this_VirtualBaseType_10= ruleVirtualBaseType
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getVirtualBaseTypeParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VirtualBaseType_10=ruleVirtualBaseType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VirtualBaseType_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleType"


    // $ANTLR start "entryRuleTypeRef"
    // InternalTypesParser.g:438:1: entryRuleTypeRef returns [EObject current=null] : iv_ruleTypeRef= ruleTypeRef EOF ;
    public final EObject entryRuleTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRef = null;


        try {
            // InternalTypesParser.g:438:48: (iv_ruleTypeRef= ruleTypeRef EOF )
            // InternalTypesParser.g:439:2: iv_ruleTypeRef= ruleTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRef=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeRef"


    // $ANTLR start "ruleTypeRef"
    // InternalTypesParser.g:445:1: ruleTypeRef returns [EObject current=null] : (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( (lv_followedByQuestionMark_1_0= QuestionMark ) )? ) ;
    public final EObject ruleTypeRef() throws RecognitionException {
        EObject current = null;

        Token lv_followedByQuestionMark_1_0=null;
        EObject this_TypeRefWithoutModifiers_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:451:2: ( (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( (lv_followedByQuestionMark_1_0= QuestionMark ) )? ) )
            // InternalTypesParser.g:452:2: (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( (lv_followedByQuestionMark_1_0= QuestionMark ) )? )
            {
            // InternalTypesParser.g:452:2: (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( (lv_followedByQuestionMark_1_0= QuestionMark ) )? )
            // InternalTypesParser.g:453:3: this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( (lv_followedByQuestionMark_1_0= QuestionMark ) )?
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTypeRefAccess().getTypeRefWithoutModifiersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_9);
            this_TypeRefWithoutModifiers_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TypeRefWithoutModifiers_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalTypesParser.g:461:3: ( (lv_followedByQuestionMark_1_0= QuestionMark ) )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==QuestionMark) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // InternalTypesParser.g:462:4: (lv_followedByQuestionMark_1_0= QuestionMark )
                    {
                    // InternalTypesParser.g:462:4: (lv_followedByQuestionMark_1_0= QuestionMark )
                    // InternalTypesParser.g:463:5: lv_followedByQuestionMark_1_0= QuestionMark
                    {
                    lv_followedByQuestionMark_1_0=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_followedByQuestionMark_1_0, grammarAccess.getTypeRefAccess().getFollowedByQuestionMarkQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTypeRefRule());
                      					}
                      					setWithLastConsumed(current, "followedByQuestionMark", lv_followedByQuestionMark_1_0 != null, "?");
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeRef"


    // $ANTLR start "entryRulePrimitiveType"
    // InternalTypesParser.g:479:1: entryRulePrimitiveType returns [EObject current=null] : iv_rulePrimitiveType= rulePrimitiveType EOF ;
    public final EObject entryRulePrimitiveType() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePrimitiveType = null;


        try {
            // InternalTypesParser.g:479:54: (iv_rulePrimitiveType= rulePrimitiveType EOF )
            // InternalTypesParser.g:480:2: iv_rulePrimitiveType= rulePrimitiveType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimitiveTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimitiveType=rulePrimitiveType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimitiveType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePrimitiveType"


    // $ANTLR start "rulePrimitiveType"
    // InternalTypesParser.g:486:1: rulePrimitiveType returns [EObject current=null] : (otherlv_0= Primitive ( (lv_name_1_0= ruleVoidOrBindingIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign )? (otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_7= LeftCurlyBracket (otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) ) )? (otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) ) )? otherlv_12= RightCurlyBracket ) ;
    public final EObject rulePrimitiveType() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject lv_typeVars_3_0 = null;

        EObject lv_declaredElementType_6_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:492:2: ( (otherlv_0= Primitive ( (lv_name_1_0= ruleVoidOrBindingIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign )? (otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_7= LeftCurlyBracket (otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) ) )? (otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) ) )? otherlv_12= RightCurlyBracket ) )
            // InternalTypesParser.g:493:2: (otherlv_0= Primitive ( (lv_name_1_0= ruleVoidOrBindingIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign )? (otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_7= LeftCurlyBracket (otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) ) )? (otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) ) )? otherlv_12= RightCurlyBracket )
            {
            // InternalTypesParser.g:493:2: (otherlv_0= Primitive ( (lv_name_1_0= ruleVoidOrBindingIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign )? (otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_7= LeftCurlyBracket (otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) ) )? (otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) ) )? otherlv_12= RightCurlyBracket )
            // InternalTypesParser.g:494:3: otherlv_0= Primitive ( (lv_name_1_0= ruleVoidOrBindingIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign )? (otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_7= LeftCurlyBracket (otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) ) )? (otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) ) )? otherlv_12= RightCurlyBracket
            {
            otherlv_0=(Token)match(input,Primitive,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPrimitiveTypeAccess().getPrimitiveKeyword_0());
              		
            }
            // InternalTypesParser.g:498:3: ( (lv_name_1_0= ruleVoidOrBindingIdentifier ) )
            // InternalTypesParser.g:499:4: (lv_name_1_0= ruleVoidOrBindingIdentifier )
            {
            // InternalTypesParser.g:499:4: (lv_name_1_0= ruleVoidOrBindingIdentifier )
            // InternalTypesParser.g:500:5: lv_name_1_0= ruleVoidOrBindingIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getNameVoidOrBindingIdentifierParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_11);
            lv_name_1_0=ruleVoidOrBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPrimitiveTypeRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.eclipse.n4js.ts.Types.VoidOrBindingIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:517:3: (otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==LessThanSign) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // InternalTypesParser.g:518:4: otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign
                    {
                    otherlv_2=(Token)match(input,LessThanSign,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getPrimitiveTypeAccess().getLessThanSignKeyword_2_0());
                      			
                    }
                    // InternalTypesParser.g:522:4: ( (lv_typeVars_3_0= ruleTypeVariable ) )
                    // InternalTypesParser.g:523:5: (lv_typeVars_3_0= ruleTypeVariable )
                    {
                    // InternalTypesParser.g:523:5: (lv_typeVars_3_0= ruleTypeVariable )
                    // InternalTypesParser.g:524:6: lv_typeVars_3_0= ruleTypeVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getTypeVarsTypeVariableParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_12);
                    lv_typeVars_3_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPrimitiveTypeRule());
                      						}
                      						add(
                      							current,
                      							"typeVars",
                      							lv_typeVars_3_0,
                      							"org.eclipse.n4js.ts.Types.TypeVariable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getPrimitiveTypeAccess().getGreaterThanSignKeyword_2_2());
                      			
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:546:3: (otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) ) )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==Indexed) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // InternalTypesParser.g:547:4: otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) )
                    {
                    otherlv_5=(Token)match(input,Indexed,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getPrimitiveTypeAccess().getIndexedKeyword_3_0());
                      			
                    }
                    // InternalTypesParser.g:551:4: ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) )
                    // InternalTypesParser.g:552:5: (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal )
                    {
                    // InternalTypesParser.g:552:5: (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal )
                    // InternalTypesParser.g:553:6: lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getDeclaredElementTypeParameterizedTypeRefNominalParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_declaredElementType_6_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPrimitiveTypeRule());
                      						}
                      						set(
                      							current,
                      							"declaredElementType",
                      							lv_declaredElementType_6_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,LeftCurlyBracket,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getPrimitiveTypeAccess().getLeftCurlyBracketKeyword_4());
              		
            }
            // InternalTypesParser.g:575:3: (otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) ) )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==AutoboxedType) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // InternalTypesParser.g:576:4: otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) )
                    {
                    otherlv_8=(Token)match(input,AutoboxedType,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getPrimitiveTypeAccess().getAutoboxedTypeKeyword_5_0());
                      			
                    }
                    // InternalTypesParser.g:580:4: ( ( ruleTypeReferenceName ) )
                    // InternalTypesParser.g:581:5: ( ruleTypeReferenceName )
                    {
                    // InternalTypesParser.g:581:5: ( ruleTypeReferenceName )
                    // InternalTypesParser.g:582:6: ruleTypeReferenceName
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPrimitiveTypeRule());
                      						}
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getAutoboxedTypeTClassifierCrossReference_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_17);
                    ruleTypeReferenceName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:597:3: (otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) ) )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==AssignmnentCompatible) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // InternalTypesParser.g:598:4: otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) )
                    {
                    otherlv_10=(Token)match(input,AssignmnentCompatible,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getPrimitiveTypeAccess().getAssignmnentCompatibleKeyword_6_0());
                      			
                    }
                    // InternalTypesParser.g:602:4: ( ( ruleTypeReferenceName ) )
                    // InternalTypesParser.g:603:5: ( ruleTypeReferenceName )
                    {
                    // InternalTypesParser.g:603:5: ( ruleTypeReferenceName )
                    // InternalTypesParser.g:604:6: ruleTypeReferenceName
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPrimitiveTypeRule());
                      						}
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getAssignmentCompatiblePrimitiveTypeCrossReference_6_1_0());
                      					
                    }
                    pushFollow(FOLLOW_18);
                    ruleTypeReferenceName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_12=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_12, grammarAccess.getPrimitiveTypeAccess().getRightCurlyBracketKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePrimitiveType"


    // $ANTLR start "entryRuleTypeReferenceName"
    // InternalTypesParser.g:627:1: entryRuleTypeReferenceName returns [String current=null] : iv_ruleTypeReferenceName= ruleTypeReferenceName EOF ;
    public final String entryRuleTypeReferenceName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypeReferenceName = null;


        try {
            // InternalTypesParser.g:627:57: (iv_ruleTypeReferenceName= ruleTypeReferenceName EOF )
            // InternalTypesParser.g:628:2: iv_ruleTypeReferenceName= ruleTypeReferenceName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeReferenceNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeReferenceName=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeReferenceName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeReferenceName"


    // $ANTLR start "ruleTypeReferenceName"
    // InternalTypesParser.g:634:1: ruleTypeReferenceName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Void | kw= Any | kw= Undefined | kw= Null | kw= Indexed | (this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )* ) ) ;
    public final AntlrDatatypeRuleToken ruleTypeReferenceName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_IDENTIFIER_5=null;
        Token this_IDENTIFIER_7=null;


        	enterRule();

        try {
            // InternalTypesParser.g:640:2: ( (kw= Void | kw= Any | kw= Undefined | kw= Null | kw= Indexed | (this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )* ) ) )
            // InternalTypesParser.g:641:2: (kw= Void | kw= Any | kw= Undefined | kw= Null | kw= Indexed | (this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )* ) )
            {
            // InternalTypesParser.g:641:2: (kw= Void | kw= Any | kw= Undefined | kw= Null | kw= Indexed | (this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )* ) )
            int alt13=6;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt13=1;
                }
                break;
            case Any:
                {
                alt13=2;
                }
                break;
            case Undefined:
                {
                alt13=3;
                }
                break;
            case Null:
                {
                alt13=4;
                }
                break;
            case Indexed:
                {
                alt13=5;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt13=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // InternalTypesParser.g:642:3: kw= Void
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:648:3: kw= Any
                    {
                    kw=(Token)match(input,Any,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getAnyKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:654:3: kw= Undefined
                    {
                    kw=(Token)match(input,Undefined,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getUndefinedKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:660:3: kw= Null
                    {
                    kw=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getNullKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:666:3: kw= Indexed
                    {
                    kw=(Token)match(input,Indexed,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getIndexedKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalTypesParser.g:672:3: (this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )* )
                    {
                    // InternalTypesParser.g:672:3: (this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )* )
                    // InternalTypesParser.g:673:4: this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )*
                    {
                    this_IDENTIFIER_5=(Token)match(input,RULE_IDENTIFIER,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_IDENTIFIER_5);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_IDENTIFIER_5, grammarAccess.getTypeReferenceNameAccess().getIDENTIFIERTerminalRuleCall_5_0());
                      			
                    }
                    // InternalTypesParser.g:680:4: (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )*
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==Solidus) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    // InternalTypesParser.g:681:5: kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER
                    	    {
                    	    kw=(Token)match(input,Solidus,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					current.merge(kw);
                    	      					newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getSolidusKeyword_5_1_0());
                    	      				
                    	    }
                    	    this_IDENTIFIER_7=(Token)match(input,RULE_IDENTIFIER,FOLLOW_19); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					current.merge(this_IDENTIFIER_7);
                    	      				
                    	    }
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(this_IDENTIFIER_7, grammarAccess.getTypeReferenceNameAccess().getIDENTIFIERTerminalRuleCall_5_1_1());
                    	      				
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeReferenceName"


    // $ANTLR start "entryRuleAnyType"
    // InternalTypesParser.g:699:1: entryRuleAnyType returns [EObject current=null] : iv_ruleAnyType= ruleAnyType EOF ;
    public final EObject entryRuleAnyType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnyType = null;


        try {
            // InternalTypesParser.g:699:48: (iv_ruleAnyType= ruleAnyType EOF )
            // InternalTypesParser.g:700:2: iv_ruleAnyType= ruleAnyType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnyTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnyType=ruleAnyType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnyType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnyType"


    // $ANTLR start "ruleAnyType"
    // InternalTypesParser.g:706:1: ruleAnyType returns [EObject current=null] : ( () ( (lv_name_1_0= Any ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) ;
    public final EObject ruleAnyType() throws RecognitionException {
        EObject current = null;

        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalTypesParser.g:712:2: ( ( () ( (lv_name_1_0= Any ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) )
            // InternalTypesParser.g:713:2: ( () ( (lv_name_1_0= Any ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            {
            // InternalTypesParser.g:713:2: ( () ( (lv_name_1_0= Any ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            // InternalTypesParser.g:714:3: () ( (lv_name_1_0= Any ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket
            {
            // InternalTypesParser.g:714:3: ()
            // InternalTypesParser.g:715:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getAnyTypeAccess().getAnyTypeAction_0(),
              					current);
              			
            }

            }

            // InternalTypesParser.g:721:3: ( (lv_name_1_0= Any ) )
            // InternalTypesParser.g:722:4: (lv_name_1_0= Any )
            {
            // InternalTypesParser.g:722:4: (lv_name_1_0= Any )
            // InternalTypesParser.g:723:5: lv_name_1_0= Any
            {
            lv_name_1_0=(Token)match(input,Any,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getAnyTypeAccess().getNameAnyKeyword_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getAnyTypeRule());
              					}
              					setWithLastConsumed(current, "name", lv_name_1_0, "any");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getAnyTypeAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getAnyTypeAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnyType"


    // $ANTLR start "entryRuleVoidType"
    // InternalTypesParser.g:747:1: entryRuleVoidType returns [EObject current=null] : iv_ruleVoidType= ruleVoidType EOF ;
    public final EObject entryRuleVoidType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVoidType = null;


        try {
            // InternalTypesParser.g:747:49: (iv_ruleVoidType= ruleVoidType EOF )
            // InternalTypesParser.g:748:2: iv_ruleVoidType= ruleVoidType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVoidTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVoidType=ruleVoidType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVoidType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVoidType"


    // $ANTLR start "ruleVoidType"
    // InternalTypesParser.g:754:1: ruleVoidType returns [EObject current=null] : ( () ( (lv_name_1_0= Void ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) ;
    public final EObject ruleVoidType() throws RecognitionException {
        EObject current = null;

        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalTypesParser.g:760:2: ( ( () ( (lv_name_1_0= Void ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) )
            // InternalTypesParser.g:761:2: ( () ( (lv_name_1_0= Void ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            {
            // InternalTypesParser.g:761:2: ( () ( (lv_name_1_0= Void ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            // InternalTypesParser.g:762:3: () ( (lv_name_1_0= Void ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket
            {
            // InternalTypesParser.g:762:3: ()
            // InternalTypesParser.g:763:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVoidTypeAccess().getVoidTypeAction_0(),
              					current);
              			
            }

            }

            // InternalTypesParser.g:769:3: ( (lv_name_1_0= Void ) )
            // InternalTypesParser.g:770:4: (lv_name_1_0= Void )
            {
            // InternalTypesParser.g:770:4: (lv_name_1_0= Void )
            // InternalTypesParser.g:771:5: lv_name_1_0= Void
            {
            lv_name_1_0=(Token)match(input,Void,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getVoidTypeAccess().getNameVoidKeyword_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getVoidTypeRule());
              					}
              					setWithLastConsumed(current, "name", lv_name_1_0, "void");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getVoidTypeAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getVoidTypeAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVoidType"


    // $ANTLR start "entryRuleUndefinedType"
    // InternalTypesParser.g:795:1: entryRuleUndefinedType returns [EObject current=null] : iv_ruleUndefinedType= ruleUndefinedType EOF ;
    public final EObject entryRuleUndefinedType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUndefinedType = null;


        try {
            // InternalTypesParser.g:795:54: (iv_ruleUndefinedType= ruleUndefinedType EOF )
            // InternalTypesParser.g:796:2: iv_ruleUndefinedType= ruleUndefinedType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUndefinedTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUndefinedType=ruleUndefinedType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUndefinedType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUndefinedType"


    // $ANTLR start "ruleUndefinedType"
    // InternalTypesParser.g:802:1: ruleUndefinedType returns [EObject current=null] : ( () ( (lv_name_1_0= Undefined ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) ;
    public final EObject ruleUndefinedType() throws RecognitionException {
        EObject current = null;

        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalTypesParser.g:808:2: ( ( () ( (lv_name_1_0= Undefined ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) )
            // InternalTypesParser.g:809:2: ( () ( (lv_name_1_0= Undefined ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            {
            // InternalTypesParser.g:809:2: ( () ( (lv_name_1_0= Undefined ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            // InternalTypesParser.g:810:3: () ( (lv_name_1_0= Undefined ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket
            {
            // InternalTypesParser.g:810:3: ()
            // InternalTypesParser.g:811:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getUndefinedTypeAccess().getUndefinedTypeAction_0(),
              					current);
              			
            }

            }

            // InternalTypesParser.g:817:3: ( (lv_name_1_0= Undefined ) )
            // InternalTypesParser.g:818:4: (lv_name_1_0= Undefined )
            {
            // InternalTypesParser.g:818:4: (lv_name_1_0= Undefined )
            // InternalTypesParser.g:819:5: lv_name_1_0= Undefined
            {
            lv_name_1_0=(Token)match(input,Undefined,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getUndefinedTypeAccess().getNameUndefinedKeyword_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getUndefinedTypeRule());
              					}
              					setWithLastConsumed(current, "name", lv_name_1_0, "undefined");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUndefinedTypeAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getUndefinedTypeAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUndefinedType"


    // $ANTLR start "entryRuleNullType"
    // InternalTypesParser.g:843:1: entryRuleNullType returns [EObject current=null] : iv_ruleNullType= ruleNullType EOF ;
    public final EObject entryRuleNullType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNullType = null;


        try {
            // InternalTypesParser.g:843:49: (iv_ruleNullType= ruleNullType EOF )
            // InternalTypesParser.g:844:2: iv_ruleNullType= ruleNullType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNullTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNullType=ruleNullType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNullType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNullType"


    // $ANTLR start "ruleNullType"
    // InternalTypesParser.g:850:1: ruleNullType returns [EObject current=null] : ( () ( (lv_name_1_0= Null ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) ;
    public final EObject ruleNullType() throws RecognitionException {
        EObject current = null;

        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalTypesParser.g:856:2: ( ( () ( (lv_name_1_0= Null ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) )
            // InternalTypesParser.g:857:2: ( () ( (lv_name_1_0= Null ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            {
            // InternalTypesParser.g:857:2: ( () ( (lv_name_1_0= Null ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            // InternalTypesParser.g:858:3: () ( (lv_name_1_0= Null ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket
            {
            // InternalTypesParser.g:858:3: ()
            // InternalTypesParser.g:859:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getNullTypeAccess().getNullTypeAction_0(),
              					current);
              			
            }

            }

            // InternalTypesParser.g:865:3: ( (lv_name_1_0= Null ) )
            // InternalTypesParser.g:866:4: (lv_name_1_0= Null )
            {
            // InternalTypesParser.g:866:4: (lv_name_1_0= Null )
            // InternalTypesParser.g:867:5: lv_name_1_0= Null
            {
            lv_name_1_0=(Token)match(input,Null,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getNullTypeAccess().getNameNullKeyword_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getNullTypeRule());
              					}
              					setWithLastConsumed(current, "name", lv_name_1_0, "null");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getNullTypeAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getNullTypeAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNullType"


    // $ANTLR start "entryRuleTypesIdentifier"
    // InternalTypesParser.g:891:1: entryRuleTypesIdentifier returns [String current=null] : iv_ruleTypesIdentifier= ruleTypesIdentifier EOF ;
    public final String entryRuleTypesIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypesIdentifier = null;


        try {
            // InternalTypesParser.g:891:55: (iv_ruleTypesIdentifier= ruleTypesIdentifier EOF )
            // InternalTypesParser.g:892:2: iv_ruleTypesIdentifier= ruleTypesIdentifier EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypesIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypesIdentifier=ruleTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypesIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypesIdentifier"


    // $ANTLR start "ruleTypesIdentifier"
    // InternalTypesParser.g:898:1: ruleTypesIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_IdentifierName_1= ruleIdentifierName ) ;
    public final AntlrDatatypeRuleToken ruleTypesIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_TypesSpecificKeywords_0 = null;

        AntlrDatatypeRuleToken this_IdentifierName_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:904:2: ( (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_IdentifierName_1= ruleIdentifierName ) )
            // InternalTypesParser.g:905:2: (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_IdentifierName_1= ruleIdentifierName )
            {
            // InternalTypesParser.g:905:2: (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_IdentifierName_1= ruleIdentifierName )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==AssignmnentCompatible||LA14_0==AutoboxedType||LA14_0==VirtualBase||LA14_0==Primitive||LA14_0==Undefined||LA14_0==Object||LA14_0==Any) ) {
                alt14=1;
            }
            else if ( ((LA14_0>=Intersection && LA14_0<=Constructor)||(LA14_0>=Implements && LA14_0<=Interface)||LA14_0==Protected||(LA14_0>=Abstract && LA14_0<=Finally)||(LA14_0>=Private && LA14_0<=Import)||(LA14_0>=Public && LA14_0<=False)||(LA14_0>=Super && LA14_0<=With)||(LA14_0>=For && LA14_0<=Var)||(LA14_0>=As && LA14_0<=Of)||LA14_0==RULE_IDENTIFIER) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // InternalTypesParser.g:906:3: this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypesIdentifierAccess().getTypesSpecificKeywordsParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypesSpecificKeywords_0=ruleTypesSpecificKeywords();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_TypesSpecificKeywords_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:917:3: this_IdentifierName_1= ruleIdentifierName
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypesIdentifierAccess().getIdentifierNameParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifierName_1=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IdentifierName_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypesIdentifier"


    // $ANTLR start "entryRuleBindingTypesIdentifier"
    // InternalTypesParser.g:931:1: entryRuleBindingTypesIdentifier returns [String current=null] : iv_ruleBindingTypesIdentifier= ruleBindingTypesIdentifier EOF ;
    public final String entryRuleBindingTypesIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBindingTypesIdentifier = null;


        try {
            // InternalTypesParser.g:931:62: (iv_ruleBindingTypesIdentifier= ruleBindingTypesIdentifier EOF )
            // InternalTypesParser.g:932:2: iv_ruleBindingTypesIdentifier= ruleBindingTypesIdentifier EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingTypesIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingTypesIdentifier=ruleBindingTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingTypesIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBindingTypesIdentifier"


    // $ANTLR start "ruleBindingTypesIdentifier"
    // InternalTypesParser.g:938:1: ruleBindingTypesIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_BindingIdentifier_1= ruleBindingIdentifier ) ;
    public final AntlrDatatypeRuleToken ruleBindingTypesIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_TypesSpecificKeywords_0 = null;

        AntlrDatatypeRuleToken this_BindingIdentifier_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:944:2: ( (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_BindingIdentifier_1= ruleBindingIdentifier ) )
            // InternalTypesParser.g:945:2: (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_BindingIdentifier_1= ruleBindingIdentifier )
            {
            // InternalTypesParser.g:945:2: (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_BindingIdentifier_1= ruleBindingIdentifier )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==AssignmnentCompatible||LA15_0==AutoboxedType||LA15_0==VirtualBase||LA15_0==Primitive||LA15_0==Undefined||LA15_0==Object||LA15_0==Any) ) {
                alt15=1;
            }
            else if ( ((LA15_0>=Intersection && LA15_0<=Constructor)||LA15_0==Implements||(LA15_0>=Promisify && LA15_0<=Interface)||LA15_0==Protected||LA15_0==Abstract||LA15_0==External||(LA15_0>=Private && LA15_0<=Project)||LA15_0==Public||LA15_0==Static||LA15_0==Target||(LA15_0>=Async && LA15_0<=Await)||LA15_0==Union||(LA15_0>=Yield && LA15_0<=This)||LA15_0==From||LA15_0==Type||(LA15_0>=Get && LA15_0<=Let)||(LA15_0>=Out && LA15_0<=Set)||LA15_0==As||LA15_0==Of||LA15_0==RULE_IDENTIFIER) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // InternalTypesParser.g:946:3: this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingTypesIdentifierAccess().getTypesSpecificKeywordsParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypesSpecificKeywords_0=ruleTypesSpecificKeywords();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_TypesSpecificKeywords_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:957:3: this_BindingIdentifier_1= ruleBindingIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingTypesIdentifierAccess().getBindingIdentifierParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BindingIdentifier_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_BindingIdentifier_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBindingTypesIdentifier"


    // $ANTLR start "entryRuleVoidOrBindingIdentifier"
    // InternalTypesParser.g:971:1: entryRuleVoidOrBindingIdentifier returns [String current=null] : iv_ruleVoidOrBindingIdentifier= ruleVoidOrBindingIdentifier EOF ;
    public final String entryRuleVoidOrBindingIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleVoidOrBindingIdentifier = null;


        try {
            // InternalTypesParser.g:971:63: (iv_ruleVoidOrBindingIdentifier= ruleVoidOrBindingIdentifier EOF )
            // InternalTypesParser.g:972:2: iv_ruleVoidOrBindingIdentifier= ruleVoidOrBindingIdentifier EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVoidOrBindingIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVoidOrBindingIdentifier=ruleVoidOrBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVoidOrBindingIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVoidOrBindingIdentifier"


    // $ANTLR start "ruleVoidOrBindingIdentifier"
    // InternalTypesParser.g:978:1: ruleVoidOrBindingIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Void | this_BindingTypesIdentifier_1= ruleBindingTypesIdentifier ) ;
    public final AntlrDatatypeRuleToken ruleVoidOrBindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_BindingTypesIdentifier_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:984:2: ( (kw= Void | this_BindingTypesIdentifier_1= ruleBindingTypesIdentifier ) )
            // InternalTypesParser.g:985:2: (kw= Void | this_BindingTypesIdentifier_1= ruleBindingTypesIdentifier )
            {
            // InternalTypesParser.g:985:2: (kw= Void | this_BindingTypesIdentifier_1= ruleBindingTypesIdentifier )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==Void) ) {
                alt16=1;
            }
            else if ( (LA16_0==AssignmnentCompatible||(LA16_0>=AutoboxedType && LA16_0<=Implements)||(LA16_0>=Promisify && LA16_0<=Abstract)||LA16_0==External||(LA16_0>=Private && LA16_0<=Project)||(LA16_0>=Object && LA16_0<=Public)||LA16_0==Static||LA16_0==Target||(LA16_0>=Async && LA16_0<=Await)||LA16_0==Union||(LA16_0>=Yield && LA16_0<=This)||LA16_0==From||LA16_0==Type||LA16_0==Any||(LA16_0>=Get && LA16_0<=Let)||(LA16_0>=Out && LA16_0<=Set)||LA16_0==As||LA16_0==Of||LA16_0==RULE_IDENTIFIER) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // InternalTypesParser.g:986:3: kw= Void
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getVoidOrBindingIdentifierAccess().getVoidKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:992:3: this_BindingTypesIdentifier_1= ruleBindingTypesIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVoidOrBindingIdentifierAccess().getBindingTypesIdentifierParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BindingTypesIdentifier_1=ruleBindingTypesIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_BindingTypesIdentifier_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVoidOrBindingIdentifier"


    // $ANTLR start "entryRuleTypesSpecificKeywords"
    // InternalTypesParser.g:1006:1: entryRuleTypesSpecificKeywords returns [String current=null] : iv_ruleTypesSpecificKeywords= ruleTypesSpecificKeywords EOF ;
    public final String entryRuleTypesSpecificKeywords() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypesSpecificKeywords = null;


        try {
            // InternalTypesParser.g:1006:61: (iv_ruleTypesSpecificKeywords= ruleTypesSpecificKeywords EOF )
            // InternalTypesParser.g:1007:2: iv_ruleTypesSpecificKeywords= ruleTypesSpecificKeywords EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypesSpecificKeywordsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypesSpecificKeywords=ruleTypesSpecificKeywords();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypesSpecificKeywords.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypesSpecificKeywords"


    // $ANTLR start "ruleTypesSpecificKeywords"
    // InternalTypesParser.g:1013:1: ruleTypesSpecificKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Any | kw= Undefined | kw= Object | kw= VirtualBase | kw= Primitive | kw= AutoboxedType | kw= AssignmnentCompatible ) ;
    public final AntlrDatatypeRuleToken ruleTypesSpecificKeywords() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalTypesParser.g:1019:2: ( (kw= Any | kw= Undefined | kw= Object | kw= VirtualBase | kw= Primitive | kw= AutoboxedType | kw= AssignmnentCompatible ) )
            // InternalTypesParser.g:1020:2: (kw= Any | kw= Undefined | kw= Object | kw= VirtualBase | kw= Primitive | kw= AutoboxedType | kw= AssignmnentCompatible )
            {
            // InternalTypesParser.g:1020:2: (kw= Any | kw= Undefined | kw= Object | kw= VirtualBase | kw= Primitive | kw= AutoboxedType | kw= AssignmnentCompatible )
            int alt17=7;
            switch ( input.LA(1) ) {
            case Any:
                {
                alt17=1;
                }
                break;
            case Undefined:
                {
                alt17=2;
                }
                break;
            case Object:
                {
                alt17=3;
                }
                break;
            case VirtualBase:
                {
                alt17=4;
                }
                break;
            case Primitive:
                {
                alt17=5;
                }
                break;
            case AutoboxedType:
                {
                alt17=6;
                }
                break;
            case AssignmnentCompatible:
                {
                alt17=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // InternalTypesParser.g:1021:3: kw= Any
                    {
                    kw=(Token)match(input,Any,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getAnyKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:1027:3: kw= Undefined
                    {
                    kw=(Token)match(input,Undefined,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getUndefinedKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:1033:3: kw= Object
                    {
                    kw=(Token)match(input,Object,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getObjectKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:1039:3: kw= VirtualBase
                    {
                    kw=(Token)match(input,VirtualBase,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getVirtualBaseKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:1045:3: kw= Primitive
                    {
                    kw=(Token)match(input,Primitive,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getPrimitiveKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalTypesParser.g:1051:3: kw= AutoboxedType
                    {
                    kw=(Token)match(input,AutoboxedType,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getAutoboxedTypeKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalTypesParser.g:1057:3: kw= AssignmnentCompatible
                    {
                    kw=(Token)match(input,AssignmnentCompatible,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getAssignmnentCompatibleKeyword_6());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypesSpecificKeywords"


    // $ANTLR start "entryRuleTypesComputedPropertyName"
    // InternalTypesParser.g:1066:1: entryRuleTypesComputedPropertyName returns [String current=null] : iv_ruleTypesComputedPropertyName= ruleTypesComputedPropertyName EOF ;
    public final String entryRuleTypesComputedPropertyName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypesComputedPropertyName = null;


        try {
            // InternalTypesParser.g:1066:65: (iv_ruleTypesComputedPropertyName= ruleTypesComputedPropertyName EOF )
            // InternalTypesParser.g:1067:2: iv_ruleTypesComputedPropertyName= ruleTypesComputedPropertyName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypesComputedPropertyNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypesComputedPropertyName=ruleTypesComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypesComputedPropertyName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypesComputedPropertyName"


    // $ANTLR start "ruleTypesComputedPropertyName"
    // InternalTypesParser.g:1073:1: ruleTypesComputedPropertyName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= LeftSquareBracket (this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName | this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName ) kw= RightSquareBracket ) ;
    public final AntlrDatatypeRuleToken ruleTypesComputedPropertyName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_TypesSymbolLiteralComputedName_1 = null;

        AntlrDatatypeRuleToken this_TypesStringLiteralComputedName_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1079:2: ( (kw= LeftSquareBracket (this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName | this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName ) kw= RightSquareBracket ) )
            // InternalTypesParser.g:1080:2: (kw= LeftSquareBracket (this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName | this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName ) kw= RightSquareBracket )
            {
            // InternalTypesParser.g:1080:2: (kw= LeftSquareBracket (this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName | this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName ) kw= RightSquareBracket )
            // InternalTypesParser.g:1081:3: kw= LeftSquareBracket (this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName | this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName ) kw= RightSquareBracket
            {
            kw=(Token)match(input,LeftSquareBracket,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getTypesComputedPropertyNameAccess().getLeftSquareBracketKeyword_0());
              		
            }
            // InternalTypesParser.g:1086:3: (this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName | this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==AssignmnentCompatible||(LA18_0>=AutoboxedType && LA18_0<=Finally)||(LA18_0>=Private && LA18_0<=False)||(LA18_0>=Super && LA18_0<=With)||(LA18_0>=Any && LA18_0<=Var)||(LA18_0>=As && LA18_0<=Of)||LA18_0==RULE_IDENTIFIER) ) {
                alt18=1;
            }
            else if ( (LA18_0==RULE_STRING) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // InternalTypesParser.g:1087:4: this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTypesComputedPropertyNameAccess().getTypesSymbolLiteralComputedNameParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_21);
                    this_TypesSymbolLiteralComputedName_1=ruleTypesSymbolLiteralComputedName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_TypesSymbolLiteralComputedName_1);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:1098:4: this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTypesComputedPropertyNameAccess().getTypesStringLiteralComputedNameParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_21);
                    this_TypesStringLiteralComputedName_2=ruleTypesStringLiteralComputedName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_TypesStringLiteralComputedName_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getTypesComputedPropertyNameAccess().getRightSquareBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypesComputedPropertyName"


    // $ANTLR start "entryRuleTypesSymbolLiteralComputedName"
    // InternalTypesParser.g:1118:1: entryRuleTypesSymbolLiteralComputedName returns [String current=null] : iv_ruleTypesSymbolLiteralComputedName= ruleTypesSymbolLiteralComputedName EOF ;
    public final String entryRuleTypesSymbolLiteralComputedName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypesSymbolLiteralComputedName = null;


        try {
            // InternalTypesParser.g:1118:70: (iv_ruleTypesSymbolLiteralComputedName= ruleTypesSymbolLiteralComputedName EOF )
            // InternalTypesParser.g:1119:2: iv_ruleTypesSymbolLiteralComputedName= ruleTypesSymbolLiteralComputedName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypesSymbolLiteralComputedNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypesSymbolLiteralComputedName=ruleTypesSymbolLiteralComputedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypesSymbolLiteralComputedName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypesSymbolLiteralComputedName"


    // $ANTLR start "ruleTypesSymbolLiteralComputedName"
    // InternalTypesParser.g:1125:1: ruleTypesSymbolLiteralComputedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_TypesIdentifier_0= ruleTypesIdentifier kw= FullStop this_TypesIdentifier_2= ruleTypesIdentifier ) ;
    public final AntlrDatatypeRuleToken ruleTypesSymbolLiteralComputedName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_TypesIdentifier_0 = null;

        AntlrDatatypeRuleToken this_TypesIdentifier_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1131:2: ( (this_TypesIdentifier_0= ruleTypesIdentifier kw= FullStop this_TypesIdentifier_2= ruleTypesIdentifier ) )
            // InternalTypesParser.g:1132:2: (this_TypesIdentifier_0= ruleTypesIdentifier kw= FullStop this_TypesIdentifier_2= ruleTypesIdentifier )
            {
            // InternalTypesParser.g:1132:2: (this_TypesIdentifier_0= ruleTypesIdentifier kw= FullStop this_TypesIdentifier_2= ruleTypesIdentifier )
            // InternalTypesParser.g:1133:3: this_TypesIdentifier_0= ruleTypesIdentifier kw= FullStop this_TypesIdentifier_2= ruleTypesIdentifier
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTypesSymbolLiteralComputedNameAccess().getTypesIdentifierParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_22);
            this_TypesIdentifier_0=ruleTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_TypesIdentifier_0);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            kw=(Token)match(input,FullStop,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getTypesSymbolLiteralComputedNameAccess().getFullStopKeyword_1());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTypesSymbolLiteralComputedNameAccess().getTypesIdentifierParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            this_TypesIdentifier_2=ruleTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_TypesIdentifier_2);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypesSymbolLiteralComputedName"


    // $ANTLR start "entryRuleTypesStringLiteralComputedName"
    // InternalTypesParser.g:1162:1: entryRuleTypesStringLiteralComputedName returns [String current=null] : iv_ruleTypesStringLiteralComputedName= ruleTypesStringLiteralComputedName EOF ;
    public final String entryRuleTypesStringLiteralComputedName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypesStringLiteralComputedName = null;


        try {
            // InternalTypesParser.g:1162:70: (iv_ruleTypesStringLiteralComputedName= ruleTypesStringLiteralComputedName EOF )
            // InternalTypesParser.g:1163:2: iv_ruleTypesStringLiteralComputedName= ruleTypesStringLiteralComputedName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypesStringLiteralComputedNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypesStringLiteralComputedName=ruleTypesStringLiteralComputedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypesStringLiteralComputedName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypesStringLiteralComputedName"


    // $ANTLR start "ruleTypesStringLiteralComputedName"
    // InternalTypesParser.g:1169:1: ruleTypesStringLiteralComputedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_STRING_0= RULE_STRING ;
    public final AntlrDatatypeRuleToken ruleTypesStringLiteralComputedName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING_0=null;


        	enterRule();

        try {
            // InternalTypesParser.g:1175:2: (this_STRING_0= RULE_STRING )
            // InternalTypesParser.g:1176:2: this_STRING_0= RULE_STRING
            {
            this_STRING_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_STRING_0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_STRING_0, grammarAccess.getTypesStringLiteralComputedNameAccess().getSTRINGTerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypesStringLiteralComputedName"


    // $ANTLR start "entryRuleVirtualBaseType"
    // InternalTypesParser.g:1186:1: entryRuleVirtualBaseType returns [EObject current=null] : iv_ruleVirtualBaseType= ruleVirtualBaseType EOF ;
    public final EObject entryRuleVirtualBaseType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVirtualBaseType = null;


        try {
            // InternalTypesParser.g:1186:56: (iv_ruleVirtualBaseType= ruleVirtualBaseType EOF )
            // InternalTypesParser.g:1187:2: iv_ruleVirtualBaseType= ruleVirtualBaseType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVirtualBaseTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVirtualBaseType=ruleVirtualBaseType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVirtualBaseType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVirtualBaseType"


    // $ANTLR start "ruleVirtualBaseType"
    // InternalTypesParser.g:1193:1: ruleVirtualBaseType returns [EObject current=null] : ( () otherlv_1= VirtualBase ( (lv_name_2_0= ruleBindingTypesIdentifier ) ) (otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_5= LeftCurlyBracket ( (lv_ownedMembers_6_0= ruleTMember ) )* otherlv_7= RightCurlyBracket ) ;
    public final EObject ruleVirtualBaseType() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject lv_declaredElementType_4_0 = null;

        EObject lv_ownedMembers_6_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1199:2: ( ( () otherlv_1= VirtualBase ( (lv_name_2_0= ruleBindingTypesIdentifier ) ) (otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_5= LeftCurlyBracket ( (lv_ownedMembers_6_0= ruleTMember ) )* otherlv_7= RightCurlyBracket ) )
            // InternalTypesParser.g:1200:2: ( () otherlv_1= VirtualBase ( (lv_name_2_0= ruleBindingTypesIdentifier ) ) (otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_5= LeftCurlyBracket ( (lv_ownedMembers_6_0= ruleTMember ) )* otherlv_7= RightCurlyBracket )
            {
            // InternalTypesParser.g:1200:2: ( () otherlv_1= VirtualBase ( (lv_name_2_0= ruleBindingTypesIdentifier ) ) (otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_5= LeftCurlyBracket ( (lv_ownedMembers_6_0= ruleTMember ) )* otherlv_7= RightCurlyBracket )
            // InternalTypesParser.g:1201:3: () otherlv_1= VirtualBase ( (lv_name_2_0= ruleBindingTypesIdentifier ) ) (otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_5= LeftCurlyBracket ( (lv_ownedMembers_6_0= ruleTMember ) )* otherlv_7= RightCurlyBracket
            {
            // InternalTypesParser.g:1201:3: ()
            // InternalTypesParser.g:1202:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVirtualBaseTypeAccess().getVirtualBaseTypeAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,VirtualBase,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getVirtualBaseTypeAccess().getVirtualBaseKeyword_1());
              		
            }
            // InternalTypesParser.g:1212:3: ( (lv_name_2_0= ruleBindingTypesIdentifier ) )
            // InternalTypesParser.g:1213:4: (lv_name_2_0= ruleBindingTypesIdentifier )
            {
            // InternalTypesParser.g:1213:4: (lv_name_2_0= ruleBindingTypesIdentifier )
            // InternalTypesParser.g:1214:5: lv_name_2_0= ruleBindingTypesIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVirtualBaseTypeAccess().getNameBindingTypesIdentifierParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_name_2_0=ruleBindingTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVirtualBaseTypeRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.eclipse.n4js.ts.Types.BindingTypesIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:1231:3: (otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) ) )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==Indexed) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // InternalTypesParser.g:1232:4: otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) )
                    {
                    otherlv_3=(Token)match(input,Indexed,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getVirtualBaseTypeAccess().getIndexedKeyword_3_0());
                      			
                    }
                    // InternalTypesParser.g:1236:4: ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) )
                    // InternalTypesParser.g:1237:5: (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal )
                    {
                    // InternalTypesParser.g:1237:5: (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal )
                    // InternalTypesParser.g:1238:6: lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getVirtualBaseTypeAccess().getDeclaredElementTypeParameterizedTypeRefNominalParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_declaredElementType_4_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVirtualBaseTypeRule());
                      						}
                      						set(
                      							current,
                      							"declaredElementType",
                      							lv_declaredElementType_4_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,LeftCurlyBracket,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getVirtualBaseTypeAccess().getLeftCurlyBracketKeyword_4());
              		
            }
            // InternalTypesParser.g:1260:3: ( (lv_ownedMembers_6_0= ruleTMember ) )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==ProtectedInternal||LA20_0==PublicInternal||LA20_0==Protected||(LA20_0>=Private && LA20_0<=Project)||LA20_0==Public) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // InternalTypesParser.g:1261:4: (lv_ownedMembers_6_0= ruleTMember )
            	    {
            	    // InternalTypesParser.g:1261:4: (lv_ownedMembers_6_0= ruleTMember )
            	    // InternalTypesParser.g:1262:5: lv_ownedMembers_6_0= ruleTMember
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVirtualBaseTypeAccess().getOwnedMembersTMemberParserRuleCall_5_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_24);
            	    lv_ownedMembers_6_0=ruleTMember();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVirtualBaseTypeRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembers",
            	      						lv_ownedMembers_6_0,
            	      						"org.eclipse.n4js.ts.Types.TMember");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            otherlv_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getVirtualBaseTypeAccess().getRightCurlyBracketKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVirtualBaseType"


    // $ANTLR start "entryRuleTClass"
    // InternalTypesParser.g:1287:1: entryRuleTClass returns [EObject current=null] : iv_ruleTClass= ruleTClass EOF ;
    public final EObject entryRuleTClass() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTClass = null;


        try {
            // InternalTypesParser.g:1287:47: (iv_ruleTClass= ruleTClass EOF )
            // InternalTypesParser.g:1288:2: iv_ruleTClass= ruleTClass EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTClassRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTClass=ruleTClass();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTClass; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTClass"


    // $ANTLR start "ruleTClass"
    // InternalTypesParser.g:1294:1: ruleTClass returns [EObject current=null] : ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredAbstract_2_0= Abstract ) )? ( (lv_declaredFinal_3_0= Final ) )? ( ( ( (lv_external_4_0= Object ) ) ( (lv_name_5_0= ruleBindingTypesIdentifier ) ) (this_TypeVariables_6= ruleTypeVariables[$current] )? ) | (otherlv_7= Class this_TClassOrInterfaceHeader_8= ruleTClassOrInterfaceHeader[$current] ) ) (otherlv_9= Extends ( (lv_superClassRef_10_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_11= Implements ( (lv_implementedInterfaceRefs_12_0= ruleParameterizedTypeRefNominal ) ) (otherlv_13= Comma ( (lv_implementedInterfaceRefs_14_0= ruleParameterizedTypeRefNominal ) ) )* )? (otherlv_15= Indexed ( (lv_declaredElementType_16_0= ruleParameterizedTypeRefNominal ) ) )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_17_0= ruleTAnnotation ) )* otherlv_18= LeftCurlyBracket ( (lv_ownedMembers_19_0= ruleTMember ) )* ( ( (lv_callableCtor_20_0= ruleCallableCtor ) ) ( (lv_ownedMembers_21_0= ruleTMember ) )* )? otherlv_22= RightCurlyBracket ) ;
    public final EObject ruleTClass() throws RecognitionException {
        EObject current = null;

        Token lv_declaredProvidedByRuntime_1_0=null;
        Token lv_declaredAbstract_2_0=null;
        Token lv_declaredFinal_3_0=null;
        Token lv_external_4_0=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_18=null;
        Token otherlv_22=null;
        Enumerator lv_declaredTypeAccessModifier_0_0 = null;

        AntlrDatatypeRuleToken lv_name_5_0 = null;

        EObject this_TypeVariables_6 = null;

        EObject this_TClassOrInterfaceHeader_8 = null;

        EObject lv_superClassRef_10_0 = null;

        EObject lv_implementedInterfaceRefs_12_0 = null;

        EObject lv_implementedInterfaceRefs_14_0 = null;

        EObject lv_declaredElementType_16_0 = null;

        EObject lv_annotations_17_0 = null;

        EObject lv_ownedMembers_19_0 = null;

        EObject lv_callableCtor_20_0 = null;

        EObject lv_ownedMembers_21_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1300:2: ( ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredAbstract_2_0= Abstract ) )? ( (lv_declaredFinal_3_0= Final ) )? ( ( ( (lv_external_4_0= Object ) ) ( (lv_name_5_0= ruleBindingTypesIdentifier ) ) (this_TypeVariables_6= ruleTypeVariables[$current] )? ) | (otherlv_7= Class this_TClassOrInterfaceHeader_8= ruleTClassOrInterfaceHeader[$current] ) ) (otherlv_9= Extends ( (lv_superClassRef_10_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_11= Implements ( (lv_implementedInterfaceRefs_12_0= ruleParameterizedTypeRefNominal ) ) (otherlv_13= Comma ( (lv_implementedInterfaceRefs_14_0= ruleParameterizedTypeRefNominal ) ) )* )? (otherlv_15= Indexed ( (lv_declaredElementType_16_0= ruleParameterizedTypeRefNominal ) ) )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_17_0= ruleTAnnotation ) )* otherlv_18= LeftCurlyBracket ( (lv_ownedMembers_19_0= ruleTMember ) )* ( ( (lv_callableCtor_20_0= ruleCallableCtor ) ) ( (lv_ownedMembers_21_0= ruleTMember ) )* )? otherlv_22= RightCurlyBracket ) )
            // InternalTypesParser.g:1301:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredAbstract_2_0= Abstract ) )? ( (lv_declaredFinal_3_0= Final ) )? ( ( ( (lv_external_4_0= Object ) ) ( (lv_name_5_0= ruleBindingTypesIdentifier ) ) (this_TypeVariables_6= ruleTypeVariables[$current] )? ) | (otherlv_7= Class this_TClassOrInterfaceHeader_8= ruleTClassOrInterfaceHeader[$current] ) ) (otherlv_9= Extends ( (lv_superClassRef_10_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_11= Implements ( (lv_implementedInterfaceRefs_12_0= ruleParameterizedTypeRefNominal ) ) (otherlv_13= Comma ( (lv_implementedInterfaceRefs_14_0= ruleParameterizedTypeRefNominal ) ) )* )? (otherlv_15= Indexed ( (lv_declaredElementType_16_0= ruleParameterizedTypeRefNominal ) ) )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_17_0= ruleTAnnotation ) )* otherlv_18= LeftCurlyBracket ( (lv_ownedMembers_19_0= ruleTMember ) )* ( ( (lv_callableCtor_20_0= ruleCallableCtor ) ) ( (lv_ownedMembers_21_0= ruleTMember ) )* )? otherlv_22= RightCurlyBracket )
            {
            // InternalTypesParser.g:1301:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredAbstract_2_0= Abstract ) )? ( (lv_declaredFinal_3_0= Final ) )? ( ( ( (lv_external_4_0= Object ) ) ( (lv_name_5_0= ruleBindingTypesIdentifier ) ) (this_TypeVariables_6= ruleTypeVariables[$current] )? ) | (otherlv_7= Class this_TClassOrInterfaceHeader_8= ruleTClassOrInterfaceHeader[$current] ) ) (otherlv_9= Extends ( (lv_superClassRef_10_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_11= Implements ( (lv_implementedInterfaceRefs_12_0= ruleParameterizedTypeRefNominal ) ) (otherlv_13= Comma ( (lv_implementedInterfaceRefs_14_0= ruleParameterizedTypeRefNominal ) ) )* )? (otherlv_15= Indexed ( (lv_declaredElementType_16_0= ruleParameterizedTypeRefNominal ) ) )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_17_0= ruleTAnnotation ) )* otherlv_18= LeftCurlyBracket ( (lv_ownedMembers_19_0= ruleTMember ) )* ( ( (lv_callableCtor_20_0= ruleCallableCtor ) ) ( (lv_ownedMembers_21_0= ruleTMember ) )* )? otherlv_22= RightCurlyBracket )
            // InternalTypesParser.g:1302:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredAbstract_2_0= Abstract ) )? ( (lv_declaredFinal_3_0= Final ) )? ( ( ( (lv_external_4_0= Object ) ) ( (lv_name_5_0= ruleBindingTypesIdentifier ) ) (this_TypeVariables_6= ruleTypeVariables[$current] )? ) | (otherlv_7= Class this_TClassOrInterfaceHeader_8= ruleTClassOrInterfaceHeader[$current] ) ) (otherlv_9= Extends ( (lv_superClassRef_10_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_11= Implements ( (lv_implementedInterfaceRefs_12_0= ruleParameterizedTypeRefNominal ) ) (otherlv_13= Comma ( (lv_implementedInterfaceRefs_14_0= ruleParameterizedTypeRefNominal ) ) )* )? (otherlv_15= Indexed ( (lv_declaredElementType_16_0= ruleParameterizedTypeRefNominal ) ) )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_17_0= ruleTAnnotation ) )* otherlv_18= LeftCurlyBracket ( (lv_ownedMembers_19_0= ruleTMember ) )* ( ( (lv_callableCtor_20_0= ruleCallableCtor ) ) ( (lv_ownedMembers_21_0= ruleTMember ) )* )? otherlv_22= RightCurlyBracket
            {
            // InternalTypesParser.g:1302:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) )
            // InternalTypesParser.g:1303:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            {
            // InternalTypesParser.g:1303:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            // InternalTypesParser.g:1304:5: lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTClassAccess().getDeclaredTypeAccessModifierTypeAccessModifierEnumRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_25);
            lv_declaredTypeAccessModifier_0_0=ruleTypeAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTClassRule());
              					}
              					set(
              						current,
              						"declaredTypeAccessModifier",
              						lv_declaredTypeAccessModifier_0_0,
              						"org.eclipse.n4js.ts.Types.TypeAccessModifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:1321:3: ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==ProvidedByRuntime) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // InternalTypesParser.g:1322:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    {
                    // InternalTypesParser.g:1322:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    // InternalTypesParser.g:1323:5: lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime
                    {
                    lv_declaredProvidedByRuntime_1_0=(Token)match(input,ProvidedByRuntime,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredProvidedByRuntime_1_0, grammarAccess.getTClassAccess().getDeclaredProvidedByRuntimeProvidedByRuntimeKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTClassRule());
                      					}
                      					setWithLastConsumed(current, "declaredProvidedByRuntime", lv_declaredProvidedByRuntime_1_0 != null, "providedByRuntime");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1335:3: ( (lv_declaredAbstract_2_0= Abstract ) )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==Abstract) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // InternalTypesParser.g:1336:4: (lv_declaredAbstract_2_0= Abstract )
                    {
                    // InternalTypesParser.g:1336:4: (lv_declaredAbstract_2_0= Abstract )
                    // InternalTypesParser.g:1337:5: lv_declaredAbstract_2_0= Abstract
                    {
                    lv_declaredAbstract_2_0=(Token)match(input,Abstract,FOLLOW_27); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredAbstract_2_0, grammarAccess.getTClassAccess().getDeclaredAbstractAbstractKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTClassRule());
                      					}
                      					setWithLastConsumed(current, "declaredAbstract", lv_declaredAbstract_2_0 != null, "abstract");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1349:3: ( (lv_declaredFinal_3_0= Final ) )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==Final) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // InternalTypesParser.g:1350:4: (lv_declaredFinal_3_0= Final )
                    {
                    // InternalTypesParser.g:1350:4: (lv_declaredFinal_3_0= Final )
                    // InternalTypesParser.g:1351:5: lv_declaredFinal_3_0= Final
                    {
                    lv_declaredFinal_3_0=(Token)match(input,Final,FOLLOW_28); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredFinal_3_0, grammarAccess.getTClassAccess().getDeclaredFinalFinalKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTClassRule());
                      					}
                      					setWithLastConsumed(current, "declaredFinal", lv_declaredFinal_3_0 != null, "final");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1363:3: ( ( ( (lv_external_4_0= Object ) ) ( (lv_name_5_0= ruleBindingTypesIdentifier ) ) (this_TypeVariables_6= ruleTypeVariables[$current] )? ) | (otherlv_7= Class this_TClassOrInterfaceHeader_8= ruleTClassOrInterfaceHeader[$current] ) )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==Object) ) {
                alt25=1;
            }
            else if ( (LA25_0==Class) ) {
                alt25=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;
            }
            switch (alt25) {
                case 1 :
                    // InternalTypesParser.g:1364:4: ( ( (lv_external_4_0= Object ) ) ( (lv_name_5_0= ruleBindingTypesIdentifier ) ) (this_TypeVariables_6= ruleTypeVariables[$current] )? )
                    {
                    // InternalTypesParser.g:1364:4: ( ( (lv_external_4_0= Object ) ) ( (lv_name_5_0= ruleBindingTypesIdentifier ) ) (this_TypeVariables_6= ruleTypeVariables[$current] )? )
                    // InternalTypesParser.g:1365:5: ( (lv_external_4_0= Object ) ) ( (lv_name_5_0= ruleBindingTypesIdentifier ) ) (this_TypeVariables_6= ruleTypeVariables[$current] )?
                    {
                    // InternalTypesParser.g:1365:5: ( (lv_external_4_0= Object ) )
                    // InternalTypesParser.g:1366:6: (lv_external_4_0= Object )
                    {
                    // InternalTypesParser.g:1366:6: (lv_external_4_0= Object )
                    // InternalTypesParser.g:1367:7: lv_external_4_0= Object
                    {
                    lv_external_4_0=(Token)match(input,Object,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_external_4_0, grammarAccess.getTClassAccess().getExternalObjectKeyword_4_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getTClassRule());
                      							}
                      							setWithLastConsumed(current, "external", lv_external_4_0 != null, "object");
                      						
                    }

                    }


                    }

                    // InternalTypesParser.g:1379:5: ( (lv_name_5_0= ruleBindingTypesIdentifier ) )
                    // InternalTypesParser.g:1380:6: (lv_name_5_0= ruleBindingTypesIdentifier )
                    {
                    // InternalTypesParser.g:1380:6: (lv_name_5_0= ruleBindingTypesIdentifier )
                    // InternalTypesParser.g:1381:7: lv_name_5_0= ruleBindingTypesIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getTClassAccess().getNameBindingTypesIdentifierParserRuleCall_4_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_29);
                    lv_name_5_0=ruleBindingTypesIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTClassRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_5_0,
                      								"org.eclipse.n4js.ts.Types.BindingTypesIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalTypesParser.g:1398:5: (this_TypeVariables_6= ruleTypeVariables[$current] )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==LessThanSign) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // InternalTypesParser.g:1399:6: this_TypeVariables_6= ruleTypeVariables[$current]
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getTClassRule());
                              						}
                              						newCompositeNode(grammarAccess.getTClassAccess().getTypeVariablesParserRuleCall_4_0_2());
                              					
                            }
                            pushFollow(FOLLOW_30);
                            this_TypeVariables_6=ruleTypeVariables(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_TypeVariables_6;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:1413:4: (otherlv_7= Class this_TClassOrInterfaceHeader_8= ruleTClassOrInterfaceHeader[$current] )
                    {
                    // InternalTypesParser.g:1413:4: (otherlv_7= Class this_TClassOrInterfaceHeader_8= ruleTClassOrInterfaceHeader[$current] )
                    // InternalTypesParser.g:1414:5: otherlv_7= Class this_TClassOrInterfaceHeader_8= ruleTClassOrInterfaceHeader[$current]
                    {
                    otherlv_7=(Token)match(input,Class,FOLLOW_31); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_7, grammarAccess.getTClassAccess().getClassKeyword_4_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTClassRule());
                      					}
                      					newCompositeNode(grammarAccess.getTClassAccess().getTClassOrInterfaceHeaderParserRuleCall_4_1_1());
                      				
                    }
                    pushFollow(FOLLOW_30);
                    this_TClassOrInterfaceHeader_8=ruleTClassOrInterfaceHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_TClassOrInterfaceHeader_8;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1431:3: (otherlv_9= Extends ( (lv_superClassRef_10_0= ruleParameterizedTypeRefNominal ) ) )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==Extends) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // InternalTypesParser.g:1432:4: otherlv_9= Extends ( (lv_superClassRef_10_0= ruleParameterizedTypeRefNominal ) )
                    {
                    otherlv_9=(Token)match(input,Extends,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getTClassAccess().getExtendsKeyword_5_0());
                      			
                    }
                    // InternalTypesParser.g:1436:4: ( (lv_superClassRef_10_0= ruleParameterizedTypeRefNominal ) )
                    // InternalTypesParser.g:1437:5: (lv_superClassRef_10_0= ruleParameterizedTypeRefNominal )
                    {
                    // InternalTypesParser.g:1437:5: (lv_superClassRef_10_0= ruleParameterizedTypeRefNominal )
                    // InternalTypesParser.g:1438:6: lv_superClassRef_10_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTClassAccess().getSuperClassRefParameterizedTypeRefNominalParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_32);
                    lv_superClassRef_10_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTClassRule());
                      						}
                      						set(
                      							current,
                      							"superClassRef",
                      							lv_superClassRef_10_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1456:3: (otherlv_11= Implements ( (lv_implementedInterfaceRefs_12_0= ruleParameterizedTypeRefNominal ) ) (otherlv_13= Comma ( (lv_implementedInterfaceRefs_14_0= ruleParameterizedTypeRefNominal ) ) )* )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==Implements) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // InternalTypesParser.g:1457:4: otherlv_11= Implements ( (lv_implementedInterfaceRefs_12_0= ruleParameterizedTypeRefNominal ) ) (otherlv_13= Comma ( (lv_implementedInterfaceRefs_14_0= ruleParameterizedTypeRefNominal ) ) )*
                    {
                    otherlv_11=(Token)match(input,Implements,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_11, grammarAccess.getTClassAccess().getImplementsKeyword_6_0());
                      			
                    }
                    // InternalTypesParser.g:1461:4: ( (lv_implementedInterfaceRefs_12_0= ruleParameterizedTypeRefNominal ) )
                    // InternalTypesParser.g:1462:5: (lv_implementedInterfaceRefs_12_0= ruleParameterizedTypeRefNominal )
                    {
                    // InternalTypesParser.g:1462:5: (lv_implementedInterfaceRefs_12_0= ruleParameterizedTypeRefNominal )
                    // InternalTypesParser.g:1463:6: lv_implementedInterfaceRefs_12_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTClassAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_6_1_0());
                      					
                    }
                    pushFollow(FOLLOW_33);
                    lv_implementedInterfaceRefs_12_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTClassRule());
                      						}
                      						add(
                      							current,
                      							"implementedInterfaceRefs",
                      							lv_implementedInterfaceRefs_12_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:1480:4: (otherlv_13= Comma ( (lv_implementedInterfaceRefs_14_0= ruleParameterizedTypeRefNominal ) ) )*
                    loop27:
                    do {
                        int alt27=2;
                        int LA27_0 = input.LA(1);

                        if ( (LA27_0==Comma) ) {
                            alt27=1;
                        }


                        switch (alt27) {
                    	case 1 :
                    	    // InternalTypesParser.g:1481:5: otherlv_13= Comma ( (lv_implementedInterfaceRefs_14_0= ruleParameterizedTypeRefNominal ) )
                    	    {
                    	    otherlv_13=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_13, grammarAccess.getTClassAccess().getCommaKeyword_6_2_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:1485:5: ( (lv_implementedInterfaceRefs_14_0= ruleParameterizedTypeRefNominal ) )
                    	    // InternalTypesParser.g:1486:6: (lv_implementedInterfaceRefs_14_0= ruleParameterizedTypeRefNominal )
                    	    {
                    	    // InternalTypesParser.g:1486:6: (lv_implementedInterfaceRefs_14_0= ruleParameterizedTypeRefNominal )
                    	    // InternalTypesParser.g:1487:7: lv_implementedInterfaceRefs_14_0= ruleParameterizedTypeRefNominal
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTClassAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_6_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_33);
                    	    lv_implementedInterfaceRefs_14_0=ruleParameterizedTypeRefNominal();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTClassRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"implementedInterfaceRefs",
                    	      								lv_implementedInterfaceRefs_14_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);


                    }
                    break;

            }

            // InternalTypesParser.g:1506:3: (otherlv_15= Indexed ( (lv_declaredElementType_16_0= ruleParameterizedTypeRefNominal ) ) )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==Indexed) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // InternalTypesParser.g:1507:4: otherlv_15= Indexed ( (lv_declaredElementType_16_0= ruleParameterizedTypeRefNominal ) )
                    {
                    otherlv_15=(Token)match(input,Indexed,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_15, grammarAccess.getTClassAccess().getIndexedKeyword_7_0());
                      			
                    }
                    // InternalTypesParser.g:1511:4: ( (lv_declaredElementType_16_0= ruleParameterizedTypeRefNominal ) )
                    // InternalTypesParser.g:1512:5: (lv_declaredElementType_16_0= ruleParameterizedTypeRefNominal )
                    {
                    // InternalTypesParser.g:1512:5: (lv_declaredElementType_16_0= ruleParameterizedTypeRefNominal )
                    // InternalTypesParser.g:1513:6: lv_declaredElementType_16_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTClassAccess().getDeclaredElementTypeParameterizedTypeRefNominalParserRuleCall_7_1_0());
                      					
                    }
                    pushFollow(FOLLOW_34);
                    lv_declaredElementType_16_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTClassRule());
                      						}
                      						set(
                      							current,
                      							"declaredElementType",
                      							lv_declaredElementType_16_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1531:3: ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_17_0= ruleTAnnotation ) )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==CommercialAt) && (synpred3_InternalTypesParser())) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // InternalTypesParser.g:1532:4: ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_17_0= ruleTAnnotation )
            	    {
            	    // InternalTypesParser.g:1541:4: (lv_annotations_17_0= ruleTAnnotation )
            	    // InternalTypesParser.g:1542:5: lv_annotations_17_0= ruleTAnnotation
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getTClassAccess().getAnnotationsTAnnotationParserRuleCall_8_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_34);
            	    lv_annotations_17_0=ruleTAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getTClassRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_17_0,
            	      						"org.eclipse.n4js.ts.Types.TAnnotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);

            otherlv_18=(Token)match(input,LeftCurlyBracket,FOLLOW_35); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_18, grammarAccess.getTClassAccess().getLeftCurlyBracketKeyword_9());
              		
            }
            // InternalTypesParser.g:1563:3: ( (lv_ownedMembers_19_0= ruleTMember ) )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ProtectedInternal||LA31_0==PublicInternal||LA31_0==Protected||(LA31_0>=Private && LA31_0<=Project)||LA31_0==Public) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // InternalTypesParser.g:1564:4: (lv_ownedMembers_19_0= ruleTMember )
            	    {
            	    // InternalTypesParser.g:1564:4: (lv_ownedMembers_19_0= ruleTMember )
            	    // InternalTypesParser.g:1565:5: lv_ownedMembers_19_0= ruleTMember
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getTClassAccess().getOwnedMembersTMemberParserRuleCall_10_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_35);
            	    lv_ownedMembers_19_0=ruleTMember();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getTClassRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembers",
            	      						lv_ownedMembers_19_0,
            	      						"org.eclipse.n4js.ts.Types.TMember");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);

            // InternalTypesParser.g:1582:3: ( ( (lv_callableCtor_20_0= ruleCallableCtor ) ) ( (lv_ownedMembers_21_0= ruleTMember ) )* )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==LeftParenthesis) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // InternalTypesParser.g:1583:4: ( (lv_callableCtor_20_0= ruleCallableCtor ) ) ( (lv_ownedMembers_21_0= ruleTMember ) )*
                    {
                    // InternalTypesParser.g:1583:4: ( (lv_callableCtor_20_0= ruleCallableCtor ) )
                    // InternalTypesParser.g:1584:5: (lv_callableCtor_20_0= ruleCallableCtor )
                    {
                    // InternalTypesParser.g:1584:5: (lv_callableCtor_20_0= ruleCallableCtor )
                    // InternalTypesParser.g:1585:6: lv_callableCtor_20_0= ruleCallableCtor
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTClassAccess().getCallableCtorCallableCtorParserRuleCall_11_0_0());
                      					
                    }
                    pushFollow(FOLLOW_24);
                    lv_callableCtor_20_0=ruleCallableCtor();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTClassRule());
                      						}
                      						set(
                      							current,
                      							"callableCtor",
                      							lv_callableCtor_20_0,
                      							"org.eclipse.n4js.ts.Types.CallableCtor");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:1602:4: ( (lv_ownedMembers_21_0= ruleTMember ) )*
                    loop32:
                    do {
                        int alt32=2;
                        int LA32_0 = input.LA(1);

                        if ( (LA32_0==ProtectedInternal||LA32_0==PublicInternal||LA32_0==Protected||(LA32_0>=Private && LA32_0<=Project)||LA32_0==Public) ) {
                            alt32=1;
                        }


                        switch (alt32) {
                    	case 1 :
                    	    // InternalTypesParser.g:1603:5: (lv_ownedMembers_21_0= ruleTMember )
                    	    {
                    	    // InternalTypesParser.g:1603:5: (lv_ownedMembers_21_0= ruleTMember )
                    	    // InternalTypesParser.g:1604:6: lv_ownedMembers_21_0= ruleTMember
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getTClassAccess().getOwnedMembersTMemberParserRuleCall_11_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_24);
                    	    lv_ownedMembers_21_0=ruleTMember();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getTClassRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"ownedMembers",
                    	      							lv_ownedMembers_21_0,
                    	      							"org.eclipse.n4js.ts.Types.TMember");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop32;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_22=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_22, grammarAccess.getTClassAccess().getRightCurlyBracketKeyword_12());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTClass"


    // $ANTLR start "entryRuleTInterface"
    // InternalTypesParser.g:1630:1: entryRuleTInterface returns [EObject current=null] : iv_ruleTInterface= ruleTInterface EOF ;
    public final EObject entryRuleTInterface() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTInterface = null;


        try {
            // InternalTypesParser.g:1630:51: (iv_ruleTInterface= ruleTInterface EOF )
            // InternalTypesParser.g:1631:2: iv_ruleTInterface= ruleTInterface EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTInterfaceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTInterface=ruleTInterface();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTInterface; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTInterface"


    // $ANTLR start "ruleTInterface"
    // InternalTypesParser.g:1637:1: ruleTInterface returns [EObject current=null] : ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Interface this_TClassOrInterfaceHeader_3= ruleTClassOrInterfaceHeader[$current] (otherlv_4= Extends ( (lv_superInterfaceRefs_5_0= ruleParameterizedTypeRefNominal ) ) (otherlv_6= Comma ( (lv_superInterfaceRefs_7_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_8_0= ruleTAnnotation ) )* otherlv_9= LeftCurlyBracket ( (lv_ownedMembers_10_0= ruleTMember ) )* otherlv_11= RightCurlyBracket ) ;
    public final EObject ruleTInterface() throws RecognitionException {
        EObject current = null;

        Token lv_declaredProvidedByRuntime_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Enumerator lv_declaredTypeAccessModifier_0_0 = null;

        EObject this_TClassOrInterfaceHeader_3 = null;

        EObject lv_superInterfaceRefs_5_0 = null;

        EObject lv_superInterfaceRefs_7_0 = null;

        EObject lv_annotations_8_0 = null;

        EObject lv_ownedMembers_10_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1643:2: ( ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Interface this_TClassOrInterfaceHeader_3= ruleTClassOrInterfaceHeader[$current] (otherlv_4= Extends ( (lv_superInterfaceRefs_5_0= ruleParameterizedTypeRefNominal ) ) (otherlv_6= Comma ( (lv_superInterfaceRefs_7_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_8_0= ruleTAnnotation ) )* otherlv_9= LeftCurlyBracket ( (lv_ownedMembers_10_0= ruleTMember ) )* otherlv_11= RightCurlyBracket ) )
            // InternalTypesParser.g:1644:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Interface this_TClassOrInterfaceHeader_3= ruleTClassOrInterfaceHeader[$current] (otherlv_4= Extends ( (lv_superInterfaceRefs_5_0= ruleParameterizedTypeRefNominal ) ) (otherlv_6= Comma ( (lv_superInterfaceRefs_7_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_8_0= ruleTAnnotation ) )* otherlv_9= LeftCurlyBracket ( (lv_ownedMembers_10_0= ruleTMember ) )* otherlv_11= RightCurlyBracket )
            {
            // InternalTypesParser.g:1644:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Interface this_TClassOrInterfaceHeader_3= ruleTClassOrInterfaceHeader[$current] (otherlv_4= Extends ( (lv_superInterfaceRefs_5_0= ruleParameterizedTypeRefNominal ) ) (otherlv_6= Comma ( (lv_superInterfaceRefs_7_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_8_0= ruleTAnnotation ) )* otherlv_9= LeftCurlyBracket ( (lv_ownedMembers_10_0= ruleTMember ) )* otherlv_11= RightCurlyBracket )
            // InternalTypesParser.g:1645:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Interface this_TClassOrInterfaceHeader_3= ruleTClassOrInterfaceHeader[$current] (otherlv_4= Extends ( (lv_superInterfaceRefs_5_0= ruleParameterizedTypeRefNominal ) ) (otherlv_6= Comma ( (lv_superInterfaceRefs_7_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_8_0= ruleTAnnotation ) )* otherlv_9= LeftCurlyBracket ( (lv_ownedMembers_10_0= ruleTMember ) )* otherlv_11= RightCurlyBracket
            {
            // InternalTypesParser.g:1645:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) )
            // InternalTypesParser.g:1646:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            {
            // InternalTypesParser.g:1646:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            // InternalTypesParser.g:1647:5: lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTInterfaceAccess().getDeclaredTypeAccessModifierTypeAccessModifierEnumRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_36);
            lv_declaredTypeAccessModifier_0_0=ruleTypeAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTInterfaceRule());
              					}
              					set(
              						current,
              						"declaredTypeAccessModifier",
              						lv_declaredTypeAccessModifier_0_0,
              						"org.eclipse.n4js.ts.Types.TypeAccessModifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:1664:3: ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==ProvidedByRuntime) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // InternalTypesParser.g:1665:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    {
                    // InternalTypesParser.g:1665:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    // InternalTypesParser.g:1666:5: lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime
                    {
                    lv_declaredProvidedByRuntime_1_0=(Token)match(input,ProvidedByRuntime,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredProvidedByRuntime_1_0, grammarAccess.getTInterfaceAccess().getDeclaredProvidedByRuntimeProvidedByRuntimeKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTInterfaceRule());
                      					}
                      					setWithLastConsumed(current, "declaredProvidedByRuntime", lv_declaredProvidedByRuntime_1_0 != null, "providedByRuntime");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_2=(Token)match(input,Interface,FOLLOW_31); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getTInterfaceAccess().getInterfaceKeyword_2());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTInterfaceRule());
              			}
              			newCompositeNode(grammarAccess.getTInterfaceAccess().getTClassOrInterfaceHeaderParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_38);
            this_TClassOrInterfaceHeader_3=ruleTClassOrInterfaceHeader(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TClassOrInterfaceHeader_3;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalTypesParser.g:1693:3: (otherlv_4= Extends ( (lv_superInterfaceRefs_5_0= ruleParameterizedTypeRefNominal ) ) (otherlv_6= Comma ( (lv_superInterfaceRefs_7_0= ruleParameterizedTypeRefNominal ) ) )* )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==Extends) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // InternalTypesParser.g:1694:4: otherlv_4= Extends ( (lv_superInterfaceRefs_5_0= ruleParameterizedTypeRefNominal ) ) (otherlv_6= Comma ( (lv_superInterfaceRefs_7_0= ruleParameterizedTypeRefNominal ) ) )*
                    {
                    otherlv_4=(Token)match(input,Extends,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getTInterfaceAccess().getExtendsKeyword_4_0());
                      			
                    }
                    // InternalTypesParser.g:1698:4: ( (lv_superInterfaceRefs_5_0= ruleParameterizedTypeRefNominal ) )
                    // InternalTypesParser.g:1699:5: (lv_superInterfaceRefs_5_0= ruleParameterizedTypeRefNominal )
                    {
                    // InternalTypesParser.g:1699:5: (lv_superInterfaceRefs_5_0= ruleParameterizedTypeRefNominal )
                    // InternalTypesParser.g:1700:6: lv_superInterfaceRefs_5_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTInterfaceAccess().getSuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_4_1_0());
                      					
                    }
                    pushFollow(FOLLOW_39);
                    lv_superInterfaceRefs_5_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTInterfaceRule());
                      						}
                      						add(
                      							current,
                      							"superInterfaceRefs",
                      							lv_superInterfaceRefs_5_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:1717:4: (otherlv_6= Comma ( (lv_superInterfaceRefs_7_0= ruleParameterizedTypeRefNominal ) ) )*
                    loop35:
                    do {
                        int alt35=2;
                        int LA35_0 = input.LA(1);

                        if ( (LA35_0==Comma) ) {
                            alt35=1;
                        }


                        switch (alt35) {
                    	case 1 :
                    	    // InternalTypesParser.g:1718:5: otherlv_6= Comma ( (lv_superInterfaceRefs_7_0= ruleParameterizedTypeRefNominal ) )
                    	    {
                    	    otherlv_6=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_6, grammarAccess.getTInterfaceAccess().getCommaKeyword_4_2_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:1722:5: ( (lv_superInterfaceRefs_7_0= ruleParameterizedTypeRefNominal ) )
                    	    // InternalTypesParser.g:1723:6: (lv_superInterfaceRefs_7_0= ruleParameterizedTypeRefNominal )
                    	    {
                    	    // InternalTypesParser.g:1723:6: (lv_superInterfaceRefs_7_0= ruleParameterizedTypeRefNominal )
                    	    // InternalTypesParser.g:1724:7: lv_superInterfaceRefs_7_0= ruleParameterizedTypeRefNominal
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTInterfaceAccess().getSuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_4_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_39);
                    	    lv_superInterfaceRefs_7_0=ruleParameterizedTypeRefNominal();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTInterfaceRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"superInterfaceRefs",
                    	      								lv_superInterfaceRefs_7_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop35;
                        }
                    } while (true);


                    }
                    break;

            }

            // InternalTypesParser.g:1743:3: ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_8_0= ruleTAnnotation ) )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==CommercialAt) && (synpred4_InternalTypesParser())) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // InternalTypesParser.g:1744:4: ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_8_0= ruleTAnnotation )
            	    {
            	    // InternalTypesParser.g:1753:4: (lv_annotations_8_0= ruleTAnnotation )
            	    // InternalTypesParser.g:1754:5: lv_annotations_8_0= ruleTAnnotation
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getTInterfaceAccess().getAnnotationsTAnnotationParserRuleCall_5_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_34);
            	    lv_annotations_8_0=ruleTAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getTInterfaceRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_8_0,
            	      						"org.eclipse.n4js.ts.Types.TAnnotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);

            otherlv_9=(Token)match(input,LeftCurlyBracket,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getTInterfaceAccess().getLeftCurlyBracketKeyword_6());
              		
            }
            // InternalTypesParser.g:1775:3: ( (lv_ownedMembers_10_0= ruleTMember ) )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==ProtectedInternal||LA38_0==PublicInternal||LA38_0==Protected||(LA38_0>=Private && LA38_0<=Project)||LA38_0==Public) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // InternalTypesParser.g:1776:4: (lv_ownedMembers_10_0= ruleTMember )
            	    {
            	    // InternalTypesParser.g:1776:4: (lv_ownedMembers_10_0= ruleTMember )
            	    // InternalTypesParser.g:1777:5: lv_ownedMembers_10_0= ruleTMember
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getTInterfaceAccess().getOwnedMembersTMemberParserRuleCall_7_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_24);
            	    lv_ownedMembers_10_0=ruleTMember();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getTInterfaceRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembers",
            	      						lv_ownedMembers_10_0,
            	      						"org.eclipse.n4js.ts.Types.TMember");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);

            otherlv_11=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_11, grammarAccess.getTInterfaceAccess().getRightCurlyBracketKeyword_8());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTInterface"


    // $ANTLR start "entryRuleTypeVariable"
    // InternalTypesParser.g:1802:1: entryRuleTypeVariable returns [EObject current=null] : iv_ruleTypeVariable= ruleTypeVariable EOF ;
    public final EObject entryRuleTypeVariable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeVariable = null;


        try {
            // InternalTypesParser.g:1802:53: (iv_ruleTypeVariable= ruleTypeVariable EOF )
            // InternalTypesParser.g:1803:2: iv_ruleTypeVariable= ruleTypeVariable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeVariable=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeVariable"


    // $ANTLR start "ruleTypeVariable"
    // InternalTypesParser.g:1809:1: ruleTypeVariable returns [EObject current=null] : ( ( (lv_name_0_0= RULE_IDENTIFIER ) ) (otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) ) )? ) ;
    public final EObject ruleTypeVariable() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token otherlv_1=null;
        EObject lv_declaredUpperBound_2_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1815:2: ( ( ( (lv_name_0_0= RULE_IDENTIFIER ) ) (otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) ) )? ) )
            // InternalTypesParser.g:1816:2: ( ( (lv_name_0_0= RULE_IDENTIFIER ) ) (otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) ) )? )
            {
            // InternalTypesParser.g:1816:2: ( ( (lv_name_0_0= RULE_IDENTIFIER ) ) (otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) ) )? )
            // InternalTypesParser.g:1817:3: ( (lv_name_0_0= RULE_IDENTIFIER ) ) (otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) ) )?
            {
            // InternalTypesParser.g:1817:3: ( (lv_name_0_0= RULE_IDENTIFIER ) )
            // InternalTypesParser.g:1818:4: (lv_name_0_0= RULE_IDENTIFIER )
            {
            // InternalTypesParser.g:1818:4: (lv_name_0_0= RULE_IDENTIFIER )
            // InternalTypesParser.g:1819:5: lv_name_0_0= RULE_IDENTIFIER
            {
            lv_name_0_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_40); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_0_0, grammarAccess.getTypeVariableAccess().getNameIDENTIFIERTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeVariableRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.IDENTIFIER");
              				
            }

            }


            }

            // InternalTypesParser.g:1835:3: (otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) ) )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==Extends) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // InternalTypesParser.g:1836:4: otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) )
                    {
                    otherlv_1=(Token)match(input,Extends,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getTypeVariableAccess().getExtendsKeyword_1_0());
                      			
                    }
                    // InternalTypesParser.g:1840:4: ( (lv_declaredUpperBound_2_0= ruleTypeRef ) )
                    // InternalTypesParser.g:1841:5: (lv_declaredUpperBound_2_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:1841:5: (lv_declaredUpperBound_2_0= ruleTypeRef )
                    // InternalTypesParser.g:1842:6: lv_declaredUpperBound_2_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundTypeRefParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_2_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTypeVariableRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_2_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeVariable"


    // $ANTLR start "ruleTClassOrInterfaceHeader"
    // InternalTypesParser.g:1865:1: ruleTClassOrInterfaceHeader[EObject in_current] returns [EObject current=in_current] : ( ( (lv_typingStrategy_0_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_1_0= ruleBindingTypesIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= superTypeVariable ) ) (otherlv_4= Comma ( (lv_typeVars_5_0= superTypeVariable ) ) )* otherlv_6= GreaterThanSign )? ) ;
    public final EObject ruleTClassOrInterfaceHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        AntlrDatatypeRuleToken lv_typingStrategy_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject lv_typeVars_3_0 = null;

        EObject lv_typeVars_5_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1871:2: ( ( ( (lv_typingStrategy_0_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_1_0= ruleBindingTypesIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= superTypeVariable ) ) (otherlv_4= Comma ( (lv_typeVars_5_0= superTypeVariable ) ) )* otherlv_6= GreaterThanSign )? ) )
            // InternalTypesParser.g:1872:2: ( ( (lv_typingStrategy_0_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_1_0= ruleBindingTypesIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= superTypeVariable ) ) (otherlv_4= Comma ( (lv_typeVars_5_0= superTypeVariable ) ) )* otherlv_6= GreaterThanSign )? )
            {
            // InternalTypesParser.g:1872:2: ( ( (lv_typingStrategy_0_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_1_0= ruleBindingTypesIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= superTypeVariable ) ) (otherlv_4= Comma ( (lv_typeVars_5_0= superTypeVariable ) ) )* otherlv_6= GreaterThanSign )? )
            // InternalTypesParser.g:1873:3: ( (lv_typingStrategy_0_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_1_0= ruleBindingTypesIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= superTypeVariable ) ) (otherlv_4= Comma ( (lv_typeVars_5_0= superTypeVariable ) ) )* otherlv_6= GreaterThanSign )?
            {
            // InternalTypesParser.g:1873:3: ( (lv_typingStrategy_0_0= ruleTypingStrategyDefSiteOperator ) )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==Tilde) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // InternalTypesParser.g:1874:4: (lv_typingStrategy_0_0= ruleTypingStrategyDefSiteOperator )
                    {
                    // InternalTypesParser.g:1874:4: (lv_typingStrategy_0_0= ruleTypingStrategyDefSiteOperator )
                    // InternalTypesParser.g:1875:5: lv_typingStrategy_0_0= ruleTypingStrategyDefSiteOperator
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTClassOrInterfaceHeaderAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_10);
                    lv_typingStrategy_0_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTClassOrInterfaceHeaderRule());
                      					}
                      					set(
                      						current,
                      						"typingStrategy",
                      						lv_typingStrategy_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1892:3: ( (lv_name_1_0= ruleBindingTypesIdentifier ) )
            // InternalTypesParser.g:1893:4: (lv_name_1_0= ruleBindingTypesIdentifier )
            {
            // InternalTypesParser.g:1893:4: (lv_name_1_0= ruleBindingTypesIdentifier )
            // InternalTypesParser.g:1894:5: lv_name_1_0= ruleBindingTypesIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTClassOrInterfaceHeaderAccess().getNameBindingTypesIdentifierParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_41);
            lv_name_1_0=ruleBindingTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTClassOrInterfaceHeaderRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.eclipse.n4js.ts.Types.BindingTypesIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:1911:3: (otherlv_2= LessThanSign ( (lv_typeVars_3_0= superTypeVariable ) ) (otherlv_4= Comma ( (lv_typeVars_5_0= superTypeVariable ) ) )* otherlv_6= GreaterThanSign )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==LessThanSign) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // InternalTypesParser.g:1912:4: otherlv_2= LessThanSign ( (lv_typeVars_3_0= superTypeVariable ) ) (otherlv_4= Comma ( (lv_typeVars_5_0= superTypeVariable ) ) )* otherlv_6= GreaterThanSign
                    {
                    otherlv_2=(Token)match(input,LessThanSign,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getTClassOrInterfaceHeaderAccess().getLessThanSignKeyword_2_0());
                      			
                    }
                    // InternalTypesParser.g:1916:4: ( (lv_typeVars_3_0= superTypeVariable ) )
                    // InternalTypesParser.g:1917:5: (lv_typeVars_3_0= superTypeVariable )
                    {
                    // InternalTypesParser.g:1917:5: (lv_typeVars_3_0= superTypeVariable )
                    // InternalTypesParser.g:1918:6: lv_typeVars_3_0= superTypeVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTClassOrInterfaceHeaderAccess().getTypeVarsTypeVariableParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_43);
                    lv_typeVars_3_0=superTypeVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTClassOrInterfaceHeaderRule());
                      						}
                      						add(
                      							current,
                      							"typeVars",
                      							lv_typeVars_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:1935:4: (otherlv_4= Comma ( (lv_typeVars_5_0= superTypeVariable ) ) )*
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);

                        if ( (LA41_0==Comma) ) {
                            alt41=1;
                        }


                        switch (alt41) {
                    	case 1 :
                    	    // InternalTypesParser.g:1936:5: otherlv_4= Comma ( (lv_typeVars_5_0= superTypeVariable ) )
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_42); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getTClassOrInterfaceHeaderAccess().getCommaKeyword_2_2_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:1940:5: ( (lv_typeVars_5_0= superTypeVariable ) )
                    	    // InternalTypesParser.g:1941:6: (lv_typeVars_5_0= superTypeVariable )
                    	    {
                    	    // InternalTypesParser.g:1941:6: (lv_typeVars_5_0= superTypeVariable )
                    	    // InternalTypesParser.g:1942:7: lv_typeVars_5_0= superTypeVariable
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTClassOrInterfaceHeaderAccess().getTypeVarsTypeVariableParserRuleCall_2_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_43);
                    	    lv_typeVars_5_0=superTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTClassOrInterfaceHeaderRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeVars",
                    	      								lv_typeVars_5_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop41;
                        }
                    } while (true);

                    otherlv_6=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getTClassOrInterfaceHeaderAccess().getGreaterThanSignKeyword_2_3());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTClassOrInterfaceHeader"


    // $ANTLR start "entryRuleCallableCtor"
    // InternalTypesParser.g:1969:1: entryRuleCallableCtor returns [EObject current=null] : iv_ruleCallableCtor= ruleCallableCtor EOF ;
    public final EObject entryRuleCallableCtor() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCallableCtor = null;


        try {
            // InternalTypesParser.g:1969:53: (iv_ruleCallableCtor= ruleCallableCtor EOF )
            // InternalTypesParser.g:1970:2: iv_ruleCallableCtor= ruleCallableCtor EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCallableCtorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCallableCtor=ruleCallableCtor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCallableCtor; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCallableCtor"


    // $ANTLR start "ruleCallableCtor"
    // InternalTypesParser.g:1976:1: ruleCallableCtor returns [EObject current=null] : ( () this_TFormalParameters_1= ruleTFormalParameters[$current] (this_ColonSepReturnTypeRef_2= ruleColonSepReturnTypeRef[$current] )? (otherlv_3= Semicolon )? ) ;
    public final EObject ruleCallableCtor() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        EObject this_TFormalParameters_1 = null;

        EObject this_ColonSepReturnTypeRef_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1982:2: ( ( () this_TFormalParameters_1= ruleTFormalParameters[$current] (this_ColonSepReturnTypeRef_2= ruleColonSepReturnTypeRef[$current] )? (otherlv_3= Semicolon )? ) )
            // InternalTypesParser.g:1983:2: ( () this_TFormalParameters_1= ruleTFormalParameters[$current] (this_ColonSepReturnTypeRef_2= ruleColonSepReturnTypeRef[$current] )? (otherlv_3= Semicolon )? )
            {
            // InternalTypesParser.g:1983:2: ( () this_TFormalParameters_1= ruleTFormalParameters[$current] (this_ColonSepReturnTypeRef_2= ruleColonSepReturnTypeRef[$current] )? (otherlv_3= Semicolon )? )
            // InternalTypesParser.g:1984:3: () this_TFormalParameters_1= ruleTFormalParameters[$current] (this_ColonSepReturnTypeRef_2= ruleColonSepReturnTypeRef[$current] )? (otherlv_3= Semicolon )?
            {
            // InternalTypesParser.g:1984:3: ()
            // InternalTypesParser.g:1985:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCallableCtorAccess().getTMethodAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getCallableCtorRule());
              			}
              			newCompositeNode(grammarAccess.getCallableCtorAccess().getTFormalParametersParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_44);
            this_TFormalParameters_1=ruleTFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TFormalParameters_1;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalTypesParser.g:2002:3: (this_ColonSepReturnTypeRef_2= ruleColonSepReturnTypeRef[$current] )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==Colon) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // InternalTypesParser.g:2003:4: this_ColonSepReturnTypeRef_2= ruleColonSepReturnTypeRef[$current]
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getCallableCtorRule());
                      				}
                      				newCompositeNode(grammarAccess.getCallableCtorAccess().getColonSepReturnTypeRefParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_45);
                    this_ColonSepReturnTypeRef_2=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:2015:3: (otherlv_3= Semicolon )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==Semicolon) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // InternalTypesParser.g:2016:4: otherlv_3= Semicolon
                    {
                    otherlv_3=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getCallableCtorAccess().getSemicolonKeyword_3());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCallableCtor"


    // $ANTLR start "ruleTFormalParameters"
    // InternalTypesParser.g:2026:1: ruleTFormalParameters[EObject in_current] returns [EObject current=in_current] : (otherlv_0= LeftParenthesis ( ( (lv_fpars_1_0= ruleTFormalParameter ) ) (otherlv_2= Comma ( (lv_fpars_3_0= ruleTFormalParameter ) ) )* )? otherlv_4= RightParenthesis ) ;
    public final EObject ruleTFormalParameters(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_fpars_1_0 = null;

        EObject lv_fpars_3_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:2032:2: ( (otherlv_0= LeftParenthesis ( ( (lv_fpars_1_0= ruleTFormalParameter ) ) (otherlv_2= Comma ( (lv_fpars_3_0= ruleTFormalParameter ) ) )* )? otherlv_4= RightParenthesis ) )
            // InternalTypesParser.g:2033:2: (otherlv_0= LeftParenthesis ( ( (lv_fpars_1_0= ruleTFormalParameter ) ) (otherlv_2= Comma ( (lv_fpars_3_0= ruleTFormalParameter ) ) )* )? otherlv_4= RightParenthesis )
            {
            // InternalTypesParser.g:2033:2: (otherlv_0= LeftParenthesis ( ( (lv_fpars_1_0= ruleTFormalParameter ) ) (otherlv_2= Comma ( (lv_fpars_3_0= ruleTFormalParameter ) ) )* )? otherlv_4= RightParenthesis )
            // InternalTypesParser.g:2034:3: otherlv_0= LeftParenthesis ( ( (lv_fpars_1_0= ruleTFormalParameter ) ) (otherlv_2= Comma ( (lv_fpars_3_0= ruleTFormalParameter ) ) )* )? otherlv_4= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTFormalParametersAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalTypesParser.g:2038:3: ( ( (lv_fpars_1_0= ruleTFormalParameter ) ) (otherlv_2= Comma ( (lv_fpars_3_0= ruleTFormalParameter ) ) )* )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( ((LA46_0>=Intersection && LA46_0<=Constructor)||LA46_0==Implements||(LA46_0>=Promisify && LA46_0<=Interface)||LA46_0==Protected||LA46_0==Abstract||LA46_0==External||(LA46_0>=Private && LA46_0<=Project)||LA46_0==Public||LA46_0==Static||LA46_0==Target||(LA46_0>=Async && LA46_0<=Await)||LA46_0==Union||(LA46_0>=Yield && LA46_0<=This)||LA46_0==From||LA46_0==Type||LA46_0==FullStopFullStopFullStop||(LA46_0>=Get && LA46_0<=Let)||(LA46_0>=Out && LA46_0<=Set)||LA46_0==As||LA46_0==Of||LA46_0==RULE_IDENTIFIER) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // InternalTypesParser.g:2039:4: ( (lv_fpars_1_0= ruleTFormalParameter ) ) (otherlv_2= Comma ( (lv_fpars_3_0= ruleTFormalParameter ) ) )*
                    {
                    // InternalTypesParser.g:2039:4: ( (lv_fpars_1_0= ruleTFormalParameter ) )
                    // InternalTypesParser.g:2040:5: (lv_fpars_1_0= ruleTFormalParameter )
                    {
                    // InternalTypesParser.g:2040:5: (lv_fpars_1_0= ruleTFormalParameter )
                    // InternalTypesParser.g:2041:6: lv_fpars_1_0= ruleTFormalParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTFormalParametersAccess().getFparsTFormalParameterParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_7);
                    lv_fpars_1_0=ruleTFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTFormalParametersRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TFormalParameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:2058:4: (otherlv_2= Comma ( (lv_fpars_3_0= ruleTFormalParameter ) ) )*
                    loop45:
                    do {
                        int alt45=2;
                        int LA45_0 = input.LA(1);

                        if ( (LA45_0==Comma) ) {
                            alt45=1;
                        }


                        switch (alt45) {
                    	case 1 :
                    	    // InternalTypesParser.g:2059:5: otherlv_2= Comma ( (lv_fpars_3_0= ruleTFormalParameter ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_47); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getTFormalParametersAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:2063:5: ( (lv_fpars_3_0= ruleTFormalParameter ) )
                    	    // InternalTypesParser.g:2064:6: (lv_fpars_3_0= ruleTFormalParameter )
                    	    {
                    	    // InternalTypesParser.g:2064:6: (lv_fpars_3_0= ruleTFormalParameter )
                    	    // InternalTypesParser.g:2065:7: lv_fpars_3_0= ruleTFormalParameter
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTFormalParametersAccess().getFparsTFormalParameterParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_7);
                    	    lv_fpars_3_0=ruleTFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTFormalParametersRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_3_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.TFormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTFormalParametersAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTFormalParameters"


    // $ANTLR start "entryRuleTMember"
    // InternalTypesParser.g:2092:1: entryRuleTMember returns [EObject current=null] : iv_ruleTMember= ruleTMember EOF ;
    public final EObject entryRuleTMember() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTMember = null;


        try {
            // InternalTypesParser.g:2092:48: (iv_ruleTMember= ruleTMember EOF )
            // InternalTypesParser.g:2093:2: iv_ruleTMember= ruleTMember EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTMemberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTMember=ruleTMember();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTMember; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTMember"


    // $ANTLR start "ruleTMember"
    // InternalTypesParser.g:2099:1: ruleTMember returns [EObject current=null] : ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod ) | this_TField_3= ruleTField ) ;
    public final EObject ruleTMember() throws RecognitionException {
        EObject current = null;

        EObject this_TGetter_0 = null;

        EObject this_TSetter_1 = null;

        EObject this_TMethod_2 = null;

        EObject this_TField_3 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:2105:2: ( ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod ) | this_TField_3= ruleTField ) )
            // InternalTypesParser.g:2106:2: ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod ) | this_TField_3= ruleTField )
            {
            // InternalTypesParser.g:2106:2: ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod ) | this_TField_3= ruleTField )
            int alt47=4;
            alt47 = dfa47.predict(input);
            switch (alt47) {
                case 1 :
                    // InternalTypesParser.g:2107:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter )
                    {
                    // InternalTypesParser.g:2107:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter )
                    // InternalTypesParser.g:2108:4: ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTMemberAccess().getTGetterParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TGetter_0=ruleTGetter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TGetter_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2153:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter )
                    {
                    // InternalTypesParser.g:2153:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter )
                    // InternalTypesParser.g:2154:4: ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTMemberAccess().getTSetterParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TSetter_1=ruleTSetter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TSetter_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:2199:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod )
                    {
                    // InternalTypesParser.g:2199:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod )
                    // InternalTypesParser.g:2200:4: ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTMemberAccess().getTMethodParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TMethod_2=ruleTMethod();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TMethod_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:2253:3: this_TField_3= ruleTField
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTMemberAccess().getTFieldParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TField_3=ruleTField();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TField_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTMember"


    // $ANTLR start "entryRuleTMethod"
    // InternalTypesParser.g:2265:1: entryRuleTMethod returns [EObject current=null] : iv_ruleTMethod= ruleTMethod EOF ;
    public final EObject entryRuleTMethod() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTMethod = null;


        try {
            // InternalTypesParser.g:2265:48: (iv_ruleTMethod= ruleTMethod EOF )
            // InternalTypesParser.g:2266:2: iv_ruleTMethod= ruleTMethod EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTMethodRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTMethod=ruleTMethod();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTMethod; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTMethod"


    // $ANTLR start "ruleTMethod"
    // InternalTypesParser.g:2272:1: ruleTMethod returns [EObject current=null] : ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? ( (lv_declaredAsync_3_0= Async ) )? (this_TypeVariables_4= ruleTypeVariables[$current] )? ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ( ( LeftParenthesis )=>this_TFormalParameters_7= ruleTFormalParameters[$current] ) ) ) this_ColonSepReturnTypeRef_8= ruleColonSepReturnTypeRef[$current] (otherlv_9= Semicolon )? ) ;
    public final EObject ruleTMethod() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAbstract_1_0=null;
        Token lv_declaredStatic_2_0=null;
        Token lv_declaredAsync_3_0=null;
        Token otherlv_9=null;
        Enumerator lv_declaredMemberAccessModifier_0_0 = null;

        EObject this_TypeVariables_4 = null;

        AntlrDatatypeRuleToken lv_name_5_0 = null;

        AntlrDatatypeRuleToken lv_name_6_0 = null;

        EObject this_TFormalParameters_7 = null;

        EObject this_ColonSepReturnTypeRef_8 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:2278:2: ( ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? ( (lv_declaredAsync_3_0= Async ) )? (this_TypeVariables_4= ruleTypeVariables[$current] )? ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ( ( LeftParenthesis )=>this_TFormalParameters_7= ruleTFormalParameters[$current] ) ) ) this_ColonSepReturnTypeRef_8= ruleColonSepReturnTypeRef[$current] (otherlv_9= Semicolon )? ) )
            // InternalTypesParser.g:2279:2: ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? ( (lv_declaredAsync_3_0= Async ) )? (this_TypeVariables_4= ruleTypeVariables[$current] )? ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ( ( LeftParenthesis )=>this_TFormalParameters_7= ruleTFormalParameters[$current] ) ) ) this_ColonSepReturnTypeRef_8= ruleColonSepReturnTypeRef[$current] (otherlv_9= Semicolon )? )
            {
            // InternalTypesParser.g:2279:2: ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? ( (lv_declaredAsync_3_0= Async ) )? (this_TypeVariables_4= ruleTypeVariables[$current] )? ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ( ( LeftParenthesis )=>this_TFormalParameters_7= ruleTFormalParameters[$current] ) ) ) this_ColonSepReturnTypeRef_8= ruleColonSepReturnTypeRef[$current] (otherlv_9= Semicolon )? )
            // InternalTypesParser.g:2280:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? ( (lv_declaredAsync_3_0= Async ) )? (this_TypeVariables_4= ruleTypeVariables[$current] )? ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ( ( LeftParenthesis )=>this_TFormalParameters_7= ruleTFormalParameters[$current] ) ) ) this_ColonSepReturnTypeRef_8= ruleColonSepReturnTypeRef[$current] (otherlv_9= Semicolon )?
            {
            // InternalTypesParser.g:2280:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? ( (lv_declaredAsync_3_0= Async ) )? (this_TypeVariables_4= ruleTypeVariables[$current] )? ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ( ( LeftParenthesis )=>this_TFormalParameters_7= ruleTFormalParameters[$current] ) ) )
            // InternalTypesParser.g:2281:4: ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? ( (lv_declaredAsync_3_0= Async ) )? (this_TypeVariables_4= ruleTypeVariables[$current] )? ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ( ( LeftParenthesis )=>this_TFormalParameters_7= ruleTFormalParameters[$current] ) )
            {
            // InternalTypesParser.g:2324:4: ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? ( (lv_declaredAsync_3_0= Async ) )? (this_TypeVariables_4= ruleTypeVariables[$current] )? ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ( ( LeftParenthesis )=>this_TFormalParameters_7= ruleTFormalParameters[$current] ) )
            // InternalTypesParser.g:2325:5: ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? ( (lv_declaredAsync_3_0= Async ) )? (this_TypeVariables_4= ruleTypeVariables[$current] )? ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ( ( LeftParenthesis )=>this_TFormalParameters_7= ruleTFormalParameters[$current] )
            {
            // InternalTypesParser.g:2325:5: ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) )
            // InternalTypesParser.g:2326:6: (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier )
            {
            // InternalTypesParser.g:2326:6: (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier )
            // InternalTypesParser.g:2327:7: lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTMethodAccess().getDeclaredMemberAccessModifierMemberAccessModifierEnumRuleCall_0_0_0_0());
              						
            }
            pushFollow(FOLLOW_48);
            lv_declaredMemberAccessModifier_0_0=ruleMemberAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTMethodRule());
              							}
              							set(
              								current,
              								"declaredMemberAccessModifier",
              								lv_declaredMemberAccessModifier_0_0,
              								"org.eclipse.n4js.ts.Types.MemberAccessModifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            // InternalTypesParser.g:2344:5: ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )?
            int alt48=3;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==Abstract) ) {
                int LA48_1 = input.LA(2);

                if ( (LA48_1==AssignmnentCompatible||(LA48_1>=AutoboxedType && LA48_1<=Finally)||(LA48_1>=Private && LA48_1<=False)||(LA48_1>=Super && LA48_1<=With)||(LA48_1>=Any && LA48_1<=Var)||(LA48_1>=As && LA48_1<=Of)||LA48_1==LessThanSign||LA48_1==LeftSquareBracket||LA48_1==RULE_IDENTIFIER) ) {
                    alt48=1;
                }
            }
            else if ( (LA48_0==Static) ) {
                int LA48_2 = input.LA(2);

                if ( (LA48_2==AssignmnentCompatible||(LA48_2>=AutoboxedType && LA48_2<=Finally)||(LA48_2>=Private && LA48_2<=False)||(LA48_2>=Super && LA48_2<=With)||(LA48_2>=Any && LA48_2<=Var)||(LA48_2>=As && LA48_2<=Of)||LA48_2==LessThanSign||LA48_2==LeftSquareBracket||LA48_2==RULE_IDENTIFIER) ) {
                    alt48=2;
                }
            }
            switch (alt48) {
                case 1 :
                    // InternalTypesParser.g:2345:6: ( (lv_declaredAbstract_1_0= Abstract ) )
                    {
                    // InternalTypesParser.g:2345:6: ( (lv_declaredAbstract_1_0= Abstract ) )
                    // InternalTypesParser.g:2346:7: (lv_declaredAbstract_1_0= Abstract )
                    {
                    // InternalTypesParser.g:2346:7: (lv_declaredAbstract_1_0= Abstract )
                    // InternalTypesParser.g:2347:8: lv_declaredAbstract_1_0= Abstract
                    {
                    lv_declaredAbstract_1_0=(Token)match(input,Abstract,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_declaredAbstract_1_0, grammarAccess.getTMethodAccess().getDeclaredAbstractAbstractKeyword_0_0_1_0_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getTMethodRule());
                      								}
                      								setWithLastConsumed(current, "declaredAbstract", lv_declaredAbstract_1_0 != null, "abstract");
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2360:6: ( (lv_declaredStatic_2_0= Static ) )
                    {
                    // InternalTypesParser.g:2360:6: ( (lv_declaredStatic_2_0= Static ) )
                    // InternalTypesParser.g:2361:7: (lv_declaredStatic_2_0= Static )
                    {
                    // InternalTypesParser.g:2361:7: (lv_declaredStatic_2_0= Static )
                    // InternalTypesParser.g:2362:8: lv_declaredStatic_2_0= Static
                    {
                    lv_declaredStatic_2_0=(Token)match(input,Static,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_declaredStatic_2_0, grammarAccess.getTMethodAccess().getDeclaredStaticStaticKeyword_0_0_1_1_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getTMethodRule());
                      								}
                      								setWithLastConsumed(current, "declaredStatic", lv_declaredStatic_2_0 != null, "static");
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:2375:5: ( (lv_declaredAsync_3_0= Async ) )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==Async) ) {
                int LA49_1 = input.LA(2);

                if ( (LA49_1==AssignmnentCompatible||(LA49_1>=AutoboxedType && LA49_1<=Finally)||(LA49_1>=Private && LA49_1<=False)||(LA49_1>=Super && LA49_1<=With)||(LA49_1>=Any && LA49_1<=Var)||(LA49_1>=As && LA49_1<=Of)||LA49_1==LessThanSign||LA49_1==LeftSquareBracket||LA49_1==RULE_IDENTIFIER) ) {
                    alt49=1;
                }
            }
            switch (alt49) {
                case 1 :
                    // InternalTypesParser.g:2376:6: (lv_declaredAsync_3_0= Async )
                    {
                    // InternalTypesParser.g:2376:6: (lv_declaredAsync_3_0= Async )
                    // InternalTypesParser.g:2377:7: lv_declaredAsync_3_0= Async
                    {
                    lv_declaredAsync_3_0=(Token)match(input,Async,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_declaredAsync_3_0, grammarAccess.getTMethodAccess().getDeclaredAsyncAsyncKeyword_0_0_2_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getTMethodRule());
                      							}
                      							setWithLastConsumed(current, "declaredAsync", lv_declaredAsync_3_0 != null, "async");
                      						
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:2389:5: (this_TypeVariables_4= ruleTypeVariables[$current] )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==LessThanSign) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // InternalTypesParser.g:2390:6: this_TypeVariables_4= ruleTypeVariables[$current]
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTMethodRule());
                      						}
                      						newCompositeNode(grammarAccess.getTMethodAccess().getTypeVariablesParserRuleCall_0_0_3());
                      					
                    }
                    pushFollow(FOLLOW_48);
                    this_TypeVariables_4=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_TypeVariables_4;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:2402:5: ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==AssignmnentCompatible||(LA51_0>=AutoboxedType && LA51_0<=Finally)||(LA51_0>=Private && LA51_0<=False)||(LA51_0>=Super && LA51_0<=With)||(LA51_0>=Any && LA51_0<=Var)||(LA51_0>=As && LA51_0<=Of)||LA51_0==RULE_IDENTIFIER) ) {
                alt51=1;
            }
            else if ( (LA51_0==LeftSquareBracket) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // InternalTypesParser.g:2403:6: ( (lv_name_5_0= ruleTypesIdentifier ) )
                    {
                    // InternalTypesParser.g:2403:6: ( (lv_name_5_0= ruleTypesIdentifier ) )
                    // InternalTypesParser.g:2404:7: (lv_name_5_0= ruleTypesIdentifier )
                    {
                    // InternalTypesParser.g:2404:7: (lv_name_5_0= ruleTypesIdentifier )
                    // InternalTypesParser.g:2405:8: lv_name_5_0= ruleTypesIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTMethodAccess().getNameTypesIdentifierParserRuleCall_0_0_4_0_0());
                      							
                    }
                    pushFollow(FOLLOW_49);
                    lv_name_5_0=ruleTypesIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTMethodRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_5_0,
                      									"org.eclipse.n4js.ts.Types.TypesIdentifier");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2423:6: ( (lv_name_6_0= ruleTypesComputedPropertyName ) )
                    {
                    // InternalTypesParser.g:2423:6: ( (lv_name_6_0= ruleTypesComputedPropertyName ) )
                    // InternalTypesParser.g:2424:7: (lv_name_6_0= ruleTypesComputedPropertyName )
                    {
                    // InternalTypesParser.g:2424:7: (lv_name_6_0= ruleTypesComputedPropertyName )
                    // InternalTypesParser.g:2425:8: lv_name_6_0= ruleTypesComputedPropertyName
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTMethodAccess().getNameTypesComputedPropertyNameParserRuleCall_0_0_4_1_0());
                      							
                    }
                    pushFollow(FOLLOW_49);
                    lv_name_6_0=ruleTypesComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTMethodRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_6_0,
                      									"org.eclipse.n4js.ts.Types.TypesComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:2443:5: ( ( LeftParenthesis )=>this_TFormalParameters_7= ruleTFormalParameters[$current] )
            // InternalTypesParser.g:2444:6: ( LeftParenthesis )=>this_TFormalParameters_7= ruleTFormalParameters[$current]
            {
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElement(grammarAccess.getTMethodRule());
              						}
              						newCompositeNode(grammarAccess.getTMethodAccess().getTFormalParametersParserRuleCall_0_0_5());
              					
            }
            pushFollow(FOLLOW_50);
            this_TFormalParameters_7=ruleTFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						current = this_TFormalParameters_7;
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTMethodRule());
              			}
              			newCompositeNode(grammarAccess.getTMethodAccess().getColonSepReturnTypeRefParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_45);
            this_ColonSepReturnTypeRef_8=ruleColonSepReturnTypeRef(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ColonSepReturnTypeRef_8;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalTypesParser.g:2470:3: (otherlv_9= Semicolon )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==Semicolon) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // InternalTypesParser.g:2471:4: otherlv_9= Semicolon
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getTMethodAccess().getSemicolonKeyword_2());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTMethod"


    // $ANTLR start "entryRuleTField"
    // InternalTypesParser.g:2480:1: entryRuleTField returns [EObject current=null] : iv_ruleTField= ruleTField EOF ;
    public final EObject entryRuleTField() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTField = null;


        try {
            // InternalTypesParser.g:2480:47: (iv_ruleTField= ruleTField EOF )
            // InternalTypesParser.g:2481:2: iv_ruleTField= ruleTField EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTField=ruleTField();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTField; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTField"


    // $ANTLR start "ruleTField"
    // InternalTypesParser.g:2487:1: ruleTField returns [EObject current=null] : ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_const_2_0= Const ) ) | ( (lv_declaredFinal_3_0= Final ) ) )? ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ( (lv_optional_6_0= QuestionMark ) )? this_ColonSepTypeRef_7= ruleColonSepTypeRef[$current] (otherlv_8= Semicolon )? ) ;
    public final EObject ruleTField() throws RecognitionException {
        EObject current = null;

        Token lv_declaredStatic_1_0=null;
        Token lv_const_2_0=null;
        Token lv_declaredFinal_3_0=null;
        Token lv_optional_6_0=null;
        Token otherlv_8=null;
        Enumerator lv_declaredMemberAccessModifier_0_0 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        AntlrDatatypeRuleToken lv_name_5_0 = null;

        EObject this_ColonSepTypeRef_7 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:2493:2: ( ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_const_2_0= Const ) ) | ( (lv_declaredFinal_3_0= Final ) ) )? ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ( (lv_optional_6_0= QuestionMark ) )? this_ColonSepTypeRef_7= ruleColonSepTypeRef[$current] (otherlv_8= Semicolon )? ) )
            // InternalTypesParser.g:2494:2: ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_const_2_0= Const ) ) | ( (lv_declaredFinal_3_0= Final ) ) )? ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ( (lv_optional_6_0= QuestionMark ) )? this_ColonSepTypeRef_7= ruleColonSepTypeRef[$current] (otherlv_8= Semicolon )? )
            {
            // InternalTypesParser.g:2494:2: ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_const_2_0= Const ) ) | ( (lv_declaredFinal_3_0= Final ) ) )? ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ( (lv_optional_6_0= QuestionMark ) )? this_ColonSepTypeRef_7= ruleColonSepTypeRef[$current] (otherlv_8= Semicolon )? )
            // InternalTypesParser.g:2495:3: ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_const_2_0= Const ) ) | ( (lv_declaredFinal_3_0= Final ) ) )? ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ( (lv_optional_6_0= QuestionMark ) )? this_ColonSepTypeRef_7= ruleColonSepTypeRef[$current] (otherlv_8= Semicolon )?
            {
            // InternalTypesParser.g:2495:3: ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) )
            // InternalTypesParser.g:2496:4: (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier )
            {
            // InternalTypesParser.g:2496:4: (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier )
            // InternalTypesParser.g:2497:5: lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTFieldAccess().getDeclaredMemberAccessModifierMemberAccessModifierEnumRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_51);
            lv_declaredMemberAccessModifier_0_0=ruleMemberAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTFieldRule());
              					}
              					set(
              						current,
              						"declaredMemberAccessModifier",
              						lv_declaredMemberAccessModifier_0_0,
              						"org.eclipse.n4js.ts.Types.MemberAccessModifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:2514:3: ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_const_2_0= Const ) ) | ( (lv_declaredFinal_3_0= Final ) ) )?
            int alt53=4;
            switch ( input.LA(1) ) {
                case Static:
                    {
                    int LA53_1 = input.LA(2);

                    if ( (LA53_1==AssignmnentCompatible||(LA53_1>=AutoboxedType && LA53_1<=Finally)||(LA53_1>=Private && LA53_1<=False)||(LA53_1>=Super && LA53_1<=With)||(LA53_1>=Any && LA53_1<=Var)||(LA53_1>=As && LA53_1<=Of)||LA53_1==LeftSquareBracket||LA53_1==RULE_IDENTIFIER) ) {
                        alt53=1;
                    }
                    }
                    break;
                case Const:
                    {
                    int LA53_2 = input.LA(2);

                    if ( (LA53_2==AssignmnentCompatible||(LA53_2>=AutoboxedType && LA53_2<=Finally)||(LA53_2>=Private && LA53_2<=False)||(LA53_2>=Super && LA53_2<=With)||(LA53_2>=Any && LA53_2<=Var)||(LA53_2>=As && LA53_2<=Of)||LA53_2==LeftSquareBracket||LA53_2==RULE_IDENTIFIER) ) {
                        alt53=2;
                    }
                    }
                    break;
                case Final:
                    {
                    alt53=3;
                    }
                    break;
            }

            switch (alt53) {
                case 1 :
                    // InternalTypesParser.g:2515:4: ( (lv_declaredStatic_1_0= Static ) )
                    {
                    // InternalTypesParser.g:2515:4: ( (lv_declaredStatic_1_0= Static ) )
                    // InternalTypesParser.g:2516:5: (lv_declaredStatic_1_0= Static )
                    {
                    // InternalTypesParser.g:2516:5: (lv_declaredStatic_1_0= Static )
                    // InternalTypesParser.g:2517:6: lv_declaredStatic_1_0= Static
                    {
                    lv_declaredStatic_1_0=(Token)match(input,Static,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_declaredStatic_1_0, grammarAccess.getTFieldAccess().getDeclaredStaticStaticKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTFieldRule());
                      						}
                      						setWithLastConsumed(current, "declaredStatic", lv_declaredStatic_1_0 != null, "static");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2530:4: ( (lv_const_2_0= Const ) )
                    {
                    // InternalTypesParser.g:2530:4: ( (lv_const_2_0= Const ) )
                    // InternalTypesParser.g:2531:5: (lv_const_2_0= Const )
                    {
                    // InternalTypesParser.g:2531:5: (lv_const_2_0= Const )
                    // InternalTypesParser.g:2532:6: lv_const_2_0= Const
                    {
                    lv_const_2_0=(Token)match(input,Const,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_const_2_0, grammarAccess.getTFieldAccess().getConstConstKeyword_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTFieldRule());
                      						}
                      						setWithLastConsumed(current, "const", lv_const_2_0 != null, "const");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:2545:4: ( (lv_declaredFinal_3_0= Final ) )
                    {
                    // InternalTypesParser.g:2545:4: ( (lv_declaredFinal_3_0= Final ) )
                    // InternalTypesParser.g:2546:5: (lv_declaredFinal_3_0= Final )
                    {
                    // InternalTypesParser.g:2546:5: (lv_declaredFinal_3_0= Final )
                    // InternalTypesParser.g:2547:6: lv_declaredFinal_3_0= Final
                    {
                    lv_declaredFinal_3_0=(Token)match(input,Final,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_declaredFinal_3_0, grammarAccess.getTFieldAccess().getDeclaredFinalFinalKeyword_1_2_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTFieldRule());
                      						}
                      						setWithLastConsumed(current, "declaredFinal", lv_declaredFinal_3_0 != null, "final");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:2560:3: ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==AssignmnentCompatible||(LA54_0>=AutoboxedType && LA54_0<=Finally)||(LA54_0>=Private && LA54_0<=False)||(LA54_0>=Super && LA54_0<=With)||(LA54_0>=Any && LA54_0<=Var)||(LA54_0>=As && LA54_0<=Of)||LA54_0==RULE_IDENTIFIER) ) {
                alt54=1;
            }
            else if ( (LA54_0==LeftSquareBracket) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;
            }
            switch (alt54) {
                case 1 :
                    // InternalTypesParser.g:2561:4: ( (lv_name_4_0= ruleTypesIdentifier ) )
                    {
                    // InternalTypesParser.g:2561:4: ( (lv_name_4_0= ruleTypesIdentifier ) )
                    // InternalTypesParser.g:2562:5: (lv_name_4_0= ruleTypesIdentifier )
                    {
                    // InternalTypesParser.g:2562:5: (lv_name_4_0= ruleTypesIdentifier )
                    // InternalTypesParser.g:2563:6: lv_name_4_0= ruleTypesIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTFieldAccess().getNameTypesIdentifierParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_52);
                    lv_name_4_0=ruleTypesIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTFieldRule());
                      						}
                      						set(
                      							current,
                      							"name",
                      							lv_name_4_0,
                      							"org.eclipse.n4js.ts.Types.TypesIdentifier");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2581:4: ( (lv_name_5_0= ruleTypesComputedPropertyName ) )
                    {
                    // InternalTypesParser.g:2581:4: ( (lv_name_5_0= ruleTypesComputedPropertyName ) )
                    // InternalTypesParser.g:2582:5: (lv_name_5_0= ruleTypesComputedPropertyName )
                    {
                    // InternalTypesParser.g:2582:5: (lv_name_5_0= ruleTypesComputedPropertyName )
                    // InternalTypesParser.g:2583:6: lv_name_5_0= ruleTypesComputedPropertyName
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTFieldAccess().getNameTypesComputedPropertyNameParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_52);
                    lv_name_5_0=ruleTypesComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTFieldRule());
                      						}
                      						set(
                      							current,
                      							"name",
                      							lv_name_5_0,
                      							"org.eclipse.n4js.ts.Types.TypesComputedPropertyName");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:2601:3: ( (lv_optional_6_0= QuestionMark ) )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==QuestionMark) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // InternalTypesParser.g:2602:4: (lv_optional_6_0= QuestionMark )
                    {
                    // InternalTypesParser.g:2602:4: (lv_optional_6_0= QuestionMark )
                    // InternalTypesParser.g:2603:5: lv_optional_6_0= QuestionMark
                    {
                    lv_optional_6_0=(Token)match(input,QuestionMark,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_6_0, grammarAccess.getTFieldAccess().getOptionalQuestionMarkKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTFieldRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_6_0 != null, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTFieldRule());
              			}
              			newCompositeNode(grammarAccess.getTFieldAccess().getColonSepTypeRefParserRuleCall_4());
              		
            }
            pushFollow(FOLLOW_45);
            this_ColonSepTypeRef_7=ruleColonSepTypeRef(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ColonSepTypeRef_7;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalTypesParser.g:2626:3: (otherlv_8= Semicolon )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==Semicolon) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // InternalTypesParser.g:2627:4: otherlv_8= Semicolon
                    {
                    otherlv_8=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getTFieldAccess().getSemicolonKeyword_5());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTField"


    // $ANTLR start "entryRuleTGetter"
    // InternalTypesParser.g:2636:1: entryRuleTGetter returns [EObject current=null] : iv_ruleTGetter= ruleTGetter EOF ;
    public final EObject entryRuleTGetter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTGetter = null;


        try {
            // InternalTypesParser.g:2636:48: (iv_ruleTGetter= ruleTGetter EOF )
            // InternalTypesParser.g:2637:2: iv_ruleTGetter= ruleTGetter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTGetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTGetter=ruleTGetter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTGetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTGetter"


    // $ANTLR start "ruleTGetter"
    // InternalTypesParser.g:2643:1: ruleTGetter returns [EObject current=null] : ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Get ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= LeftParenthesis otherlv_8= RightParenthesis this_ColonSepTypeRef_9= ruleColonSepTypeRef[$current] ) ;
    public final EObject ruleTGetter() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAbstract_1_0=null;
        Token lv_declaredStatic_2_0=null;
        Token otherlv_3=null;
        Token lv_optional_6_0=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Enumerator lv_declaredMemberAccessModifier_0_0 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        AntlrDatatypeRuleToken lv_name_5_0 = null;

        EObject this_ColonSepTypeRef_9 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:2649:2: ( ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Get ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= LeftParenthesis otherlv_8= RightParenthesis this_ColonSepTypeRef_9= ruleColonSepTypeRef[$current] ) )
            // InternalTypesParser.g:2650:2: ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Get ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= LeftParenthesis otherlv_8= RightParenthesis this_ColonSepTypeRef_9= ruleColonSepTypeRef[$current] )
            {
            // InternalTypesParser.g:2650:2: ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Get ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= LeftParenthesis otherlv_8= RightParenthesis this_ColonSepTypeRef_9= ruleColonSepTypeRef[$current] )
            // InternalTypesParser.g:2651:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Get ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= LeftParenthesis otherlv_8= RightParenthesis this_ColonSepTypeRef_9= ruleColonSepTypeRef[$current]
            {
            // InternalTypesParser.g:2651:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Get ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ) )
            // InternalTypesParser.g:2652:4: ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Get ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) )
            {
            // InternalTypesParser.g:2687:4: ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Get ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) )
            // InternalTypesParser.g:2688:5: ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Get ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) )
            {
            // InternalTypesParser.g:2688:5: ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) )
            // InternalTypesParser.g:2689:6: (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier )
            {
            // InternalTypesParser.g:2689:6: (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier )
            // InternalTypesParser.g:2690:7: lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTGetterAccess().getDeclaredMemberAccessModifierMemberAccessModifierEnumRuleCall_0_0_0_0());
              						
            }
            pushFollow(FOLLOW_53);
            lv_declaredMemberAccessModifier_0_0=ruleMemberAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTGetterRule());
              							}
              							set(
              								current,
              								"declaredMemberAccessModifier",
              								lv_declaredMemberAccessModifier_0_0,
              								"org.eclipse.n4js.ts.Types.MemberAccessModifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            // InternalTypesParser.g:2707:5: ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )?
            int alt57=3;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==Abstract) ) {
                alt57=1;
            }
            else if ( (LA57_0==Static) ) {
                alt57=2;
            }
            switch (alt57) {
                case 1 :
                    // InternalTypesParser.g:2708:6: ( (lv_declaredAbstract_1_0= Abstract ) )
                    {
                    // InternalTypesParser.g:2708:6: ( (lv_declaredAbstract_1_0= Abstract ) )
                    // InternalTypesParser.g:2709:7: (lv_declaredAbstract_1_0= Abstract )
                    {
                    // InternalTypesParser.g:2709:7: (lv_declaredAbstract_1_0= Abstract )
                    // InternalTypesParser.g:2710:8: lv_declaredAbstract_1_0= Abstract
                    {
                    lv_declaredAbstract_1_0=(Token)match(input,Abstract,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_declaredAbstract_1_0, grammarAccess.getTGetterAccess().getDeclaredAbstractAbstractKeyword_0_0_1_0_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getTGetterRule());
                      								}
                      								setWithLastConsumed(current, "declaredAbstract", lv_declaredAbstract_1_0 != null, "abstract");
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2723:6: ( (lv_declaredStatic_2_0= Static ) )
                    {
                    // InternalTypesParser.g:2723:6: ( (lv_declaredStatic_2_0= Static ) )
                    // InternalTypesParser.g:2724:7: (lv_declaredStatic_2_0= Static )
                    {
                    // InternalTypesParser.g:2724:7: (lv_declaredStatic_2_0= Static )
                    // InternalTypesParser.g:2725:8: lv_declaredStatic_2_0= Static
                    {
                    lv_declaredStatic_2_0=(Token)match(input,Static,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_declaredStatic_2_0, grammarAccess.getTGetterAccess().getDeclaredStaticStaticKeyword_0_0_1_1_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getTGetterRule());
                      								}
                      								setWithLastConsumed(current, "declaredStatic", lv_declaredStatic_2_0 != null, "static");
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_3=(Token)match(input,Get,FOLLOW_48); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_3, grammarAccess.getTGetterAccess().getGetKeyword_0_0_2());
              				
            }
            // InternalTypesParser.g:2742:5: ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==AssignmnentCompatible||(LA58_0>=AutoboxedType && LA58_0<=Finally)||(LA58_0>=Private && LA58_0<=False)||(LA58_0>=Super && LA58_0<=With)||(LA58_0>=Any && LA58_0<=Var)||(LA58_0>=As && LA58_0<=Of)||LA58_0==RULE_IDENTIFIER) ) {
                alt58=1;
            }
            else if ( (LA58_0==LeftSquareBracket) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;
            }
            switch (alt58) {
                case 1 :
                    // InternalTypesParser.g:2743:6: ( (lv_name_4_0= ruleTypesIdentifier ) )
                    {
                    // InternalTypesParser.g:2743:6: ( (lv_name_4_0= ruleTypesIdentifier ) )
                    // InternalTypesParser.g:2744:7: (lv_name_4_0= ruleTypesIdentifier )
                    {
                    // InternalTypesParser.g:2744:7: (lv_name_4_0= ruleTypesIdentifier )
                    // InternalTypesParser.g:2745:8: lv_name_4_0= ruleTypesIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTGetterAccess().getNameTypesIdentifierParserRuleCall_0_0_3_0_0());
                      							
                    }
                    pushFollow(FOLLOW_55);
                    lv_name_4_0=ruleTypesIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTGetterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_4_0,
                      									"org.eclipse.n4js.ts.Types.TypesIdentifier");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2763:6: ( (lv_name_5_0= ruleTypesComputedPropertyName ) )
                    {
                    // InternalTypesParser.g:2763:6: ( (lv_name_5_0= ruleTypesComputedPropertyName ) )
                    // InternalTypesParser.g:2764:7: (lv_name_5_0= ruleTypesComputedPropertyName )
                    {
                    // InternalTypesParser.g:2764:7: (lv_name_5_0= ruleTypesComputedPropertyName )
                    // InternalTypesParser.g:2765:8: lv_name_5_0= ruleTypesComputedPropertyName
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTGetterAccess().getNameTypesComputedPropertyNameParserRuleCall_0_0_3_1_0());
                      							
                    }
                    pushFollow(FOLLOW_55);
                    lv_name_5_0=ruleTypesComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTGetterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_5_0,
                      									"org.eclipse.n4js.ts.Types.TypesComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            // InternalTypesParser.g:2785:3: ( (lv_optional_6_0= QuestionMark ) )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==QuestionMark) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // InternalTypesParser.g:2786:4: (lv_optional_6_0= QuestionMark )
                    {
                    // InternalTypesParser.g:2786:4: (lv_optional_6_0= QuestionMark )
                    // InternalTypesParser.g:2787:5: lv_optional_6_0= QuestionMark
                    {
                    lv_optional_6_0=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_6_0, grammarAccess.getTGetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTGetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_6_0 != null, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getTGetterAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_8=(Token)match(input,RightParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getTGetterAccess().getRightParenthesisKeyword_3());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTGetterRule());
              			}
              			newCompositeNode(grammarAccess.getTGetterAccess().getColonSepTypeRefParserRuleCall_4());
              		
            }
            pushFollow(FOLLOW_2);
            this_ColonSepTypeRef_9=ruleColonSepTypeRef(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ColonSepTypeRef_9;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTGetter"


    // $ANTLR start "entryRuleTSetter"
    // InternalTypesParser.g:2822:1: entryRuleTSetter returns [EObject current=null] : iv_ruleTSetter= ruleTSetter EOF ;
    public final EObject entryRuleTSetter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTSetter = null;


        try {
            // InternalTypesParser.g:2822:48: (iv_ruleTSetter= ruleTSetter EOF )
            // InternalTypesParser.g:2823:2: iv_ruleTSetter= ruleTSetter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTSetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTSetter=ruleTSetter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTSetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTSetter"


    // $ANTLR start "ruleTSetter"
    // InternalTypesParser.g:2829:1: ruleTSetter returns [EObject current=null] : ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Set ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= LeftParenthesis ( (lv_fpar_8_0= ruleTFormalParameter ) ) otherlv_9= RightParenthesis ) ;
    public final EObject ruleTSetter() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAbstract_1_0=null;
        Token lv_declaredStatic_2_0=null;
        Token otherlv_3=null;
        Token lv_optional_6_0=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredMemberAccessModifier_0_0 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        AntlrDatatypeRuleToken lv_name_5_0 = null;

        EObject lv_fpar_8_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:2835:2: ( ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Set ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= LeftParenthesis ( (lv_fpar_8_0= ruleTFormalParameter ) ) otherlv_9= RightParenthesis ) )
            // InternalTypesParser.g:2836:2: ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Set ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= LeftParenthesis ( (lv_fpar_8_0= ruleTFormalParameter ) ) otherlv_9= RightParenthesis )
            {
            // InternalTypesParser.g:2836:2: ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Set ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= LeftParenthesis ( (lv_fpar_8_0= ruleTFormalParameter ) ) otherlv_9= RightParenthesis )
            // InternalTypesParser.g:2837:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Set ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= LeftParenthesis ( (lv_fpar_8_0= ruleTFormalParameter ) ) otherlv_9= RightParenthesis
            {
            // InternalTypesParser.g:2837:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Set ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ) )
            // InternalTypesParser.g:2838:4: ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Set ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) )
            {
            // InternalTypesParser.g:2873:4: ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Set ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) )
            // InternalTypesParser.g:2874:5: ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )? otherlv_3= Set ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) )
            {
            // InternalTypesParser.g:2874:5: ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) )
            // InternalTypesParser.g:2875:6: (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier )
            {
            // InternalTypesParser.g:2875:6: (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier )
            // InternalTypesParser.g:2876:7: lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTSetterAccess().getDeclaredMemberAccessModifierMemberAccessModifierEnumRuleCall_0_0_0_0());
              						
            }
            pushFollow(FOLLOW_57);
            lv_declaredMemberAccessModifier_0_0=ruleMemberAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTSetterRule());
              							}
              							set(
              								current,
              								"declaredMemberAccessModifier",
              								lv_declaredMemberAccessModifier_0_0,
              								"org.eclipse.n4js.ts.Types.MemberAccessModifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            // InternalTypesParser.g:2893:5: ( ( (lv_declaredAbstract_1_0= Abstract ) ) | ( (lv_declaredStatic_2_0= Static ) ) )?
            int alt60=3;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==Abstract) ) {
                alt60=1;
            }
            else if ( (LA60_0==Static) ) {
                alt60=2;
            }
            switch (alt60) {
                case 1 :
                    // InternalTypesParser.g:2894:6: ( (lv_declaredAbstract_1_0= Abstract ) )
                    {
                    // InternalTypesParser.g:2894:6: ( (lv_declaredAbstract_1_0= Abstract ) )
                    // InternalTypesParser.g:2895:7: (lv_declaredAbstract_1_0= Abstract )
                    {
                    // InternalTypesParser.g:2895:7: (lv_declaredAbstract_1_0= Abstract )
                    // InternalTypesParser.g:2896:8: lv_declaredAbstract_1_0= Abstract
                    {
                    lv_declaredAbstract_1_0=(Token)match(input,Abstract,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_declaredAbstract_1_0, grammarAccess.getTSetterAccess().getDeclaredAbstractAbstractKeyword_0_0_1_0_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getTSetterRule());
                      								}
                      								setWithLastConsumed(current, "declaredAbstract", lv_declaredAbstract_1_0 != null, "abstract");
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2909:6: ( (lv_declaredStatic_2_0= Static ) )
                    {
                    // InternalTypesParser.g:2909:6: ( (lv_declaredStatic_2_0= Static ) )
                    // InternalTypesParser.g:2910:7: (lv_declaredStatic_2_0= Static )
                    {
                    // InternalTypesParser.g:2910:7: (lv_declaredStatic_2_0= Static )
                    // InternalTypesParser.g:2911:8: lv_declaredStatic_2_0= Static
                    {
                    lv_declaredStatic_2_0=(Token)match(input,Static,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_declaredStatic_2_0, grammarAccess.getTSetterAccess().getDeclaredStaticStaticKeyword_0_0_1_1_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getTSetterRule());
                      								}
                      								setWithLastConsumed(current, "declaredStatic", lv_declaredStatic_2_0 != null, "static");
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_3=(Token)match(input,Set,FOLLOW_48); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_3, grammarAccess.getTSetterAccess().getSetKeyword_0_0_2());
              				
            }
            // InternalTypesParser.g:2928:5: ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==AssignmnentCompatible||(LA61_0>=AutoboxedType && LA61_0<=Finally)||(LA61_0>=Private && LA61_0<=False)||(LA61_0>=Super && LA61_0<=With)||(LA61_0>=Any && LA61_0<=Var)||(LA61_0>=As && LA61_0<=Of)||LA61_0==RULE_IDENTIFIER) ) {
                alt61=1;
            }
            else if ( (LA61_0==LeftSquareBracket) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // InternalTypesParser.g:2929:6: ( (lv_name_4_0= ruleTypesIdentifier ) )
                    {
                    // InternalTypesParser.g:2929:6: ( (lv_name_4_0= ruleTypesIdentifier ) )
                    // InternalTypesParser.g:2930:7: (lv_name_4_0= ruleTypesIdentifier )
                    {
                    // InternalTypesParser.g:2930:7: (lv_name_4_0= ruleTypesIdentifier )
                    // InternalTypesParser.g:2931:8: lv_name_4_0= ruleTypesIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTSetterAccess().getNameTypesIdentifierParserRuleCall_0_0_3_0_0());
                      							
                    }
                    pushFollow(FOLLOW_55);
                    lv_name_4_0=ruleTypesIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTSetterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_4_0,
                      									"org.eclipse.n4js.ts.Types.TypesIdentifier");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2949:6: ( (lv_name_5_0= ruleTypesComputedPropertyName ) )
                    {
                    // InternalTypesParser.g:2949:6: ( (lv_name_5_0= ruleTypesComputedPropertyName ) )
                    // InternalTypesParser.g:2950:7: (lv_name_5_0= ruleTypesComputedPropertyName )
                    {
                    // InternalTypesParser.g:2950:7: (lv_name_5_0= ruleTypesComputedPropertyName )
                    // InternalTypesParser.g:2951:8: lv_name_5_0= ruleTypesComputedPropertyName
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTSetterAccess().getNameTypesComputedPropertyNameParserRuleCall_0_0_3_1_0());
                      							
                    }
                    pushFollow(FOLLOW_55);
                    lv_name_5_0=ruleTypesComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTSetterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_5_0,
                      									"org.eclipse.n4js.ts.Types.TypesComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            // InternalTypesParser.g:2971:3: ( (lv_optional_6_0= QuestionMark ) )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==QuestionMark) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // InternalTypesParser.g:2972:4: (lv_optional_6_0= QuestionMark )
                    {
                    // InternalTypesParser.g:2972:4: (lv_optional_6_0= QuestionMark )
                    // InternalTypesParser.g:2973:5: lv_optional_6_0= QuestionMark
                    {
                    lv_optional_6_0=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_6_0, grammarAccess.getTSetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTSetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_6_0 != null, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getTSetterAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalTypesParser.g:2989:3: ( (lv_fpar_8_0= ruleTFormalParameter ) )
            // InternalTypesParser.g:2990:4: (lv_fpar_8_0= ruleTFormalParameter )
            {
            // InternalTypesParser.g:2990:4: (lv_fpar_8_0= ruleTFormalParameter )
            // InternalTypesParser.g:2991:5: lv_fpar_8_0= ruleTFormalParameter
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTSetterAccess().getFparTFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_56);
            lv_fpar_8_0=ruleTFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTSetterRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_8_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TFormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getTSetterAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTSetter"


    // $ANTLR start "entryRuleTFunction"
    // InternalTypesParser.g:3016:1: entryRuleTFunction returns [EObject current=null] : iv_ruleTFunction= ruleTFunction EOF ;
    public final EObject entryRuleTFunction() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTFunction = null;


        try {
            // InternalTypesParser.g:3016:50: (iv_ruleTFunction= ruleTFunction EOF )
            // InternalTypesParser.g:3017:2: iv_ruleTFunction= ruleTFunction EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTFunctionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTFunction=ruleTFunction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTFunction; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTFunction"


    // $ANTLR start "ruleTFunction"
    // InternalTypesParser.g:3023:1: ruleTFunction returns [EObject current=null] : ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Function (this_TypeVariables_3= ruleTypeVariables[$current] )? ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) this_TFormalParameters_5= ruleTFormalParameters[$current] this_ColonSepReturnTypeRef_6= ruleColonSepReturnTypeRef[$current] ) ;
    public final EObject ruleTFunction() throws RecognitionException {
        EObject current = null;

        Token lv_declaredProvidedByRuntime_1_0=null;
        Token otherlv_2=null;
        Enumerator lv_declaredTypeAccessModifier_0_0 = null;

        EObject this_TypeVariables_3 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        EObject this_TFormalParameters_5 = null;

        EObject this_ColonSepReturnTypeRef_6 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3029:2: ( ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Function (this_TypeVariables_3= ruleTypeVariables[$current] )? ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) this_TFormalParameters_5= ruleTFormalParameters[$current] this_ColonSepReturnTypeRef_6= ruleColonSepReturnTypeRef[$current] ) )
            // InternalTypesParser.g:3030:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Function (this_TypeVariables_3= ruleTypeVariables[$current] )? ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) this_TFormalParameters_5= ruleTFormalParameters[$current] this_ColonSepReturnTypeRef_6= ruleColonSepReturnTypeRef[$current] )
            {
            // InternalTypesParser.g:3030:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Function (this_TypeVariables_3= ruleTypeVariables[$current] )? ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) this_TFormalParameters_5= ruleTFormalParameters[$current] this_ColonSepReturnTypeRef_6= ruleColonSepReturnTypeRef[$current] )
            // InternalTypesParser.g:3031:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Function (this_TypeVariables_3= ruleTypeVariables[$current] )? ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) this_TFormalParameters_5= ruleTFormalParameters[$current] this_ColonSepReturnTypeRef_6= ruleColonSepReturnTypeRef[$current]
            {
            // InternalTypesParser.g:3031:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) )
            // InternalTypesParser.g:3032:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            {
            // InternalTypesParser.g:3032:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            // InternalTypesParser.g:3033:5: lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTFunctionAccess().getDeclaredTypeAccessModifierTypeAccessModifierEnumRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_59);
            lv_declaredTypeAccessModifier_0_0=ruleTypeAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTFunctionRule());
              					}
              					set(
              						current,
              						"declaredTypeAccessModifier",
              						lv_declaredTypeAccessModifier_0_0,
              						"org.eclipse.n4js.ts.Types.TypeAccessModifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:3050:3: ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==ProvidedByRuntime) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // InternalTypesParser.g:3051:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    {
                    // InternalTypesParser.g:3051:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    // InternalTypesParser.g:3052:5: lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime
                    {
                    lv_declaredProvidedByRuntime_1_0=(Token)match(input,ProvidedByRuntime,FOLLOW_60); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredProvidedByRuntime_1_0, grammarAccess.getTFunctionAccess().getDeclaredProvidedByRuntimeProvidedByRuntimeKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTFunctionRule());
                      					}
                      					setWithLastConsumed(current, "declaredProvidedByRuntime", lv_declaredProvidedByRuntime_1_0 != null, "providedByRuntime");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_2=(Token)match(input,Function,FOLLOW_61); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getTFunctionAccess().getFunctionKeyword_2());
              		
            }
            // InternalTypesParser.g:3068:3: (this_TypeVariables_3= ruleTypeVariables[$current] )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==LessThanSign) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // InternalTypesParser.g:3069:4: this_TypeVariables_3= ruleTypeVariables[$current]
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTFunctionRule());
                      				}
                      				newCompositeNode(grammarAccess.getTFunctionAccess().getTypeVariablesParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_10);
                    this_TypeVariables_3=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeVariables_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:3081:3: ( (lv_name_4_0= ruleBindingTypesIdentifier ) )
            // InternalTypesParser.g:3082:4: (lv_name_4_0= ruleBindingTypesIdentifier )
            {
            // InternalTypesParser.g:3082:4: (lv_name_4_0= ruleBindingTypesIdentifier )
            // InternalTypesParser.g:3083:5: lv_name_4_0= ruleBindingTypesIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTFunctionAccess().getNameBindingTypesIdentifierParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_49);
            lv_name_4_0=ruleBindingTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTFunctionRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_4_0,
              						"org.eclipse.n4js.ts.Types.BindingTypesIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTFunctionRule());
              			}
              			newCompositeNode(grammarAccess.getTFunctionAccess().getTFormalParametersParserRuleCall_5());
              		
            }
            pushFollow(FOLLOW_50);
            this_TFormalParameters_5=ruleTFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TFormalParameters_5;
              			afterParserOrEnumRuleCall();
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTFunctionRule());
              			}
              			newCompositeNode(grammarAccess.getTFunctionAccess().getColonSepReturnTypeRefParserRuleCall_6());
              		
            }
            pushFollow(FOLLOW_2);
            this_ColonSepReturnTypeRef_6=ruleColonSepReturnTypeRef(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ColonSepReturnTypeRef_6;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTFunction"


    // $ANTLR start "entryRuleTEnum"
    // InternalTypesParser.g:3126:1: entryRuleTEnum returns [EObject current=null] : iv_ruleTEnum= ruleTEnum EOF ;
    public final EObject entryRuleTEnum() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTEnum = null;


        try {
            // InternalTypesParser.g:3126:46: (iv_ruleTEnum= ruleTEnum EOF )
            // InternalTypesParser.g:3127:2: iv_ruleTEnum= ruleTEnum EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTEnumRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTEnum=ruleTEnum();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTEnum; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTEnum"


    // $ANTLR start "ruleTEnum"
    // InternalTypesParser.g:3133:1: ruleTEnum returns [EObject current=null] : ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Enum ( (lv_name_3_0= ruleBindingTypesIdentifier ) ) otherlv_4= LeftCurlyBracket ( (lv_literals_5_0= ruleTEnumLiteral ) ) (otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) ) )* otherlv_8= RightCurlyBracket ) ;
    public final EObject ruleTEnum() throws RecognitionException {
        EObject current = null;

        Token lv_declaredProvidedByRuntime_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Enumerator lv_declaredTypeAccessModifier_0_0 = null;

        AntlrDatatypeRuleToken lv_name_3_0 = null;

        EObject lv_literals_5_0 = null;

        EObject lv_literals_7_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3139:2: ( ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Enum ( (lv_name_3_0= ruleBindingTypesIdentifier ) ) otherlv_4= LeftCurlyBracket ( (lv_literals_5_0= ruleTEnumLiteral ) ) (otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) ) )* otherlv_8= RightCurlyBracket ) )
            // InternalTypesParser.g:3140:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Enum ( (lv_name_3_0= ruleBindingTypesIdentifier ) ) otherlv_4= LeftCurlyBracket ( (lv_literals_5_0= ruleTEnumLiteral ) ) (otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) ) )* otherlv_8= RightCurlyBracket )
            {
            // InternalTypesParser.g:3140:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Enum ( (lv_name_3_0= ruleBindingTypesIdentifier ) ) otherlv_4= LeftCurlyBracket ( (lv_literals_5_0= ruleTEnumLiteral ) ) (otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) ) )* otherlv_8= RightCurlyBracket )
            // InternalTypesParser.g:3141:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Enum ( (lv_name_3_0= ruleBindingTypesIdentifier ) ) otherlv_4= LeftCurlyBracket ( (lv_literals_5_0= ruleTEnumLiteral ) ) (otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) ) )* otherlv_8= RightCurlyBracket
            {
            // InternalTypesParser.g:3141:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) )
            // InternalTypesParser.g:3142:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            {
            // InternalTypesParser.g:3142:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            // InternalTypesParser.g:3143:5: lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTEnumAccess().getDeclaredTypeAccessModifierTypeAccessModifierEnumRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_62);
            lv_declaredTypeAccessModifier_0_0=ruleTypeAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTEnumRule());
              					}
              					set(
              						current,
              						"declaredTypeAccessModifier",
              						lv_declaredTypeAccessModifier_0_0,
              						"org.eclipse.n4js.ts.Types.TypeAccessModifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:3160:3: ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==ProvidedByRuntime) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // InternalTypesParser.g:3161:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    {
                    // InternalTypesParser.g:3161:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    // InternalTypesParser.g:3162:5: lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime
                    {
                    lv_declaredProvidedByRuntime_1_0=(Token)match(input,ProvidedByRuntime,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredProvidedByRuntime_1_0, grammarAccess.getTEnumAccess().getDeclaredProvidedByRuntimeProvidedByRuntimeKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTEnumRule());
                      					}
                      					setWithLastConsumed(current, "declaredProvidedByRuntime", lv_declaredProvidedByRuntime_1_0 != null, "providedByRuntime");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_2=(Token)match(input,Enum,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getTEnumAccess().getEnumKeyword_2());
              		
            }
            // InternalTypesParser.g:3178:3: ( (lv_name_3_0= ruleBindingTypesIdentifier ) )
            // InternalTypesParser.g:3179:4: (lv_name_3_0= ruleBindingTypesIdentifier )
            {
            // InternalTypesParser.g:3179:4: (lv_name_3_0= ruleBindingTypesIdentifier )
            // InternalTypesParser.g:3180:5: lv_name_3_0= ruleBindingTypesIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTEnumAccess().getNameBindingTypesIdentifierParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_15);
            lv_name_3_0=ruleBindingTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTEnumRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_3_0,
              						"org.eclipse.n4js.ts.Types.BindingTypesIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTEnumAccess().getLeftCurlyBracketKeyword_4());
              		
            }
            // InternalTypesParser.g:3201:3: ( (lv_literals_5_0= ruleTEnumLiteral ) )
            // InternalTypesParser.g:3202:4: (lv_literals_5_0= ruleTEnumLiteral )
            {
            // InternalTypesParser.g:3202:4: (lv_literals_5_0= ruleTEnumLiteral )
            // InternalTypesParser.g:3203:5: lv_literals_5_0= ruleTEnumLiteral
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTEnumAccess().getLiteralsTEnumLiteralParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_64);
            lv_literals_5_0=ruleTEnumLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTEnumRule());
              					}
              					add(
              						current,
              						"literals",
              						lv_literals_5_0,
              						"org.eclipse.n4js.ts.Types.TEnumLiteral");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:3220:3: (otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) ) )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==Comma) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // InternalTypesParser.g:3221:4: otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) )
            	    {
            	    otherlv_6=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_6, grammarAccess.getTEnumAccess().getCommaKeyword_6_0());
            	      			
            	    }
            	    // InternalTypesParser.g:3225:4: ( (lv_literals_7_0= ruleTEnumLiteral ) )
            	    // InternalTypesParser.g:3226:5: (lv_literals_7_0= ruleTEnumLiteral )
            	    {
            	    // InternalTypesParser.g:3226:5: (lv_literals_7_0= ruleTEnumLiteral )
            	    // InternalTypesParser.g:3227:6: lv_literals_7_0= ruleTEnumLiteral
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTEnumAccess().getLiteralsTEnumLiteralParserRuleCall_6_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_64);
            	    lv_literals_7_0=ruleTEnumLiteral();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTEnumRule());
            	      						}
            	      						add(
            	      							current,
            	      							"literals",
            	      							lv_literals_7_0,
            	      							"org.eclipse.n4js.ts.Types.TEnumLiteral");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);

            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getTEnumAccess().getRightCurlyBracketKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTEnum"


    // $ANTLR start "entryRuleTEnumLiteral"
    // InternalTypesParser.g:3253:1: entryRuleTEnumLiteral returns [EObject current=null] : iv_ruleTEnumLiteral= ruleTEnumLiteral EOF ;
    public final EObject entryRuleTEnumLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTEnumLiteral = null;


        try {
            // InternalTypesParser.g:3253:53: (iv_ruleTEnumLiteral= ruleTEnumLiteral EOF )
            // InternalTypesParser.g:3254:2: iv_ruleTEnumLiteral= ruleTEnumLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTEnumLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTEnumLiteral=ruleTEnumLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTEnumLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTEnumLiteral"


    // $ANTLR start "ruleTEnumLiteral"
    // InternalTypesParser.g:3260:1: ruleTEnumLiteral returns [EObject current=null] : ( (lv_name_0_0= RULE_IDENTIFIER ) ) ;
    public final EObject ruleTEnumLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;


        	enterRule();

        try {
            // InternalTypesParser.g:3266:2: ( ( (lv_name_0_0= RULE_IDENTIFIER ) ) )
            // InternalTypesParser.g:3267:2: ( (lv_name_0_0= RULE_IDENTIFIER ) )
            {
            // InternalTypesParser.g:3267:2: ( (lv_name_0_0= RULE_IDENTIFIER ) )
            // InternalTypesParser.g:3268:3: (lv_name_0_0= RULE_IDENTIFIER )
            {
            // InternalTypesParser.g:3268:3: (lv_name_0_0= RULE_IDENTIFIER )
            // InternalTypesParser.g:3269:4: lv_name_0_0= RULE_IDENTIFIER
            {
            lv_name_0_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_name_0_0, grammarAccess.getTEnumLiteralAccess().getNameIDENTIFIERTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getTEnumLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.IDENTIFIER");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTEnumLiteral"


    // $ANTLR start "entryRuleArrayTypeExpression"
    // InternalTypesParser.g:3288:1: entryRuleArrayTypeExpression returns [EObject current=null] : iv_ruleArrayTypeExpression= ruleArrayTypeExpression EOF ;
    public final EObject entryRuleArrayTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayTypeExpression = null;


        try {
            // InternalTypesParser.g:3288:60: (iv_ruleArrayTypeExpression= ruleArrayTypeExpression EOF )
            // InternalTypesParser.g:3289:2: iv_ruleArrayTypeExpression= ruleArrayTypeExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayTypeExpression=ruleArrayTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleArrayTypeExpression"


    // $ANTLR start "ruleArrayTypeExpression"
    // InternalTypesParser.g:3295:1: ruleArrayTypeExpression returns [EObject current=null] : ( ( () ( (lv_typeArgs_1_0= ruleWildcardOldNotationWithoutBound ) ) ( (lv_arrayTypeExpression_2_0= LeftSquareBracket ) ) otherlv_3= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_5_0= LeftSquareBracket ) ) otherlv_6= RightSquareBracket ) )* ) | ( () otherlv_8= LeftParenthesis ( (lv_typeArgs_9_0= ruleWildcard ) ) otherlv_10= RightParenthesis ( (lv_arrayTypeExpression_11_0= LeftSquareBracket ) ) otherlv_12= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_14_0= LeftSquareBracket ) ) otherlv_15= RightSquareBracket ) )* ) | (this_PrimaryTypeExpression_16= rulePrimaryTypeExpression ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_18_0= LeftSquareBracket ) ) otherlv_19= RightSquareBracket ) )* ) ) ;
    public final EObject ruleArrayTypeExpression() throws RecognitionException {
        EObject current = null;

        Token lv_arrayTypeExpression_2_0=null;
        Token otherlv_3=null;
        Token lv_arrayTypeExpression_5_0=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token lv_arrayTypeExpression_11_0=null;
        Token otherlv_12=null;
        Token lv_arrayTypeExpression_14_0=null;
        Token otherlv_15=null;
        Token lv_arrayTypeExpression_18_0=null;
        Token otherlv_19=null;
        EObject lv_typeArgs_1_0 = null;

        EObject lv_typeArgs_9_0 = null;

        EObject this_PrimaryTypeExpression_16 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3301:2: ( ( ( () ( (lv_typeArgs_1_0= ruleWildcardOldNotationWithoutBound ) ) ( (lv_arrayTypeExpression_2_0= LeftSquareBracket ) ) otherlv_3= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_5_0= LeftSquareBracket ) ) otherlv_6= RightSquareBracket ) )* ) | ( () otherlv_8= LeftParenthesis ( (lv_typeArgs_9_0= ruleWildcard ) ) otherlv_10= RightParenthesis ( (lv_arrayTypeExpression_11_0= LeftSquareBracket ) ) otherlv_12= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_14_0= LeftSquareBracket ) ) otherlv_15= RightSquareBracket ) )* ) | (this_PrimaryTypeExpression_16= rulePrimaryTypeExpression ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_18_0= LeftSquareBracket ) ) otherlv_19= RightSquareBracket ) )* ) ) )
            // InternalTypesParser.g:3302:2: ( ( () ( (lv_typeArgs_1_0= ruleWildcardOldNotationWithoutBound ) ) ( (lv_arrayTypeExpression_2_0= LeftSquareBracket ) ) otherlv_3= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_5_0= LeftSquareBracket ) ) otherlv_6= RightSquareBracket ) )* ) | ( () otherlv_8= LeftParenthesis ( (lv_typeArgs_9_0= ruleWildcard ) ) otherlv_10= RightParenthesis ( (lv_arrayTypeExpression_11_0= LeftSquareBracket ) ) otherlv_12= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_14_0= LeftSquareBracket ) ) otherlv_15= RightSquareBracket ) )* ) | (this_PrimaryTypeExpression_16= rulePrimaryTypeExpression ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_18_0= LeftSquareBracket ) ) otherlv_19= RightSquareBracket ) )* ) )
            {
            // InternalTypesParser.g:3302:2: ( ( () ( (lv_typeArgs_1_0= ruleWildcardOldNotationWithoutBound ) ) ( (lv_arrayTypeExpression_2_0= LeftSquareBracket ) ) otherlv_3= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_5_0= LeftSquareBracket ) ) otherlv_6= RightSquareBracket ) )* ) | ( () otherlv_8= LeftParenthesis ( (lv_typeArgs_9_0= ruleWildcard ) ) otherlv_10= RightParenthesis ( (lv_arrayTypeExpression_11_0= LeftSquareBracket ) ) otherlv_12= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_14_0= LeftSquareBracket ) ) otherlv_15= RightSquareBracket ) )* ) | (this_PrimaryTypeExpression_16= rulePrimaryTypeExpression ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_18_0= LeftSquareBracket ) ) otherlv_19= RightSquareBracket ) )* ) )
            int alt70=3;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                alt70=1;
                }
                break;
            case LeftParenthesis:
                {
                switch ( input.LA(2) ) {
                case In:
                case QuestionMark:
                    {
                    alt70=2;
                    }
                    break;
                case Out:
                    {
                    int LA70_5 = input.LA(3);

                    if ( ((LA70_5>=Intersection && LA70_5<=Constructor)||LA70_5==Undefined||LA70_5==Indexed||LA70_5==Union||(LA70_5>=Null && LA70_5<=This_1)||(LA70_5>=Type && LA70_5<=Void)||LA70_5==Any||LA70_5==LeftCurlyBracket||LA70_5==Tilde||LA70_5==RULE_IDENTIFIER) ) {
                        alt70=2;
                    }
                    else if ( (LA70_5==Colon) ) {
                        alt70=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 70, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                case Intersection:
                case Constructor:
                case Implements:
                case Promisify:
                case Interface:
                case Protected:
                case Undefined:
                case Abstract:
                case External:
                case Indexed:
                case Private:
                case Project:
                case Public:
                case Static:
                case Target:
                case Async:
                case Await:
                case Union:
                case Yield:
                case This:
                case From:
                case Null:
                case This_1:
                case Type:
                case Void:
                case FullStopFullStopFullStop:
                case Any:
                case Get:
                case Let:
                case Set:
                case As:
                case Of:
                case RightParenthesis:
                case LeftCurlyBracket:
                case Tilde:
                case RULE_IDENTIFIER:
                    {
                    alt70=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 70, 2, input);

                    throw nvae;
                }

                }
                break;
            case Intersection:
            case Constructor:
            case Undefined:
            case Indexed:
            case False:
            case Union:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case Any:
            case PlusSign:
            case HyphenMinus:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_STRING:
                {
                alt70=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }

            switch (alt70) {
                case 1 :
                    // InternalTypesParser.g:3303:3: ( () ( (lv_typeArgs_1_0= ruleWildcardOldNotationWithoutBound ) ) ( (lv_arrayTypeExpression_2_0= LeftSquareBracket ) ) otherlv_3= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_5_0= LeftSquareBracket ) ) otherlv_6= RightSquareBracket ) )* )
                    {
                    // InternalTypesParser.g:3303:3: ( () ( (lv_typeArgs_1_0= ruleWildcardOldNotationWithoutBound ) ) ( (lv_arrayTypeExpression_2_0= LeftSquareBracket ) ) otherlv_3= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_5_0= LeftSquareBracket ) ) otherlv_6= RightSquareBracket ) )* )
                    // InternalTypesParser.g:3304:4: () ( (lv_typeArgs_1_0= ruleWildcardOldNotationWithoutBound ) ) ( (lv_arrayTypeExpression_2_0= LeftSquareBracket ) ) otherlv_3= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_5_0= LeftSquareBracket ) ) otherlv_6= RightSquareBracket ) )*
                    {
                    // InternalTypesParser.g:3304:4: ()
                    // InternalTypesParser.g:3305:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalTypesParser.g:3311:4: ( (lv_typeArgs_1_0= ruleWildcardOldNotationWithoutBound ) )
                    // InternalTypesParser.g:3312:5: (lv_typeArgs_1_0= ruleWildcardOldNotationWithoutBound )
                    {
                    // InternalTypesParser.g:3312:5: (lv_typeArgs_1_0= ruleWildcardOldNotationWithoutBound )
                    // InternalTypesParser.g:3313:6: lv_typeArgs_1_0= ruleWildcardOldNotationWithoutBound
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getTypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_65);
                    lv_typeArgs_1_0=ruleWildcardOldNotationWithoutBound();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"typeArgs",
                      							lv_typeArgs_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.WildcardOldNotationWithoutBound");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:3330:4: ( (lv_arrayTypeExpression_2_0= LeftSquareBracket ) )
                    // InternalTypesParser.g:3331:5: (lv_arrayTypeExpression_2_0= LeftSquareBracket )
                    {
                    // InternalTypesParser.g:3331:5: (lv_arrayTypeExpression_2_0= LeftSquareBracket )
                    // InternalTypesParser.g:3332:6: lv_arrayTypeExpression_2_0= LeftSquareBracket
                    {
                    lv_arrayTypeExpression_2_0=(Token)match(input,LeftSquareBracket,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_arrayTypeExpression_2_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_2_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_2_0 != null, "[");
                      					
                    }

                    }


                    }

                    otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_66); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_3());
                      			
                    }
                    // InternalTypesParser.g:3348:4: ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_5_0= LeftSquareBracket ) ) otherlv_6= RightSquareBracket ) )*
                    loop67:
                    do {
                        int alt67=2;
                        int LA67_0 = input.LA(1);

                        if ( (LA67_0==LeftSquareBracket) && (synpred12_InternalTypesParser())) {
                            alt67=1;
                        }


                        switch (alt67) {
                    	case 1 :
                    	    // InternalTypesParser.g:3349:5: ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_5_0= LeftSquareBracket ) ) otherlv_6= RightSquareBracket )
                    	    {
                    	    // InternalTypesParser.g:3360:5: ( () ( (lv_arrayTypeExpression_5_0= LeftSquareBracket ) ) otherlv_6= RightSquareBracket )
                    	    // InternalTypesParser.g:3361:6: () ( (lv_arrayTypeExpression_5_0= LeftSquareBracket ) ) otherlv_6= RightSquareBracket
                    	    {
                    	    // InternalTypesParser.g:3361:6: ()
                    	    // InternalTypesParser.g:3362:7: 
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefTypeArgsAction_0_4_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    // InternalTypesParser.g:3368:6: ( (lv_arrayTypeExpression_5_0= LeftSquareBracket ) )
                    	    // InternalTypesParser.g:3369:7: (lv_arrayTypeExpression_5_0= LeftSquareBracket )
                    	    {
                    	    // InternalTypesParser.g:3369:7: (lv_arrayTypeExpression_5_0= LeftSquareBracket )
                    	    // InternalTypesParser.g:3370:8: lv_arrayTypeExpression_5_0= LeftSquareBracket
                    	    {
                    	    lv_arrayTypeExpression_5_0=(Token)match(input,LeftSquareBracket,FOLLOW_21); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								newLeafNode(lv_arrayTypeExpression_5_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_4_0_1_0());
                    	      							
                    	    }
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_5_0 != null, "[");
                    	      							
                    	    }

                    	    }


                    	    }

                    	    otherlv_6=(Token)match(input,RightSquareBracket,FOLLOW_66); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_6, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_4_0_2());
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:3390:3: ( () otherlv_8= LeftParenthesis ( (lv_typeArgs_9_0= ruleWildcard ) ) otherlv_10= RightParenthesis ( (lv_arrayTypeExpression_11_0= LeftSquareBracket ) ) otherlv_12= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_14_0= LeftSquareBracket ) ) otherlv_15= RightSquareBracket ) )* )
                    {
                    // InternalTypesParser.g:3390:3: ( () otherlv_8= LeftParenthesis ( (lv_typeArgs_9_0= ruleWildcard ) ) otherlv_10= RightParenthesis ( (lv_arrayTypeExpression_11_0= LeftSquareBracket ) ) otherlv_12= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_14_0= LeftSquareBracket ) ) otherlv_15= RightSquareBracket ) )* )
                    // InternalTypesParser.g:3391:4: () otherlv_8= LeftParenthesis ( (lv_typeArgs_9_0= ruleWildcard ) ) otherlv_10= RightParenthesis ( (lv_arrayTypeExpression_11_0= LeftSquareBracket ) ) otherlv_12= RightSquareBracket ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_14_0= LeftSquareBracket ) ) otherlv_15= RightSquareBracket ) )*
                    {
                    // InternalTypesParser.g:3391:4: ()
                    // InternalTypesParser.g:3392:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getArrayTypeExpressionAccess().getLeftParenthesisKeyword_1_1());
                      			
                    }
                    // InternalTypesParser.g:3402:4: ( (lv_typeArgs_9_0= ruleWildcard ) )
                    // InternalTypesParser.g:3403:5: (lv_typeArgs_9_0= ruleWildcard )
                    {
                    // InternalTypesParser.g:3403:5: (lv_typeArgs_9_0= ruleWildcard )
                    // InternalTypesParser.g:3404:6: lv_typeArgs_9_0= ruleWildcard
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getTypeArgsWildcardParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_56);
                    lv_typeArgs_9_0=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"typeArgs",
                      							lv_typeArgs_9_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.Wildcard");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_65); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getArrayTypeExpressionAccess().getRightParenthesisKeyword_1_3());
                      			
                    }
                    // InternalTypesParser.g:3425:4: ( (lv_arrayTypeExpression_11_0= LeftSquareBracket ) )
                    // InternalTypesParser.g:3426:5: (lv_arrayTypeExpression_11_0= LeftSquareBracket )
                    {
                    // InternalTypesParser.g:3426:5: (lv_arrayTypeExpression_11_0= LeftSquareBracket )
                    // InternalTypesParser.g:3427:6: lv_arrayTypeExpression_11_0= LeftSquareBracket
                    {
                    lv_arrayTypeExpression_11_0=(Token)match(input,LeftSquareBracket,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_arrayTypeExpression_11_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_4_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_11_0 != null, "[");
                      					
                    }

                    }


                    }

                    otherlv_12=(Token)match(input,RightSquareBracket,FOLLOW_66); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_5());
                      			
                    }
                    // InternalTypesParser.g:3443:4: ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_14_0= LeftSquareBracket ) ) otherlv_15= RightSquareBracket ) )*
                    loop68:
                    do {
                        int alt68=2;
                        int LA68_0 = input.LA(1);

                        if ( (LA68_0==LeftSquareBracket) && (synpred13_InternalTypesParser())) {
                            alt68=1;
                        }


                        switch (alt68) {
                    	case 1 :
                    	    // InternalTypesParser.g:3444:5: ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_14_0= LeftSquareBracket ) ) otherlv_15= RightSquareBracket )
                    	    {
                    	    // InternalTypesParser.g:3455:5: ( () ( (lv_arrayTypeExpression_14_0= LeftSquareBracket ) ) otherlv_15= RightSquareBracket )
                    	    // InternalTypesParser.g:3456:6: () ( (lv_arrayTypeExpression_14_0= LeftSquareBracket ) ) otherlv_15= RightSquareBracket
                    	    {
                    	    // InternalTypesParser.g:3456:6: ()
                    	    // InternalTypesParser.g:3457:7: 
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefTypeArgsAction_1_6_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    // InternalTypesParser.g:3463:6: ( (lv_arrayTypeExpression_14_0= LeftSquareBracket ) )
                    	    // InternalTypesParser.g:3464:7: (lv_arrayTypeExpression_14_0= LeftSquareBracket )
                    	    {
                    	    // InternalTypesParser.g:3464:7: (lv_arrayTypeExpression_14_0= LeftSquareBracket )
                    	    // InternalTypesParser.g:3465:8: lv_arrayTypeExpression_14_0= LeftSquareBracket
                    	    {
                    	    lv_arrayTypeExpression_14_0=(Token)match(input,LeftSquareBracket,FOLLOW_21); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								newLeafNode(lv_arrayTypeExpression_14_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_6_0_1_0());
                    	      							
                    	    }
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_14_0 != null, "[");
                    	      							
                    	    }

                    	    }


                    	    }

                    	    otherlv_15=(Token)match(input,RightSquareBracket,FOLLOW_66); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_15, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_6_0_2());
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop68;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:3485:3: (this_PrimaryTypeExpression_16= rulePrimaryTypeExpression ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_18_0= LeftSquareBracket ) ) otherlv_19= RightSquareBracket ) )* )
                    {
                    // InternalTypesParser.g:3485:3: (this_PrimaryTypeExpression_16= rulePrimaryTypeExpression ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_18_0= LeftSquareBracket ) ) otherlv_19= RightSquareBracket ) )* )
                    // InternalTypesParser.g:3486:4: this_PrimaryTypeExpression_16= rulePrimaryTypeExpression ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_18_0= LeftSquareBracket ) ) otherlv_19= RightSquareBracket ) )*
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_2_0());
                      			
                    }
                    pushFollow(FOLLOW_66);
                    this_PrimaryTypeExpression_16=rulePrimaryTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PrimaryTypeExpression_16;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    // InternalTypesParser.g:3494:4: ( ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_18_0= LeftSquareBracket ) ) otherlv_19= RightSquareBracket ) )*
                    loop69:
                    do {
                        int alt69=2;
                        int LA69_0 = input.LA(1);

                        if ( (LA69_0==LeftSquareBracket) && (synpred14_InternalTypesParser())) {
                            alt69=1;
                        }


                        switch (alt69) {
                    	case 1 :
                    	    // InternalTypesParser.g:3495:5: ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )=> ( () ( (lv_arrayTypeExpression_18_0= LeftSquareBracket ) ) otherlv_19= RightSquareBracket )
                    	    {
                    	    // InternalTypesParser.g:3506:5: ( () ( (lv_arrayTypeExpression_18_0= LeftSquareBracket ) ) otherlv_19= RightSquareBracket )
                    	    // InternalTypesParser.g:3507:6: () ( (lv_arrayTypeExpression_18_0= LeftSquareBracket ) ) otherlv_19= RightSquareBracket
                    	    {
                    	    // InternalTypesParser.g:3507:6: ()
                    	    // InternalTypesParser.g:3508:7: 
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefTypeArgsAction_2_1_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    // InternalTypesParser.g:3514:6: ( (lv_arrayTypeExpression_18_0= LeftSquareBracket ) )
                    	    // InternalTypesParser.g:3515:7: (lv_arrayTypeExpression_18_0= LeftSquareBracket )
                    	    {
                    	    // InternalTypesParser.g:3515:7: (lv_arrayTypeExpression_18_0= LeftSquareBracket )
                    	    // InternalTypesParser.g:3516:8: lv_arrayTypeExpression_18_0= LeftSquareBracket
                    	    {
                    	    lv_arrayTypeExpression_18_0=(Token)match(input,LeftSquareBracket,FOLLOW_21); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								newLeafNode(lv_arrayTypeExpression_18_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_2_1_0_1_0());
                    	      							
                    	    }
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_18_0 != null, "[");
                    	      							
                    	    }

                    	    }


                    	    }

                    	    otherlv_19=(Token)match(input,RightSquareBracket,FOLLOW_66); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_19, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_2_1_0_2());
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop69;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleArrayTypeExpression"


    // $ANTLR start "entryRulePrimaryTypeExpression"
    // InternalTypesParser.g:3539:1: entryRulePrimaryTypeExpression returns [EObject current=null] : iv_rulePrimaryTypeExpression= rulePrimaryTypeExpression EOF ;
    public final EObject entryRulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePrimaryTypeExpression = null;


        try {
            // InternalTypesParser.g:3539:62: (iv_rulePrimaryTypeExpression= rulePrimaryTypeExpression EOF )
            // InternalTypesParser.g:3540:2: iv_rulePrimaryTypeExpression= rulePrimaryTypeExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryTypeExpression=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePrimaryTypeExpression"


    // $ANTLR start "rulePrimaryTypeExpression"
    // InternalTypesParser.g:3546:1: rulePrimaryTypeExpression returns [EObject current=null] : (this_LiteralTypeRef_0= ruleLiteralTypeRef | ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=>this_ArrowFunctionTypeExpression_1= ruleArrowFunctionTypeExpression ) | this_ArrayNTypeExpression_2= ruleArrayNTypeExpression | this_TypeRefWithModifiers_3= ruleTypeRefWithModifiers | (otherlv_4= LeftParenthesis this_TypeRef_5= ruleTypeRef otherlv_6= RightParenthesis ) ) ;
    public final EObject rulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject this_LiteralTypeRef_0 = null;

        EObject this_ArrowFunctionTypeExpression_1 = null;

        EObject this_ArrayNTypeExpression_2 = null;

        EObject this_TypeRefWithModifiers_3 = null;

        EObject this_TypeRef_5 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3552:2: ( (this_LiteralTypeRef_0= ruleLiteralTypeRef | ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=>this_ArrowFunctionTypeExpression_1= ruleArrowFunctionTypeExpression ) | this_ArrayNTypeExpression_2= ruleArrayNTypeExpression | this_TypeRefWithModifiers_3= ruleTypeRefWithModifiers | (otherlv_4= LeftParenthesis this_TypeRef_5= ruleTypeRef otherlv_6= RightParenthesis ) ) )
            // InternalTypesParser.g:3553:2: (this_LiteralTypeRef_0= ruleLiteralTypeRef | ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=>this_ArrowFunctionTypeExpression_1= ruleArrowFunctionTypeExpression ) | this_ArrayNTypeExpression_2= ruleArrayNTypeExpression | this_TypeRefWithModifiers_3= ruleTypeRefWithModifiers | (otherlv_4= LeftParenthesis this_TypeRef_5= ruleTypeRef otherlv_6= RightParenthesis ) )
            {
            // InternalTypesParser.g:3553:2: (this_LiteralTypeRef_0= ruleLiteralTypeRef | ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=>this_ArrowFunctionTypeExpression_1= ruleArrowFunctionTypeExpression ) | this_ArrayNTypeExpression_2= ruleArrayNTypeExpression | this_TypeRefWithModifiers_3= ruleTypeRefWithModifiers | (otherlv_4= LeftParenthesis this_TypeRef_5= ruleTypeRef otherlv_6= RightParenthesis ) )
            int alt71=5;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    // InternalTypesParser.g:3554:3: this_LiteralTypeRef_0= ruleLiteralTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getLiteralTypeRefParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LiteralTypeRef_0=ruleLiteralTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LiteralTypeRef_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:3563:3: ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=>this_ArrowFunctionTypeExpression_1= ruleArrowFunctionTypeExpression )
                    {
                    // InternalTypesParser.g:3563:3: ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=>this_ArrowFunctionTypeExpression_1= ruleArrowFunctionTypeExpression )
                    // InternalTypesParser.g:3564:4: ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=>this_ArrowFunctionTypeExpression_1= ruleArrowFunctionTypeExpression
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getArrowFunctionTypeExpressionParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowFunctionTypeExpression_1=ruleArrowFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArrowFunctionTypeExpression_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:3583:3: this_ArrayNTypeExpression_2= ruleArrayNTypeExpression
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getArrayNTypeExpressionParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayNTypeExpression_2=ruleArrayNTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayNTypeExpression_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:3592:3: this_TypeRefWithModifiers_3= ruleTypeRefWithModifiers
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRefWithModifiers_3=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeRefWithModifiers_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:3601:3: (otherlv_4= LeftParenthesis this_TypeRef_5= ruleTypeRef otherlv_6= RightParenthesis )
                    {
                    // InternalTypesParser.g:3601:3: (otherlv_4= LeftParenthesis this_TypeRef_5= ruleTypeRef otherlv_6= RightParenthesis )
                    // InternalTypesParser.g:3602:4: otherlv_4= LeftParenthesis this_TypeRef_5= ruleTypeRef otherlv_6= RightParenthesis
                    {
                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_4_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_4_1());
                      			
                    }
                    pushFollow(FOLLOW_56);
                    this_TypeRef_5=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeRef_5;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_4_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePrimaryTypeExpression"


    // $ANTLR start "entryRuleTypeRefWithModifiers"
    // InternalTypesParser.g:3623:1: entryRuleTypeRefWithModifiers returns [EObject current=null] : iv_ruleTypeRefWithModifiers= ruleTypeRefWithModifiers EOF ;
    public final EObject entryRuleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefWithModifiers = null;


        try {
            // InternalTypesParser.g:3623:61: (iv_ruleTypeRefWithModifiers= ruleTypeRefWithModifiers EOF )
            // InternalTypesParser.g:3624:2: iv_ruleTypeRefWithModifiers= ruleTypeRefWithModifiers EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithModifiers=ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeRefWithModifiers"


    // $ANTLR start "ruleTypeRefWithModifiers"
    // InternalTypesParser.g:3630:1: ruleTypeRefWithModifiers returns [EObject current=null] : (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )? ) ;
    public final EObject ruleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;

        Token lv_followedByQuestionMark_1_0=null;
        EObject this_TypeRefWithoutModifiers_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3636:2: ( (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )? ) )
            // InternalTypesParser.g:3637:2: (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )? )
            {
            // InternalTypesParser.g:3637:2: (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )? )
            // InternalTypesParser.g:3638:3: this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )?
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_9);
            this_TypeRefWithoutModifiers_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TypeRefWithoutModifiers_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalTypesParser.g:3646:3: ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==QuestionMark) && (synpred16_InternalTypesParser())) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // InternalTypesParser.g:3647:4: ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark )
                    {
                    // InternalTypesParser.g:3651:4: (lv_followedByQuestionMark_1_0= QuestionMark )
                    // InternalTypesParser.g:3652:5: lv_followedByQuestionMark_1_0= QuestionMark
                    {
                    lv_followedByQuestionMark_1_0=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_followedByQuestionMark_1_0, grammarAccess.getTypeRefWithModifiersAccess().getFollowedByQuestionMarkQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTypeRefWithModifiersRule());
                      					}
                      					setWithLastConsumed(current, "followedByQuestionMark", lv_followedByQuestionMark_1_0 != null, "?");
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeRefWithModifiers"


    // $ANTLR start "entryRuleTypeRefWithoutModifiers"
    // InternalTypesParser.g:3668:1: entryRuleTypeRefWithoutModifiers returns [EObject current=null] : iv_ruleTypeRefWithoutModifiers= ruleTypeRefWithoutModifiers EOF ;
    public final EObject entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefWithoutModifiers = null;


        try {
            // InternalTypesParser.g:3668:64: (iv_ruleTypeRefWithoutModifiers= ruleTypeRefWithoutModifiers EOF )
            // InternalTypesParser.g:3669:2: iv_ruleTypeRefWithoutModifiers= ruleTypeRefWithoutModifiers EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithoutModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithoutModifiers=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithoutModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeRefWithoutModifiers"


    // $ANTLR start "ruleTypeRefWithoutModifiers"
    // InternalTypesParser.g:3675:1: ruleTypeRefWithoutModifiers returns [EObject current=null] : ( ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )? ) | this_TypeTypeRef_3= ruleTypeTypeRef | this_FunctionTypeExpressionOLD_4= ruleFunctionTypeExpressionOLD | this_UnionTypeExpressionOLD_5= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_6= ruleIntersectionTypeExpressionOLD ) ;
    public final EObject ruleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;

        Token lv_dynamic_2_0=null;
        EObject this_ParameterizedTypeRef_0 = null;

        EObject this_ThisTypeRef_1 = null;

        EObject this_TypeTypeRef_3 = null;

        EObject this_FunctionTypeExpressionOLD_4 = null;

        EObject this_UnionTypeExpressionOLD_5 = null;

        EObject this_IntersectionTypeExpressionOLD_6 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3681:2: ( ( ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )? ) | this_TypeTypeRef_3= ruleTypeTypeRef | this_FunctionTypeExpressionOLD_4= ruleFunctionTypeExpressionOLD | this_UnionTypeExpressionOLD_5= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_6= ruleIntersectionTypeExpressionOLD ) )
            // InternalTypesParser.g:3682:2: ( ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )? ) | this_TypeTypeRef_3= ruleTypeTypeRef | this_FunctionTypeExpressionOLD_4= ruleFunctionTypeExpressionOLD | this_UnionTypeExpressionOLD_5= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_6= ruleIntersectionTypeExpressionOLD )
            {
            // InternalTypesParser.g:3682:2: ( ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )? ) | this_TypeTypeRef_3= ruleTypeTypeRef | this_FunctionTypeExpressionOLD_4= ruleFunctionTypeExpressionOLD | this_UnionTypeExpressionOLD_5= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_6= ruleIntersectionTypeExpressionOLD )
            int alt75=5;
            switch ( input.LA(1) ) {
            case Undefined:
            case Indexed:
            case Null:
            case This_1:
            case Void:
            case Any:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt75=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt75=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt75=3;
                }
                break;
            case Union:
                {
                alt75=4;
                }
                break;
            case Intersection:
                {
                alt75=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }

            switch (alt75) {
                case 1 :
                    // InternalTypesParser.g:3683:3: ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )? )
                    {
                    // InternalTypesParser.g:3683:3: ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )? )
                    // InternalTypesParser.g:3684:4: (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )?
                    {
                    // InternalTypesParser.g:3684:4: (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef )
                    int alt73=2;
                    switch ( input.LA(1) ) {
                    case Undefined:
                    case Indexed:
                    case Null:
                    case Void:
                    case Any:
                    case RULE_IDENTIFIER:
                        {
                        alt73=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA73_4 = input.LA(3);

                            if ( (LA73_4==This_1) ) {
                                alt73=2;
                            }
                            else if ( (LA73_4==Undefined||LA73_4==Indexed||LA73_4==Null||LA73_4==Void||LA73_4==Any||LA73_4==RULE_IDENTIFIER) ) {
                                alt73=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 73, 4, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA73_5 = input.LA(3);

                            if ( (LA73_5==Undefined||LA73_5==Indexed||LA73_5==Null||LA73_5==Void||LA73_5==Any||LA73_5==RULE_IDENTIFIER) ) {
                                alt73=1;
                            }
                            else if ( (LA73_5==This_1) ) {
                                alt73=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 73, 5, input);

                                throw nvae;
                            }
                            }
                            break;
                        case This_1:
                            {
                            alt73=2;
                            }
                            break;
                        case Undefined:
                        case Indexed:
                        case Null:
                        case Void:
                        case Any:
                        case RULE_IDENTIFIER:
                            {
                            alt73=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 73, 2, input);

                            throw nvae;
                        }

                        }
                        break;
                    case This_1:
                        {
                        alt73=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 73, 0, input);

                        throw nvae;
                    }

                    switch (alt73) {
                        case 1 :
                            // InternalTypesParser.g:3685:5: this_ParameterizedTypeRef_0= ruleParameterizedTypeRef
                            {
                            if ( state.backtracking==0 ) {

                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0());
                              				
                            }
                            pushFollow(FOLLOW_68);
                            this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ParameterizedTypeRef_0;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalTypesParser.g:3694:5: this_ThisTypeRef_1= ruleThisTypeRef
                            {
                            if ( state.backtracking==0 ) {

                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1());
                              				
                            }
                            pushFollow(FOLLOW_68);
                            this_ThisTypeRef_1=ruleThisTypeRef();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ThisTypeRef_1;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }

                    // InternalTypesParser.g:3703:4: ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==PlusSign) && (synpred17_InternalTypesParser())) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // InternalTypesParser.g:3704:5: ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign )
                            {
                            // InternalTypesParser.g:3708:5: (lv_dynamic_2_0= PlusSign )
                            // InternalTypesParser.g:3709:6: lv_dynamic_2_0= PlusSign
                            {
                            lv_dynamic_2_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_dynamic_2_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getTypeRefWithoutModifiersRule());
                              						}
                              						setWithLastConsumed(current, "dynamic", lv_dynamic_2_0 != null, "+");
                              					
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:3723:3: this_TypeTypeRef_3= ruleTypeTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_3=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeTypeRef_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:3732:3: this_FunctionTypeExpressionOLD_4= ruleFunctionTypeExpressionOLD
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionTypeExpressionOLD_4=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FunctionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:3741:3: this_UnionTypeExpressionOLD_5= ruleUnionTypeExpressionOLD
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_5=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UnionTypeExpressionOLD_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:3750:3: this_IntersectionTypeExpressionOLD_6= ruleIntersectionTypeExpressionOLD
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_6=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IntersectionTypeExpressionOLD_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeRefWithoutModifiers"


    // $ANTLR start "entryRuleTypeRefFunctionTypeExpression"
    // InternalTypesParser.g:3762:1: entryRuleTypeRefFunctionTypeExpression returns [EObject current=null] : iv_ruleTypeRefFunctionTypeExpression= ruleTypeRefFunctionTypeExpression EOF ;
    public final EObject entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefFunctionTypeExpression = null;


        try {
            // InternalTypesParser.g:3762:70: (iv_ruleTypeRefFunctionTypeExpression= ruleTypeRefFunctionTypeExpression EOF )
            // InternalTypesParser.g:3763:2: iv_ruleTypeRefFunctionTypeExpression= ruleTypeRefFunctionTypeExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefFunctionTypeExpression=ruleTypeRefFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeRefFunctionTypeExpression"


    // $ANTLR start "ruleTypeRefFunctionTypeExpression"
    // InternalTypesParser.g:3769:1: ruleTypeRefFunctionTypeExpression returns [EObject current=null] : (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ArrayNTypeExpression_1= ruleArrayNTypeExpression | this_TypeTypeRef_2= ruleTypeTypeRef | this_UnionTypeExpressionOLD_3= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_4= ruleIntersectionTypeExpressionOLD ) ;
    public final EObject ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ParameterizedTypeRef_0 = null;

        EObject this_ArrayNTypeExpression_1 = null;

        EObject this_TypeTypeRef_2 = null;

        EObject this_UnionTypeExpressionOLD_3 = null;

        EObject this_IntersectionTypeExpressionOLD_4 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3775:2: ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ArrayNTypeExpression_1= ruleArrayNTypeExpression | this_TypeTypeRef_2= ruleTypeTypeRef | this_UnionTypeExpressionOLD_3= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_4= ruleIntersectionTypeExpressionOLD ) )
            // InternalTypesParser.g:3776:2: (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ArrayNTypeExpression_1= ruleArrayNTypeExpression | this_TypeTypeRef_2= ruleTypeTypeRef | this_UnionTypeExpressionOLD_3= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_4= ruleIntersectionTypeExpressionOLD )
            {
            // InternalTypesParser.g:3776:2: (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ArrayNTypeExpression_1= ruleArrayNTypeExpression | this_TypeTypeRef_2= ruleTypeTypeRef | this_UnionTypeExpressionOLD_3= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_4= ruleIntersectionTypeExpressionOLD )
            int alt76=5;
            switch ( input.LA(1) ) {
            case Undefined:
            case Indexed:
            case Null:
            case Void:
            case Any:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt76=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt76=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt76=3;
                }
                break;
            case Union:
                {
                alt76=4;
                }
                break;
            case Intersection:
                {
                alt76=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }

            switch (alt76) {
                case 1 :
                    // InternalTypesParser.g:3777:3: this_ParameterizedTypeRef_0= ruleParameterizedTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRef_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:3786:3: this_ArrayNTypeExpression_1= ruleArrayNTypeExpression
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getArrayNTypeExpressionParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayNTypeExpression_1=ruleArrayNTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayNTypeExpression_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:3795:3: this_TypeTypeRef_2= ruleTypeTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_2=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeTypeRef_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:3804:3: this_UnionTypeExpressionOLD_3= ruleUnionTypeExpressionOLD
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UnionTypeExpressionOLD_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:3813:3: this_IntersectionTypeExpressionOLD_4= ruleIntersectionTypeExpressionOLD
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IntersectionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeRefFunctionTypeExpression"


    // $ANTLR start "entryRuleTypeArgInTypeTypeRef"
    // InternalTypesParser.g:3825:1: entryRuleTypeArgInTypeTypeRef returns [EObject current=null] : iv_ruleTypeArgInTypeTypeRef= ruleTypeArgInTypeTypeRef EOF ;
    public final EObject entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeArgInTypeTypeRef = null;


        try {
            // InternalTypesParser.g:3825:61: (iv_ruleTypeArgInTypeTypeRef= ruleTypeArgInTypeTypeRef EOF )
            // InternalTypesParser.g:3826:2: iv_ruleTypeArgInTypeTypeRef= ruleTypeArgInTypeTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgInTypeTypeRef=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgInTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeArgInTypeTypeRef"


    // $ANTLR start "ruleTypeArgInTypeTypeRef"
    // InternalTypesParser.g:3832:1: ruleTypeArgInTypeTypeRef returns [EObject current=null] : (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ThisTypeRefNominal_1= ruleThisTypeRefNominal | ( ( ( () QuestionMark ) )=>this_WildcardOldNotation_2= ruleWildcardOldNotation ) ) ;
    public final EObject ruleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_ParameterizedTypeRefNominal_0 = null;

        EObject this_ThisTypeRefNominal_1 = null;

        EObject this_WildcardOldNotation_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3838:2: ( (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ThisTypeRefNominal_1= ruleThisTypeRefNominal | ( ( ( () QuestionMark ) )=>this_WildcardOldNotation_2= ruleWildcardOldNotation ) ) )
            // InternalTypesParser.g:3839:2: (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ThisTypeRefNominal_1= ruleThisTypeRefNominal | ( ( ( () QuestionMark ) )=>this_WildcardOldNotation_2= ruleWildcardOldNotation ) )
            {
            // InternalTypesParser.g:3839:2: (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ThisTypeRefNominal_1= ruleThisTypeRefNominal | ( ( ( () QuestionMark ) )=>this_WildcardOldNotation_2= ruleWildcardOldNotation ) )
            int alt77=3;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==Undefined||LA77_0==Indexed||LA77_0==Null||LA77_0==Void||LA77_0==Any||LA77_0==RULE_IDENTIFIER) ) {
                alt77=1;
            }
            else if ( (LA77_0==This_1) ) {
                alt77=2;
            }
            else if ( (LA77_0==QuestionMark) && (synpred18_InternalTypesParser())) {
                alt77=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    // InternalTypesParser.g:3840:3: this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:3849:3: this_ThisTypeRefNominal_1= ruleThisTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_1=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisTypeRefNominal_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:3858:3: ( ( ( () QuestionMark ) )=>this_WildcardOldNotation_2= ruleWildcardOldNotation )
                    {
                    // InternalTypesParser.g:3858:3: ( ( ( () QuestionMark ) )=>this_WildcardOldNotation_2= ruleWildcardOldNotation )
                    // InternalTypesParser.g:3859:4: ( ( () QuestionMark ) )=>this_WildcardOldNotation_2= ruleWildcardOldNotation
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardOldNotationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardOldNotation_2=ruleWildcardOldNotation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_WildcardOldNotation_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeArgInTypeTypeRef"


    // $ANTLR start "entryRuleLiteralTypeRef"
    // InternalTypesParser.g:3878:1: entryRuleLiteralTypeRef returns [EObject current=null] : iv_ruleLiteralTypeRef= ruleLiteralTypeRef EOF ;
    public final EObject entryRuleLiteralTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLiteralTypeRef = null;


        try {
            // InternalTypesParser.g:3878:55: (iv_ruleLiteralTypeRef= ruleLiteralTypeRef EOF )
            // InternalTypesParser.g:3879:2: iv_ruleLiteralTypeRef= ruleLiteralTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralTypeRef=ruleLiteralTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLiteralTypeRef"


    // $ANTLR start "ruleLiteralTypeRef"
    // InternalTypesParser.g:3885:1: ruleLiteralTypeRef returns [EObject current=null] : (this_BooleanLiteralTypeRef_0= ruleBooleanLiteralTypeRef | this_NumericLiteralTypeRef_1= ruleNumericLiteralTypeRef | this_StringLiteralTypeRef_2= ruleStringLiteralTypeRef ) ;
    public final EObject ruleLiteralTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_BooleanLiteralTypeRef_0 = null;

        EObject this_NumericLiteralTypeRef_1 = null;

        EObject this_StringLiteralTypeRef_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3891:2: ( (this_BooleanLiteralTypeRef_0= ruleBooleanLiteralTypeRef | this_NumericLiteralTypeRef_1= ruleNumericLiteralTypeRef | this_StringLiteralTypeRef_2= ruleStringLiteralTypeRef ) )
            // InternalTypesParser.g:3892:2: (this_BooleanLiteralTypeRef_0= ruleBooleanLiteralTypeRef | this_NumericLiteralTypeRef_1= ruleNumericLiteralTypeRef | this_StringLiteralTypeRef_2= ruleStringLiteralTypeRef )
            {
            // InternalTypesParser.g:3892:2: (this_BooleanLiteralTypeRef_0= ruleBooleanLiteralTypeRef | this_NumericLiteralTypeRef_1= ruleNumericLiteralTypeRef | this_StringLiteralTypeRef_2= ruleStringLiteralTypeRef )
            int alt78=3;
            switch ( input.LA(1) ) {
            case False:
            case True:
                {
                alt78=1;
                }
                break;
            case PlusSign:
            case HyphenMinus:
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
                {
                alt78=2;
                }
                break;
            case RULE_STRING:
                {
                alt78=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }

            switch (alt78) {
                case 1 :
                    // InternalTypesParser.g:3893:3: this_BooleanLiteralTypeRef_0= ruleBooleanLiteralTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralTypeRefAccess().getBooleanLiteralTypeRefParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BooleanLiteralTypeRef_0=ruleBooleanLiteralTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BooleanLiteralTypeRef_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:3902:3: this_NumericLiteralTypeRef_1= ruleNumericLiteralTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralTypeRefAccess().getNumericLiteralTypeRefParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NumericLiteralTypeRef_1=ruleNumericLiteralTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NumericLiteralTypeRef_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:3911:3: this_StringLiteralTypeRef_2= ruleStringLiteralTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralTypeRefAccess().getStringLiteralTypeRefParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_StringLiteralTypeRef_2=ruleStringLiteralTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_StringLiteralTypeRef_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLiteralTypeRef"


    // $ANTLR start "entryRuleBooleanLiteralTypeRef"
    // InternalTypesParser.g:3923:1: entryRuleBooleanLiteralTypeRef returns [EObject current=null] : iv_ruleBooleanLiteralTypeRef= ruleBooleanLiteralTypeRef EOF ;
    public final EObject entryRuleBooleanLiteralTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBooleanLiteralTypeRef = null;


        try {
            // InternalTypesParser.g:3923:62: (iv_ruleBooleanLiteralTypeRef= ruleBooleanLiteralTypeRef EOF )
            // InternalTypesParser.g:3924:2: iv_ruleBooleanLiteralTypeRef= ruleBooleanLiteralTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBooleanLiteralTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBooleanLiteralTypeRef=ruleBooleanLiteralTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBooleanLiteralTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBooleanLiteralTypeRef"


    // $ANTLR start "ruleBooleanLiteralTypeRef"
    // InternalTypesParser.g:3930:1: ruleBooleanLiteralTypeRef returns [EObject current=null] : ( () ( ( (lv_astValue_1_1= True | lv_astValue_1_2= False ) ) ) ) ;
    public final EObject ruleBooleanLiteralTypeRef() throws RecognitionException {
        EObject current = null;

        Token lv_astValue_1_1=null;
        Token lv_astValue_1_2=null;


        	enterRule();

        try {
            // InternalTypesParser.g:3936:2: ( ( () ( ( (lv_astValue_1_1= True | lv_astValue_1_2= False ) ) ) ) )
            // InternalTypesParser.g:3937:2: ( () ( ( (lv_astValue_1_1= True | lv_astValue_1_2= False ) ) ) )
            {
            // InternalTypesParser.g:3937:2: ( () ( ( (lv_astValue_1_1= True | lv_astValue_1_2= False ) ) ) )
            // InternalTypesParser.g:3938:3: () ( ( (lv_astValue_1_1= True | lv_astValue_1_2= False ) ) )
            {
            // InternalTypesParser.g:3938:3: ()
            // InternalTypesParser.g:3939:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBooleanLiteralTypeRefAccess().getBooleanLiteralTypeRefAction_0(),
              					current);
              			
            }

            }

            // InternalTypesParser.g:3945:3: ( ( (lv_astValue_1_1= True | lv_astValue_1_2= False ) ) )
            // InternalTypesParser.g:3946:4: ( (lv_astValue_1_1= True | lv_astValue_1_2= False ) )
            {
            // InternalTypesParser.g:3946:4: ( (lv_astValue_1_1= True | lv_astValue_1_2= False ) )
            // InternalTypesParser.g:3947:5: (lv_astValue_1_1= True | lv_astValue_1_2= False )
            {
            // InternalTypesParser.g:3947:5: (lv_astValue_1_1= True | lv_astValue_1_2= False )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==True) ) {
                alt79=1;
            }
            else if ( (LA79_0==False) ) {
                alt79=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }
            switch (alt79) {
                case 1 :
                    // InternalTypesParser.g:3948:6: lv_astValue_1_1= True
                    {
                    lv_astValue_1_1=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_astValue_1_1, grammarAccess.getBooleanLiteralTypeRefAccess().getAstValueTrueKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBooleanLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "astValue", lv_astValue_1_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:3959:6: lv_astValue_1_2= False
                    {
                    lv_astValue_1_2=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_astValue_1_2, grammarAccess.getBooleanLiteralTypeRefAccess().getAstValueFalseKeyword_1_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBooleanLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "astValue", lv_astValue_1_2, null);
                      					
                    }

                    }
                    break;

            }


            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBooleanLiteralTypeRef"


    // $ANTLR start "entryRuleNumericLiteralTypeRef"
    // InternalTypesParser.g:3976:1: entryRuleNumericLiteralTypeRef returns [EObject current=null] : iv_ruleNumericLiteralTypeRef= ruleNumericLiteralTypeRef EOF ;
    public final EObject entryRuleNumericLiteralTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNumericLiteralTypeRef = null;


        try {
            // InternalTypesParser.g:3976:62: (iv_ruleNumericLiteralTypeRef= ruleNumericLiteralTypeRef EOF )
            // InternalTypesParser.g:3977:2: iv_ruleNumericLiteralTypeRef= ruleNumericLiteralTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumericLiteralTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumericLiteralTypeRef=ruleNumericLiteralTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumericLiteralTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNumericLiteralTypeRef"


    // $ANTLR start "ruleNumericLiteralTypeRef"
    // InternalTypesParser.g:3983:1: ruleNumericLiteralTypeRef returns [EObject current=null] : ( (otherlv_0= PlusSign | ( (lv_astNegated_1_0= HyphenMinus ) ) )? ( ( (lv_astValue_2_0= RULE_INT ) ) | ( (lv_astValue_3_0= RULE_DOUBLE ) ) | ( (lv_astValue_4_0= RULE_OCTAL_INT ) ) | ( (lv_astValue_5_0= RULE_LEGACY_OCTAL_INT ) ) | ( (lv_astValue_6_0= RULE_HEX_INT ) ) | ( (lv_astValue_7_0= RULE_BINARY_INT ) ) | ( (lv_astValue_8_0= RULE_SCIENTIFIC_INT ) ) ) ) ;
    public final EObject ruleNumericLiteralTypeRef() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_astNegated_1_0=null;
        Token lv_astValue_2_0=null;
        Token lv_astValue_3_0=null;
        Token lv_astValue_4_0=null;
        Token lv_astValue_5_0=null;
        Token lv_astValue_6_0=null;
        Token lv_astValue_7_0=null;
        Token lv_astValue_8_0=null;


        	enterRule();

        try {
            // InternalTypesParser.g:3989:2: ( ( (otherlv_0= PlusSign | ( (lv_astNegated_1_0= HyphenMinus ) ) )? ( ( (lv_astValue_2_0= RULE_INT ) ) | ( (lv_astValue_3_0= RULE_DOUBLE ) ) | ( (lv_astValue_4_0= RULE_OCTAL_INT ) ) | ( (lv_astValue_5_0= RULE_LEGACY_OCTAL_INT ) ) | ( (lv_astValue_6_0= RULE_HEX_INT ) ) | ( (lv_astValue_7_0= RULE_BINARY_INT ) ) | ( (lv_astValue_8_0= RULE_SCIENTIFIC_INT ) ) ) ) )
            // InternalTypesParser.g:3990:2: ( (otherlv_0= PlusSign | ( (lv_astNegated_1_0= HyphenMinus ) ) )? ( ( (lv_astValue_2_0= RULE_INT ) ) | ( (lv_astValue_3_0= RULE_DOUBLE ) ) | ( (lv_astValue_4_0= RULE_OCTAL_INT ) ) | ( (lv_astValue_5_0= RULE_LEGACY_OCTAL_INT ) ) | ( (lv_astValue_6_0= RULE_HEX_INT ) ) | ( (lv_astValue_7_0= RULE_BINARY_INT ) ) | ( (lv_astValue_8_0= RULE_SCIENTIFIC_INT ) ) ) )
            {
            // InternalTypesParser.g:3990:2: ( (otherlv_0= PlusSign | ( (lv_astNegated_1_0= HyphenMinus ) ) )? ( ( (lv_astValue_2_0= RULE_INT ) ) | ( (lv_astValue_3_0= RULE_DOUBLE ) ) | ( (lv_astValue_4_0= RULE_OCTAL_INT ) ) | ( (lv_astValue_5_0= RULE_LEGACY_OCTAL_INT ) ) | ( (lv_astValue_6_0= RULE_HEX_INT ) ) | ( (lv_astValue_7_0= RULE_BINARY_INT ) ) | ( (lv_astValue_8_0= RULE_SCIENTIFIC_INT ) ) ) )
            // InternalTypesParser.g:3991:3: (otherlv_0= PlusSign | ( (lv_astNegated_1_0= HyphenMinus ) ) )? ( ( (lv_astValue_2_0= RULE_INT ) ) | ( (lv_astValue_3_0= RULE_DOUBLE ) ) | ( (lv_astValue_4_0= RULE_OCTAL_INT ) ) | ( (lv_astValue_5_0= RULE_LEGACY_OCTAL_INT ) ) | ( (lv_astValue_6_0= RULE_HEX_INT ) ) | ( (lv_astValue_7_0= RULE_BINARY_INT ) ) | ( (lv_astValue_8_0= RULE_SCIENTIFIC_INT ) ) )
            {
            // InternalTypesParser.g:3991:3: (otherlv_0= PlusSign | ( (lv_astNegated_1_0= HyphenMinus ) ) )?
            int alt80=3;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==PlusSign) ) {
                alt80=1;
            }
            else if ( (LA80_0==HyphenMinus) ) {
                alt80=2;
            }
            switch (alt80) {
                case 1 :
                    // InternalTypesParser.g:3992:4: otherlv_0= PlusSign
                    {
                    otherlv_0=(Token)match(input,PlusSign,FOLLOW_69); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getNumericLiteralTypeRefAccess().getPlusSignKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:3997:4: ( (lv_astNegated_1_0= HyphenMinus ) )
                    {
                    // InternalTypesParser.g:3997:4: ( (lv_astNegated_1_0= HyphenMinus ) )
                    // InternalTypesParser.g:3998:5: (lv_astNegated_1_0= HyphenMinus )
                    {
                    // InternalTypesParser.g:3998:5: (lv_astNegated_1_0= HyphenMinus )
                    // InternalTypesParser.g:3999:6: lv_astNegated_1_0= HyphenMinus
                    {
                    lv_astNegated_1_0=(Token)match(input,HyphenMinus,FOLLOW_69); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_astNegated_1_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstNegatedHyphenMinusKeyword_0_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "astNegated", lv_astNegated_1_0 != null, "-");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:4012:3: ( ( (lv_astValue_2_0= RULE_INT ) ) | ( (lv_astValue_3_0= RULE_DOUBLE ) ) | ( (lv_astValue_4_0= RULE_OCTAL_INT ) ) | ( (lv_astValue_5_0= RULE_LEGACY_OCTAL_INT ) ) | ( (lv_astValue_6_0= RULE_HEX_INT ) ) | ( (lv_astValue_7_0= RULE_BINARY_INT ) ) | ( (lv_astValue_8_0= RULE_SCIENTIFIC_INT ) ) )
            int alt81=7;
            switch ( input.LA(1) ) {
            case RULE_INT:
                {
                alt81=1;
                }
                break;
            case RULE_DOUBLE:
                {
                alt81=2;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt81=3;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt81=4;
                }
                break;
            case RULE_HEX_INT:
                {
                alt81=5;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt81=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt81=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }

            switch (alt81) {
                case 1 :
                    // InternalTypesParser.g:4013:4: ( (lv_astValue_2_0= RULE_INT ) )
                    {
                    // InternalTypesParser.g:4013:4: ( (lv_astValue_2_0= RULE_INT ) )
                    // InternalTypesParser.g:4014:5: (lv_astValue_2_0= RULE_INT )
                    {
                    // InternalTypesParser.g:4014:5: (lv_astValue_2_0= RULE_INT )
                    // InternalTypesParser.g:4015:6: lv_astValue_2_0= RULE_INT
                    {
                    lv_astValue_2_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_astValue_2_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueINTTerminalRuleCall_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_2_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.INT");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:4032:4: ( (lv_astValue_3_0= RULE_DOUBLE ) )
                    {
                    // InternalTypesParser.g:4032:4: ( (lv_astValue_3_0= RULE_DOUBLE ) )
                    // InternalTypesParser.g:4033:5: (lv_astValue_3_0= RULE_DOUBLE )
                    {
                    // InternalTypesParser.g:4033:5: (lv_astValue_3_0= RULE_DOUBLE )
                    // InternalTypesParser.g:4034:6: lv_astValue_3_0= RULE_DOUBLE
                    {
                    lv_astValue_3_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_astValue_3_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueDOUBLETerminalRuleCall_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.DOUBLE");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:4051:4: ( (lv_astValue_4_0= RULE_OCTAL_INT ) )
                    {
                    // InternalTypesParser.g:4051:4: ( (lv_astValue_4_0= RULE_OCTAL_INT ) )
                    // InternalTypesParser.g:4052:5: (lv_astValue_4_0= RULE_OCTAL_INT )
                    {
                    // InternalTypesParser.g:4052:5: (lv_astValue_4_0= RULE_OCTAL_INT )
                    // InternalTypesParser.g:4053:6: lv_astValue_4_0= RULE_OCTAL_INT
                    {
                    lv_astValue_4_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_astValue_4_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueOCTAL_INTTerminalRuleCall_1_2_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_4_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.OCTAL_INT");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:4070:4: ( (lv_astValue_5_0= RULE_LEGACY_OCTAL_INT ) )
                    {
                    // InternalTypesParser.g:4070:4: ( (lv_astValue_5_0= RULE_LEGACY_OCTAL_INT ) )
                    // InternalTypesParser.g:4071:5: (lv_astValue_5_0= RULE_LEGACY_OCTAL_INT )
                    {
                    // InternalTypesParser.g:4071:5: (lv_astValue_5_0= RULE_LEGACY_OCTAL_INT )
                    // InternalTypesParser.g:4072:6: lv_astValue_5_0= RULE_LEGACY_OCTAL_INT
                    {
                    lv_astValue_5_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_astValue_5_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueLEGACY_OCTAL_INTTerminalRuleCall_1_3_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_5_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.LEGACY_OCTAL_INT");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:4089:4: ( (lv_astValue_6_0= RULE_HEX_INT ) )
                    {
                    // InternalTypesParser.g:4089:4: ( (lv_astValue_6_0= RULE_HEX_INT ) )
                    // InternalTypesParser.g:4090:5: (lv_astValue_6_0= RULE_HEX_INT )
                    {
                    // InternalTypesParser.g:4090:5: (lv_astValue_6_0= RULE_HEX_INT )
                    // InternalTypesParser.g:4091:6: lv_astValue_6_0= RULE_HEX_INT
                    {
                    lv_astValue_6_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_astValue_6_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueHEX_INTTerminalRuleCall_1_4_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_6_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.HEX_INT");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalTypesParser.g:4108:4: ( (lv_astValue_7_0= RULE_BINARY_INT ) )
                    {
                    // InternalTypesParser.g:4108:4: ( (lv_astValue_7_0= RULE_BINARY_INT ) )
                    // InternalTypesParser.g:4109:5: (lv_astValue_7_0= RULE_BINARY_INT )
                    {
                    // InternalTypesParser.g:4109:5: (lv_astValue_7_0= RULE_BINARY_INT )
                    // InternalTypesParser.g:4110:6: lv_astValue_7_0= RULE_BINARY_INT
                    {
                    lv_astValue_7_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_astValue_7_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueBINARY_INTTerminalRuleCall_1_5_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_7_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.BINARY_INT");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 7 :
                    // InternalTypesParser.g:4127:4: ( (lv_astValue_8_0= RULE_SCIENTIFIC_INT ) )
                    {
                    // InternalTypesParser.g:4127:4: ( (lv_astValue_8_0= RULE_SCIENTIFIC_INT ) )
                    // InternalTypesParser.g:4128:5: (lv_astValue_8_0= RULE_SCIENTIFIC_INT )
                    {
                    // InternalTypesParser.g:4128:5: (lv_astValue_8_0= RULE_SCIENTIFIC_INT )
                    // InternalTypesParser.g:4129:6: lv_astValue_8_0= RULE_SCIENTIFIC_INT
                    {
                    lv_astValue_8_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_astValue_8_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueSCIENTIFIC_INTTerminalRuleCall_1_6_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_8_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.SCIENTIFIC_INT");
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNumericLiteralTypeRef"


    // $ANTLR start "entryRuleStringLiteralTypeRef"
    // InternalTypesParser.g:4150:1: entryRuleStringLiteralTypeRef returns [EObject current=null] : iv_ruleStringLiteralTypeRef= ruleStringLiteralTypeRef EOF ;
    public final EObject entryRuleStringLiteralTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStringLiteralTypeRef = null;


        try {
            // InternalTypesParser.g:4150:61: (iv_ruleStringLiteralTypeRef= ruleStringLiteralTypeRef EOF )
            // InternalTypesParser.g:4151:2: iv_ruleStringLiteralTypeRef= ruleStringLiteralTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringLiteralTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringLiteralTypeRef=ruleStringLiteralTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringLiteralTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStringLiteralTypeRef"


    // $ANTLR start "ruleStringLiteralTypeRef"
    // InternalTypesParser.g:4157:1: ruleStringLiteralTypeRef returns [EObject current=null] : ( (lv_astValue_0_0= RULE_STRING ) ) ;
    public final EObject ruleStringLiteralTypeRef() throws RecognitionException {
        EObject current = null;

        Token lv_astValue_0_0=null;


        	enterRule();

        try {
            // InternalTypesParser.g:4163:2: ( ( (lv_astValue_0_0= RULE_STRING ) ) )
            // InternalTypesParser.g:4164:2: ( (lv_astValue_0_0= RULE_STRING ) )
            {
            // InternalTypesParser.g:4164:2: ( (lv_astValue_0_0= RULE_STRING ) )
            // InternalTypesParser.g:4165:3: (lv_astValue_0_0= RULE_STRING )
            {
            // InternalTypesParser.g:4165:3: (lv_astValue_0_0= RULE_STRING )
            // InternalTypesParser.g:4166:4: lv_astValue_0_0= RULE_STRING
            {
            lv_astValue_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_astValue_0_0, grammarAccess.getStringLiteralTypeRefAccess().getAstValueSTRINGTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getStringLiteralTypeRefRule());
              				}
              				setWithLastConsumed(
              					current,
              					"astValue",
              					lv_astValue_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.STRING");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStringLiteralTypeRef"


    // $ANTLR start "entryRuleThisTypeRef"
    // InternalTypesParser.g:4185:1: entryRuleThisTypeRef returns [EObject current=null] : iv_ruleThisTypeRef= ruleThisTypeRef EOF ;
    public final EObject entryRuleThisTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisTypeRef = null;


        try {
            // InternalTypesParser.g:4185:52: (iv_ruleThisTypeRef= ruleThisTypeRef EOF )
            // InternalTypesParser.g:4186:2: iv_ruleThisTypeRef= ruleThisTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRef=ruleThisTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleThisTypeRef"


    // $ANTLR start "ruleThisTypeRef"
    // InternalTypesParser.g:4192:1: ruleThisTypeRef returns [EObject current=null] : (this_ThisTypeRefNominal_0= ruleThisTypeRefNominal | this_ThisTypeRefStructural_1= ruleThisTypeRefStructural ) ;
    public final EObject ruleThisTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_ThisTypeRefNominal_0 = null;

        EObject this_ThisTypeRefStructural_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4198:2: ( (this_ThisTypeRefNominal_0= ruleThisTypeRefNominal | this_ThisTypeRefStructural_1= ruleThisTypeRefStructural ) )
            // InternalTypesParser.g:4199:2: (this_ThisTypeRefNominal_0= ruleThisTypeRefNominal | this_ThisTypeRefStructural_1= ruleThisTypeRefStructural )
            {
            // InternalTypesParser.g:4199:2: (this_ThisTypeRefNominal_0= ruleThisTypeRefNominal | this_ThisTypeRefStructural_1= ruleThisTypeRefStructural )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==This_1) ) {
                alt82=1;
            }
            else if ( (LA82_0==Tilde) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // InternalTypesParser.g:4200:3: this_ThisTypeRefNominal_0= ruleThisTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_0=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:4209:3: this_ThisTypeRefStructural_1= ruleThisTypeRefStructural
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefStructural_1=ruleThisTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleThisTypeRef"


    // $ANTLR start "entryRuleThisTypeRefNominal"
    // InternalTypesParser.g:4221:1: entryRuleThisTypeRefNominal returns [EObject current=null] : iv_ruleThisTypeRefNominal= ruleThisTypeRefNominal EOF ;
    public final EObject entryRuleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisTypeRefNominal = null;


        try {
            // InternalTypesParser.g:4221:59: (iv_ruleThisTypeRefNominal= ruleThisTypeRefNominal EOF )
            // InternalTypesParser.g:4222:2: iv_ruleThisTypeRefNominal= ruleThisTypeRefNominal EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefNominal=ruleThisTypeRefNominal();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleThisTypeRefNominal"


    // $ANTLR start "ruleThisTypeRefNominal"
    // InternalTypesParser.g:4228:1: ruleThisTypeRefNominal returns [EObject current=null] : ( () otherlv_1= This_1 ) ;
    public final EObject ruleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalTypesParser.g:4234:2: ( ( () otherlv_1= This_1 ) )
            // InternalTypesParser.g:4235:2: ( () otherlv_1= This_1 )
            {
            // InternalTypesParser.g:4235:2: ( () otherlv_1= This_1 )
            // InternalTypesParser.g:4236:3: () otherlv_1= This_1
            {
            // InternalTypesParser.g:4236:3: ()
            // InternalTypesParser.g:4237:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getThisTypeRefNominalAccess().getThisTypeRefNominalAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleThisTypeRefNominal"


    // $ANTLR start "entryRuleThisTypeRefStructural"
    // InternalTypesParser.g:4251:1: entryRuleThisTypeRefStructural returns [EObject current=null] : iv_ruleThisTypeRefStructural= ruleThisTypeRefStructural EOF ;
    public final EObject entryRuleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisTypeRefStructural = null;


        try {
            // InternalTypesParser.g:4251:62: (iv_ruleThisTypeRefStructural= ruleThisTypeRefStructural EOF )
            // InternalTypesParser.g:4252:2: iv_ruleThisTypeRefStructural= ruleThisTypeRefStructural EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefStructural=ruleThisTypeRefStructural();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleThisTypeRefStructural"


    // $ANTLR start "ruleThisTypeRefStructural"
    // InternalTypesParser.g:4258:1: ruleThisTypeRefStructural returns [EObject current=null] : ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) otherlv_1= This_1 (otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current] )? ) ;
    public final EObject ruleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;

        EObject this_TStructMemberList_3 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4264:2: ( ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) otherlv_1= This_1 (otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current] )? ) )
            // InternalTypesParser.g:4265:2: ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) otherlv_1= This_1 (otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current] )? )
            {
            // InternalTypesParser.g:4265:2: ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) otherlv_1= This_1 (otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current] )? )
            // InternalTypesParser.g:4266:3: ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) otherlv_1= This_1 (otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current] )?
            {
            // InternalTypesParser.g:4266:3: ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) )
            // InternalTypesParser.g:4267:4: (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator )
            {
            // InternalTypesParser.g:4267:4: (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator )
            // InternalTypesParser.g:4268:5: lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_70);
            lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThisTypeRefStructuralRule());
              					}
              					set(
              						current,
              						"definedTypingStrategy",
              						lv_definedTypingStrategy_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyUseSiteOperator");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,This_1,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1());
              		
            }
            // InternalTypesParser.g:4289:3: (otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current] )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==With) ) {
                int LA83_1 = input.LA(2);

                if ( (LA83_1==LeftCurlyBracket) ) {
                    alt83=1;
                }
            }
            switch (alt83) {
                case 1 :
                    // InternalTypesParser.g:4290:4: otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current]
                    {
                    otherlv_2=(Token)match(input,With,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getThisTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_3=ruleTStructMemberList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructMemberList_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleThisTypeRefStructural"


    // $ANTLR start "entryRuleFunctionTypeExpressionOLD"
    // InternalTypesParser.g:4310:1: entryRuleFunctionTypeExpressionOLD returns [EObject current=null] : iv_ruleFunctionTypeExpressionOLD= ruleFunctionTypeExpressionOLD EOF ;
    public final EObject entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionTypeExpressionOLD = null;


        try {
            // InternalTypesParser.g:4310:66: (iv_ruleFunctionTypeExpressionOLD= ruleFunctionTypeExpressionOLD EOF )
            // InternalTypesParser.g:4311:2: iv_ruleFunctionTypeExpressionOLD= ruleFunctionTypeExpressionOLD EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionTypeExpressionOLD=ruleFunctionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionTypeExpressionOLD"


    // $ANTLR start "ruleFunctionTypeExpressionOLD"
    // InternalTypesParser.g:4317:1: ruleFunctionTypeExpressionOLD returns [EObject current=null] : ( () otherlv_1= LeftCurlyBracket (otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis )? otherlv_7= Function (otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign )? otherlv_13= LeftParenthesis this_TAnonymousFormalParameterList_14= ruleTAnonymousFormalParameterList[$current] otherlv_15= RightParenthesis (this_ColonSepReturnTypeRef_16= ruleColonSepReturnTypeRef[$current] )? otherlv_17= RightCurlyBracket ) ;
    public final EObject ruleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        EObject lv_declaredThisType_5_0 = null;

        EObject lv_ownedTypeVars_9_0 = null;

        EObject lv_ownedTypeVars_11_0 = null;

        EObject this_TAnonymousFormalParameterList_14 = null;

        EObject this_ColonSepReturnTypeRef_16 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4323:2: ( ( () otherlv_1= LeftCurlyBracket (otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis )? otherlv_7= Function (otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign )? otherlv_13= LeftParenthesis this_TAnonymousFormalParameterList_14= ruleTAnonymousFormalParameterList[$current] otherlv_15= RightParenthesis (this_ColonSepReturnTypeRef_16= ruleColonSepReturnTypeRef[$current] )? otherlv_17= RightCurlyBracket ) )
            // InternalTypesParser.g:4324:2: ( () otherlv_1= LeftCurlyBracket (otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis )? otherlv_7= Function (otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign )? otherlv_13= LeftParenthesis this_TAnonymousFormalParameterList_14= ruleTAnonymousFormalParameterList[$current] otherlv_15= RightParenthesis (this_ColonSepReturnTypeRef_16= ruleColonSepReturnTypeRef[$current] )? otherlv_17= RightCurlyBracket )
            {
            // InternalTypesParser.g:4324:2: ( () otherlv_1= LeftCurlyBracket (otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis )? otherlv_7= Function (otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign )? otherlv_13= LeftParenthesis this_TAnonymousFormalParameterList_14= ruleTAnonymousFormalParameterList[$current] otherlv_15= RightParenthesis (this_ColonSepReturnTypeRef_16= ruleColonSepReturnTypeRef[$current] )? otherlv_17= RightCurlyBracket )
            // InternalTypesParser.g:4325:3: () otherlv_1= LeftCurlyBracket (otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis )? otherlv_7= Function (otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign )? otherlv_13= LeftParenthesis this_TAnonymousFormalParameterList_14= ruleTAnonymousFormalParameterList[$current] otherlv_15= RightParenthesis (this_ColonSepReturnTypeRef_16= ruleColonSepReturnTypeRef[$current] )? otherlv_17= RightCurlyBracket
            {
            // InternalTypesParser.g:4325:3: ()
            // InternalTypesParser.g:4326:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionTypeExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_72); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            // InternalTypesParser.g:4336:3: (otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==CommercialAt) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // InternalTypesParser.g:4337:4: otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis
                    {
                    otherlv_2=(Token)match(input,CommercialAt,FOLLOW_73); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0());
                      			
                    }
                    otherlv_3=(Token)match(input,This,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1());
                      			
                    }
                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_74); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2());
                      			
                    }
                    // InternalTypesParser.g:4349:4: ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) )
                    // InternalTypesParser.g:4350:5: (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression )
                    {
                    // InternalTypesParser.g:4350:5: (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression )
                    // InternalTypesParser.g:4351:6: lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0());
                      					
                    }
                    pushFollow(FOLLOW_56);
                    lv_declaredThisType_5_0=ruleTypeRefFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						set(
                      							current,
                      							"declaredThisType",
                      							lv_declaredThisType_5_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRefFunctionTypeExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_60); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4());
                      			
                    }

                    }
                    break;

            }

            otherlv_7=(Token)match(input,Function,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3());
              		
            }
            // InternalTypesParser.g:4377:3: (otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==LessThanSign) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // InternalTypesParser.g:4378:4: otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign
                    {
                    otherlv_8=(Token)match(input,LessThanSign,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0());
                      			
                    }
                    // InternalTypesParser.g:4382:4: ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) )
                    // InternalTypesParser.g:4383:5: (lv_ownedTypeVars_9_0= ruleTypeVariable )
                    {
                    // InternalTypesParser.g:4383:5: (lv_ownedTypeVars_9_0= ruleTypeVariable )
                    // InternalTypesParser.g:4384:6: lv_ownedTypeVars_9_0= ruleTypeVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_1_0());
                      					
                    }
                    pushFollow(FOLLOW_43);
                    lv_ownedTypeVars_9_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						add(
                      							current,
                      							"ownedTypeVars",
                      							lv_ownedTypeVars_9_0,
                      							"org.eclipse.n4js.ts.Types.TypeVariable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:4401:4: (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )*
                    loop85:
                    do {
                        int alt85=2;
                        int LA85_0 = input.LA(1);

                        if ( (LA85_0==Comma) ) {
                            alt85=1;
                        }


                        switch (alt85) {
                    	case 1 :
                    	    // InternalTypesParser.g:4402:5: otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) )
                    	    {
                    	    otherlv_10=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_10, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:4406:5: ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) )
                    	    // InternalTypesParser.g:4407:6: (lv_ownedTypeVars_11_0= ruleTypeVariable )
                    	    {
                    	    // InternalTypesParser.g:4407:6: (lv_ownedTypeVars_11_0= ruleTypeVariable )
                    	    // InternalTypesParser.g:4408:7: lv_ownedTypeVars_11_0= ruleTypeVariable
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_43);
                    	    lv_ownedTypeVars_11_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"ownedTypeVars",
                    	      								lv_ownedTypeVars_11_0,
                    	      								"org.eclipse.n4js.ts.Types.TypeVariable");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop85;
                        }
                    } while (true);

                    otherlv_12=(Token)match(input,GreaterThanSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3());
                      			
                    }

                    }
                    break;

            }

            otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_76); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_13, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionTypeExpressionOLDRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6());
              		
            }
            pushFollow(FOLLOW_56);
            this_TAnonymousFormalParameterList_14=ruleTAnonymousFormalParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TAnonymousFormalParameterList_14;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_77); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_15, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7());
              		
            }
            // InternalTypesParser.g:4450:3: (this_ColonSepReturnTypeRef_16= ruleColonSepReturnTypeRef[$current] )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==Colon) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // InternalTypesParser.g:4451:4: this_ColonSepReturnTypeRef_16= ruleColonSepReturnTypeRef[$current]
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionTypeExpressionOLDRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getColonSepReturnTypeRefParserRuleCall_8());
                      			
                    }
                    pushFollow(FOLLOW_18);
                    this_ColonSepReturnTypeRef_16=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_16;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            otherlv_17=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_17, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionTypeExpressionOLD"


    // $ANTLR start "entryRuleArrowFunctionTypeExpression"
    // InternalTypesParser.g:4471:1: entryRuleArrowFunctionTypeExpression returns [EObject current=null] : iv_ruleArrowFunctionTypeExpression= ruleArrowFunctionTypeExpression EOF ;
    public final EObject entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrowFunctionTypeExpression = null;


        try {
            // InternalTypesParser.g:4471:68: (iv_ruleArrowFunctionTypeExpression= ruleArrowFunctionTypeExpression EOF )
            // InternalTypesParser.g:4472:2: iv_ruleArrowFunctionTypeExpression= ruleArrowFunctionTypeExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrowFunctionTypeExpression=ruleArrowFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrowFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleArrowFunctionTypeExpression"


    // $ANTLR start "ruleArrowFunctionTypeExpression"
    // InternalTypesParser.g:4478:1: ruleArrowFunctionTypeExpression returns [EObject current=null] : ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) ) ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) ) ;
    public final EObject ruleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject this_TAnonymousFormalParameterList_2 = null;

        EObject lv_returnTypeRef_5_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4484:2: ( ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) ) ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) ) )
            // InternalTypesParser.g:4485:2: ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) ) ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) )
            {
            // InternalTypesParser.g:4485:2: ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) ) ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) )
            // InternalTypesParser.g:4486:3: ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) ) ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) )
            {
            // InternalTypesParser.g:4486:3: ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) )
            // InternalTypesParser.g:4487:4: ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign )
            {
            // InternalTypesParser.g:4496:4: ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign )
            // InternalTypesParser.g:4497:5: () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign
            {
            // InternalTypesParser.g:4497:5: ()
            // InternalTypesParser.g:4498:6: 
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getArrowFunctionTypeExpressionAccess().getFunctionTypeExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_76); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_0_0_1());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getArrowFunctionTypeExpressionRule());
              					}
              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_2());
              				
            }
            pushFollow(FOLLOW_56);
            this_TAnonymousFormalParameterList_2=ruleTAnonymousFormalParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_TAnonymousFormalParameterList_2;
              					afterParserOrEnumRuleCall();
              				
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_0_0_3());
              				
            }
            otherlv_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_79); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_4, grammarAccess.getArrowFunctionTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_4());
              				
            }

            }


            }

            // InternalTypesParser.g:4529:3: ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) )
            // InternalTypesParser.g:4530:4: (lv_returnTypeRef_5_0= rulePrimaryTypeExpression )
            {
            // InternalTypesParser.g:4530:4: (lv_returnTypeRef_5_0= rulePrimaryTypeExpression )
            // InternalTypesParser.g:4531:5: lv_returnTypeRef_5_0= rulePrimaryTypeExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_5_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrowFunctionTypeExpressionRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_5_0,
              						"org.eclipse.n4js.ts.TypeExpressions.PrimaryTypeExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleArrowFunctionTypeExpression"


    // $ANTLR start "ruleTAnonymousFormalParameterList"
    // InternalTypesParser.g:4553:1: ruleTAnonymousFormalParameterList[EObject in_current] returns [EObject current=in_current] : ( ( (lv_fpars_0_0= ruleTAnonymousFormalParameter ) ) (otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) ) )* )? ;
    public final EObject ruleTAnonymousFormalParameterList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_fpars_0_0 = null;

        EObject lv_fpars_2_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4559:2: ( ( ( (lv_fpars_0_0= ruleTAnonymousFormalParameter ) ) (otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) ) )* )? )
            // InternalTypesParser.g:4560:2: ( ( (lv_fpars_0_0= ruleTAnonymousFormalParameter ) ) (otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) ) )* )?
            {
            // InternalTypesParser.g:4560:2: ( ( (lv_fpars_0_0= ruleTAnonymousFormalParameter ) ) (otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) ) )* )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( ((LA89_0>=Intersection && LA89_0<=Constructor)||LA89_0==Implements||(LA89_0>=Promisify && LA89_0<=Interface)||(LA89_0>=Protected && LA89_0<=Abstract)||LA89_0==External||(LA89_0>=Indexed && LA89_0<=Project)||LA89_0==Public||LA89_0==Static||LA89_0==Target||(LA89_0>=Async && LA89_0<=Await)||LA89_0==Union||(LA89_0>=Yield && LA89_0<=This)||(LA89_0>=From && LA89_0<=This_1)||(LA89_0>=Type && LA89_0<=Void)||(LA89_0>=FullStopFullStopFullStop && LA89_0<=Any)||(LA89_0>=Get && LA89_0<=Let)||(LA89_0>=Out && LA89_0<=Set)||LA89_0==As||LA89_0==Of||LA89_0==LeftCurlyBracket||LA89_0==Tilde||LA89_0==RULE_IDENTIFIER) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // InternalTypesParser.g:4561:3: ( (lv_fpars_0_0= ruleTAnonymousFormalParameter ) ) (otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) ) )*
                    {
                    // InternalTypesParser.g:4561:3: ( (lv_fpars_0_0= ruleTAnonymousFormalParameter ) )
                    // InternalTypesParser.g:4562:4: (lv_fpars_0_0= ruleTAnonymousFormalParameter )
                    {
                    // InternalTypesParser.g:4562:4: (lv_fpars_0_0= ruleTAnonymousFormalParameter )
                    // InternalTypesParser.g:4563:5: lv_fpars_0_0= ruleTAnonymousFormalParameter
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_80);
                    lv_fpars_0_0=ruleTAnonymousFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                      					}
                      					add(
                      						current,
                      						"fpars",
                      						lv_fpars_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }

                    // InternalTypesParser.g:4580:3: (otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) ) )*
                    loop88:
                    do {
                        int alt88=2;
                        int LA88_0 = input.LA(1);

                        if ( (LA88_0==Comma) ) {
                            alt88=1;
                        }


                        switch (alt88) {
                    	case 1 :
                    	    // InternalTypesParser.g:4581:4: otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) )
                    	    {
                    	    otherlv_1=(Token)match(input,Comma,FOLLOW_81); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      				newLeafNode(otherlv_1, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0());
                    	      			
                    	    }
                    	    // InternalTypesParser.g:4585:4: ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) )
                    	    // InternalTypesParser.g:4586:5: (lv_fpars_2_0= ruleTAnonymousFormalParameter )
                    	    {
                    	    // InternalTypesParser.g:4586:5: (lv_fpars_2_0= ruleTAnonymousFormalParameter )
                    	    // InternalTypesParser.g:4587:6: lv_fpars_2_0= ruleTAnonymousFormalParameter
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_80);
                    	    lv_fpars_2_0=ruleTAnonymousFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"fpars",
                    	      							lv_fpars_2_0,
                    	      							"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop88;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTAnonymousFormalParameterList"


    // $ANTLR start "entryRuleTAnonymousFormalParameter"
    // InternalTypesParser.g:4609:1: entryRuleTAnonymousFormalParameter returns [EObject current=null] : iv_ruleTAnonymousFormalParameter= ruleTAnonymousFormalParameter EOF ;
    public final EObject entryRuleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTAnonymousFormalParameter = null;


        try {
            // InternalTypesParser.g:4609:66: (iv_ruleTAnonymousFormalParameter= ruleTAnonymousFormalParameter EOF )
            // InternalTypesParser.g:4610:2: iv_ruleTAnonymousFormalParameter= ruleTAnonymousFormalParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnonymousFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnonymousFormalParameter=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnonymousFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTAnonymousFormalParameter"


    // $ANTLR start "ruleTAnonymousFormalParameter"
    // InternalTypesParser.g:4616:1: ruleTAnonymousFormalParameter returns [EObject current=null] : ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) ) | ( (lv_typeRef_3_0= ruleTypeRef ) ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current] ) ;
    public final EObject ruleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;

        Token lv_variadic_0_0=null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepTypeRef_2 = null;

        EObject lv_typeRef_3_0 = null;

        EObject this_DefaultFormalParameter_4 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4622:2: ( ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) ) | ( (lv_typeRef_3_0= ruleTypeRef ) ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current] ) )
            // InternalTypesParser.g:4623:2: ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) ) | ( (lv_typeRef_3_0= ruleTypeRef ) ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current] )
            {
            // InternalTypesParser.g:4623:2: ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) ) | ( (lv_typeRef_3_0= ruleTypeRef ) ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current] )
            // InternalTypesParser.g:4624:3: ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) ) | ( (lv_typeRef_3_0= ruleTypeRef ) ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current]
            {
            // InternalTypesParser.g:4624:3: ( (lv_variadic_0_0= FullStopFullStopFullStop ) )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==FullStopFullStopFullStop) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // InternalTypesParser.g:4625:4: (lv_variadic_0_0= FullStopFullStopFullStop )
                    {
                    // InternalTypesParser.g:4625:4: (lv_variadic_0_0= FullStopFullStopFullStop )
                    // InternalTypesParser.g:4626:5: lv_variadic_0_0= FullStopFullStopFullStop
                    {
                    lv_variadic_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_82); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_variadic_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "variadic", lv_variadic_0_0 != null, "...");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:4638:3: ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) ) | ( (lv_typeRef_3_0= ruleTypeRef ) ) )
            int alt91=2;
            alt91 = dfa91.predict(input);
            switch (alt91) {
                case 1 :
                    // InternalTypesParser.g:4639:4: ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) )
                    {
                    // InternalTypesParser.g:4639:4: ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) )
                    // InternalTypesParser.g:4640:5: ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) )
                    {
                    // InternalTypesParser.g:4649:5: ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) )
                    // InternalTypesParser.g:4650:6: ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] )
                    {
                    // InternalTypesParser.g:4650:6: ( (lv_name_1_0= ruleBindingIdentifier ) )
                    // InternalTypesParser.g:4651:7: (lv_name_1_0= ruleBindingIdentifier )
                    {
                    // InternalTypesParser.g:4651:7: (lv_name_1_0= ruleBindingIdentifier )
                    // InternalTypesParser.g:4652:8: lv_name_1_0= ruleBindingIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0());
                      							
                    }
                    pushFollow(FOLLOW_52);
                    lv_name_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_1_0,
                      									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }

                    // InternalTypesParser.g:4669:6: ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] )
                    // InternalTypesParser.g:4670:7: ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current]
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
                      							}
                      							newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getColonSepTypeRefParserRuleCall_1_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_83);
                    this_ColonSepTypeRef_2=ruleColonSepTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_ColonSepTypeRef_2;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:4686:4: ( (lv_typeRef_3_0= ruleTypeRef ) )
                    {
                    // InternalTypesParser.g:4686:4: ( (lv_typeRef_3_0= ruleTypeRef ) )
                    // InternalTypesParser.g:4687:5: (lv_typeRef_3_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:4687:5: (lv_typeRef_3_0= ruleTypeRef )
                    // InternalTypesParser.g:4688:6: lv_typeRef_3_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefTypeRefParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_83);
                    lv_typeRef_3_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
                      						}
                      						set(
                      							current,
                      							"typeRef",
                      							lv_typeRef_3_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getDefaultFormalParameterParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            this_DefaultFormalParameter_4=ruleDefaultFormalParameter(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DefaultFormalParameter_4;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTAnonymousFormalParameter"


    // $ANTLR start "entryRuleTFormalParameter"
    // InternalTypesParser.g:4721:1: entryRuleTFormalParameter returns [EObject current=null] : iv_ruleTFormalParameter= ruleTFormalParameter EOF ;
    public final EObject entryRuleTFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTFormalParameter = null;


        try {
            // InternalTypesParser.g:4721:57: (iv_ruleTFormalParameter= ruleTFormalParameter EOF )
            // InternalTypesParser.g:4722:2: iv_ruleTFormalParameter= ruleTFormalParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTFormalParameter=ruleTFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTFormalParameter"


    // $ANTLR start "ruleTFormalParameter"
    // InternalTypesParser.g:4728:1: ruleTFormalParameter returns [EObject current=null] : ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( (lv_name_1_0= ruleBindingIdentifier ) ) this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] this_DefaultFormalParameter_3= ruleDefaultFormalParameter[$current] ) ;
    public final EObject ruleTFormalParameter() throws RecognitionException {
        EObject current = null;

        Token lv_variadic_0_0=null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepTypeRef_2 = null;

        EObject this_DefaultFormalParameter_3 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4734:2: ( ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( (lv_name_1_0= ruleBindingIdentifier ) ) this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] this_DefaultFormalParameter_3= ruleDefaultFormalParameter[$current] ) )
            // InternalTypesParser.g:4735:2: ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( (lv_name_1_0= ruleBindingIdentifier ) ) this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] this_DefaultFormalParameter_3= ruleDefaultFormalParameter[$current] )
            {
            // InternalTypesParser.g:4735:2: ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( (lv_name_1_0= ruleBindingIdentifier ) ) this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] this_DefaultFormalParameter_3= ruleDefaultFormalParameter[$current] )
            // InternalTypesParser.g:4736:3: ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( (lv_name_1_0= ruleBindingIdentifier ) ) this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] this_DefaultFormalParameter_3= ruleDefaultFormalParameter[$current]
            {
            // InternalTypesParser.g:4736:3: ( (lv_variadic_0_0= FullStopFullStopFullStop ) )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==FullStopFullStopFullStop) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // InternalTypesParser.g:4737:4: (lv_variadic_0_0= FullStopFullStopFullStop )
                    {
                    // InternalTypesParser.g:4737:4: (lv_variadic_0_0= FullStopFullStopFullStop )
                    // InternalTypesParser.g:4738:5: lv_variadic_0_0= FullStopFullStopFullStop
                    {
                    lv_variadic_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_variadic_0_0, grammarAccess.getTFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "variadic", lv_variadic_0_0 != null, "...");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:4750:3: ( (lv_name_1_0= ruleBindingIdentifier ) )
            // InternalTypesParser.g:4751:4: (lv_name_1_0= ruleBindingIdentifier )
            {
            // InternalTypesParser.g:4751:4: (lv_name_1_0= ruleBindingIdentifier )
            // InternalTypesParser.g:4752:5: lv_name_1_0= ruleBindingIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTFormalParameterAccess().getNameBindingIdentifierParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_52);
            lv_name_1_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTFormalParameterRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getTFormalParameterAccess().getColonSepTypeRefParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_83);
            this_ColonSepTypeRef_2=ruleColonSepTypeRef(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ColonSepTypeRef_2;
              			afterParserOrEnumRuleCall();
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getTFormalParameterAccess().getDefaultFormalParameterParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_DefaultFormalParameter_3=ruleDefaultFormalParameter(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DefaultFormalParameter_3;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTFormalParameter"


    // $ANTLR start "ruleDefaultFormalParameter"
    // InternalTypesParser.g:4796:1: ruleDefaultFormalParameter[EObject in_current] returns [EObject current=in_current] : ( ( (lv_hasInitializerAssignment_0_0= EqualsSign ) ) ( (lv_astInitializer_1_0= ruleTypeReferenceName ) )? )? ;
    public final EObject ruleDefaultFormalParameter(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_hasInitializerAssignment_0_0=null;
        AntlrDatatypeRuleToken lv_astInitializer_1_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4802:2: ( ( ( (lv_hasInitializerAssignment_0_0= EqualsSign ) ) ( (lv_astInitializer_1_0= ruleTypeReferenceName ) )? )? )
            // InternalTypesParser.g:4803:2: ( ( (lv_hasInitializerAssignment_0_0= EqualsSign ) ) ( (lv_astInitializer_1_0= ruleTypeReferenceName ) )? )?
            {
            // InternalTypesParser.g:4803:2: ( ( (lv_hasInitializerAssignment_0_0= EqualsSign ) ) ( (lv_astInitializer_1_0= ruleTypeReferenceName ) )? )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==EqualsSign) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // InternalTypesParser.g:4804:3: ( (lv_hasInitializerAssignment_0_0= EqualsSign ) ) ( (lv_astInitializer_1_0= ruleTypeReferenceName ) )?
                    {
                    // InternalTypesParser.g:4804:3: ( (lv_hasInitializerAssignment_0_0= EqualsSign ) )
                    // InternalTypesParser.g:4805:4: (lv_hasInitializerAssignment_0_0= EqualsSign )
                    {
                    // InternalTypesParser.g:4805:4: (lv_hasInitializerAssignment_0_0= EqualsSign )
                    // InternalTypesParser.g:4806:5: lv_hasInitializerAssignment_0_0= EqualsSign
                    {
                    lv_hasInitializerAssignment_0_0=(Token)match(input,EqualsSign,FOLLOW_84); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_hasInitializerAssignment_0_0, grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getDefaultFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "hasInitializerAssignment", lv_hasInitializerAssignment_0_0 != null, "=");
                      				
                    }

                    }


                    }

                    // InternalTypesParser.g:4818:3: ( (lv_astInitializer_1_0= ruleTypeReferenceName ) )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==Undefined||LA93_0==Indexed||LA93_0==Null||LA93_0==Void||LA93_0==Any||LA93_0==RULE_IDENTIFIER) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // InternalTypesParser.g:4819:4: (lv_astInitializer_1_0= ruleTypeReferenceName )
                            {
                            // InternalTypesParser.g:4819:4: (lv_astInitializer_1_0= ruleTypeReferenceName )
                            // InternalTypesParser.g:4820:5: lv_astInitializer_1_0= ruleTypeReferenceName
                            {
                            if ( state.backtracking==0 ) {

                              					newCompositeNode(grammarAccess.getDefaultFormalParameterAccess().getAstInitializerTypeReferenceNameParserRuleCall_1_0());
                              				
                            }
                            pushFollow(FOLLOW_2);
                            lv_astInitializer_1_0=ruleTypeReferenceName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElementForParent(grammarAccess.getDefaultFormalParameterRule());
                              					}
                              					set(
                              						current,
                              						"astInitializer",
                              						lv_astInitializer_1_0,
                              						"org.eclipse.n4js.ts.Types.TypeReferenceName");
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDefaultFormalParameter"


    // $ANTLR start "entryRuleUnionTypeExpressionOLD"
    // InternalTypesParser.g:4841:1: entryRuleUnionTypeExpressionOLD returns [EObject current=null] : iv_ruleUnionTypeExpressionOLD= ruleUnionTypeExpressionOLD EOF ;
    public final EObject entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnionTypeExpressionOLD = null;


        try {
            // InternalTypesParser.g:4841:63: (iv_ruleUnionTypeExpressionOLD= ruleUnionTypeExpressionOLD EOF )
            // InternalTypesParser.g:4842:2: iv_ruleUnionTypeExpressionOLD= ruleUnionTypeExpressionOLD EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnionTypeExpressionOLD=ruleUnionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnionTypeExpressionOLD"


    // $ANTLR start "ruleUnionTypeExpressionOLD"
    // InternalTypesParser.g:4848:1: ruleUnionTypeExpressionOLD returns [EObject current=null] : ( () otherlv_1= Union otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRef ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) ) )* otherlv_6= RightCurlyBracket ) ;
    public final EObject ruleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;

        EObject lv_typeRefs_5_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4854:2: ( ( () otherlv_1= Union otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRef ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) ) )* otherlv_6= RightCurlyBracket ) )
            // InternalTypesParser.g:4855:2: ( () otherlv_1= Union otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRef ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) ) )* otherlv_6= RightCurlyBracket )
            {
            // InternalTypesParser.g:4855:2: ( () otherlv_1= Union otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRef ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) ) )* otherlv_6= RightCurlyBracket )
            // InternalTypesParser.g:4856:3: () otherlv_1= Union otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRef ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) ) )* otherlv_6= RightCurlyBracket
            {
            // InternalTypesParser.g:4856:3: ()
            // InternalTypesParser.g:4857:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getUnionTypeExpressionOLDAccess().getUnionTypeExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Union,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            // InternalTypesParser.g:4871:3: ( (lv_typeRefs_3_0= ruleTypeRef ) )
            // InternalTypesParser.g:4872:4: (lv_typeRefs_3_0= ruleTypeRef )
            {
            // InternalTypesParser.g:4872:4: (lv_typeRefs_3_0= ruleTypeRef )
            // InternalTypesParser.g:4873:5: lv_typeRefs_3_0= ruleTypeRef
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_64);
            lv_typeRefs_3_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.ts.Types.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:4890:3: (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) ) )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==Comma) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // InternalTypesParser.g:4891:4: otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) )
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_4, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	      			
            	    }
            	    // InternalTypesParser.g:4895:4: ( (lv_typeRefs_5_0= ruleTypeRef ) )
            	    // InternalTypesParser.g:4896:5: (lv_typeRefs_5_0= ruleTypeRef )
            	    {
            	    // InternalTypesParser.g:4896:5: (lv_typeRefs_5_0= ruleTypeRef )
            	    // InternalTypesParser.g:4897:6: lv_typeRefs_5_0= ruleTypeRef
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_4_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_64);
            	    lv_typeRefs_5_0=ruleTypeRef();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.ts.Types.TypeRef");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);

            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnionTypeExpressionOLD"


    // $ANTLR start "entryRuleIntersectionTypeExpressionOLD"
    // InternalTypesParser.g:4923:1: entryRuleIntersectionTypeExpressionOLD returns [EObject current=null] : iv_ruleIntersectionTypeExpressionOLD= ruleIntersectionTypeExpressionOLD EOF ;
    public final EObject entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIntersectionTypeExpressionOLD = null;


        try {
            // InternalTypesParser.g:4923:70: (iv_ruleIntersectionTypeExpressionOLD= ruleIntersectionTypeExpressionOLD EOF )
            // InternalTypesParser.g:4924:2: iv_ruleIntersectionTypeExpressionOLD= ruleIntersectionTypeExpressionOLD EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntersectionTypeExpressionOLD=ruleIntersectionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntersectionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIntersectionTypeExpressionOLD"


    // $ANTLR start "ruleIntersectionTypeExpressionOLD"
    // InternalTypesParser.g:4930:1: ruleIntersectionTypeExpressionOLD returns [EObject current=null] : ( () otherlv_1= Intersection otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRef ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) ) )* otherlv_6= RightCurlyBracket ) ;
    public final EObject ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;

        EObject lv_typeRefs_5_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4936:2: ( ( () otherlv_1= Intersection otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRef ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) ) )* otherlv_6= RightCurlyBracket ) )
            // InternalTypesParser.g:4937:2: ( () otherlv_1= Intersection otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRef ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) ) )* otherlv_6= RightCurlyBracket )
            {
            // InternalTypesParser.g:4937:2: ( () otherlv_1= Intersection otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRef ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) ) )* otherlv_6= RightCurlyBracket )
            // InternalTypesParser.g:4938:3: () otherlv_1= Intersection otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRef ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) ) )* otherlv_6= RightCurlyBracket
            {
            // InternalTypesParser.g:4938:3: ()
            // InternalTypesParser.g:4939:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionTypeExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Intersection,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            // InternalTypesParser.g:4953:3: ( (lv_typeRefs_3_0= ruleTypeRef ) )
            // InternalTypesParser.g:4954:4: (lv_typeRefs_3_0= ruleTypeRef )
            {
            // InternalTypesParser.g:4954:4: (lv_typeRefs_3_0= ruleTypeRef )
            // InternalTypesParser.g:4955:5: lv_typeRefs_3_0= ruleTypeRef
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_64);
            lv_typeRefs_3_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.ts.Types.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:4972:3: (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) ) )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==Comma) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // InternalTypesParser.g:4973:4: otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRef ) )
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_4, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	      			
            	    }
            	    // InternalTypesParser.g:4977:4: ( (lv_typeRefs_5_0= ruleTypeRef ) )
            	    // InternalTypesParser.g:4978:5: (lv_typeRefs_5_0= ruleTypeRef )
            	    {
            	    // InternalTypesParser.g:4978:5: (lv_typeRefs_5_0= ruleTypeRef )
            	    // InternalTypesParser.g:4979:6: lv_typeRefs_5_0= ruleTypeRef
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_4_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_64);
            	    lv_typeRefs_5_0=ruleTypeRef();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.ts.Types.TypeRef");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);

            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIntersectionTypeExpressionOLD"


    // $ANTLR start "entryRuleParameterizedTypeRef"
    // InternalTypesParser.g:5005:1: entryRuleParameterizedTypeRef returns [EObject current=null] : iv_ruleParameterizedTypeRef= ruleParameterizedTypeRef EOF ;
    public final EObject entryRuleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedTypeRef = null;


        try {
            // InternalTypesParser.g:5005:61: (iv_ruleParameterizedTypeRef= ruleParameterizedTypeRef EOF )
            // InternalTypesParser.g:5006:2: iv_ruleParameterizedTypeRef= ruleParameterizedTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRef=ruleParameterizedTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameterizedTypeRef"


    // $ANTLR start "ruleParameterizedTypeRef"
    // InternalTypesParser.g:5012:1: ruleParameterizedTypeRef returns [EObject current=null] : (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ParameterizedTypeRefStructural_1= ruleParameterizedTypeRefStructural ) ;
    public final EObject ruleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_ParameterizedTypeRefNominal_0 = null;

        EObject this_ParameterizedTypeRefStructural_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5018:2: ( (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ParameterizedTypeRefStructural_1= ruleParameterizedTypeRefStructural ) )
            // InternalTypesParser.g:5019:2: (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ParameterizedTypeRefStructural_1= ruleParameterizedTypeRefStructural )
            {
            // InternalTypesParser.g:5019:2: (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ParameterizedTypeRefStructural_1= ruleParameterizedTypeRefStructural )
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==Undefined||LA97_0==Indexed||LA97_0==Null||LA97_0==Void||LA97_0==Any||LA97_0==RULE_IDENTIFIER) ) {
                alt97=1;
            }
            else if ( (LA97_0==Tilde) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }
            switch (alt97) {
                case 1 :
                    // InternalTypesParser.g:5020:3: this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:5029:3: this_ParameterizedTypeRefStructural_1= ruleParameterizedTypeRefStructural
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefStructural_1=ruleParameterizedTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameterizedTypeRef"


    // $ANTLR start "entryRuleParameterizedTypeRefNominal"
    // InternalTypesParser.g:5041:1: entryRuleParameterizedTypeRefNominal returns [EObject current=null] : iv_ruleParameterizedTypeRefNominal= ruleParameterizedTypeRefNominal EOF ;
    public final EObject entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedTypeRefNominal = null;


        try {
            // InternalTypesParser.g:5041:68: (iv_ruleParameterizedTypeRefNominal= ruleParameterizedTypeRefNominal EOF )
            // InternalTypesParser.g:5042:2: iv_ruleParameterizedTypeRefNominal= ruleParameterizedTypeRefNominal EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefNominal=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameterizedTypeRefNominal"


    // $ANTLR start "ruleParameterizedTypeRefNominal"
    // InternalTypesParser.g:5048:1: ruleParameterizedTypeRefNominal returns [EObject current=null] : ( (this_TypeReference_0= ruleTypeReference[$current] | ( () this_TypeReference_2= ruleTypeReference[$current] this_VersionRequest_3= ruleVersionRequest[$current] ) ) ( ( LessThanSign )=>this_TypeArguments_4= ruleTypeArguments[$current] )? ) ;
    public final EObject ruleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;

        EObject this_TypeReference_0 = null;

        EObject this_TypeReference_2 = null;

        EObject this_VersionRequest_3 = null;

        EObject this_TypeArguments_4 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5054:2: ( ( (this_TypeReference_0= ruleTypeReference[$current] | ( () this_TypeReference_2= ruleTypeReference[$current] this_VersionRequest_3= ruleVersionRequest[$current] ) ) ( ( LessThanSign )=>this_TypeArguments_4= ruleTypeArguments[$current] )? ) )
            // InternalTypesParser.g:5055:2: ( (this_TypeReference_0= ruleTypeReference[$current] | ( () this_TypeReference_2= ruleTypeReference[$current] this_VersionRequest_3= ruleVersionRequest[$current] ) ) ( ( LessThanSign )=>this_TypeArguments_4= ruleTypeArguments[$current] )? )
            {
            // InternalTypesParser.g:5055:2: ( (this_TypeReference_0= ruleTypeReference[$current] | ( () this_TypeReference_2= ruleTypeReference[$current] this_VersionRequest_3= ruleVersionRequest[$current] ) ) ( ( LessThanSign )=>this_TypeArguments_4= ruleTypeArguments[$current] )? )
            // InternalTypesParser.g:5056:3: (this_TypeReference_0= ruleTypeReference[$current] | ( () this_TypeReference_2= ruleTypeReference[$current] this_VersionRequest_3= ruleVersionRequest[$current] ) ) ( ( LessThanSign )=>this_TypeArguments_4= ruleTypeArguments[$current] )?
            {
            // InternalTypesParser.g:5056:3: (this_TypeReference_0= ruleTypeReference[$current] | ( () this_TypeReference_2= ruleTypeReference[$current] this_VersionRequest_3= ruleVersionRequest[$current] ) )
            int alt98=2;
            alt98 = dfa98.predict(input);
            switch (alt98) {
                case 1 :
                    // InternalTypesParser.g:5057:4: this_TypeReference_0= ruleTypeReference[$current]
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeReferenceParserRuleCall_0_0());
                      			
                    }
                    pushFollow(FOLLOW_41);
                    this_TypeReference_0=ruleTypeReference(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeReference_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:5069:4: ( () this_TypeReference_2= ruleTypeReference[$current] this_VersionRequest_3= ruleVersionRequest[$current] )
                    {
                    // InternalTypesParser.g:5069:4: ( () this_TypeReference_2= ruleTypeReference[$current] this_VersionRequest_3= ruleVersionRequest[$current] )
                    // InternalTypesParser.g:5070:5: () this_TypeReference_2= ruleTypeReference[$current] this_VersionRequest_3= ruleVersionRequest[$current]
                    {
                    // InternalTypesParser.g:5070:5: ()
                    // InternalTypesParser.g:5071:6: 
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElement(
                      							grammarAccess.getParameterizedTypeRefNominalAccess().getVersionedParameterizedTypeRefAction_0_1_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeReferenceParserRuleCall_0_1_1());
                      				
                    }
                    pushFollow(FOLLOW_85);
                    this_TypeReference_2=ruleTypeReference(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_TypeReference_2;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getVersionRequestParserRuleCall_0_1_2());
                      				
                    }
                    pushFollow(FOLLOW_41);
                    this_VersionRequest_3=ruleVersionRequest(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_VersionRequest_3;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:5101:3: ( ( LessThanSign )=>this_TypeArguments_4= ruleTypeArguments[$current] )?
            int alt99=2;
            alt99 = dfa99.predict(input);
            switch (alt99) {
                case 1 :
                    // InternalTypesParser.g:5102:4: ( LessThanSign )=>this_TypeArguments_4= ruleTypeArguments[$current]
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgumentsParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeArguments_4=ruleTypeArguments(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeArguments_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameterizedTypeRefNominal"


    // $ANTLR start "entryRuleParameterizedTypeRefStructural"
    // InternalTypesParser.g:5119:1: entryRuleParameterizedTypeRefStructural returns [EObject current=null] : iv_ruleParameterizedTypeRefStructural= ruleParameterizedTypeRefStructural EOF ;
    public final EObject entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedTypeRefStructural = null;


        try {
            // InternalTypesParser.g:5119:71: (iv_ruleParameterizedTypeRefStructural= ruleParameterizedTypeRefStructural EOF )
            // InternalTypesParser.g:5120:2: iv_ruleParameterizedTypeRefStructural= ruleParameterizedTypeRefStructural EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefStructural=ruleParameterizedTypeRefStructural();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameterizedTypeRefStructural"


    // $ANTLR start "ruleParameterizedTypeRefStructural"
    // InternalTypesParser.g:5126:1: ruleParameterizedTypeRefStructural returns [EObject current=null] : ( ( ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_1= ruleTypeReference[$current] ) | ( () ( (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_4= ruleTypeReference[$current] this_VersionRequest_5= ruleVersionRequest[$current] ) ) ( ( LessThanSign )=>this_TypeArguments_6= ruleTypeArguments[$current] )? (otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current] )? ) ;
    public final EObject ruleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;

        Token otherlv_7=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;

        EObject this_TypeReference_1 = null;

        AntlrDatatypeRuleToken lv_definedTypingStrategy_3_0 = null;

        EObject this_TypeReference_4 = null;

        EObject this_VersionRequest_5 = null;

        EObject this_TypeArguments_6 = null;

        EObject this_TStructMemberList_8 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5132:2: ( ( ( ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_1= ruleTypeReference[$current] ) | ( () ( (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_4= ruleTypeReference[$current] this_VersionRequest_5= ruleVersionRequest[$current] ) ) ( ( LessThanSign )=>this_TypeArguments_6= ruleTypeArguments[$current] )? (otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current] )? ) )
            // InternalTypesParser.g:5133:2: ( ( ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_1= ruleTypeReference[$current] ) | ( () ( (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_4= ruleTypeReference[$current] this_VersionRequest_5= ruleVersionRequest[$current] ) ) ( ( LessThanSign )=>this_TypeArguments_6= ruleTypeArguments[$current] )? (otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current] )? )
            {
            // InternalTypesParser.g:5133:2: ( ( ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_1= ruleTypeReference[$current] ) | ( () ( (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_4= ruleTypeReference[$current] this_VersionRequest_5= ruleVersionRequest[$current] ) ) ( ( LessThanSign )=>this_TypeArguments_6= ruleTypeArguments[$current] )? (otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current] )? )
            // InternalTypesParser.g:5134:3: ( ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_1= ruleTypeReference[$current] ) | ( () ( (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_4= ruleTypeReference[$current] this_VersionRequest_5= ruleVersionRequest[$current] ) ) ( ( LessThanSign )=>this_TypeArguments_6= ruleTypeArguments[$current] )? (otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current] )?
            {
            // InternalTypesParser.g:5134:3: ( ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_1= ruleTypeReference[$current] ) | ( () ( (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_4= ruleTypeReference[$current] this_VersionRequest_5= ruleVersionRequest[$current] ) )
            int alt100=2;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    // InternalTypesParser.g:5135:4: ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_1= ruleTypeReference[$current] )
                    {
                    // InternalTypesParser.g:5135:4: ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_1= ruleTypeReference[$current] )
                    // InternalTypesParser.g:5136:5: ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_1= ruleTypeReference[$current]
                    {
                    // InternalTypesParser.g:5136:5: ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) )
                    // InternalTypesParser.g:5137:6: (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator )
                    {
                    // InternalTypesParser.g:5137:6: (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator )
                    // InternalTypesParser.g:5138:7: lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_14);
                    lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getParameterizedTypeRefStructuralRule());
                      							}
                      							set(
                      								current,
                      								"definedTypingStrategy",
                      								lv_definedTypingStrategy_0_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyUseSiteOperator");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeReferenceParserRuleCall_0_0_1());
                      				
                    }
                    pushFollow(FOLLOW_86);
                    this_TypeReference_1=ruleTypeReference(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_TypeReference_1;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:5168:4: ( () ( (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_4= ruleTypeReference[$current] this_VersionRequest_5= ruleVersionRequest[$current] )
                    {
                    // InternalTypesParser.g:5168:4: ( () ( (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_4= ruleTypeReference[$current] this_VersionRequest_5= ruleVersionRequest[$current] )
                    // InternalTypesParser.g:5169:5: () ( (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_4= ruleTypeReference[$current] this_VersionRequest_5= ruleVersionRequest[$current]
                    {
                    // InternalTypesParser.g:5169:5: ()
                    // InternalTypesParser.g:5170:6: 
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElement(
                      							grammarAccess.getParameterizedTypeRefStructuralAccess().getVersionedParameterizedTypeRefStructuralAction_0_1_0(),
                      							current);
                      					
                    }

                    }

                    // InternalTypesParser.g:5176:5: ( (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator ) )
                    // InternalTypesParser.g:5177:6: (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator )
                    {
                    // InternalTypesParser.g:5177:6: (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator )
                    // InternalTypesParser.g:5178:7: lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_14);
                    lv_definedTypingStrategy_3_0=ruleTypingStrategyUseSiteOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getParameterizedTypeRefStructuralRule());
                      							}
                      							set(
                      								current,
                      								"definedTypingStrategy",
                      								lv_definedTypingStrategy_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyUseSiteOperator");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeReferenceParserRuleCall_0_1_2());
                      				
                    }
                    pushFollow(FOLLOW_85);
                    this_TypeReference_4=ruleTypeReference(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_TypeReference_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getVersionRequestParserRuleCall_0_1_3());
                      				
                    }
                    pushFollow(FOLLOW_86);
                    this_VersionRequest_5=ruleVersionRequest(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_VersionRequest_5;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:5219:3: ( ( LessThanSign )=>this_TypeArguments_6= ruleTypeArguments[$current] )?
            int alt101=2;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // InternalTypesParser.g:5220:4: ( LessThanSign )=>this_TypeArguments_6= ruleTypeArguments[$current]
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgumentsParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_71);
                    this_TypeArguments_6=ruleTypeArguments(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeArguments_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:5233:3: (otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current] )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==With) ) {
                int LA102_1 = input.LA(2);

                if ( (LA102_1==LeftCurlyBracket) ) {
                    alt102=1;
                }
            }
            switch (alt102) {
                case 1 :
                    // InternalTypesParser.g:5234:4: otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current]
                    {
                    otherlv_7=(Token)match(input,With,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_2_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_8=ruleTStructMemberList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructMemberList_8;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameterizedTypeRefStructural"


    // $ANTLR start "entryRuleArrayNTypeExpression"
    // InternalTypesParser.g:5254:1: entryRuleArrayNTypeExpression returns [EObject current=null] : iv_ruleArrayNTypeExpression= ruleArrayNTypeExpression EOF ;
    public final EObject entryRuleArrayNTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayNTypeExpression = null;


        try {
            // InternalTypesParser.g:5254:61: (iv_ruleArrayNTypeExpression= ruleArrayNTypeExpression EOF )
            // InternalTypesParser.g:5255:2: iv_ruleArrayNTypeExpression= ruleArrayNTypeExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayNTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayNTypeExpression=ruleArrayNTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayNTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleArrayNTypeExpression"


    // $ANTLR start "ruleArrayNTypeExpression"
    // InternalTypesParser.g:5261:1: ruleArrayNTypeExpression returns [EObject current=null] : ( ( (lv_arrayNTypeExpression_0_0= LeftSquareBracket ) ) ( ( (lv_typeArgs_1_0= ruleEmptyIterableTypeExpressionTail ) ) | ( ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= RightSquareBracket ) ) ) ;
    public final EObject ruleArrayNTypeExpression() throws RecognitionException {
        EObject current = null;

        Token lv_arrayNTypeExpression_0_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_typeArgs_1_0 = null;

        EObject lv_typeArgs_2_0 = null;

        EObject lv_typeArgs_4_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5267:2: ( ( ( (lv_arrayNTypeExpression_0_0= LeftSquareBracket ) ) ( ( (lv_typeArgs_1_0= ruleEmptyIterableTypeExpressionTail ) ) | ( ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= RightSquareBracket ) ) ) )
            // InternalTypesParser.g:5268:2: ( ( (lv_arrayNTypeExpression_0_0= LeftSquareBracket ) ) ( ( (lv_typeArgs_1_0= ruleEmptyIterableTypeExpressionTail ) ) | ( ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= RightSquareBracket ) ) )
            {
            // InternalTypesParser.g:5268:2: ( ( (lv_arrayNTypeExpression_0_0= LeftSquareBracket ) ) ( ( (lv_typeArgs_1_0= ruleEmptyIterableTypeExpressionTail ) ) | ( ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= RightSquareBracket ) ) )
            // InternalTypesParser.g:5269:3: ( (lv_arrayNTypeExpression_0_0= LeftSquareBracket ) ) ( ( (lv_typeArgs_1_0= ruleEmptyIterableTypeExpressionTail ) ) | ( ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= RightSquareBracket ) )
            {
            // InternalTypesParser.g:5269:3: ( (lv_arrayNTypeExpression_0_0= LeftSquareBracket ) )
            // InternalTypesParser.g:5270:4: (lv_arrayNTypeExpression_0_0= LeftSquareBracket )
            {
            // InternalTypesParser.g:5270:4: (lv_arrayNTypeExpression_0_0= LeftSquareBracket )
            // InternalTypesParser.g:5271:5: lv_arrayNTypeExpression_0_0= LeftSquareBracket
            {
            lv_arrayNTypeExpression_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_87); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_arrayNTypeExpression_0_0, grammarAccess.getArrayNTypeExpressionAccess().getArrayNTypeExpressionLeftSquareBracketKeyword_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getArrayNTypeExpressionRule());
              					}
              					setWithLastConsumed(current, "arrayNTypeExpression", lv_arrayNTypeExpression_0_0 != null, "[");
              				
            }

            }


            }

            // InternalTypesParser.g:5283:3: ( ( (lv_typeArgs_1_0= ruleEmptyIterableTypeExpressionTail ) ) | ( ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= RightSquareBracket ) )
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==RightSquareBracket) ) {
                alt104=1;
            }
            else if ( ((LA104_0>=Intersection && LA104_0<=Constructor)||LA104_0==Undefined||LA104_0==Indexed||LA104_0==Union||(LA104_0>=Null && LA104_0<=This_1)||(LA104_0>=Type && LA104_0<=Void)||LA104_0==Any||LA104_0==Out||LA104_0==In||LA104_0==QuestionMark||LA104_0==LeftCurlyBracket||LA104_0==Tilde||LA104_0==RULE_IDENTIFIER) ) {
                alt104=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }
            switch (alt104) {
                case 1 :
                    // InternalTypesParser.g:5284:4: ( (lv_typeArgs_1_0= ruleEmptyIterableTypeExpressionTail ) )
                    {
                    // InternalTypesParser.g:5284:4: ( (lv_typeArgs_1_0= ruleEmptyIterableTypeExpressionTail ) )
                    // InternalTypesParser.g:5285:5: (lv_typeArgs_1_0= ruleEmptyIterableTypeExpressionTail )
                    {
                    // InternalTypesParser.g:5285:5: (lv_typeArgs_1_0= ruleEmptyIterableTypeExpressionTail )
                    // InternalTypesParser.g:5286:6: lv_typeArgs_1_0= ruleEmptyIterableTypeExpressionTail
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayNTypeExpressionAccess().getTypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_typeArgs_1_0=ruleEmptyIterableTypeExpressionTail();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayNTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"typeArgs",
                      							lv_typeArgs_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.EmptyIterableTypeExpressionTail");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:5304:4: ( ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= RightSquareBracket )
                    {
                    // InternalTypesParser.g:5304:4: ( ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= RightSquareBracket )
                    // InternalTypesParser.g:5305:5: ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= RightSquareBracket
                    {
                    // InternalTypesParser.g:5305:5: ( (lv_typeArgs_2_0= ruleTypeArgument ) )
                    // InternalTypesParser.g:5306:6: (lv_typeArgs_2_0= ruleTypeArgument )
                    {
                    // InternalTypesParser.g:5306:6: (lv_typeArgs_2_0= ruleTypeArgument )
                    // InternalTypesParser.g:5307:7: lv_typeArgs_2_0= ruleTypeArgument
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getArrayNTypeExpressionAccess().getTypeArgsTypeArgumentParserRuleCall_1_1_0_0());
                      						
                    }
                    pushFollow(FOLLOW_88);
                    lv_typeArgs_2_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrayNTypeExpressionRule());
                      							}
                      							add(
                      								current,
                      								"typeArgs",
                      								lv_typeArgs_2_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalTypesParser.g:5324:5: (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )*
                    loop103:
                    do {
                        int alt103=2;
                        int LA103_0 = input.LA(1);

                        if ( (LA103_0==Comma) ) {
                            alt103=1;
                        }


                        switch (alt103) {
                    	case 1 :
                    	    // InternalTypesParser.g:5325:6: otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) )
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_87); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_3, grammarAccess.getArrayNTypeExpressionAccess().getCommaKeyword_1_1_1_0());
                    	      					
                    	    }
                    	    // InternalTypesParser.g:5329:6: ( (lv_typeArgs_4_0= ruleTypeArgument ) )
                    	    // InternalTypesParser.g:5330:7: (lv_typeArgs_4_0= ruleTypeArgument )
                    	    {
                    	    // InternalTypesParser.g:5330:7: (lv_typeArgs_4_0= ruleTypeArgument )
                    	    // InternalTypesParser.g:5331:8: lv_typeArgs_4_0= ruleTypeArgument
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getArrayNTypeExpressionAccess().getTypeArgsTypeArgumentParserRuleCall_1_1_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_88);
                    	    lv_typeArgs_4_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getArrayNTypeExpressionRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"typeArgs",
                    	      									lv_typeArgs_4_0,
                    	      									"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop103;
                        }
                    } while (true);

                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_5, grammarAccess.getArrayNTypeExpressionAccess().getRightSquareBracketKeyword_1_1_2());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleArrayNTypeExpression"


    // $ANTLR start "entryRuleEmptyIterableTypeExpressionTail"
    // InternalTypesParser.g:5359:1: entryRuleEmptyIterableTypeExpressionTail returns [EObject current=null] : iv_ruleEmptyIterableTypeExpressionTail= ruleEmptyIterableTypeExpressionTail EOF ;
    public final EObject entryRuleEmptyIterableTypeExpressionTail() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEmptyIterableTypeExpressionTail = null;


        try {
            // InternalTypesParser.g:5359:72: (iv_ruleEmptyIterableTypeExpressionTail= ruleEmptyIterableTypeExpressionTail EOF )
            // InternalTypesParser.g:5360:2: iv_ruleEmptyIterableTypeExpressionTail= ruleEmptyIterableTypeExpressionTail EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEmptyIterableTypeExpressionTailRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEmptyIterableTypeExpressionTail=ruleEmptyIterableTypeExpressionTail();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEmptyIterableTypeExpressionTail; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEmptyIterableTypeExpressionTail"


    // $ANTLR start "ruleEmptyIterableTypeExpressionTail"
    // InternalTypesParser.g:5366:1: ruleEmptyIterableTypeExpressionTail returns [EObject current=null] : ( () otherlv_1= RightSquareBracket ) ;
    public final EObject ruleEmptyIterableTypeExpressionTail() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalTypesParser.g:5372:2: ( ( () otherlv_1= RightSquareBracket ) )
            // InternalTypesParser.g:5373:2: ( () otherlv_1= RightSquareBracket )
            {
            // InternalTypesParser.g:5373:2: ( () otherlv_1= RightSquareBracket )
            // InternalTypesParser.g:5374:3: () otherlv_1= RightSquareBracket
            {
            // InternalTypesParser.g:5374:3: ()
            // InternalTypesParser.g:5375:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getEmptyIterableTypeExpressionTailAccess().getWildcardAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getEmptyIterableTypeExpressionTailAccess().getRightSquareBracketKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEmptyIterableTypeExpressionTail"


    // $ANTLR start "ruleVersionRequest"
    // InternalTypesParser.g:5390:1: ruleVersionRequest[EObject in_current] returns [EObject current=in_current] : ( (lv_requestedVersion_0_0= RULE_VERSION ) ) ;
    public final EObject ruleVersionRequest(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_requestedVersion_0_0=null;


        	enterRule();

        try {
            // InternalTypesParser.g:5396:2: ( ( (lv_requestedVersion_0_0= RULE_VERSION ) ) )
            // InternalTypesParser.g:5397:2: ( (lv_requestedVersion_0_0= RULE_VERSION ) )
            {
            // InternalTypesParser.g:5397:2: ( (lv_requestedVersion_0_0= RULE_VERSION ) )
            // InternalTypesParser.g:5398:3: (lv_requestedVersion_0_0= RULE_VERSION )
            {
            // InternalTypesParser.g:5398:3: (lv_requestedVersion_0_0= RULE_VERSION )
            // InternalTypesParser.g:5399:4: lv_requestedVersion_0_0= RULE_VERSION
            {
            lv_requestedVersion_0_0=(Token)match(input,RULE_VERSION,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_requestedVersion_0_0, grammarAccess.getVersionRequestAccess().getRequestedVersionVERSIONTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getVersionRequestRule());
              				}
              				setWithLastConsumed(
              					current,
              					"requestedVersion",
              					lv_requestedVersion_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.VERSION");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVersionRequest"


    // $ANTLR start "ruleTypeReference"
    // InternalTypesParser.g:5419:1: ruleTypeReference[EObject in_current] returns [EObject current=in_current] : ( ( ruleTypeReferenceName ) ) ;
    public final EObject ruleTypeReference(EObject in_current) throws RecognitionException {
        EObject current = in_current;


        	enterRule();

        try {
            // InternalTypesParser.g:5425:2: ( ( ( ruleTypeReferenceName ) ) )
            // InternalTypesParser.g:5426:2: ( ( ruleTypeReferenceName ) )
            {
            // InternalTypesParser.g:5426:2: ( ( ruleTypeReferenceName ) )
            // InternalTypesParser.g:5427:3: ( ruleTypeReferenceName )
            {
            // InternalTypesParser.g:5427:3: ( ruleTypeReferenceName )
            // InternalTypesParser.g:5428:4: ruleTypeReferenceName
            {
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getTypeReferenceRule());
              				}
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getTypeReferenceAccess().getDeclaredTypeTypeCrossReference_0());
              			
            }
            pushFollow(FOLLOW_2);
            ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeReference"


    // $ANTLR start "ruleTypeArguments"
    // InternalTypesParser.g:5446:1: ruleTypeArguments[EObject in_current] returns [EObject current=in_current] : (otherlv_0= LessThanSign ( (lv_typeArgs_1_0= ruleTypeArgument ) ) (otherlv_2= Comma ( (lv_typeArgs_3_0= ruleTypeArgument ) ) )* otherlv_4= GreaterThanSign ) ;
    public final EObject ruleTypeArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeArgs_1_0 = null;

        EObject lv_typeArgs_3_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5452:2: ( (otherlv_0= LessThanSign ( (lv_typeArgs_1_0= ruleTypeArgument ) ) (otherlv_2= Comma ( (lv_typeArgs_3_0= ruleTypeArgument ) ) )* otherlv_4= GreaterThanSign ) )
            // InternalTypesParser.g:5453:2: (otherlv_0= LessThanSign ( (lv_typeArgs_1_0= ruleTypeArgument ) ) (otherlv_2= Comma ( (lv_typeArgs_3_0= ruleTypeArgument ) ) )* otherlv_4= GreaterThanSign )
            {
            // InternalTypesParser.g:5453:2: (otherlv_0= LessThanSign ( (lv_typeArgs_1_0= ruleTypeArgument ) ) (otherlv_2= Comma ( (lv_typeArgs_3_0= ruleTypeArgument ) ) )* otherlv_4= GreaterThanSign )
            // InternalTypesParser.g:5454:3: otherlv_0= LessThanSign ( (lv_typeArgs_1_0= ruleTypeArgument ) ) (otherlv_2= Comma ( (lv_typeArgs_3_0= ruleTypeArgument ) ) )* otherlv_4= GreaterThanSign
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_87); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0());
              		
            }
            // InternalTypesParser.g:5458:3: ( (lv_typeArgs_1_0= ruleTypeArgument ) )
            // InternalTypesParser.g:5459:4: (lv_typeArgs_1_0= ruleTypeArgument )
            {
            // InternalTypesParser.g:5459:4: (lv_typeArgs_1_0= ruleTypeArgument )
            // InternalTypesParser.g:5460:5: lv_typeArgs_1_0= ruleTypeArgument
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeArgumentsAccess().getTypeArgsTypeArgumentParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_43);
            lv_typeArgs_1_0=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
              					}
              					add(
              						current,
              						"typeArgs",
              						lv_typeArgs_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:5477:3: (otherlv_2= Comma ( (lv_typeArgs_3_0= ruleTypeArgument ) ) )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==Comma) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // InternalTypesParser.g:5478:4: otherlv_2= Comma ( (lv_typeArgs_3_0= ruleTypeArgument ) )
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_87); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    // InternalTypesParser.g:5482:4: ( (lv_typeArgs_3_0= ruleTypeArgument ) )
            	    // InternalTypesParser.g:5483:5: (lv_typeArgs_3_0= ruleTypeArgument )
            	    {
            	    // InternalTypesParser.g:5483:5: (lv_typeArgs_3_0= ruleTypeArgument )
            	    // InternalTypesParser.g:5484:6: lv_typeArgs_3_0= ruleTypeArgument
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTypeArgumentsAccess().getTypeArgsTypeArgumentParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_43);
            	    lv_typeArgs_3_0=ruleTypeArgument();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeArgs",
            	      							lv_typeArgs_3_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);

            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeArguments"


    // $ANTLR start "ruleTStructMemberList"
    // InternalTypesParser.g:5511:1: ruleTStructMemberList[EObject in_current] returns [EObject current=in_current] : (otherlv_0= LeftCurlyBracket ( ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )? )* otherlv_4= RightCurlyBracket ) ;
    public final EObject ruleTStructMemberList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_astStructuralMembers_1_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5517:2: ( (otherlv_0= LeftCurlyBracket ( ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )? )* otherlv_4= RightCurlyBracket ) )
            // InternalTypesParser.g:5518:2: (otherlv_0= LeftCurlyBracket ( ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )? )* otherlv_4= RightCurlyBracket )
            {
            // InternalTypesParser.g:5518:2: (otherlv_0= LeftCurlyBracket ( ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )? )* otherlv_4= RightCurlyBracket )
            // InternalTypesParser.g:5519:3: otherlv_0= LeftCurlyBracket ( ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )? )* otherlv_4= RightCurlyBracket
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_89); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            // InternalTypesParser.g:5523:3: ( ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )? )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( ((LA107_0>=Intersection && LA107_0<=Constructor)||(LA107_0>=Implements && LA107_0<=Interface)||LA107_0==Protected||(LA107_0>=Abstract && LA107_0<=Finally)||(LA107_0>=Private && LA107_0<=Import)||(LA107_0>=Public && LA107_0<=False)||(LA107_0>=Super && LA107_0<=With)||(LA107_0>=For && LA107_0<=Var)||(LA107_0>=As && LA107_0<=Of)||LA107_0==LessThanSign||LA107_0==RULE_IDENTIFIER) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // InternalTypesParser.g:5524:4: ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )?
            	    {
            	    // InternalTypesParser.g:5524:4: ( (lv_astStructuralMembers_1_0= ruleTStructMember ) )
            	    // InternalTypesParser.g:5525:5: (lv_astStructuralMembers_1_0= ruleTStructMember )
            	    {
            	    // InternalTypesParser.g:5525:5: (lv_astStructuralMembers_1_0= ruleTStructMember )
            	    // InternalTypesParser.g:5526:6: lv_astStructuralMembers_1_0= ruleTStructMember
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTStructMemberListAccess().getAstStructuralMembersTStructMemberParserRuleCall_1_0_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_90);
            	    lv_astStructuralMembers_1_0=ruleTStructMember();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTStructMemberListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"astStructuralMembers",
            	      							lv_astStructuralMembers_1_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TStructMember");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalTypesParser.g:5543:4: (otherlv_2= Semicolon | otherlv_3= Comma )?
            	    int alt106=3;
            	    int LA106_0 = input.LA(1);

            	    if ( (LA106_0==Semicolon) ) {
            	        alt106=1;
            	    }
            	    else if ( (LA106_0==Comma) ) {
            	        alt106=2;
            	    }
            	    switch (alt106) {
            	        case 1 :
            	            // InternalTypesParser.g:5544:5: otherlv_2= Semicolon
            	            {
            	            otherlv_2=(Token)match(input,Semicolon,FOLLOW_89); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_2, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0());
            	              				
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalTypesParser.g:5549:5: otherlv_3= Comma
            	            {
            	            otherlv_3=(Token)match(input,Comma,FOLLOW_89); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_3, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1());
            	              				
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);

            otherlv_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTStructMemberList"


    // $ANTLR start "entryRuleTStructMember"
    // InternalTypesParser.g:5563:1: entryRuleTStructMember returns [EObject current=null] : iv_ruleTStructMember= ruleTStructMember EOF ;
    public final EObject entryRuleTStructMember() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructMember = null;


        try {
            // InternalTypesParser.g:5563:54: (iv_ruleTStructMember= ruleTStructMember EOF )
            // InternalTypesParser.g:5564:2: iv_ruleTStructMember= ruleTStructMember EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMemberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMember=ruleTStructMember();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMember; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTStructMember"


    // $ANTLR start "ruleTStructMember"
    // InternalTypesParser.g:5570:1: ruleTStructMember returns [EObject current=null] : ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField ) ;
    public final EObject ruleTStructMember() throws RecognitionException {
        EObject current = null;

        EObject this_TStructGetter_0 = null;

        EObject this_TStructSetter_1 = null;

        EObject this_TStructMethod_2 = null;

        EObject this_TStructField_3 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5576:2: ( ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField ) )
            // InternalTypesParser.g:5577:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField )
            {
            // InternalTypesParser.g:5577:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField )
            int alt108=4;
            alt108 = dfa108.predict(input);
            switch (alt108) {
                case 1 :
                    // InternalTypesParser.g:5578:3: ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter )
                    {
                    // InternalTypesParser.g:5578:3: ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter )
                    // InternalTypesParser.g:5579:4: ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructGetter_0=ruleTStructGetter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructGetter_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:5600:3: ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter )
                    {
                    // InternalTypesParser.g:5600:3: ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter )
                    // InternalTypesParser.g:5601:4: ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructSetter_1=ruleTStructSetter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructSetter_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:5622:3: ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod )
                    {
                    // InternalTypesParser.g:5622:3: ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod )
                    // InternalTypesParser.g:5623:4: ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMethod_2=ruleTStructMethod();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructMethod_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:5647:3: this_TStructField_3= ruleTStructField
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructField_3=ruleTStructField();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TStructField_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTStructMember"


    // $ANTLR start "entryRuleTStructMethod"
    // InternalTypesParser.g:5659:1: entryRuleTStructMethod returns [EObject current=null] : iv_ruleTStructMethod= ruleTStructMethod EOF ;
    public final EObject entryRuleTStructMethod() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructMethod = null;


        try {
            // InternalTypesParser.g:5659:54: (iv_ruleTStructMethod= ruleTStructMethod EOF )
            // InternalTypesParser.g:5660:2: iv_ruleTStructMethod= ruleTStructMethod EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMethodRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMethod=ruleTStructMethod();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMethod; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTStructMethod"


    // $ANTLR start "ruleTStructMethod"
    // InternalTypesParser.g:5666:1: ruleTStructMethod returns [EObject current=null] : ( ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (this_TypeVariables_1= ruleTypeVariables[$current] )? ( (lv_name_2_0= ruleIdentifierName ) ) otherlv_3= LeftParenthesis ) ) this_TAnonymousFormalParameterList_4= ruleTAnonymousFormalParameterList[$current] otherlv_5= RightParenthesis (this_ColonSepReturnTypeRef_6= ruleColonSepReturnTypeRef[$current] )? ) ;
    public final EObject ruleTStructMethod() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject this_TypeVariables_1 = null;

        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject this_TAnonymousFormalParameterList_4 = null;

        EObject this_ColonSepReturnTypeRef_6 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5672:2: ( ( ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (this_TypeVariables_1= ruleTypeVariables[$current] )? ( (lv_name_2_0= ruleIdentifierName ) ) otherlv_3= LeftParenthesis ) ) this_TAnonymousFormalParameterList_4= ruleTAnonymousFormalParameterList[$current] otherlv_5= RightParenthesis (this_ColonSepReturnTypeRef_6= ruleColonSepReturnTypeRef[$current] )? ) )
            // InternalTypesParser.g:5673:2: ( ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (this_TypeVariables_1= ruleTypeVariables[$current] )? ( (lv_name_2_0= ruleIdentifierName ) ) otherlv_3= LeftParenthesis ) ) this_TAnonymousFormalParameterList_4= ruleTAnonymousFormalParameterList[$current] otherlv_5= RightParenthesis (this_ColonSepReturnTypeRef_6= ruleColonSepReturnTypeRef[$current] )? )
            {
            // InternalTypesParser.g:5673:2: ( ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (this_TypeVariables_1= ruleTypeVariables[$current] )? ( (lv_name_2_0= ruleIdentifierName ) ) otherlv_3= LeftParenthesis ) ) this_TAnonymousFormalParameterList_4= ruleTAnonymousFormalParameterList[$current] otherlv_5= RightParenthesis (this_ColonSepReturnTypeRef_6= ruleColonSepReturnTypeRef[$current] )? )
            // InternalTypesParser.g:5674:3: ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (this_TypeVariables_1= ruleTypeVariables[$current] )? ( (lv_name_2_0= ruleIdentifierName ) ) otherlv_3= LeftParenthesis ) ) this_TAnonymousFormalParameterList_4= ruleTAnonymousFormalParameterList[$current] otherlv_5= RightParenthesis (this_ColonSepReturnTypeRef_6= ruleColonSepReturnTypeRef[$current] )?
            {
            // InternalTypesParser.g:5674:3: ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (this_TypeVariables_1= ruleTypeVariables[$current] )? ( (lv_name_2_0= ruleIdentifierName ) ) otherlv_3= LeftParenthesis ) )
            // InternalTypesParser.g:5675:4: ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (this_TypeVariables_1= ruleTypeVariables[$current] )? ( (lv_name_2_0= ruleIdentifierName ) ) otherlv_3= LeftParenthesis )
            {
            // InternalTypesParser.g:5689:4: ( () (this_TypeVariables_1= ruleTypeVariables[$current] )? ( (lv_name_2_0= ruleIdentifierName ) ) otherlv_3= LeftParenthesis )
            // InternalTypesParser.g:5690:5: () (this_TypeVariables_1= ruleTypeVariables[$current] )? ( (lv_name_2_0= ruleIdentifierName ) ) otherlv_3= LeftParenthesis
            {
            // InternalTypesParser.g:5690:5: ()
            // InternalTypesParser.g:5691:6: 
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTStructMethodAccess().getTStructMethodAction_0_0_0(),
              							current);
              					
            }

            }

            // InternalTypesParser.g:5697:5: (this_TypeVariables_1= ruleTypeVariables[$current] )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==LessThanSign) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // InternalTypesParser.g:5698:6: this_TypeVariables_1= ruleTypeVariables[$current]
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTStructMethodRule());
                      						}
                      						newCompositeNode(grammarAccess.getTStructMethodAccess().getTypeVariablesParserRuleCall_0_0_1());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    this_TypeVariables_1=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_TypeVariables_1;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:5710:5: ( (lv_name_2_0= ruleIdentifierName ) )
            // InternalTypesParser.g:5711:6: (lv_name_2_0= ruleIdentifierName )
            {
            // InternalTypesParser.g:5711:6: (lv_name_2_0= ruleIdentifierName )
            // InternalTypesParser.g:5712:7: lv_name_2_0= ruleIdentifierName
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTStructMethodAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_49);
            lv_name_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructMethodRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_76); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_3, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3());
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTStructMethodRule());
              			}
              			newCompositeNode(grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_56);
            this_TAnonymousFormalParameterList_4=ruleTAnonymousFormalParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TAnonymousFormalParameterList_4;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_91); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2());
              		
            }
            // InternalTypesParser.g:5750:3: (this_ColonSepReturnTypeRef_6= ruleColonSepReturnTypeRef[$current] )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==Colon) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // InternalTypesParser.g:5751:4: this_ColonSepReturnTypeRef_6= ruleColonSepReturnTypeRef[$current]
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructMethodRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructMethodAccess().getColonSepReturnTypeRefParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_6=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTStructMethod"


    // $ANTLR start "ruleTypeVariables"
    // InternalTypesParser.g:5768:1: ruleTypeVariables[EObject in_current] returns [EObject current=in_current] : (otherlv_0= LessThanSign ( (lv_typeVars_1_0= ruleTypeVariable ) ) (otherlv_2= Comma ( (lv_typeVars_3_0= ruleTypeVariable ) ) )* otherlv_4= GreaterThanSign ) ;
    public final EObject ruleTypeVariables(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeVars_1_0 = null;

        EObject lv_typeVars_3_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5774:2: ( (otherlv_0= LessThanSign ( (lv_typeVars_1_0= ruleTypeVariable ) ) (otherlv_2= Comma ( (lv_typeVars_3_0= ruleTypeVariable ) ) )* otherlv_4= GreaterThanSign ) )
            // InternalTypesParser.g:5775:2: (otherlv_0= LessThanSign ( (lv_typeVars_1_0= ruleTypeVariable ) ) (otherlv_2= Comma ( (lv_typeVars_3_0= ruleTypeVariable ) ) )* otherlv_4= GreaterThanSign )
            {
            // InternalTypesParser.g:5775:2: (otherlv_0= LessThanSign ( (lv_typeVars_1_0= ruleTypeVariable ) ) (otherlv_2= Comma ( (lv_typeVars_3_0= ruleTypeVariable ) ) )* otherlv_4= GreaterThanSign )
            // InternalTypesParser.g:5776:3: otherlv_0= LessThanSign ( (lv_typeVars_1_0= ruleTypeVariable ) ) (otherlv_2= Comma ( (lv_typeVars_3_0= ruleTypeVariable ) ) )* otherlv_4= GreaterThanSign
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTypeVariablesAccess().getLessThanSignKeyword_0());
              		
            }
            // InternalTypesParser.g:5780:3: ( (lv_typeVars_1_0= ruleTypeVariable ) )
            // InternalTypesParser.g:5781:4: (lv_typeVars_1_0= ruleTypeVariable )
            {
            // InternalTypesParser.g:5781:4: (lv_typeVars_1_0= ruleTypeVariable )
            // InternalTypesParser.g:5782:5: lv_typeVars_1_0= ruleTypeVariable
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeVariablesAccess().getTypeVarsTypeVariableParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_43);
            lv_typeVars_1_0=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeVariablesRule());
              					}
              					add(
              						current,
              						"typeVars",
              						lv_typeVars_1_0,
              						"org.eclipse.n4js.ts.Types.TypeVariable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:5799:3: (otherlv_2= Comma ( (lv_typeVars_3_0= ruleTypeVariable ) ) )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==Comma) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // InternalTypesParser.g:5800:4: otherlv_2= Comma ( (lv_typeVars_3_0= ruleTypeVariable ) )
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getTypeVariablesAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    // InternalTypesParser.g:5804:4: ( (lv_typeVars_3_0= ruleTypeVariable ) )
            	    // InternalTypesParser.g:5805:5: (lv_typeVars_3_0= ruleTypeVariable )
            	    {
            	    // InternalTypesParser.g:5805:5: (lv_typeVars_3_0= ruleTypeVariable )
            	    // InternalTypesParser.g:5806:6: lv_typeVars_3_0= ruleTypeVariable
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTypeVariablesAccess().getTypeVarsTypeVariableParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_43);
            	    lv_typeVars_3_0=ruleTypeVariable();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTypeVariablesRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeVars",
            	      							lv_typeVars_3_0,
            	      							"org.eclipse.n4js.ts.Types.TypeVariable");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTypeVariablesAccess().getGreaterThanSignKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeVariables"


    // $ANTLR start "ruleColonSepTypeRef"
    // InternalTypesParser.g:5833:1: ruleColonSepTypeRef[EObject in_current] returns [EObject current=in_current] : (otherlv_0= Colon ( (lv_typeRef_1_0= ruleTypeRef ) ) ) ;
    public final EObject ruleColonSepTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        EObject lv_typeRef_1_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5839:2: ( (otherlv_0= Colon ( (lv_typeRef_1_0= ruleTypeRef ) ) ) )
            // InternalTypesParser.g:5840:2: (otherlv_0= Colon ( (lv_typeRef_1_0= ruleTypeRef ) ) )
            {
            // InternalTypesParser.g:5840:2: (otherlv_0= Colon ( (lv_typeRef_1_0= ruleTypeRef ) ) )
            // InternalTypesParser.g:5841:3: otherlv_0= Colon ( (lv_typeRef_1_0= ruleTypeRef ) )
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0());
              		
            }
            // InternalTypesParser.g:5845:3: ( (lv_typeRef_1_0= ruleTypeRef ) )
            // InternalTypesParser.g:5846:4: (lv_typeRef_1_0= ruleTypeRef )
            {
            // InternalTypesParser.g:5846:4: (lv_typeRef_1_0= ruleTypeRef )
            // InternalTypesParser.g:5847:5: lv_typeRef_1_0= ruleTypeRef
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColonSepTypeRefAccess().getTypeRefTypeRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_typeRef_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepTypeRefRule());
              					}
              					set(
              						current,
              						"typeRef",
              						lv_typeRef_1_0,
              						"org.eclipse.n4js.ts.Types.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColonSepTypeRef"


    // $ANTLR start "ruleColonSepReturnTypeRef"
    // InternalTypesParser.g:5869:1: ruleColonSepReturnTypeRef[EObject in_current] returns [EObject current=in_current] : (otherlv_0= Colon ( (lv_returnTypeRef_1_0= ruleTypeRef ) ) ) ;
    public final EObject ruleColonSepReturnTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        EObject lv_returnTypeRef_1_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5875:2: ( (otherlv_0= Colon ( (lv_returnTypeRef_1_0= ruleTypeRef ) ) ) )
            // InternalTypesParser.g:5876:2: (otherlv_0= Colon ( (lv_returnTypeRef_1_0= ruleTypeRef ) ) )
            {
            // InternalTypesParser.g:5876:2: (otherlv_0= Colon ( (lv_returnTypeRef_1_0= ruleTypeRef ) ) )
            // InternalTypesParser.g:5877:3: otherlv_0= Colon ( (lv_returnTypeRef_1_0= ruleTypeRef ) )
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getColonSepReturnTypeRefAccess().getColonKeyword_0());
              		
            }
            // InternalTypesParser.g:5881:3: ( (lv_returnTypeRef_1_0= ruleTypeRef ) )
            // InternalTypesParser.g:5882:4: (lv_returnTypeRef_1_0= ruleTypeRef )
            {
            // InternalTypesParser.g:5882:4: (lv_returnTypeRef_1_0= ruleTypeRef )
            // InternalTypesParser.g:5883:5: lv_returnTypeRef_1_0= ruleTypeRef
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColonSepReturnTypeRefAccess().getReturnTypeRefTypeRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepReturnTypeRefRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_1_0,
              						"org.eclipse.n4js.ts.Types.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColonSepReturnTypeRef"


    // $ANTLR start "entryRuleTStructField"
    // InternalTypesParser.g:5904:1: entryRuleTStructField returns [EObject current=null] : iv_ruleTStructField= ruleTStructField EOF ;
    public final EObject entryRuleTStructField() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructField = null;


        try {
            // InternalTypesParser.g:5904:53: (iv_ruleTStructField= ruleTStructField EOF )
            // InternalTypesParser.g:5905:2: iv_ruleTStructField= ruleTStructField EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructField=ruleTStructField();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructField; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTStructField"


    // $ANTLR start "ruleTStructField"
    // InternalTypesParser.g:5911:1: ruleTStructField returns [EObject current=null] : ( ( (lv_name_0_0= ruleIdentifierName ) ) ( (lv_optional_1_0= QuestionMark ) )? (this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] )? ) ;
    public final EObject ruleTStructField() throws RecognitionException {
        EObject current = null;

        Token lv_optional_1_0=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;

        EObject this_ColonSepTypeRef_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5917:2: ( ( ( (lv_name_0_0= ruleIdentifierName ) ) ( (lv_optional_1_0= QuestionMark ) )? (this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] )? ) )
            // InternalTypesParser.g:5918:2: ( ( (lv_name_0_0= ruleIdentifierName ) ) ( (lv_optional_1_0= QuestionMark ) )? (this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] )? )
            {
            // InternalTypesParser.g:5918:2: ( ( (lv_name_0_0= ruleIdentifierName ) ) ( (lv_optional_1_0= QuestionMark ) )? (this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] )? )
            // InternalTypesParser.g:5919:3: ( (lv_name_0_0= ruleIdentifierName ) ) ( (lv_optional_1_0= QuestionMark ) )? (this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] )?
            {
            // InternalTypesParser.g:5919:3: ( (lv_name_0_0= ruleIdentifierName ) )
            // InternalTypesParser.g:5920:4: (lv_name_0_0= ruleIdentifierName )
            {
            // InternalTypesParser.g:5920:4: (lv_name_0_0= ruleIdentifierName )
            // InternalTypesParser.g:5921:5: lv_name_0_0= ruleIdentifierName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTStructFieldAccess().getNameIdentifierNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_92);
            lv_name_0_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructFieldRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:5938:3: ( (lv_optional_1_0= QuestionMark ) )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==QuestionMark) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // InternalTypesParser.g:5939:4: (lv_optional_1_0= QuestionMark )
                    {
                    // InternalTypesParser.g:5939:4: (lv_optional_1_0= QuestionMark )
                    // InternalTypesParser.g:5940:5: lv_optional_1_0= QuestionMark
                    {
                    lv_optional_1_0=(Token)match(input,QuestionMark,FOLLOW_92); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_1_0, grammarAccess.getTStructFieldAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructFieldRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_1_0 != null, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:5952:3: (this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==Colon) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // InternalTypesParser.g:5953:4: this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current]
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructFieldRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructFieldAccess().getColonSepTypeRefParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepTypeRef_2=ruleColonSepTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepTypeRef_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTStructField"


    // $ANTLR start "entryRuleTStructGetter"
    // InternalTypesParser.g:5969:1: entryRuleTStructGetter returns [EObject current=null] : iv_ruleTStructGetter= ruleTStructGetter EOF ;
    public final EObject entryRuleTStructGetter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructGetter = null;


        try {
            // InternalTypesParser.g:5969:54: (iv_ruleTStructGetter= ruleTStructGetter EOF )
            // InternalTypesParser.g:5970:2: iv_ruleTStructGetter= ruleTStructGetter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructGetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructGetter=ruleTStructGetter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructGetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTStructGetter"


    // $ANTLR start "ruleTStructGetter"
    // InternalTypesParser.g:5976:1: ruleTStructGetter returns [EObject current=null] : ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis otherlv_5= RightParenthesis (this_ColonSepTypeRef_6= ruleColonSepTypeRef[$current] )? ) ;
    public final EObject ruleTStructGetter() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject this_ColonSepTypeRef_6 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5982:2: ( ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis otherlv_5= RightParenthesis (this_ColonSepTypeRef_6= ruleColonSepTypeRef[$current] )? ) )
            // InternalTypesParser.g:5983:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis otherlv_5= RightParenthesis (this_ColonSepTypeRef_6= ruleColonSepTypeRef[$current] )? )
            {
            // InternalTypesParser.g:5983:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis otherlv_5= RightParenthesis (this_ColonSepTypeRef_6= ruleColonSepTypeRef[$current] )? )
            // InternalTypesParser.g:5984:3: ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis otherlv_5= RightParenthesis (this_ColonSepTypeRef_6= ruleColonSepTypeRef[$current] )?
            {
            // InternalTypesParser.g:5984:3: ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) ) )
            // InternalTypesParser.g:5985:4: ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) )
            {
            // InternalTypesParser.g:5996:4: ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) )
            // InternalTypesParser.g:5997:5: () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) )
            {
            // InternalTypesParser.g:5997:5: ()
            // InternalTypesParser.g:5998:6: 
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTStructGetterAccess().getTStructGetterAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Get,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1());
              				
            }
            // InternalTypesParser.g:6008:5: ( (lv_name_2_0= ruleIdentifierName ) )
            // InternalTypesParser.g:6009:6: (lv_name_2_0= ruleIdentifierName )
            {
            // InternalTypesParser.g:6009:6: (lv_name_2_0= ruleIdentifierName )
            // InternalTypesParser.g:6010:7: lv_name_2_0= ruleIdentifierName
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTStructGetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_55);
            lv_name_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructGetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }

            // InternalTypesParser.g:6029:3: ( (lv_optional_3_0= QuestionMark ) )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==QuestionMark) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // InternalTypesParser.g:6030:4: (lv_optional_3_0= QuestionMark )
                    {
                    // InternalTypesParser.g:6030:4: (lv_optional_3_0= QuestionMark )
                    // InternalTypesParser.g:6031:5: lv_optional_3_0= QuestionMark
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructGetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructGetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_3_0 != null, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_92); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_3());
              		
            }
            // InternalTypesParser.g:6051:3: (this_ColonSepTypeRef_6= ruleColonSepTypeRef[$current] )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==Colon) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // InternalTypesParser.g:6052:4: this_ColonSepTypeRef_6= ruleColonSepTypeRef[$current]
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructGetterRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructGetterAccess().getColonSepTypeRefParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepTypeRef_6=ruleColonSepTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepTypeRef_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTStructGetter"


    // $ANTLR start "entryRuleTStructSetter"
    // InternalTypesParser.g:6068:1: entryRuleTStructSetter returns [EObject current=null] : iv_ruleTStructSetter= ruleTStructSetter EOF ;
    public final EObject entryRuleTStructSetter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructSetter = null;


        try {
            // InternalTypesParser.g:6068:54: (iv_ruleTStructSetter= ruleTStructSetter EOF )
            // InternalTypesParser.g:6069:2: iv_ruleTStructSetter= ruleTStructSetter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructSetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructSetter=ruleTStructSetter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructSetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTStructSetter"


    // $ANTLR start "ruleTStructSetter"
    // InternalTypesParser.g:6075:1: ruleTStructSetter returns [EObject current=null] : ( ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis ( (lv_fpar_5_0= ruleTAnonymousFormalParameter ) ) otherlv_6= RightParenthesis ) ;
    public final EObject ruleTStructSetter() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject lv_fpar_5_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6081:2: ( ( ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis ( (lv_fpar_5_0= ruleTAnonymousFormalParameter ) ) otherlv_6= RightParenthesis ) )
            // InternalTypesParser.g:6082:2: ( ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis ( (lv_fpar_5_0= ruleTAnonymousFormalParameter ) ) otherlv_6= RightParenthesis )
            {
            // InternalTypesParser.g:6082:2: ( ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis ( (lv_fpar_5_0= ruleTAnonymousFormalParameter ) ) otherlv_6= RightParenthesis )
            // InternalTypesParser.g:6083:3: ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis ( (lv_fpar_5_0= ruleTAnonymousFormalParameter ) ) otherlv_6= RightParenthesis
            {
            // InternalTypesParser.g:6083:3: ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) ) )
            // InternalTypesParser.g:6084:4: ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) )
            {
            // InternalTypesParser.g:6095:4: ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) )
            // InternalTypesParser.g:6096:5: () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) )
            {
            // InternalTypesParser.g:6096:5: ()
            // InternalTypesParser.g:6097:6: 
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTStructSetterAccess().getTStructSetterAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Set,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1());
              				
            }
            // InternalTypesParser.g:6107:5: ( (lv_name_2_0= ruleIdentifierName ) )
            // InternalTypesParser.g:6108:6: (lv_name_2_0= ruleIdentifierName )
            {
            // InternalTypesParser.g:6108:6: (lv_name_2_0= ruleIdentifierName )
            // InternalTypesParser.g:6109:7: lv_name_2_0= ruleIdentifierName
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTStructSetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_55);
            lv_name_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }

            // InternalTypesParser.g:6128:3: ( (lv_optional_3_0= QuestionMark ) )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==QuestionMark) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // InternalTypesParser.g:6129:4: (lv_optional_3_0= QuestionMark )
                    {
                    // InternalTypesParser.g:6129:4: (lv_optional_3_0= QuestionMark )
                    // InternalTypesParser.g:6130:5: lv_optional_3_0= QuestionMark
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructSetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructSetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_3_0 != null, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_81); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalTypesParser.g:6146:3: ( (lv_fpar_5_0= ruleTAnonymousFormalParameter ) )
            // InternalTypesParser.g:6147:4: (lv_fpar_5_0= ruleTAnonymousFormalParameter )
            {
            // InternalTypesParser.g:6147:4: (lv_fpar_5_0= ruleTAnonymousFormalParameter )
            // InternalTypesParser.g:6148:5: lv_fpar_5_0= ruleTAnonymousFormalParameter
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTStructSetterAccess().getFparTAnonymousFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_56);
            lv_fpar_5_0=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTStructSetter"


    // $ANTLR start "entryRuleTypingStrategyUseSiteOperator"
    // InternalTypesParser.g:6173:1: entryRuleTypingStrategyUseSiteOperator returns [String current=null] : iv_ruleTypingStrategyUseSiteOperator= ruleTypingStrategyUseSiteOperator EOF ;
    public final String entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypingStrategyUseSiteOperator = null;


        try {
            // InternalTypesParser.g:6173:69: (iv_ruleTypingStrategyUseSiteOperator= ruleTypingStrategyUseSiteOperator EOF )
            // InternalTypesParser.g:6174:2: iv_ruleTypingStrategyUseSiteOperator= ruleTypingStrategyUseSiteOperator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyUseSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyUseSiteOperator=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyUseSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypingStrategyUseSiteOperator"


    // $ANTLR start "ruleTypingStrategyUseSiteOperator"
    // InternalTypesParser.g:6180:1: ruleTypingStrategyUseSiteOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Tilde (kw= Tilde | this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX )? ) ;
    public final AntlrDatatypeRuleToken ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_STRUCTMODSUFFIX_2=null;


        	enterRule();

        try {
            // InternalTypesParser.g:6186:2: ( (kw= Tilde (kw= Tilde | this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX )? ) )
            // InternalTypesParser.g:6187:2: (kw= Tilde (kw= Tilde | this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX )? )
            {
            // InternalTypesParser.g:6187:2: (kw= Tilde (kw= Tilde | this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX )? )
            // InternalTypesParser.g:6188:3: kw= Tilde (kw= Tilde | this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX )?
            {
            kw=(Token)match(input,Tilde,FOLLOW_93); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0());
              		
            }
            // InternalTypesParser.g:6193:3: (kw= Tilde | this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX )?
            int alt117=3;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==Tilde) ) {
                alt117=1;
            }
            else if ( (LA117_0==RULE_STRUCTMODSUFFIX) ) {
                alt117=2;
            }
            switch (alt117) {
                case 1 :
                    // InternalTypesParser.g:6194:4: kw= Tilde
                    {
                    kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6200:4: this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX
                    {
                    this_STRUCTMODSUFFIX_2=(Token)match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_STRUCTMODSUFFIX_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_STRUCTMODSUFFIX_2, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getSTRUCTMODSUFFIXTerminalRuleCall_1_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypingStrategyUseSiteOperator"


    // $ANTLR start "entryRuleTypingStrategyDefSiteOperator"
    // InternalTypesParser.g:6212:1: entryRuleTypingStrategyDefSiteOperator returns [String current=null] : iv_ruleTypingStrategyDefSiteOperator= ruleTypingStrategyDefSiteOperator EOF ;
    public final String entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypingStrategyDefSiteOperator = null;


        try {
            // InternalTypesParser.g:6212:69: (iv_ruleTypingStrategyDefSiteOperator= ruleTypingStrategyDefSiteOperator EOF )
            // InternalTypesParser.g:6213:2: iv_ruleTypingStrategyDefSiteOperator= ruleTypingStrategyDefSiteOperator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyDefSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyDefSiteOperator=ruleTypingStrategyDefSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyDefSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypingStrategyDefSiteOperator"


    // $ANTLR start "ruleTypingStrategyDefSiteOperator"
    // InternalTypesParser.g:6219:1: ruleTypingStrategyDefSiteOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= Tilde ;
    public final AntlrDatatypeRuleToken ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalTypesParser.g:6225:2: (kw= Tilde )
            // InternalTypesParser.g:6226:2: kw= Tilde
            {
            kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypingStrategyDefSiteOperator"


    // $ANTLR start "entryRuleTypeTypeRef"
    // InternalTypesParser.g:6234:1: entryRuleTypeTypeRef returns [EObject current=null] : iv_ruleTypeTypeRef= ruleTypeTypeRef EOF ;
    public final EObject entryRuleTypeTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeTypeRef = null;


        try {
            // InternalTypesParser.g:6234:52: (iv_ruleTypeTypeRef= ruleTypeTypeRef EOF )
            // InternalTypesParser.g:6235:2: iv_ruleTypeTypeRef= ruleTypeTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeTypeRef=ruleTypeTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeTypeRef"


    // $ANTLR start "ruleTypeTypeRef"
    // InternalTypesParser.g:6241:1: ruleTypeTypeRef returns [EObject current=null] : ( () (otherlv_1= Type | ( (lv_constructorRef_2_0= Constructor ) ) ) otherlv_3= LeftCurlyBracket ( (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef ) ) otherlv_5= RightCurlyBracket ) ;
    public final EObject ruleTypeTypeRef() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_constructorRef_2_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_typeArg_4_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6247:2: ( ( () (otherlv_1= Type | ( (lv_constructorRef_2_0= Constructor ) ) ) otherlv_3= LeftCurlyBracket ( (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef ) ) otherlv_5= RightCurlyBracket ) )
            // InternalTypesParser.g:6248:2: ( () (otherlv_1= Type | ( (lv_constructorRef_2_0= Constructor ) ) ) otherlv_3= LeftCurlyBracket ( (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef ) ) otherlv_5= RightCurlyBracket )
            {
            // InternalTypesParser.g:6248:2: ( () (otherlv_1= Type | ( (lv_constructorRef_2_0= Constructor ) ) ) otherlv_3= LeftCurlyBracket ( (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef ) ) otherlv_5= RightCurlyBracket )
            // InternalTypesParser.g:6249:3: () (otherlv_1= Type | ( (lv_constructorRef_2_0= Constructor ) ) ) otherlv_3= LeftCurlyBracket ( (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef ) ) otherlv_5= RightCurlyBracket
            {
            // InternalTypesParser.g:6249:3: ()
            // InternalTypesParser.g:6250:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTypeTypeRefAccess().getTypeTypeRefAction_0(),
              					current);
              			
            }

            }

            // InternalTypesParser.g:6256:3: (otherlv_1= Type | ( (lv_constructorRef_2_0= Constructor ) ) )
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==Type) ) {
                alt118=1;
            }
            else if ( (LA118_0==Constructor) ) {
                alt118=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;
            }
            switch (alt118) {
                case 1 :
                    // InternalTypesParser.g:6257:4: otherlv_1= Type
                    {
                    otherlv_1=(Token)match(input,Type,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6262:4: ( (lv_constructorRef_2_0= Constructor ) )
                    {
                    // InternalTypesParser.g:6262:4: ( (lv_constructorRef_2_0= Constructor ) )
                    // InternalTypesParser.g:6263:5: (lv_constructorRef_2_0= Constructor )
                    {
                    // InternalTypesParser.g:6263:5: (lv_constructorRef_2_0= Constructor )
                    // InternalTypesParser.g:6264:6: lv_constructorRef_2_0= Constructor
                    {
                    lv_constructorRef_2_0=(Token)match(input,Constructor,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_constructorRef_2_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "constructorRef", lv_constructorRef_2_0 != null, "constructor");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_3=(Token)match(input,LeftCurlyBracket,FOLLOW_94); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            // InternalTypesParser.g:6281:3: ( (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef ) )
            // InternalTypesParser.g:6282:4: (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef )
            {
            // InternalTypesParser.g:6282:4: (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef )
            // InternalTypesParser.g:6283:5: lv_typeArg_4_0= ruleTypeArgInTypeTypeRef
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeTypeRefAccess().getTypeArgTypeArgInTypeTypeRefParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_18);
            lv_typeArg_4_0=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeTypeRefRule());
              					}
              					set(
              						current,
              						"typeArg",
              						lv_typeArg_4_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeArgInTypeTypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeTypeRef"


    // $ANTLR start "entryRuleTypeArgument"
    // InternalTypesParser.g:6308:1: entryRuleTypeArgument returns [EObject current=null] : iv_ruleTypeArgument= ruleTypeArgument EOF ;
    public final EObject entryRuleTypeArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeArgument = null;


        try {
            // InternalTypesParser.g:6308:53: (iv_ruleTypeArgument= ruleTypeArgument EOF )
            // InternalTypesParser.g:6309:2: iv_ruleTypeArgument= ruleTypeArgument EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgument=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeArgument"


    // $ANTLR start "ruleTypeArgument"
    // InternalTypesParser.g:6315:1: ruleTypeArgument returns [EObject current=null] : (this_Wildcard_0= ruleWildcard | this_TypeRef_1= ruleTypeRef ) ;
    public final EObject ruleTypeArgument() throws RecognitionException {
        EObject current = null;

        EObject this_Wildcard_0 = null;

        EObject this_TypeRef_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6321:2: ( (this_Wildcard_0= ruleWildcard | this_TypeRef_1= ruleTypeRef ) )
            // InternalTypesParser.g:6322:2: (this_Wildcard_0= ruleWildcard | this_TypeRef_1= ruleTypeRef )
            {
            // InternalTypesParser.g:6322:2: (this_Wildcard_0= ruleWildcard | this_TypeRef_1= ruleTypeRef )
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==Out||LA119_0==In||LA119_0==QuestionMark) ) {
                alt119=1;
            }
            else if ( ((LA119_0>=Intersection && LA119_0<=Constructor)||LA119_0==Undefined||LA119_0==Indexed||LA119_0==Union||(LA119_0>=Null && LA119_0<=This_1)||(LA119_0>=Type && LA119_0<=Void)||LA119_0==Any||LA119_0==LeftCurlyBracket||LA119_0==Tilde||LA119_0==RULE_IDENTIFIER) ) {
                alt119=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;
            }
            switch (alt119) {
                case 1 :
                    // InternalTypesParser.g:6323:3: this_Wildcard_0= ruleWildcard
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Wildcard_0=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Wildcard_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6332:3: this_TypeRef_1= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRef_1=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeRef_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeArgument"


    // $ANTLR start "entryRuleWildcard"
    // InternalTypesParser.g:6344:1: entryRuleWildcard returns [EObject current=null] : iv_ruleWildcard= ruleWildcard EOF ;
    public final EObject entryRuleWildcard() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWildcard = null;


        try {
            // InternalTypesParser.g:6344:49: (iv_ruleWildcard= ruleWildcard EOF )
            // InternalTypesParser.g:6345:2: iv_ruleWildcard= ruleWildcard EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcard=ruleWildcard();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcard; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWildcard"


    // $ANTLR start "ruleWildcard"
    // InternalTypesParser.g:6351:1: ruleWildcard returns [EObject current=null] : ( ( ( ( () QuestionMark ) )=>this_WildcardOldNotation_0= ruleWildcardOldNotation ) | this_WildcardNewNotation_1= ruleWildcardNewNotation ) ;
    public final EObject ruleWildcard() throws RecognitionException {
        EObject current = null;

        EObject this_WildcardOldNotation_0 = null;

        EObject this_WildcardNewNotation_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6357:2: ( ( ( ( ( () QuestionMark ) )=>this_WildcardOldNotation_0= ruleWildcardOldNotation ) | this_WildcardNewNotation_1= ruleWildcardNewNotation ) )
            // InternalTypesParser.g:6358:2: ( ( ( ( () QuestionMark ) )=>this_WildcardOldNotation_0= ruleWildcardOldNotation ) | this_WildcardNewNotation_1= ruleWildcardNewNotation )
            {
            // InternalTypesParser.g:6358:2: ( ( ( ( () QuestionMark ) )=>this_WildcardOldNotation_0= ruleWildcardOldNotation ) | this_WildcardNewNotation_1= ruleWildcardNewNotation )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==QuestionMark) && (synpred30_InternalTypesParser())) {
                alt120=1;
            }
            else if ( (LA120_0==Out||LA120_0==In) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    // InternalTypesParser.g:6359:3: ( ( ( () QuestionMark ) )=>this_WildcardOldNotation_0= ruleWildcardOldNotation )
                    {
                    // InternalTypesParser.g:6359:3: ( ( ( () QuestionMark ) )=>this_WildcardOldNotation_0= ruleWildcardOldNotation )
                    // InternalTypesParser.g:6360:4: ( ( () QuestionMark ) )=>this_WildcardOldNotation_0= ruleWildcardOldNotation
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getWildcardAccess().getWildcardOldNotationParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardOldNotation_0=ruleWildcardOldNotation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_WildcardOldNotation_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6376:3: this_WildcardNewNotation_1= ruleWildcardNewNotation
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getWildcardAccess().getWildcardNewNotationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardNewNotation_1=ruleWildcardNewNotation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WildcardNewNotation_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWildcard"


    // $ANTLR start "entryRuleWildcardOldNotation"
    // InternalTypesParser.g:6388:1: entryRuleWildcardOldNotation returns [EObject current=null] : iv_ruleWildcardOldNotation= ruleWildcardOldNotation EOF ;
    public final EObject entryRuleWildcardOldNotation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWildcardOldNotation = null;


        try {
            // InternalTypesParser.g:6388:60: (iv_ruleWildcardOldNotation= ruleWildcardOldNotation EOF )
            // InternalTypesParser.g:6389:2: iv_ruleWildcardOldNotation= ruleWildcardOldNotation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardOldNotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardOldNotation=ruleWildcardOldNotation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardOldNotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWildcardOldNotation"


    // $ANTLR start "ruleWildcardOldNotation"
    // InternalTypesParser.g:6395:1: ruleWildcardOldNotation returns [EObject current=null] : ( ( ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark ) ) ( (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) ) | (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) ) )? ) ;
    public final EObject ruleWildcardOldNotation() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_declaredUpperBound_3_0 = null;

        EObject lv_declaredLowerBound_5_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6401:2: ( ( ( ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark ) ) ( (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) ) | (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) ) )? ) )
            // InternalTypesParser.g:6402:2: ( ( ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark ) ) ( (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) ) | (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) ) )? )
            {
            // InternalTypesParser.g:6402:2: ( ( ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark ) ) ( (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) ) | (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) ) )? )
            // InternalTypesParser.g:6403:3: ( ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark ) ) ( (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) ) | (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) ) )?
            {
            // InternalTypesParser.g:6403:3: ( ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark ) )
            // InternalTypesParser.g:6404:4: ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark )
            {
            // InternalTypesParser.g:6410:4: ( () otherlv_1= QuestionMark )
            // InternalTypesParser.g:6411:5: () otherlv_1= QuestionMark
            {
            // InternalTypesParser.g:6411:5: ()
            // InternalTypesParser.g:6412:6: 
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getWildcardOldNotationAccess().getWildcardAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,QuestionMark,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getWildcardOldNotationAccess().getQuestionMarkKeyword_0_0_1());
              				
            }

            }


            }

            // InternalTypesParser.g:6424:3: ( (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) ) | (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) ) )?
            int alt121=3;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==Extends) ) {
                alt121=1;
            }
            else if ( (LA121_0==Super) ) {
                alt121=2;
            }
            switch (alt121) {
                case 1 :
                    // InternalTypesParser.g:6425:4: (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) )
                    {
                    // InternalTypesParser.g:6425:4: (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) )
                    // InternalTypesParser.g:6426:5: otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) )
                    {
                    otherlv_2=(Token)match(input,Extends,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getWildcardOldNotationAccess().getExtendsKeyword_1_0_0());
                      				
                    }
                    // InternalTypesParser.g:6430:5: ( (lv_declaredUpperBound_3_0= ruleTypeRef ) )
                    // InternalTypesParser.g:6431:6: (lv_declaredUpperBound_3_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:6431:6: (lv_declaredUpperBound_3_0= ruleTypeRef )
                    // InternalTypesParser.g:6432:7: lv_declaredUpperBound_3_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWildcardOldNotationAccess().getDeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_3_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardOldNotationRule());
                      							}
                      							set(
                      								current,
                      								"declaredUpperBound",
                      								lv_declaredUpperBound_3_0,
                      								"org.eclipse.n4js.ts.Types.TypeRef");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6451:4: (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) )
                    {
                    // InternalTypesParser.g:6451:4: (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) )
                    // InternalTypesParser.g:6452:5: otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) )
                    {
                    otherlv_4=(Token)match(input,Super,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getWildcardOldNotationAccess().getSuperKeyword_1_1_0());
                      				
                    }
                    // InternalTypesParser.g:6456:5: ( (lv_declaredLowerBound_5_0= ruleTypeRef ) )
                    // InternalTypesParser.g:6457:6: (lv_declaredLowerBound_5_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:6457:6: (lv_declaredLowerBound_5_0= ruleTypeRef )
                    // InternalTypesParser.g:6458:7: lv_declaredLowerBound_5_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWildcardOldNotationAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_5_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardOldNotationRule());
                      							}
                      							set(
                      								current,
                      								"declaredLowerBound",
                      								lv_declaredLowerBound_5_0,
                      								"org.eclipse.n4js.ts.Types.TypeRef");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWildcardOldNotation"


    // $ANTLR start "entryRuleWildcardOldNotationWithoutBound"
    // InternalTypesParser.g:6481:1: entryRuleWildcardOldNotationWithoutBound returns [EObject current=null] : iv_ruleWildcardOldNotationWithoutBound= ruleWildcardOldNotationWithoutBound EOF ;
    public final EObject entryRuleWildcardOldNotationWithoutBound() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWildcardOldNotationWithoutBound = null;


        try {
            // InternalTypesParser.g:6481:72: (iv_ruleWildcardOldNotationWithoutBound= ruleWildcardOldNotationWithoutBound EOF )
            // InternalTypesParser.g:6482:2: iv_ruleWildcardOldNotationWithoutBound= ruleWildcardOldNotationWithoutBound EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardOldNotationWithoutBoundRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardOldNotationWithoutBound=ruleWildcardOldNotationWithoutBound();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardOldNotationWithoutBound; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWildcardOldNotationWithoutBound"


    // $ANTLR start "ruleWildcardOldNotationWithoutBound"
    // InternalTypesParser.g:6488:1: ruleWildcardOldNotationWithoutBound returns [EObject current=null] : ( () otherlv_1= QuestionMark ) ;
    public final EObject ruleWildcardOldNotationWithoutBound() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalTypesParser.g:6494:2: ( ( () otherlv_1= QuestionMark ) )
            // InternalTypesParser.g:6495:2: ( () otherlv_1= QuestionMark )
            {
            // InternalTypesParser.g:6495:2: ( () otherlv_1= QuestionMark )
            // InternalTypesParser.g:6496:3: () otherlv_1= QuestionMark
            {
            // InternalTypesParser.g:6496:3: ()
            // InternalTypesParser.g:6497:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getWildcardOldNotationWithoutBoundAccess().getWildcardAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getWildcardOldNotationWithoutBoundAccess().getQuestionMarkKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWildcardOldNotationWithoutBound"


    // $ANTLR start "entryRuleWildcardNewNotation"
    // InternalTypesParser.g:6511:1: entryRuleWildcardNewNotation returns [EObject current=null] : iv_ruleWildcardNewNotation= ruleWildcardNewNotation EOF ;
    public final EObject entryRuleWildcardNewNotation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWildcardNewNotation = null;


        try {
            // InternalTypesParser.g:6511:60: (iv_ruleWildcardNewNotation= ruleWildcardNewNotation EOF )
            // InternalTypesParser.g:6512:2: iv_ruleWildcardNewNotation= ruleWildcardNewNotation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardNewNotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardNewNotation=ruleWildcardNewNotation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardNewNotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWildcardNewNotation"


    // $ANTLR start "ruleWildcardNewNotation"
    // InternalTypesParser.g:6518:1: ruleWildcardNewNotation returns [EObject current=null] : ( ( ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) ) ) | ( ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) ) ) ) ;
    public final EObject ruleWildcardNewNotation() throws RecognitionException {
        EObject current = null;

        Token lv_usingInOutNotation_0_0=null;
        Token lv_usingInOutNotation_2_0=null;
        EObject lv_declaredUpperBound_1_0 = null;

        EObject lv_declaredLowerBound_3_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6524:2: ( ( ( ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) ) ) | ( ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) ) ) ) )
            // InternalTypesParser.g:6525:2: ( ( ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) ) ) | ( ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) ) ) )
            {
            // InternalTypesParser.g:6525:2: ( ( ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) ) ) | ( ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) ) ) )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==Out) ) {
                alt122=1;
            }
            else if ( (LA122_0==In) ) {
                alt122=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    // InternalTypesParser.g:6526:3: ( ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) ) )
                    {
                    // InternalTypesParser.g:6526:3: ( ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) ) )
                    // InternalTypesParser.g:6527:4: ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) )
                    {
                    // InternalTypesParser.g:6527:4: ( (lv_usingInOutNotation_0_0= Out ) )
                    // InternalTypesParser.g:6528:5: (lv_usingInOutNotation_0_0= Out )
                    {
                    // InternalTypesParser.g:6528:5: (lv_usingInOutNotation_0_0= Out )
                    // InternalTypesParser.g:6529:6: lv_usingInOutNotation_0_0= Out
                    {
                    lv_usingInOutNotation_0_0=(Token)match(input,Out,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_usingInOutNotation_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", lv_usingInOutNotation_0_0 != null, "out");
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:6541:4: ( (lv_declaredUpperBound_1_0= ruleTypeRef ) )
                    // InternalTypesParser.g:6542:5: (lv_declaredUpperBound_1_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:6542:5: (lv_declaredUpperBound_1_0= ruleTypeRef )
                    // InternalTypesParser.g:6543:6: lv_declaredUpperBound_1_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundTypeRefParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_1_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6562:3: ( ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) ) )
                    {
                    // InternalTypesParser.g:6562:3: ( ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) ) )
                    // InternalTypesParser.g:6563:4: ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) )
                    {
                    // InternalTypesParser.g:6563:4: ( (lv_usingInOutNotation_2_0= In ) )
                    // InternalTypesParser.g:6564:5: (lv_usingInOutNotation_2_0= In )
                    {
                    // InternalTypesParser.g:6564:5: (lv_usingInOutNotation_2_0= In )
                    // InternalTypesParser.g:6565:6: lv_usingInOutNotation_2_0= In
                    {
                    lv_usingInOutNotation_2_0=(Token)match(input,In,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_usingInOutNotation_2_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", lv_usingInOutNotation_2_0 != null, "in");
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:6577:4: ( (lv_declaredLowerBound_3_0= ruleTypeRef ) )
                    // InternalTypesParser.g:6578:5: (lv_declaredLowerBound_3_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:6578:5: (lv_declaredLowerBound_3_0= ruleTypeRef )
                    // InternalTypesParser.g:6579:6: lv_declaredLowerBound_3_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_3_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredLowerBound",
                      							lv_declaredLowerBound_3_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWildcardNewNotation"


    // $ANTLR start "entrySuperTypeVariable"
    // InternalTypesParser.g:6601:1: entrySuperTypeVariable returns [EObject current=null] : iv_superTypeVariable= superTypeVariable EOF ;
    public final EObject entrySuperTypeVariable() throws RecognitionException {
        EObject current = null;

        EObject iv_superTypeVariable = null;


        try {
            // InternalTypesParser.g:6601:54: (iv_superTypeVariable= superTypeVariable EOF )
            // InternalTypesParser.g:6602:2: iv_superTypeVariable= superTypeVariable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeExpressionsTypeVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_superTypeVariable=superTypeVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_superTypeVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entrySuperTypeVariable"


    // $ANTLR start "superTypeVariable"
    // InternalTypesParser.g:6608:1: superTypeVariable returns [EObject current=null] : ( ( ( (lv_declaredCovariant_0_0= Out ) ) | ( (lv_declaredContravariant_1_0= In ) ) )? ( (lv_name_2_0= RULE_IDENTIFIER ) ) (otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) ) )? ) ;
    public final EObject superTypeVariable() throws RecognitionException {
        EObject current = null;

        Token lv_declaredCovariant_0_0=null;
        Token lv_declaredContravariant_1_0=null;
        Token lv_name_2_0=null;
        Token otherlv_3=null;
        EObject lv_declaredUpperBound_4_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6614:2: ( ( ( ( (lv_declaredCovariant_0_0= Out ) ) | ( (lv_declaredContravariant_1_0= In ) ) )? ( (lv_name_2_0= RULE_IDENTIFIER ) ) (otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) ) )? ) )
            // InternalTypesParser.g:6615:2: ( ( ( (lv_declaredCovariant_0_0= Out ) ) | ( (lv_declaredContravariant_1_0= In ) ) )? ( (lv_name_2_0= RULE_IDENTIFIER ) ) (otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) ) )? )
            {
            // InternalTypesParser.g:6615:2: ( ( ( (lv_declaredCovariant_0_0= Out ) ) | ( (lv_declaredContravariant_1_0= In ) ) )? ( (lv_name_2_0= RULE_IDENTIFIER ) ) (otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) ) )? )
            // InternalTypesParser.g:6616:3: ( ( (lv_declaredCovariant_0_0= Out ) ) | ( (lv_declaredContravariant_1_0= In ) ) )? ( (lv_name_2_0= RULE_IDENTIFIER ) ) (otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) ) )?
            {
            // InternalTypesParser.g:6616:3: ( ( (lv_declaredCovariant_0_0= Out ) ) | ( (lv_declaredContravariant_1_0= In ) ) )?
            int alt123=3;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==Out) ) {
                alt123=1;
            }
            else if ( (LA123_0==In) ) {
                alt123=2;
            }
            switch (alt123) {
                case 1 :
                    // InternalTypesParser.g:6617:4: ( (lv_declaredCovariant_0_0= Out ) )
                    {
                    // InternalTypesParser.g:6617:4: ( (lv_declaredCovariant_0_0= Out ) )
                    // InternalTypesParser.g:6618:5: (lv_declaredCovariant_0_0= Out )
                    {
                    // InternalTypesParser.g:6618:5: (lv_declaredCovariant_0_0= Out )
                    // InternalTypesParser.g:6619:6: lv_declaredCovariant_0_0= Out
                    {
                    lv_declaredCovariant_0_0=(Token)match(input,Out,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_declaredCovariant_0_0, grammarAccess.getTypeExpressionsTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeExpressionsTypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredCovariant", lv_declaredCovariant_0_0 != null, "out");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6632:4: ( (lv_declaredContravariant_1_0= In ) )
                    {
                    // InternalTypesParser.g:6632:4: ( (lv_declaredContravariant_1_0= In ) )
                    // InternalTypesParser.g:6633:5: (lv_declaredContravariant_1_0= In )
                    {
                    // InternalTypesParser.g:6633:5: (lv_declaredContravariant_1_0= In )
                    // InternalTypesParser.g:6634:6: lv_declaredContravariant_1_0= In
                    {
                    lv_declaredContravariant_1_0=(Token)match(input,In,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_declaredContravariant_1_0, grammarAccess.getTypeExpressionsTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeExpressionsTypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredContravariant", lv_declaredContravariant_1_0 != null, "in");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:6647:3: ( (lv_name_2_0= RULE_IDENTIFIER ) )
            // InternalTypesParser.g:6648:4: (lv_name_2_0= RULE_IDENTIFIER )
            {
            // InternalTypesParser.g:6648:4: (lv_name_2_0= RULE_IDENTIFIER )
            // InternalTypesParser.g:6649:5: lv_name_2_0= RULE_IDENTIFIER
            {
            lv_name_2_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_40); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_2_0, grammarAccess.getTypeExpressionsTypeVariableAccess().getNameIDENTIFIERTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeExpressionsTypeVariableRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.eclipse.n4js.ts.TypeExpressions.IDENTIFIER");
              				
            }

            }


            }

            // InternalTypesParser.g:6665:3: (otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) ) )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==Extends) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // InternalTypesParser.g:6666:4: otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) )
                    {
                    otherlv_3=(Token)match(input,Extends,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getTypeExpressionsTypeVariableAccess().getExtendsKeyword_2_0());
                      			
                    }
                    // InternalTypesParser.g:6670:4: ( (lv_declaredUpperBound_4_0= ruleTypeRef ) )
                    // InternalTypesParser.g:6671:5: (lv_declaredUpperBound_4_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:6671:5: (lv_declaredUpperBound_4_0= ruleTypeRef )
                    // InternalTypesParser.g:6672:6: lv_declaredUpperBound_4_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTypeExpressionsTypeVariableAccess().getDeclaredUpperBoundTypeRefParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_4_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTypeExpressionsTypeVariableRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_4_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "superTypeVariable"


    // $ANTLR start "entryRuleBindingIdentifier"
    // InternalTypesParser.g:6694:1: entryRuleBindingIdentifier returns [String current=null] : iv_ruleBindingIdentifier= ruleBindingIdentifier EOF ;
    public final String entryRuleBindingIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBindingIdentifier = null;


        try {
            // InternalTypesParser.g:6694:57: (iv_ruleBindingIdentifier= ruleBindingIdentifier EOF )
            // InternalTypesParser.g:6695:2: iv_ruleBindingIdentifier= ruleBindingIdentifier EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifier=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBindingIdentifier"


    // $ANTLR start "ruleBindingIdentifier"
    // InternalTypesParser.g:6701:1: ruleBindingIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_IDENTIFIER_0= RULE_IDENTIFIER | kw= Yield | this_N4Keyword_2= ruleN4Keyword ) ;
    public final AntlrDatatypeRuleToken ruleBindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        Token kw=null;
        AntlrDatatypeRuleToken this_N4Keyword_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6707:2: ( (this_IDENTIFIER_0= RULE_IDENTIFIER | kw= Yield | this_N4Keyword_2= ruleN4Keyword ) )
            // InternalTypesParser.g:6708:2: (this_IDENTIFIER_0= RULE_IDENTIFIER | kw= Yield | this_N4Keyword_2= ruleN4Keyword )
            {
            // InternalTypesParser.g:6708:2: (this_IDENTIFIER_0= RULE_IDENTIFIER | kw= Yield | this_N4Keyword_2= ruleN4Keyword )
            int alt125=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt125=1;
                }
                break;
            case Yield:
                {
                alt125=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt125=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }

            switch (alt125) {
                case 1 :
                    // InternalTypesParser.g:6709:3: this_IDENTIFIER_0= RULE_IDENTIFIER
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getBindingIdentifierAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6717:3: kw= Yield
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:6723:3: this_N4Keyword_2= ruleN4Keyword
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingIdentifierAccess().getN4KeywordParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_N4Keyword_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBindingIdentifier"


    // $ANTLR start "entryRuleIdentifierName"
    // InternalTypesParser.g:6737:1: entryRuleIdentifierName returns [String current=null] : iv_ruleIdentifierName= ruleIdentifierName EOF ;
    public final String entryRuleIdentifierName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIdentifierName = null;


        try {
            // InternalTypesParser.g:6737:54: (iv_ruleIdentifierName= ruleIdentifierName EOF )
            // InternalTypesParser.g:6738:2: iv_ruleIdentifierName= ruleIdentifierName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierName=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIdentifierName"


    // $ANTLR start "ruleIdentifierName"
    // InternalTypesParser.g:6744:1: ruleIdentifierName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_IDENTIFIER_0= RULE_IDENTIFIER | this_ReservedWord_1= ruleReservedWord | this_N4Keyword_2= ruleN4Keyword ) ;
    public final AntlrDatatypeRuleToken ruleIdentifierName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        AntlrDatatypeRuleToken this_ReservedWord_1 = null;

        AntlrDatatypeRuleToken this_N4Keyword_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6750:2: ( (this_IDENTIFIER_0= RULE_IDENTIFIER | this_ReservedWord_1= ruleReservedWord | this_N4Keyword_2= ruleN4Keyword ) )
            // InternalTypesParser.g:6751:2: (this_IDENTIFIER_0= RULE_IDENTIFIER | this_ReservedWord_1= ruleReservedWord | this_N4Keyword_2= ruleN4Keyword )
            {
            // InternalTypesParser.g:6751:2: (this_IDENTIFIER_0= RULE_IDENTIFIER | this_ReservedWord_1= ruleReservedWord | this_N4Keyword_2= ruleN4Keyword )
            int alt126=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt126=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt126=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt126=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }

            switch (alt126) {
                case 1 :
                    // InternalTypesParser.g:6752:3: this_IDENTIFIER_0= RULE_IDENTIFIER
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierNameAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6760:3: this_ReservedWord_1= ruleReservedWord
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getReservedWordParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ReservedWord_1=ruleReservedWord();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ReservedWord_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:6771:3: this_N4Keyword_2= ruleN4Keyword
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getN4KeywordParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_N4Keyword_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIdentifierName"


    // $ANTLR start "entryRuleReservedWord"
    // InternalTypesParser.g:6785:1: entryRuleReservedWord returns [String current=null] : iv_ruleReservedWord= ruleReservedWord EOF ;
    public final String entryRuleReservedWord() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleReservedWord = null;


        try {
            // InternalTypesParser.g:6785:52: (iv_ruleReservedWord= ruleReservedWord EOF )
            // InternalTypesParser.g:6786:2: iv_ruleReservedWord= ruleReservedWord EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReservedWordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReservedWord=ruleReservedWord();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReservedWord.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReservedWord"


    // $ANTLR start "ruleReservedWord"
    // InternalTypesParser.g:6792:1: ruleReservedWord returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Break | kw= Case | kw= Catch | kw= Class | kw= Const | kw= Continue | kw= Debugger | kw= Default | kw= Delete | kw= Do | kw= Else | kw= Export | kw= Extends | kw= Finally | kw= For | kw= Function | kw= If | kw= Import | kw= In | kw= Instanceof | kw= New | kw= Return | kw= Super | kw= Switch | kw= This_1 | kw= Throw | kw= Try | kw= Typeof | kw= Var | kw= Void | kw= While | kw= With | kw= Yield | kw= Null | kw= True | kw= False | kw= Enum ) ;
    public final AntlrDatatypeRuleToken ruleReservedWord() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalTypesParser.g:6798:2: ( (kw= Break | kw= Case | kw= Catch | kw= Class | kw= Const | kw= Continue | kw= Debugger | kw= Default | kw= Delete | kw= Do | kw= Else | kw= Export | kw= Extends | kw= Finally | kw= For | kw= Function | kw= If | kw= Import | kw= In | kw= Instanceof | kw= New | kw= Return | kw= Super | kw= Switch | kw= This_1 | kw= Throw | kw= Try | kw= Typeof | kw= Var | kw= Void | kw= While | kw= With | kw= Yield | kw= Null | kw= True | kw= False | kw= Enum ) )
            // InternalTypesParser.g:6799:2: (kw= Break | kw= Case | kw= Catch | kw= Class | kw= Const | kw= Continue | kw= Debugger | kw= Default | kw= Delete | kw= Do | kw= Else | kw= Export | kw= Extends | kw= Finally | kw= For | kw= Function | kw= If | kw= Import | kw= In | kw= Instanceof | kw= New | kw= Return | kw= Super | kw= Switch | kw= This_1 | kw= Throw | kw= Try | kw= Typeof | kw= Var | kw= Void | kw= While | kw= With | kw= Yield | kw= Null | kw= True | kw= False | kw= Enum )
            {
            // InternalTypesParser.g:6799:2: (kw= Break | kw= Case | kw= Catch | kw= Class | kw= Const | kw= Continue | kw= Debugger | kw= Default | kw= Delete | kw= Do | kw= Else | kw= Export | kw= Extends | kw= Finally | kw= For | kw= Function | kw= If | kw= Import | kw= In | kw= Instanceof | kw= New | kw= Return | kw= Super | kw= Switch | kw= This_1 | kw= Throw | kw= Try | kw= Typeof | kw= Var | kw= Void | kw= While | kw= With | kw= Yield | kw= Null | kw= True | kw= False | kw= Enum )
            int alt127=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt127=1;
                }
                break;
            case Case:
                {
                alt127=2;
                }
                break;
            case Catch:
                {
                alt127=3;
                }
                break;
            case Class:
                {
                alt127=4;
                }
                break;
            case Const:
                {
                alt127=5;
                }
                break;
            case Continue:
                {
                alt127=6;
                }
                break;
            case Debugger:
                {
                alt127=7;
                }
                break;
            case Default:
                {
                alt127=8;
                }
                break;
            case Delete:
                {
                alt127=9;
                }
                break;
            case Do:
                {
                alt127=10;
                }
                break;
            case Else:
                {
                alt127=11;
                }
                break;
            case Export:
                {
                alt127=12;
                }
                break;
            case Extends:
                {
                alt127=13;
                }
                break;
            case Finally:
                {
                alt127=14;
                }
                break;
            case For:
                {
                alt127=15;
                }
                break;
            case Function:
                {
                alt127=16;
                }
                break;
            case If:
                {
                alt127=17;
                }
                break;
            case Import:
                {
                alt127=18;
                }
                break;
            case In:
                {
                alt127=19;
                }
                break;
            case Instanceof:
                {
                alt127=20;
                }
                break;
            case New:
                {
                alt127=21;
                }
                break;
            case Return:
                {
                alt127=22;
                }
                break;
            case Super:
                {
                alt127=23;
                }
                break;
            case Switch:
                {
                alt127=24;
                }
                break;
            case This_1:
                {
                alt127=25;
                }
                break;
            case Throw:
                {
                alt127=26;
                }
                break;
            case Try:
                {
                alt127=27;
                }
                break;
            case Typeof:
                {
                alt127=28;
                }
                break;
            case Var:
                {
                alt127=29;
                }
                break;
            case Void:
                {
                alt127=30;
                }
                break;
            case While:
                {
                alt127=31;
                }
                break;
            case With:
                {
                alt127=32;
                }
                break;
            case Yield:
                {
                alt127=33;
                }
                break;
            case Null:
                {
                alt127=34;
                }
                break;
            case True:
                {
                alt127=35;
                }
                break;
            case False:
                {
                alt127=36;
                }
                break;
            case Enum:
                {
                alt127=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // InternalTypesParser.g:6800:3: kw= Break
                    {
                    kw=(Token)match(input,Break,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getBreakKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6806:3: kw= Case
                    {
                    kw=(Token)match(input,Case,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCaseKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:6812:3: kw= Catch
                    {
                    kw=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCatchKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:6818:3: kw= Class
                    {
                    kw=(Token)match(input,Class,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getClassKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:6824:3: kw= Const
                    {
                    kw=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getConstKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalTypesParser.g:6830:3: kw= Continue
                    {
                    kw=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getContinueKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalTypesParser.g:6836:3: kw= Debugger
                    {
                    kw=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalTypesParser.g:6842:3: kw= Default
                    {
                    kw=(Token)match(input,Default,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDefaultKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalTypesParser.g:6848:3: kw= Delete
                    {
                    kw=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDeleteKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalTypesParser.g:6854:3: kw= Do
                    {
                    kw=(Token)match(input,Do,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDoKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalTypesParser.g:6860:3: kw= Else
                    {
                    kw=(Token)match(input,Else,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getElseKeyword_10());
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalTypesParser.g:6866:3: kw= Export
                    {
                    kw=(Token)match(input,Export,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExportKeyword_11());
                      		
                    }

                    }
                    break;
                case 13 :
                    // InternalTypesParser.g:6872:3: kw= Extends
                    {
                    kw=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExtendsKeyword_12());
                      		
                    }

                    }
                    break;
                case 14 :
                    // InternalTypesParser.g:6878:3: kw= Finally
                    {
                    kw=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFinallyKeyword_13());
                      		
                    }

                    }
                    break;
                case 15 :
                    // InternalTypesParser.g:6884:3: kw= For
                    {
                    kw=(Token)match(input,For,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getForKeyword_14());
                      		
                    }

                    }
                    break;
                case 16 :
                    // InternalTypesParser.g:6890:3: kw= Function
                    {
                    kw=(Token)match(input,Function,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFunctionKeyword_15());
                      		
                    }

                    }
                    break;
                case 17 :
                    // InternalTypesParser.g:6896:3: kw= If
                    {
                    kw=(Token)match(input,If,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getIfKeyword_16());
                      		
                    }

                    }
                    break;
                case 18 :
                    // InternalTypesParser.g:6902:3: kw= Import
                    {
                    kw=(Token)match(input,Import,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getImportKeyword_17());
                      		
                    }

                    }
                    break;
                case 19 :
                    // InternalTypesParser.g:6908:3: kw= In
                    {
                    kw=(Token)match(input,In,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInKeyword_18());
                      		
                    }

                    }
                    break;
                case 20 :
                    // InternalTypesParser.g:6914:3: kw= Instanceof
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19());
                      		
                    }

                    }
                    break;
                case 21 :
                    // InternalTypesParser.g:6920:3: kw= New
                    {
                    kw=(Token)match(input,New,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNewKeyword_20());
                      		
                    }

                    }
                    break;
                case 22 :
                    // InternalTypesParser.g:6926:3: kw= Return
                    {
                    kw=(Token)match(input,Return,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getReturnKeyword_21());
                      		
                    }

                    }
                    break;
                case 23 :
                    // InternalTypesParser.g:6932:3: kw= Super
                    {
                    kw=(Token)match(input,Super,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSuperKeyword_22());
                      		
                    }

                    }
                    break;
                case 24 :
                    // InternalTypesParser.g:6938:3: kw= Switch
                    {
                    kw=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSwitchKeyword_23());
                      		
                    }

                    }
                    break;
                case 25 :
                    // InternalTypesParser.g:6944:3: kw= This_1
                    {
                    kw=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThisKeyword_24());
                      		
                    }

                    }
                    break;
                case 26 :
                    // InternalTypesParser.g:6950:3: kw= Throw
                    {
                    kw=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThrowKeyword_25());
                      		
                    }

                    }
                    break;
                case 27 :
                    // InternalTypesParser.g:6956:3: kw= Try
                    {
                    kw=(Token)match(input,Try,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTryKeyword_26());
                      		
                    }

                    }
                    break;
                case 28 :
                    // InternalTypesParser.g:6962:3: kw= Typeof
                    {
                    kw=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTypeofKeyword_27());
                      		
                    }

                    }
                    break;
                case 29 :
                    // InternalTypesParser.g:6968:3: kw= Var
                    {
                    kw=(Token)match(input,Var,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVarKeyword_28());
                      		
                    }

                    }
                    break;
                case 30 :
                    // InternalTypesParser.g:6974:3: kw= Void
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVoidKeyword_29());
                      		
                    }

                    }
                    break;
                case 31 :
                    // InternalTypesParser.g:6980:3: kw= While
                    {
                    kw=(Token)match(input,While,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWhileKeyword_30());
                      		
                    }

                    }
                    break;
                case 32 :
                    // InternalTypesParser.g:6986:3: kw= With
                    {
                    kw=(Token)match(input,With,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWithKeyword_31());
                      		
                    }

                    }
                    break;
                case 33 :
                    // InternalTypesParser.g:6992:3: kw= Yield
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getYieldKeyword_32());
                      		
                    }

                    }
                    break;
                case 34 :
                    // InternalTypesParser.g:6998:3: kw= Null
                    {
                    kw=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNullKeyword_33());
                      		
                    }

                    }
                    break;
                case 35 :
                    // InternalTypesParser.g:7004:3: kw= True
                    {
                    kw=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTrueKeyword_34());
                      		
                    }

                    }
                    break;
                case 36 :
                    // InternalTypesParser.g:7010:3: kw= False
                    {
                    kw=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFalseKeyword_35());
                      		
                    }

                    }
                    break;
                case 37 :
                    // InternalTypesParser.g:7016:3: kw= Enum
                    {
                    kw=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getEnumKeyword_36());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReservedWord"


    // $ANTLR start "entryRuleN4Keyword"
    // InternalTypesParser.g:7025:1: entryRuleN4Keyword returns [String current=null] : iv_ruleN4Keyword= ruleN4Keyword EOF ;
    public final String entryRuleN4Keyword() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleN4Keyword = null;


        try {
            // InternalTypesParser.g:7025:49: (iv_ruleN4Keyword= ruleN4Keyword EOF )
            // InternalTypesParser.g:7026:2: iv_ruleN4Keyword= ruleN4Keyword EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4KeywordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4Keyword=ruleN4Keyword();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4Keyword.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleN4Keyword"


    // $ANTLR start "ruleN4Keyword"
    // InternalTypesParser.g:7032:1: ruleN4Keyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Get | kw= Set | kw= Let | kw= Project | kw= External | kw= Abstract | kw= Static | kw= As | kw= From | kw= Constructor | kw= Of | kw= Target | kw= Type | kw= Union | kw= Intersection | kw= This | kw= Promisify | kw= Await | kw= Async | kw= Implements | kw= Interface | kw= Private | kw= Protected | kw= Public | kw= Out ) ;
    public final AntlrDatatypeRuleToken ruleN4Keyword() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalTypesParser.g:7038:2: ( (kw= Get | kw= Set | kw= Let | kw= Project | kw= External | kw= Abstract | kw= Static | kw= As | kw= From | kw= Constructor | kw= Of | kw= Target | kw= Type | kw= Union | kw= Intersection | kw= This | kw= Promisify | kw= Await | kw= Async | kw= Implements | kw= Interface | kw= Private | kw= Protected | kw= Public | kw= Out ) )
            // InternalTypesParser.g:7039:2: (kw= Get | kw= Set | kw= Let | kw= Project | kw= External | kw= Abstract | kw= Static | kw= As | kw= From | kw= Constructor | kw= Of | kw= Target | kw= Type | kw= Union | kw= Intersection | kw= This | kw= Promisify | kw= Await | kw= Async | kw= Implements | kw= Interface | kw= Private | kw= Protected | kw= Public | kw= Out )
            {
            // InternalTypesParser.g:7039:2: (kw= Get | kw= Set | kw= Let | kw= Project | kw= External | kw= Abstract | kw= Static | kw= As | kw= From | kw= Constructor | kw= Of | kw= Target | kw= Type | kw= Union | kw= Intersection | kw= This | kw= Promisify | kw= Await | kw= Async | kw= Implements | kw= Interface | kw= Private | kw= Protected | kw= Public | kw= Out )
            int alt128=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt128=1;
                }
                break;
            case Set:
                {
                alt128=2;
                }
                break;
            case Let:
                {
                alt128=3;
                }
                break;
            case Project:
                {
                alt128=4;
                }
                break;
            case External:
                {
                alt128=5;
                }
                break;
            case Abstract:
                {
                alt128=6;
                }
                break;
            case Static:
                {
                alt128=7;
                }
                break;
            case As:
                {
                alt128=8;
                }
                break;
            case From:
                {
                alt128=9;
                }
                break;
            case Constructor:
                {
                alt128=10;
                }
                break;
            case Of:
                {
                alt128=11;
                }
                break;
            case Target:
                {
                alt128=12;
                }
                break;
            case Type:
                {
                alt128=13;
                }
                break;
            case Union:
                {
                alt128=14;
                }
                break;
            case Intersection:
                {
                alt128=15;
                }
                break;
            case This:
                {
                alt128=16;
                }
                break;
            case Promisify:
                {
                alt128=17;
                }
                break;
            case Await:
                {
                alt128=18;
                }
                break;
            case Async:
                {
                alt128=19;
                }
                break;
            case Implements:
                {
                alt128=20;
                }
                break;
            case Interface:
                {
                alt128=21;
                }
                break;
            case Private:
                {
                alt128=22;
                }
                break;
            case Protected:
                {
                alt128=23;
                }
                break;
            case Public:
                {
                alt128=24;
                }
                break;
            case Out:
                {
                alt128=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }

            switch (alt128) {
                case 1 :
                    // InternalTypesParser.g:7040:3: kw= Get
                    {
                    kw=(Token)match(input,Get,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getGetKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:7046:3: kw= Set
                    {
                    kw=(Token)match(input,Set,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getSetKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:7052:3: kw= Let
                    {
                    kw=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getLetKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:7058:3: kw= Project
                    {
                    kw=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProjectKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:7064:3: kw= External
                    {
                    kw=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getExternalKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalTypesParser.g:7070:3: kw= Abstract
                    {
                    kw=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalTypesParser.g:7076:3: kw= Static
                    {
                    kw=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getStaticKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalTypesParser.g:7082:3: kw= As
                    {
                    kw=(Token)match(input,As,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalTypesParser.g:7088:3: kw= From
                    {
                    kw=(Token)match(input,From,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getFromKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalTypesParser.g:7094:3: kw= Constructor
                    {
                    kw=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalTypesParser.g:7100:3: kw= Of
                    {
                    kw=(Token)match(input,Of,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOfKeyword_10());
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalTypesParser.g:7106:3: kw= Target
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTargetKeyword_11());
                      		
                    }

                    }
                    break;
                case 13 :
                    // InternalTypesParser.g:7112:3: kw= Type
                    {
                    kw=(Token)match(input,Type,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTypeKeyword_12());
                      		
                    }

                    }
                    break;
                case 14 :
                    // InternalTypesParser.g:7118:3: kw= Union
                    {
                    kw=(Token)match(input,Union,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getUnionKeyword_13());
                      		
                    }

                    }
                    break;
                case 15 :
                    // InternalTypesParser.g:7124:3: kw= Intersection
                    {
                    kw=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14());
                      		
                    }

                    }
                    break;
                case 16 :
                    // InternalTypesParser.g:7130:3: kw= This
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getThisKeyword_15());
                      		
                    }

                    }
                    break;
                case 17 :
                    // InternalTypesParser.g:7136:3: kw= Promisify
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16());
                      		
                    }

                    }
                    break;
                case 18 :
                    // InternalTypesParser.g:7142:3: kw= Await
                    {
                    kw=(Token)match(input,Await,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17());
                      		
                    }

                    }
                    break;
                case 19 :
                    // InternalTypesParser.g:7148:3: kw= Async
                    {
                    kw=(Token)match(input,Async,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18());
                      		
                    }

                    }
                    break;
                case 20 :
                    // InternalTypesParser.g:7154:3: kw= Implements
                    {
                    kw=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19());
                      		
                    }

                    }
                    break;
                case 21 :
                    // InternalTypesParser.g:7160:3: kw= Interface
                    {
                    kw=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20());
                      		
                    }

                    }
                    break;
                case 22 :
                    // InternalTypesParser.g:7166:3: kw= Private
                    {
                    kw=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21());
                      		
                    }

                    }
                    break;
                case 23 :
                    // InternalTypesParser.g:7172:3: kw= Protected
                    {
                    kw=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22());
                      		
                    }

                    }
                    break;
                case 24 :
                    // InternalTypesParser.g:7178:3: kw= Public
                    {
                    kw=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPublicKeyword_23());
                      		
                    }

                    }
                    break;
                case 25 :
                    // InternalTypesParser.g:7184:3: kw= Out
                    {
                    kw=(Token)match(input,Out,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOutKeyword_24());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleN4Keyword"


    // $ANTLR start "ruleTypeAccessModifier"
    // InternalTypesParser.g:7193:1: ruleTypeAccessModifier returns [Enumerator current=null] : ( (enumLiteral_0= Project ) | (enumLiteral_1= PublicInternal ) | (enumLiteral_2= Public ) ) ;
    public final Enumerator ruleTypeAccessModifier() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;


        	enterRule();

        try {
            // InternalTypesParser.g:7199:2: ( ( (enumLiteral_0= Project ) | (enumLiteral_1= PublicInternal ) | (enumLiteral_2= Public ) ) )
            // InternalTypesParser.g:7200:2: ( (enumLiteral_0= Project ) | (enumLiteral_1= PublicInternal ) | (enumLiteral_2= Public ) )
            {
            // InternalTypesParser.g:7200:2: ( (enumLiteral_0= Project ) | (enumLiteral_1= PublicInternal ) | (enumLiteral_2= Public ) )
            int alt129=3;
            switch ( input.LA(1) ) {
            case Project:
                {
                alt129=1;
                }
                break;
            case PublicInternal:
                {
                alt129=2;
                }
                break;
            case Public:
                {
                alt129=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }

            switch (alt129) {
                case 1 :
                    // InternalTypesParser.g:7201:3: (enumLiteral_0= Project )
                    {
                    // InternalTypesParser.g:7201:3: (enumLiteral_0= Project )
                    // InternalTypesParser.g:7202:4: enumLiteral_0= Project
                    {
                    enumLiteral_0=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTypeAccessModifierAccess().getProjectEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getTypeAccessModifierAccess().getProjectEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:7209:3: (enumLiteral_1= PublicInternal )
                    {
                    // InternalTypesParser.g:7209:3: (enumLiteral_1= PublicInternal )
                    // InternalTypesParser.g:7210:4: enumLiteral_1= PublicInternal
                    {
                    enumLiteral_1=(Token)match(input,PublicInternal,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTypeAccessModifierAccess().getPublicInternalEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getTypeAccessModifierAccess().getPublicInternalEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:7217:3: (enumLiteral_2= Public )
                    {
                    // InternalTypesParser.g:7217:3: (enumLiteral_2= Public )
                    // InternalTypesParser.g:7218:4: enumLiteral_2= Public
                    {
                    enumLiteral_2=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTypeAccessModifierAccess().getPublicEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getTypeAccessModifierAccess().getPublicEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeAccessModifier"


    // $ANTLR start "ruleMemberAccessModifier"
    // InternalTypesParser.g:7228:1: ruleMemberAccessModifier returns [Enumerator current=null] : ( (enumLiteral_0= Private ) | (enumLiteral_1= Project ) | (enumLiteral_2= ProtectedInternal ) | (enumLiteral_3= Protected ) | (enumLiteral_4= PublicInternal ) | (enumLiteral_5= Public ) ) ;
    public final Enumerator ruleMemberAccessModifier() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;


        	enterRule();

        try {
            // InternalTypesParser.g:7234:2: ( ( (enumLiteral_0= Private ) | (enumLiteral_1= Project ) | (enumLiteral_2= ProtectedInternal ) | (enumLiteral_3= Protected ) | (enumLiteral_4= PublicInternal ) | (enumLiteral_5= Public ) ) )
            // InternalTypesParser.g:7235:2: ( (enumLiteral_0= Private ) | (enumLiteral_1= Project ) | (enumLiteral_2= ProtectedInternal ) | (enumLiteral_3= Protected ) | (enumLiteral_4= PublicInternal ) | (enumLiteral_5= Public ) )
            {
            // InternalTypesParser.g:7235:2: ( (enumLiteral_0= Private ) | (enumLiteral_1= Project ) | (enumLiteral_2= ProtectedInternal ) | (enumLiteral_3= Protected ) | (enumLiteral_4= PublicInternal ) | (enumLiteral_5= Public ) )
            int alt130=6;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt130=1;
                }
                break;
            case Project:
                {
                alt130=2;
                }
                break;
            case ProtectedInternal:
                {
                alt130=3;
                }
                break;
            case Protected:
                {
                alt130=4;
                }
                break;
            case PublicInternal:
                {
                alt130=5;
                }
                break;
            case Public:
                {
                alt130=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // InternalTypesParser.g:7236:3: (enumLiteral_0= Private )
                    {
                    // InternalTypesParser.g:7236:3: (enumLiteral_0= Private )
                    // InternalTypesParser.g:7237:4: enumLiteral_0= Private
                    {
                    enumLiteral_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMemberAccessModifierAccess().getPrivateEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getMemberAccessModifierAccess().getPrivateEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:7244:3: (enumLiteral_1= Project )
                    {
                    // InternalTypesParser.g:7244:3: (enumLiteral_1= Project )
                    // InternalTypesParser.g:7245:4: enumLiteral_1= Project
                    {
                    enumLiteral_1=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMemberAccessModifierAccess().getProjectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getMemberAccessModifierAccess().getProjectEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:7252:3: (enumLiteral_2= ProtectedInternal )
                    {
                    // InternalTypesParser.g:7252:3: (enumLiteral_2= ProtectedInternal )
                    // InternalTypesParser.g:7253:4: enumLiteral_2= ProtectedInternal
                    {
                    enumLiteral_2=(Token)match(input,ProtectedInternal,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMemberAccessModifierAccess().getProtectedInternalEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getMemberAccessModifierAccess().getProtectedInternalEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:7260:3: (enumLiteral_3= Protected )
                    {
                    // InternalTypesParser.g:7260:3: (enumLiteral_3= Protected )
                    // InternalTypesParser.g:7261:4: enumLiteral_3= Protected
                    {
                    enumLiteral_3=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMemberAccessModifierAccess().getProtectedEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getMemberAccessModifierAccess().getProtectedEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:7268:3: (enumLiteral_4= PublicInternal )
                    {
                    // InternalTypesParser.g:7268:3: (enumLiteral_4= PublicInternal )
                    // InternalTypesParser.g:7269:4: enumLiteral_4= PublicInternal
                    {
                    enumLiteral_4=(Token)match(input,PublicInternal,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMemberAccessModifierAccess().getPublicInternalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getMemberAccessModifierAccess().getPublicInternalEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalTypesParser.g:7276:3: (enumLiteral_5= Public )
                    {
                    // InternalTypesParser.g:7276:3: (enumLiteral_5= Public )
                    // InternalTypesParser.g:7277:4: enumLiteral_5= Public
                    {
                    enumLiteral_5=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMemberAccessModifierAccess().getPublicEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getMemberAccessModifierAccess().getPublicEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMemberAccessModifier"

    // $ANTLR start synpred2_InternalTypesParser
    public final void synpred2_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:153:5: ( LeftParenthesis )
        // InternalTypesParser.g:153:6: LeftParenthesis
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_InternalTypesParser

    // $ANTLR start synpred3_InternalTypesParser
    public final void synpred3_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:1532:4: ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )
        // InternalTypesParser.g:1532:5: ( CommercialAt ( ( RULE_IDENTIFIER ) ) )
        {
        // InternalTypesParser.g:1532:5: ( CommercialAt ( ( RULE_IDENTIFIER ) ) )
        // InternalTypesParser.g:1533:5: CommercialAt ( ( RULE_IDENTIFIER ) )
        {
        match(input,CommercialAt,FOLLOW_4); if (state.failed) return ;
        // InternalTypesParser.g:1534:5: ( ( RULE_IDENTIFIER ) )
        // InternalTypesParser.g:1535:6: ( RULE_IDENTIFIER )
        {
        // InternalTypesParser.g:1535:6: ( RULE_IDENTIFIER )
        // InternalTypesParser.g:1536:7: RULE_IDENTIFIER
        {
        match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred3_InternalTypesParser

    // $ANTLR start synpred4_InternalTypesParser
    public final void synpred4_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:1744:4: ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )
        // InternalTypesParser.g:1744:5: ( CommercialAt ( ( RULE_IDENTIFIER ) ) )
        {
        // InternalTypesParser.g:1744:5: ( CommercialAt ( ( RULE_IDENTIFIER ) ) )
        // InternalTypesParser.g:1745:5: CommercialAt ( ( RULE_IDENTIFIER ) )
        {
        match(input,CommercialAt,FOLLOW_4); if (state.failed) return ;
        // InternalTypesParser.g:1746:5: ( ( RULE_IDENTIFIER ) )
        // InternalTypesParser.g:1747:6: ( RULE_IDENTIFIER )
        {
        // InternalTypesParser.g:1747:6: ( RULE_IDENTIFIER )
        // InternalTypesParser.g:1748:7: RULE_IDENTIFIER
        {
        match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred4_InternalTypesParser

    // $ANTLR start synpred5_InternalTypesParser
    public final void synpred5_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:2108:4: ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )
        // InternalTypesParser.g:2108:5: ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) )
        {
        // InternalTypesParser.g:2108:5: ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) )
        // InternalTypesParser.g:2109:5: ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) )
        {
        // InternalTypesParser.g:2109:5: ( ( ruleMemberAccessModifier ) )
        // InternalTypesParser.g:2110:6: ( ruleMemberAccessModifier )
        {
        // InternalTypesParser.g:2110:6: ( ruleMemberAccessModifier )
        // InternalTypesParser.g:2111:7: ruleMemberAccessModifier
        {
        pushFollow(FOLLOW_53);
        ruleMemberAccessModifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalTypesParser.g:2114:5: ( ( ( Abstract ) ) | ( ( Static ) ) )?
        int alt131=3;
        int LA131_0 = input.LA(1);

        if ( (LA131_0==Abstract) ) {
            alt131=1;
        }
        else if ( (LA131_0==Static) ) {
            alt131=2;
        }
        switch (alt131) {
            case 1 :
                // InternalTypesParser.g:2115:6: ( ( Abstract ) )
                {
                // InternalTypesParser.g:2115:6: ( ( Abstract ) )
                // InternalTypesParser.g:2116:7: ( Abstract )
                {
                // InternalTypesParser.g:2116:7: ( Abstract )
                // InternalTypesParser.g:2117:8: Abstract
                {
                match(input,Abstract,FOLLOW_54); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalTypesParser.g:2121:6: ( ( Static ) )
                {
                // InternalTypesParser.g:2121:6: ( ( Static ) )
                // InternalTypesParser.g:2122:7: ( Static )
                {
                // InternalTypesParser.g:2122:7: ( Static )
                // InternalTypesParser.g:2123:8: Static
                {
                match(input,Static,FOLLOW_54); if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,Get,FOLLOW_48); if (state.failed) return ;
        // InternalTypesParser.g:2128:5: ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) )
        int alt132=2;
        int LA132_0 = input.LA(1);

        if ( (LA132_0==AssignmnentCompatible||(LA132_0>=AutoboxedType && LA132_0<=Finally)||(LA132_0>=Private && LA132_0<=False)||(LA132_0>=Super && LA132_0<=With)||(LA132_0>=Any && LA132_0<=Var)||(LA132_0>=As && LA132_0<=Of)||LA132_0==RULE_IDENTIFIER) ) {
            alt132=1;
        }
        else if ( (LA132_0==LeftSquareBracket) ) {
            alt132=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 132, 0, input);

            throw nvae;
        }
        switch (alt132) {
            case 1 :
                // InternalTypesParser.g:2129:6: ( ( ruleTypesIdentifier ) )
                {
                // InternalTypesParser.g:2129:6: ( ( ruleTypesIdentifier ) )
                // InternalTypesParser.g:2130:7: ( ruleTypesIdentifier )
                {
                // InternalTypesParser.g:2130:7: ( ruleTypesIdentifier )
                // InternalTypesParser.g:2131:8: ruleTypesIdentifier
                {
                pushFollow(FOLLOW_2);
                ruleTypesIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalTypesParser.g:2135:6: ( ( ruleTypesComputedPropertyName ) )
                {
                // InternalTypesParser.g:2135:6: ( ( ruleTypesComputedPropertyName ) )
                // InternalTypesParser.g:2136:7: ( ruleTypesComputedPropertyName )
                {
                // InternalTypesParser.g:2136:7: ( ruleTypesComputedPropertyName )
                // InternalTypesParser.g:2137:8: ruleTypesComputedPropertyName
                {
                pushFollow(FOLLOW_2);
                ruleTypesComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred5_InternalTypesParser

    // $ANTLR start synpred6_InternalTypesParser
    public final void synpred6_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:2154:4: ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )
        // InternalTypesParser.g:2154:5: ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) )
        {
        // InternalTypesParser.g:2154:5: ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) )
        // InternalTypesParser.g:2155:5: ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) )
        {
        // InternalTypesParser.g:2155:5: ( ( ruleMemberAccessModifier ) )
        // InternalTypesParser.g:2156:6: ( ruleMemberAccessModifier )
        {
        // InternalTypesParser.g:2156:6: ( ruleMemberAccessModifier )
        // InternalTypesParser.g:2157:7: ruleMemberAccessModifier
        {
        pushFollow(FOLLOW_57);
        ruleMemberAccessModifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalTypesParser.g:2160:5: ( ( ( Abstract ) ) | ( ( Static ) ) )?
        int alt133=3;
        int LA133_0 = input.LA(1);

        if ( (LA133_0==Abstract) ) {
            alt133=1;
        }
        else if ( (LA133_0==Static) ) {
            alt133=2;
        }
        switch (alt133) {
            case 1 :
                // InternalTypesParser.g:2161:6: ( ( Abstract ) )
                {
                // InternalTypesParser.g:2161:6: ( ( Abstract ) )
                // InternalTypesParser.g:2162:7: ( Abstract )
                {
                // InternalTypesParser.g:2162:7: ( Abstract )
                // InternalTypesParser.g:2163:8: Abstract
                {
                match(input,Abstract,FOLLOW_58); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalTypesParser.g:2167:6: ( ( Static ) )
                {
                // InternalTypesParser.g:2167:6: ( ( Static ) )
                // InternalTypesParser.g:2168:7: ( Static )
                {
                // InternalTypesParser.g:2168:7: ( Static )
                // InternalTypesParser.g:2169:8: Static
                {
                match(input,Static,FOLLOW_58); if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,Set,FOLLOW_48); if (state.failed) return ;
        // InternalTypesParser.g:2174:5: ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) )
        int alt134=2;
        int LA134_0 = input.LA(1);

        if ( (LA134_0==AssignmnentCompatible||(LA134_0>=AutoboxedType && LA134_0<=Finally)||(LA134_0>=Private && LA134_0<=False)||(LA134_0>=Super && LA134_0<=With)||(LA134_0>=Any && LA134_0<=Var)||(LA134_0>=As && LA134_0<=Of)||LA134_0==RULE_IDENTIFIER) ) {
            alt134=1;
        }
        else if ( (LA134_0==LeftSquareBracket) ) {
            alt134=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 134, 0, input);

            throw nvae;
        }
        switch (alt134) {
            case 1 :
                // InternalTypesParser.g:2175:6: ( ( ruleTypesIdentifier ) )
                {
                // InternalTypesParser.g:2175:6: ( ( ruleTypesIdentifier ) )
                // InternalTypesParser.g:2176:7: ( ruleTypesIdentifier )
                {
                // InternalTypesParser.g:2176:7: ( ruleTypesIdentifier )
                // InternalTypesParser.g:2177:8: ruleTypesIdentifier
                {
                pushFollow(FOLLOW_2);
                ruleTypesIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalTypesParser.g:2181:6: ( ( ruleTypesComputedPropertyName ) )
                {
                // InternalTypesParser.g:2181:6: ( ( ruleTypesComputedPropertyName ) )
                // InternalTypesParser.g:2182:7: ( ruleTypesComputedPropertyName )
                {
                // InternalTypesParser.g:2182:7: ( ruleTypesComputedPropertyName )
                // InternalTypesParser.g:2183:8: ruleTypesComputedPropertyName
                {
                pushFollow(FOLLOW_2);
                ruleTypesComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred6_InternalTypesParser

    // $ANTLR start synpred7_InternalTypesParser
    public final void synpred7_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:2200:4: ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )
        // InternalTypesParser.g:2200:5: ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis )
        {
        // InternalTypesParser.g:2200:5: ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis )
        // InternalTypesParser.g:2201:5: ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis
        {
        // InternalTypesParser.g:2201:5: ( ( ruleMemberAccessModifier ) )
        // InternalTypesParser.g:2202:6: ( ruleMemberAccessModifier )
        {
        // InternalTypesParser.g:2202:6: ( ruleMemberAccessModifier )
        // InternalTypesParser.g:2203:7: ruleMemberAccessModifier
        {
        pushFollow(FOLLOW_48);
        ruleMemberAccessModifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalTypesParser.g:2206:5: ( ( ( Abstract ) ) | ( ( Static ) ) )?
        int alt135=3;
        int LA135_0 = input.LA(1);

        if ( (LA135_0==Abstract) ) {
            int LA135_1 = input.LA(2);

            if ( (LA135_1==AssignmnentCompatible||(LA135_1>=AutoboxedType && LA135_1<=Finally)||(LA135_1>=Private && LA135_1<=False)||(LA135_1>=Super && LA135_1<=With)||(LA135_1>=Any && LA135_1<=Var)||(LA135_1>=As && LA135_1<=Of)||LA135_1==LessThanSign||LA135_1==LeftSquareBracket||LA135_1==RULE_IDENTIFIER) ) {
                alt135=1;
            }
        }
        else if ( (LA135_0==Static) ) {
            int LA135_2 = input.LA(2);

            if ( (LA135_2==AssignmnentCompatible||(LA135_2>=AutoboxedType && LA135_2<=Finally)||(LA135_2>=Private && LA135_2<=False)||(LA135_2>=Super && LA135_2<=With)||(LA135_2>=Any && LA135_2<=Var)||(LA135_2>=As && LA135_2<=Of)||LA135_2==LessThanSign||LA135_2==LeftSquareBracket||LA135_2==RULE_IDENTIFIER) ) {
                alt135=2;
            }
        }
        switch (alt135) {
            case 1 :
                // InternalTypesParser.g:2207:6: ( ( Abstract ) )
                {
                // InternalTypesParser.g:2207:6: ( ( Abstract ) )
                // InternalTypesParser.g:2208:7: ( Abstract )
                {
                // InternalTypesParser.g:2208:7: ( Abstract )
                // InternalTypesParser.g:2209:8: Abstract
                {
                match(input,Abstract,FOLLOW_48); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalTypesParser.g:2213:6: ( ( Static ) )
                {
                // InternalTypesParser.g:2213:6: ( ( Static ) )
                // InternalTypesParser.g:2214:7: ( Static )
                {
                // InternalTypesParser.g:2214:7: ( Static )
                // InternalTypesParser.g:2215:8: Static
                {
                match(input,Static,FOLLOW_48); if (state.failed) return ;

                }


                }


                }
                break;

        }

        // InternalTypesParser.g:2219:5: ( ( Async ) )?
        int alt136=2;
        int LA136_0 = input.LA(1);

        if ( (LA136_0==Async) ) {
            int LA136_1 = input.LA(2);

            if ( (LA136_1==AssignmnentCompatible||(LA136_1>=AutoboxedType && LA136_1<=Finally)||(LA136_1>=Private && LA136_1<=False)||(LA136_1>=Super && LA136_1<=With)||(LA136_1>=Any && LA136_1<=Var)||(LA136_1>=As && LA136_1<=Of)||LA136_1==LessThanSign||LA136_1==LeftSquareBracket||LA136_1==RULE_IDENTIFIER) ) {
                alt136=1;
            }
        }
        switch (alt136) {
            case 1 :
                // InternalTypesParser.g:2220:6: ( Async )
                {
                // InternalTypesParser.g:2220:6: ( Async )
                // InternalTypesParser.g:2221:7: Async
                {
                match(input,Async,FOLLOW_48); if (state.failed) return ;

                }


                }
                break;

        }

        // InternalTypesParser.g:2224:5: ( ruleTypeVariables[null] )?
        int alt137=2;
        int LA137_0 = input.LA(1);

        if ( (LA137_0==LessThanSign) ) {
            alt137=1;
        }
        switch (alt137) {
            case 1 :
                // InternalTypesParser.g:2225:6: ruleTypeVariables[null]
                {
                pushFollow(FOLLOW_48);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // InternalTypesParser.g:2227:5: ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) )
        int alt138=2;
        int LA138_0 = input.LA(1);

        if ( (LA138_0==AssignmnentCompatible||(LA138_0>=AutoboxedType && LA138_0<=Finally)||(LA138_0>=Private && LA138_0<=False)||(LA138_0>=Super && LA138_0<=With)||(LA138_0>=Any && LA138_0<=Var)||(LA138_0>=As && LA138_0<=Of)||LA138_0==RULE_IDENTIFIER) ) {
            alt138=1;
        }
        else if ( (LA138_0==LeftSquareBracket) ) {
            alt138=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 138, 0, input);

            throw nvae;
        }
        switch (alt138) {
            case 1 :
                // InternalTypesParser.g:2228:6: ( ( ruleTypesIdentifier ) )
                {
                // InternalTypesParser.g:2228:6: ( ( ruleTypesIdentifier ) )
                // InternalTypesParser.g:2229:7: ( ruleTypesIdentifier )
                {
                // InternalTypesParser.g:2229:7: ( ruleTypesIdentifier )
                // InternalTypesParser.g:2230:8: ruleTypesIdentifier
                {
                pushFollow(FOLLOW_49);
                ruleTypesIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalTypesParser.g:2234:6: ( ( ruleTypesComputedPropertyName ) )
                {
                // InternalTypesParser.g:2234:6: ( ( ruleTypesComputedPropertyName ) )
                // InternalTypesParser.g:2235:7: ( ruleTypesComputedPropertyName )
                {
                // InternalTypesParser.g:2235:7: ( ruleTypesComputedPropertyName )
                // InternalTypesParser.g:2236:8: ruleTypesComputedPropertyName
                {
                pushFollow(FOLLOW_49);
                ruleTypesComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred7_InternalTypesParser

    // $ANTLR start synpred12_InternalTypesParser
    public final void synpred12_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:3349:5: ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )
        // InternalTypesParser.g:3349:6: ( () ( ( LeftSquareBracket ) ) RightSquareBracket )
        {
        // InternalTypesParser.g:3349:6: ( () ( ( LeftSquareBracket ) ) RightSquareBracket )
        // InternalTypesParser.g:3350:6: () ( ( LeftSquareBracket ) ) RightSquareBracket
        {
        // InternalTypesParser.g:3350:6: ()
        // InternalTypesParser.g:3351:6: 
        {
        }

        // InternalTypesParser.g:3352:6: ( ( LeftSquareBracket ) )
        // InternalTypesParser.g:3353:7: ( LeftSquareBracket )
        {
        // InternalTypesParser.g:3353:7: ( LeftSquareBracket )
        // InternalTypesParser.g:3354:8: LeftSquareBracket
        {
        match(input,LeftSquareBracket,FOLLOW_21); if (state.failed) return ;

        }


        }

        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred12_InternalTypesParser

    // $ANTLR start synpred13_InternalTypesParser
    public final void synpred13_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:3444:5: ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )
        // InternalTypesParser.g:3444:6: ( () ( ( LeftSquareBracket ) ) RightSquareBracket )
        {
        // InternalTypesParser.g:3444:6: ( () ( ( LeftSquareBracket ) ) RightSquareBracket )
        // InternalTypesParser.g:3445:6: () ( ( LeftSquareBracket ) ) RightSquareBracket
        {
        // InternalTypesParser.g:3445:6: ()
        // InternalTypesParser.g:3446:6: 
        {
        }

        // InternalTypesParser.g:3447:6: ( ( LeftSquareBracket ) )
        // InternalTypesParser.g:3448:7: ( LeftSquareBracket )
        {
        // InternalTypesParser.g:3448:7: ( LeftSquareBracket )
        // InternalTypesParser.g:3449:8: LeftSquareBracket
        {
        match(input,LeftSquareBracket,FOLLOW_21); if (state.failed) return ;

        }


        }

        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred13_InternalTypesParser

    // $ANTLR start synpred14_InternalTypesParser
    public final void synpred14_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:3495:5: ( ( () ( ( LeftSquareBracket ) ) RightSquareBracket ) )
        // InternalTypesParser.g:3495:6: ( () ( ( LeftSquareBracket ) ) RightSquareBracket )
        {
        // InternalTypesParser.g:3495:6: ( () ( ( LeftSquareBracket ) ) RightSquareBracket )
        // InternalTypesParser.g:3496:6: () ( ( LeftSquareBracket ) ) RightSquareBracket
        {
        // InternalTypesParser.g:3496:6: ()
        // InternalTypesParser.g:3497:6: 
        {
        }

        // InternalTypesParser.g:3498:6: ( ( LeftSquareBracket ) )
        // InternalTypesParser.g:3499:7: ( LeftSquareBracket )
        {
        // InternalTypesParser.g:3499:7: ( LeftSquareBracket )
        // InternalTypesParser.g:3500:8: LeftSquareBracket
        {
        match(input,LeftSquareBracket,FOLLOW_21); if (state.failed) return ;

        }


        }

        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred14_InternalTypesParser

    // $ANTLR start synpred15_InternalTypesParser
    public final void synpred15_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:3564:4: ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )
        // InternalTypesParser.g:3564:5: ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign )
        {
        // InternalTypesParser.g:3564:5: ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign )
        // InternalTypesParser.g:3565:5: () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign
        {
        // InternalTypesParser.g:3565:5: ()
        // InternalTypesParser.g:3566:5: 
        {
        }

        match(input,LeftParenthesis,FOLLOW_76); if (state.failed) return ;
        pushFollow(FOLLOW_56);
        ruleTAnonymousFormalParameterList(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_78); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred15_InternalTypesParser

    // $ANTLR start synpred16_InternalTypesParser
    public final void synpred16_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:3647:4: ( ( QuestionMark ) )
        // InternalTypesParser.g:3647:5: ( QuestionMark )
        {
        // InternalTypesParser.g:3647:5: ( QuestionMark )
        // InternalTypesParser.g:3648:5: QuestionMark
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred16_InternalTypesParser

    // $ANTLR start synpred17_InternalTypesParser
    public final void synpred17_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:3704:5: ( ( PlusSign ) )
        // InternalTypesParser.g:3704:6: ( PlusSign )
        {
        // InternalTypesParser.g:3704:6: ( PlusSign )
        // InternalTypesParser.g:3705:6: PlusSign
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred17_InternalTypesParser

    // $ANTLR start synpred18_InternalTypesParser
    public final void synpred18_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:3859:4: ( ( () QuestionMark ) )
        // InternalTypesParser.g:3859:5: ( () QuestionMark )
        {
        // InternalTypesParser.g:3859:5: ( () QuestionMark )
        // InternalTypesParser.g:3860:5: () QuestionMark
        {
        // InternalTypesParser.g:3860:5: ()
        // InternalTypesParser.g:3861:5: 
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred18_InternalTypesParser

    // $ANTLR start synpred20_InternalTypesParser
    public final void synpred20_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:4640:5: ( ( ( ( ruleBindingIdentifier ) ) Colon ) )
        // InternalTypesParser.g:4640:6: ( ( ( ruleBindingIdentifier ) ) Colon )
        {
        // InternalTypesParser.g:4640:6: ( ( ( ruleBindingIdentifier ) ) Colon )
        // InternalTypesParser.g:4641:6: ( ( ruleBindingIdentifier ) ) Colon
        {
        // InternalTypesParser.g:4641:6: ( ( ruleBindingIdentifier ) )
        // InternalTypesParser.g:4642:7: ( ruleBindingIdentifier )
        {
        // InternalTypesParser.g:4642:7: ( ruleBindingIdentifier )
        // InternalTypesParser.g:4643:8: ruleBindingIdentifier
        {
        pushFollow(FOLLOW_50);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred20_InternalTypesParser

    // $ANTLR start synpred22_InternalTypesParser
    public final void synpred22_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:5102:4: ( LessThanSign )
        // InternalTypesParser.g:5102:5: LessThanSign
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_InternalTypesParser

    // $ANTLR start synpred23_InternalTypesParser
    public final void synpred23_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:5220:4: ( LessThanSign )
        // InternalTypesParser.g:5220:5: LessThanSign
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_InternalTypesParser

    // $ANTLR start synpred24_InternalTypesParser
    public final void synpred24_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:5579:4: ( ( () Get ( ( ruleIdentifierName ) ) ) )
        // InternalTypesParser.g:5579:5: ( () Get ( ( ruleIdentifierName ) ) )
        {
        // InternalTypesParser.g:5579:5: ( () Get ( ( ruleIdentifierName ) ) )
        // InternalTypesParser.g:5580:5: () Get ( ( ruleIdentifierName ) )
        {
        // InternalTypesParser.g:5580:5: ()
        // InternalTypesParser.g:5581:5: 
        {
        }

        match(input,Get,FOLLOW_23); if (state.failed) return ;
        // InternalTypesParser.g:5583:5: ( ( ruleIdentifierName ) )
        // InternalTypesParser.g:5584:6: ( ruleIdentifierName )
        {
        // InternalTypesParser.g:5584:6: ( ruleIdentifierName )
        // InternalTypesParser.g:5585:7: ruleIdentifierName
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred24_InternalTypesParser

    // $ANTLR start synpred25_InternalTypesParser
    public final void synpred25_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:5601:4: ( ( () Set ( ( ruleIdentifierName ) ) ) )
        // InternalTypesParser.g:5601:5: ( () Set ( ( ruleIdentifierName ) ) )
        {
        // InternalTypesParser.g:5601:5: ( () Set ( ( ruleIdentifierName ) ) )
        // InternalTypesParser.g:5602:5: () Set ( ( ruleIdentifierName ) )
        {
        // InternalTypesParser.g:5602:5: ()
        // InternalTypesParser.g:5603:5: 
        {
        }

        match(input,Set,FOLLOW_23); if (state.failed) return ;
        // InternalTypesParser.g:5605:5: ( ( ruleIdentifierName ) )
        // InternalTypesParser.g:5606:6: ( ruleIdentifierName )
        {
        // InternalTypesParser.g:5606:6: ( ruleIdentifierName )
        // InternalTypesParser.g:5607:7: ruleIdentifierName
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred25_InternalTypesParser

    // $ANTLR start synpred26_InternalTypesParser
    public final void synpred26_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:5623:4: ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )
        // InternalTypesParser.g:5623:5: ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis )
        {
        // InternalTypesParser.g:5623:5: ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis )
        // InternalTypesParser.g:5624:5: () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis
        {
        // InternalTypesParser.g:5624:5: ()
        // InternalTypesParser.g:5625:5: 
        {
        }

        // InternalTypesParser.g:5626:5: ( ruleTypeVariables[null] )?
        int alt147=2;
        int LA147_0 = input.LA(1);

        if ( (LA147_0==LessThanSign) ) {
            alt147=1;
        }
        switch (alt147) {
            case 1 :
                // InternalTypesParser.g:5627:6: ruleTypeVariables[null]
                {
                pushFollow(FOLLOW_23);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // InternalTypesParser.g:5629:5: ( ( ruleIdentifierName ) )
        // InternalTypesParser.g:5630:6: ( ruleIdentifierName )
        {
        // InternalTypesParser.g:5630:6: ( ruleIdentifierName )
        // InternalTypesParser.g:5631:7: ruleIdentifierName
        {
        pushFollow(FOLLOW_49);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred26_InternalTypesParser

    // $ANTLR start synpred30_InternalTypesParser
    public final void synpred30_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:6360:4: ( ( () QuestionMark ) )
        // InternalTypesParser.g:6360:5: ( () QuestionMark )
        {
        // InternalTypesParser.g:6360:5: ( () QuestionMark )
        // InternalTypesParser.g:6361:5: () QuestionMark
        {
        // InternalTypesParser.g:6361:5: ()
        // InternalTypesParser.g:6362:5: 
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred30_InternalTypesParser

    // Delegated rules

    public final boolean synpred30_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA6 dfa6 = new DFA6(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA108 dfa108 = new DFA108(this);
    static final String dfa_1s = "\20\uffff";
    static final String dfa_2s = "\1\7\3\6\7\uffff\1\17\4\uffff";
    static final String dfa_3s = "\1\147\3\70\7\uffff\1\70\4\uffff";
    static final String dfa_4s = "\4\uffff\1\4\1\5\1\6\1\7\1\10\1\12\1\13\1\uffff\1\3\1\2\1\11\1\1";
    static final String dfa_5s = "\20\uffff}>";
    static final String[] dfa_6s = {
            "\1\2\3\uffff\1\12\4\uffff\1\10\1\uffff\1\6\12\uffff\1\1\4\uffff\1\3\27\uffff\1\7\3\uffff\1\5\2\uffff\1\4\45\uffff\1\11",
            "\1\13\10\uffff\1\15\3\uffff\1\17\3\uffff\1\16\11\uffff\1\17\12\uffff\1\17\2\uffff\1\17\10\uffff\1\14",
            "\1\13\10\uffff\1\15\3\uffff\1\17\3\uffff\1\16\11\uffff\1\17\12\uffff\1\17\2\uffff\1\17\10\uffff\1\14",
            "\1\13\10\uffff\1\15\3\uffff\1\17\3\uffff\1\16\11\uffff\1\17\12\uffff\1\17\2\uffff\1\17\10\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\3\uffff\1\17\3\uffff\1\16\11\uffff\1\17\12\uffff\1\17\2\uffff\1\17\10\uffff\1\14",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "335:2: (this_TClass_0= ruleTClass | this_TInterface_1= ruleTInterface | this_TEnum_2= ruleTEnum | this_AnyType_3= ruleAnyType | this_VoidType_4= ruleVoidType | this_UndefinedType_5= ruleUndefinedType | this_NullType_6= ruleNullType | this_PrimitiveType_7= rulePrimitiveType | this_TFunction_8= ruleTFunction | this_TypeVariable_9= ruleTypeVariable | this_VirtualBaseType_10= ruleVirtualBaseType )";
        }
    }
    static final String dfa_7s = "\u01bb\uffff";
    static final String dfa_8s = "\1\5\10\4\1\uffff\54\121\2\4\3\121\1\4\13\121\1\4\6\121\1\4\2\uffff\3\121\u00bc\uffff\2\4\32\uffff\106\126\1\140\1\4\1\121\106\140";
    static final String dfa_9s = "\1\42\10\147\1\uffff\54\135\2\147\3\135\1\147\13\135\1\147\6\135\1\166\2\uffff\3\135\u00bc\uffff\2\147\32\uffff\106\126\1\140\1\147\1\135\106\140";
    static final String dfa_10s = "\11\uffff\1\4\105\uffff\2\3\3\uffff\107\1\107\2\56\3\2\uffff\32\3\u008f\uffff";
    static final String dfa_11s = "\1\uffff\1\0\1\3\1\11\1\16\1\17\1\24\1\121\1\6\1\uffff\1\102\1\104\1\106\1\110\1\112\1\114\1\115\1\117\1\1\1\4\1\5\1\7\1\12\1\14\1\15\1\20\1\21\1\23\1\26\1\30\1\32\1\34\1\36\1\40\1\42\1\44\1\46\1\50\1\52\1\54\1\56\1\60\1\62\1\63\1\65\1\67\1\71\1\73\1\75\1\77\1\101\1\103\1\105\1\107\1\111\1\100\1\22\1\25\1\27\1\120\1\35\1\37\1\41\1\43\1\45\1\47\1\51\1\53\1\55\1\57\1\61\1\2\1\64\1\66\1\70\1\72\1\74\1\76\3\uffff\1\10\1\31\1\33\u00bc\uffff\1\116\1\113\142\uffff\1\13\106\uffff}>";
    static final String[] dfa_12s = {
            "\1\3\1\uffff\1\5\11\uffff\1\4\12\uffff\1\1\1\2\4\uffff\1\6",
            "\1\20\3\uffff\1\17\1\103\1\76\1\15\1\110\1\44\1\105\1\111\1\16\1\113\1\13\1\73\1\26\1\27\1\72\1\40\1\30\1\35\1\36\1\uffff\1\112\1\71\1\31\1\34\1\42\1\14\1\114\1\46\1\7\1\50\1\100\1\54\1\107\1\106\1\22\1\24\1\25\1\10\1\64\1\11\1\47\1\52\1\102\1\57\1\61\1\104\1\23\1\33\1\65\1\75\1\62\1\51\1\63\1\101\1\56\1\60\1\uffff\1\12\1\37\1\66\1\70\1\45\1\115\1\67\1\53\1\55\1\uffff\1\74\1\32\1\41\1\43\1\77\12\uffff\1\117\4\uffff\1\116\7\uffff\1\21",
            "\1\20\3\uffff\1\17\1\103\1\76\1\15\1\110\1\44\1\105\1\111\1\16\1\113\1\13\1\73\1\26\1\27\1\72\1\40\1\30\1\35\1\36\1\uffff\1\112\1\71\1\31\1\34\1\42\1\14\1\114\1\46\1\7\1\50\1\100\1\54\1\107\1\106\1\22\1\24\1\25\1\10\1\64\1\11\1\47\1\52\1\102\1\57\1\61\1\104\1\23\1\33\1\65\1\75\1\62\1\51\1\63\1\101\1\56\1\60\1\uffff\1\12\1\37\1\66\1\70\1\45\1\115\1\67\1\53\1\55\1\uffff\1\74\1\32\1\41\1\43\1\77\12\uffff\1\117\4\uffff\1\116\7\uffff\1\21",
            "\1\20\3\uffff\1\17\1\103\1\76\1\15\1\110\1\44\1\105\1\111\1\16\1\113\1\13\1\73\1\26\1\27\1\72\1\40\1\30\1\35\1\36\1\uffff\1\112\1\71\1\31\1\34\1\42\1\14\1\114\1\46\1\7\1\50\1\100\1\54\1\107\1\106\1\22\1\24\1\25\1\10\1\64\1\11\1\47\1\52\1\102\1\57\1\61\1\104\1\23\1\33\1\65\1\75\1\62\1\51\1\63\1\101\1\56\1\60\1\uffff\1\12\1\37\1\66\1\70\1\45\1\115\1\67\1\53\1\55\1\uffff\1\74\1\32\1\41\1\43\1\77\12\uffff\1\117\4\uffff\1\116\7\uffff\1\21",
            "\1\20\3\uffff\1\17\1\103\1\76\1\15\1\110\1\44\1\105\1\111\1\16\1\113\1\13\1\73\1\26\1\27\1\72\1\40\1\30\1\35\1\36\1\uffff\1\112\1\71\1\31\1\34\1\42\1\14\1\114\1\46\1\7\1\50\1\100\1\54\1\107\1\106\1\22\1\24\1\25\1\10\1\64\1\11\1\47\1\52\1\102\1\57\1\61\1\104\1\23\1\33\1\65\1\75\1\62\1\51\1\63\1\101\1\56\1\60\1\uffff\1\12\1\37\1\66\1\70\1\45\1\115\1\67\1\53\1\55\1\uffff\1\74\1\32\1\41\1\43\1\77\12\uffff\1\117\4\uffff\1\116\7\uffff\1\21",
            "\1\20\3\uffff\1\17\1\103\1\76\1\15\1\110\1\44\1\105\1\111\1\16\1\113\1\13\1\73\1\26\1\27\1\72\1\40\1\30\1\35\1\36\1\uffff\1\112\1\71\1\31\1\34\1\42\1\14\1\114\1\46\1\7\1\50\1\100\1\54\1\107\1\106\1\22\1\24\1\25\1\10\1\64\1\11\1\47\1\52\1\102\1\57\1\61\1\104\1\23\1\33\1\65\1\75\1\62\1\51\1\63\1\101\1\56\1\60\1\uffff\1\12\1\37\1\66\1\70\1\45\1\115\1\67\1\53\1\55\1\uffff\1\74\1\32\1\41\1\43\1\77\12\uffff\1\117\4\uffff\1\116\7\uffff\1\21",
            "\1\20\3\uffff\1\17\1\103\1\76\1\15\1\110\1\44\1\105\1\111\1\16\1\113\1\13\1\73\1\26\1\27\1\72\1\40\1\30\1\35\1\36\1\uffff\1\112\1\71\1\31\1\34\1\42\1\14\1\114\1\46\1\7\1\50\1\100\1\54\1\107\1\106\1\22\1\24\1\25\1\10\1\64\1\11\1\47\1\52\1\102\1\57\1\61\1\104\1\23\1\33\1\65\1\75\1\62\1\51\1\63\1\101\1\56\1\60\1\uffff\1\12\1\37\1\66\1\70\1\45\1\115\1\67\1\53\1\55\1\uffff\1\74\1\32\1\41\1\43\1\77\12\uffff\1\117\4\uffff\1\116\7\uffff\1\21",
            "\1\20\3\uffff\1\17\1\103\1\76\1\15\1\110\1\44\1\105\1\111\1\16\1\113\1\13\1\122\1\26\1\27\1\72\1\40\1\30\1\35\1\36\1\uffff\1\112\1\71\1\31\1\34\1\42\1\14\1\114\1\46\1\123\1\50\1\100\1\54\1\107\1\106\1\22\1\24\1\25\1\121\1\64\1\uffff\1\47\1\52\1\102\1\57\1\61\1\104\1\23\1\33\1\65\1\75\1\62\1\51\1\63\1\101\1\56\1\60\1\uffff\1\12\1\37\1\66\1\70\1\45\1\115\1\67\1\53\1\55\1\uffff\1\74\1\32\1\41\1\43\1\77\1\uffff\1\120\6\uffff\1\11\1\uffff\1\117\2\uffff\1\11\1\uffff\1\116\7\uffff\1\21",
            "\1\11\3\uffff\23\11\1\uffff\23\11\1\uffff\20\11\1\uffff\11\11\1\uffff\5\11\1\uffff\1\120\6\uffff\1\11\4\uffff\1\11\1\uffff\1\11\7\uffff\1\11",
            "",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\132\3\uffff\1\131\1\u008f\1\u008a\1\127\1\u0094\1\157\1\u0091\1\u0095\1\130\1\u0097\1\125\1\u0086\1\141\1\142\1\u0085\1\153\1\143\1\150\1\151\1\uffff\1\u0096\1\u0084\1\144\1\147\1\155\1\126\1\u0098\1\161\1\u0087\1\163\1\u008c\1\167\1\u0093\1\u0092\1\134\1\136\1\137\1\140\1\177\1\uffff\1\162\1\165\1\u008e\1\172\1\174\1\u0090\1\135\1\146\1\u0080\1\u0089\1\175\1\164\1\176\1\u008d\1\171\1\173\1\uffff\1\124\1\152\1\u0081\1\u0083\1\160\1\u0099\1\u0082\1\166\1\170\1\uffff\1\u0088\1\145\1\154\1\156\1\u008b\1\uffff\1\120\6\uffff\1\11\4\uffff\1\11\1\uffff\1\u009a\7\uffff\1\133",
            "\1\u00a1\3\uffff\1\u00a0\1\u00d6\1\u00d1\1\u009e\1\u00db\1\u00b6\1\u00d8\1\u00dc\1\u009f\1\u00de\1\u009c\1\u00cd\1\u00a8\1\u00a9\1\u00cc\1\u00b2\1\u00aa\1\u00af\1\u00b0\1\uffff\1\u00dd\1\u00cb\1\u00ab\1\u00ae\1\u00b4\1\u009d\1\u00df\1\u00b8\1\u00ce\1\u00ba\1\u00d3\1\u00be\1\u00da\1\u00d9\1\u00a3\1\u00a5\1\u00a6\1\u00a7\1\u00c6\1\uffff\1\u00b9\1\u00bc\1\u00d5\1\u00c1\1\u00c3\1\u00d7\1\u00a4\1\u00ad\1\u00c7\1\u00d0\1\u00c4\1\u00bb\1\u00c5\1\u00d4\1\u00c0\1\u00c2\1\uffff\1\u009b\1\u00b1\1\u00c8\1\u00ca\1\u00b7\1\u00e0\1\u00c9\1\u00bd\1\u00bf\1\uffff\1\u00cf\1\u00ac\1\u00b3\1\u00b5\1\u00d2\1\uffff\1\120\6\uffff\1\11\4\uffff\1\11\1\uffff\1\u00e1\7\uffff\1\u00a2",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\u00e9\3\uffff\1\u00e8\1\u011e\1\u0119\1\u00e6\1\u0122\1\u00fe\1\u0120\1\u0123\1\u00e7\1\u0125\1\u00e4\1\u0115\1\u00f0\1\u00f1\1\u0114\1\u00fa\1\u00f2\1\u00f7\1\u00f8\1\uffff\1\u0124\1\u0113\1\u00f3\1\u00f6\1\u00fc\1\u00e5\1\u0126\1\u0100\1\u0116\1\u0102\1\u011b\1\u0106\1\u00e2\1\u0121\1\u00eb\1\u00ed\1\u00ee\1\u00ef\1\u010e\1\uffff\1\u0101\1\u0104\1\u011d\1\u0109\1\u010b\1\u011f\1\u00ec\1\u00f5\1\u010f\1\u0118\1\u010c\1\u0103\1\u010d\1\u011c\1\u0108\1\u010a\1\uffff\1\u00e3\1\u00f9\1\u0110\1\u0112\1\u00ff\1\u0127\1\u0111\1\u0105\1\u0107\1\uffff\1\u0117\1\u00f4\1\u00fb\1\u00fd\1\u011a\1\uffff\1\120\6\uffff\1\11\1\uffff\1\117\2\uffff\1\11\1\uffff\1\u0128\7\uffff\1\u00ea",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\u00e9\3\uffff\1\u00e8\1\u011e\1\u0119\1\u00e6\1\u0122\1\u00fe\1\u0120\1\u0123\1\u00e7\1\u0125\1\u00e4\1\u0115\1\u00f0\1\u00f1\1\u0114\1\u00fa\1\u00f2\1\u00f7\1\u00f8\1\uffff\1\u0124\1\u0113\1\u00f3\1\u00f6\1\u00fc\1\u00e5\1\u0126\1\u0100\1\u0116\1\u0102\1\u011b\1\u0106\1\u012b\1\u0121\1\u00eb\1\u00ed\1\u00ee\1\u00ef\1\u010e\1\uffff\1\u0101\1\u0104\1\u011d\1\u0109\1\u010b\1\u011f\1\u00ec\1\u00f5\1\u010f\1\u0118\1\u010c\1\u0103\1\u010d\1\u011c\1\u0108\1\u010a\1\uffff\1\u00e3\1\u00f9\1\u0129\1\u0112\1\u00ff\1\u0127\1\u012a\1\u0105\1\u0107\1\uffff\1\u0117\1\u00f4\1\u00fb\1\u00fd\1\u011a\1\uffff\1\120\6\uffff\1\11\1\uffff\1\117\2\uffff\1\11\1\uffff\1\u0128\7\uffff\1\u00ea",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\u0132\3\uffff\1\u0131\1\u0167\1\u0162\1\u012f\1\u016c\1\u0147\1\u0169\1\u016d\1\u0130\1\u016f\1\u012d\1\u015e\1\u0139\1\u013a\1\u015d\1\u0143\1\u013b\1\u0140\1\u0141\1\uffff\1\u016e\1\u015c\1\u013c\1\u013f\1\u0145\1\u012e\1\u0170\1\u0149\1\u015f\1\u014b\1\u0164\1\u014f\1\u016b\1\u016a\1\u0134\1\u0136\1\u0137\1\u0138\1\u0157\1\uffff\1\u014a\1\u014d\1\u0166\1\u0152\1\u0154\1\u0168\1\u0135\1\u013e\1\u0158\1\u0161\1\u0155\1\u014c\1\u0156\1\u0165\1\u0151\1\u0153\1\uffff\1\u012c\1\u0142\1\u0159\1\u015b\1\u0148\1\u0171\1\u015a\1\u014e\1\u0150\1\uffff\1\u0160\1\u013d\1\u0144\1\u0146\1\u0163\27\uffff\1\u0133\16\uffff\1\u0172",
            "",
            "",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\132\3\uffff\1\131\1\u008f\1\u008a\1\127\1\u0094\1\157\1\u0091\1\u0095\1\130\1\u0097\1\125\1\u0086\1\141\1\142\1\u0085\1\153\1\143\1\150\1\151\1\uffff\1\u0096\1\u0084\1\144\1\147\1\155\1\126\1\u0098\1\161\1\u0087\1\163\1\u008c\1\167\1\u0093\1\u0092\1\134\1\136\1\137\1\140\1\177\1\uffff\1\162\1\165\1\u008e\1\172\1\174\1\u0090\1\135\1\146\1\u0080\1\u0089\1\175\1\164\1\176\1\u008d\1\171\1\173\1\uffff\1\124\1\152\1\u0081\1\u0083\1\160\1\u0099\1\u0082\1\166\1\170\1\uffff\1\u0088\1\145\1\154\1\156\1\u008b\1\uffff\1\120\15\uffff\1\u009a\7\uffff\1\133",
            "\1\u00a1\3\uffff\1\u00a0\1\u00d6\1\u00d1\1\u009e\1\u00db\1\u00b6\1\u00d8\1\u00dc\1\u009f\1\u00de\1\u009c\1\u00cd\1\u00a8\1\u00a9\1\u00cc\1\u00b2\1\u00aa\1\u00af\1\u00b0\1\uffff\1\u00dd\1\u00cb\1\u00ab\1\u00ae\1\u00b4\1\u009d\1\u00df\1\u00b8\1\u00ce\1\u00ba\1\u00d3\1\u00be\1\u00da\1\u00d9\1\u00a3\1\u00a5\1\u00a6\1\u00a7\1\u00c6\1\uffff\1\u00b9\1\u00bc\1\u00d5\1\u00c1\1\u00c3\1\u00d7\1\u00a4\1\u00ad\1\u00c7\1\u00d0\1\u00c4\1\u00bb\1\u00c5\1\u00d4\1\u00c0\1\u00c2\1\uffff\1\u009b\1\u00b1\1\u00c8\1\u00ca\1\u00b7\1\u00e0\1\u00c9\1\u00bd\1\u00bf\1\uffff\1\u00cf\1\u00ac\1\u00b3\1\u00b5\1\u00d2\1\uffff\1\120\15\uffff\1\u00e1\7\uffff\1\u00a2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0173",
            "\1\u0174",
            "\1\u017b\3\uffff\1\u017a\1\u01b0\1\u01ab\1\u0178\1\u01b5\1\u0190\1\u01b2\1\u01b6\1\u0179\1\u01b8\1\u0176\1\u01a7\1\u0182\1\u0183\1\u01a6\1\u018c\1\u0184\1\u0189\1\u018a\1\uffff\1\u01b7\1\u01a5\1\u0185\1\u0188\1\u018e\1\u0177\1\u01b9\1\u0192\1\u01a8\1\u0194\1\u01ad\1\u0198\1\u01b4\1\u01b3\1\u017d\1\u017f\1\u0180\1\u0181\1\u01a0\1\uffff\1\u0193\1\u0196\1\u01af\1\u019b\1\u019d\1\u01b1\1\u017e\1\u0187\1\u01a1\1\u01aa\1\u019e\1\u0195\1\u019f\1\u01ae\1\u019a\1\u019c\1\uffff\1\u0175\1\u018b\1\u01a2\1\u01a4\1\u0191\1\u01ba\1\u01a3\1\u0197\1\u0199\1\uffff\1\u01a9\1\u0186\1\u018d\1\u018f\1\u01ac\27\uffff\1\u017c",
            "\1\120\6\uffff\1\11\4\uffff\1\11",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174",
            "\1\u0174"
    };

    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "2106:2: ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? ( ( Async ) )? ( ruleTypeVariables[null] )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod ) | this_TField_3= ruleTField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA47_1 = input.LA(1);

                         
                        int index47_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_1==Static) ) {s = 7;}

                        else if ( (LA47_1==Const) ) {s = 8;}

                        else if ( (LA47_1==Final) ) {s = 9;}

                        else if ( (LA47_1==Any) ) {s = 10;}

                        else if ( (LA47_1==Undefined) ) {s = 11;}

                        else if ( (LA47_1==Object) ) {s = 12;}

                        else if ( (LA47_1==VirtualBase) ) {s = 13;}

                        else if ( (LA47_1==Primitive) ) {s = 14;}

                        else if ( (LA47_1==AutoboxedType) ) {s = 15;}

                        else if ( (LA47_1==AssignmnentCompatible) ) {s = 16;}

                        else if ( (LA47_1==RULE_IDENTIFIER) ) {s = 17;}

                        else if ( (LA47_1==Break) ) {s = 18;}

                        else if ( (LA47_1==Case) ) {s = 19;}

                        else if ( (LA47_1==Catch) ) {s = 20;}

                        else if ( (LA47_1==Class) ) {s = 21;}

                        else if ( (LA47_1==Continue) ) {s = 22;}

                        else if ( (LA47_1==Debugger) ) {s = 23;}

                        else if ( (LA47_1==Default) ) {s = 24;}

                        else if ( (LA47_1==Delete) ) {s = 25;}

                        else if ( (LA47_1==Do) ) {s = 26;}

                        else if ( (LA47_1==Else) ) {s = 27;}

                        else if ( (LA47_1==Export) ) {s = 28;}

                        else if ( (LA47_1==Extends) ) {s = 29;}

                        else if ( (LA47_1==Finally) ) {s = 30;}

                        else if ( (LA47_1==For) ) {s = 31;}

                        else if ( (LA47_1==Function) ) {s = 32;}

                        else if ( (LA47_1==If) ) {s = 33;}

                        else if ( (LA47_1==Import) ) {s = 34;}

                        else if ( (LA47_1==In) ) {s = 35;}

                        else if ( (LA47_1==Instanceof) ) {s = 36;}

                        else if ( (LA47_1==New) ) {s = 37;}

                        else if ( (LA47_1==Return) ) {s = 38;}

                        else if ( (LA47_1==Super) ) {s = 39;}

                        else if ( (LA47_1==Switch) ) {s = 40;}

                        else if ( (LA47_1==This_1) ) {s = 41;}

                        else if ( (LA47_1==Throw) ) {s = 42;}

                        else if ( (LA47_1==Try) ) {s = 43;}

                        else if ( (LA47_1==Typeof) ) {s = 44;}

                        else if ( (LA47_1==Var) ) {s = 45;}

                        else if ( (LA47_1==Void) ) {s = 46;}

                        else if ( (LA47_1==While) ) {s = 47;}

                        else if ( (LA47_1==With) ) {s = 48;}

                        else if ( (LA47_1==Yield) ) {s = 49;}

                        else if ( (LA47_1==Null) ) {s = 50;}

                        else if ( (LA47_1==True) ) {s = 51;}

                        else if ( (LA47_1==False) ) {s = 52;}

                        else if ( (LA47_1==Enum) ) {s = 53;}

                        else if ( (LA47_1==Get) ) {s = 54;}

                        else if ( (LA47_1==Set) ) {s = 55;}

                        else if ( (LA47_1==Let) ) {s = 56;}

                        else if ( (LA47_1==Project) ) {s = 57;}

                        else if ( (LA47_1==External) ) {s = 58;}

                        else if ( (LA47_1==Abstract) ) {s = 59;}

                        else if ( (LA47_1==As) ) {s = 60;}

                        else if ( (LA47_1==From) ) {s = 61;}

                        else if ( (LA47_1==Constructor) ) {s = 62;}

                        else if ( (LA47_1==Of) ) {s = 63;}

                        else if ( (LA47_1==Target) ) {s = 64;}

                        else if ( (LA47_1==Type) ) {s = 65;}

                        else if ( (LA47_1==Union) ) {s = 66;}

                        else if ( (LA47_1==Intersection) ) {s = 67;}

                        else if ( (LA47_1==This) ) {s = 68;}

                        else if ( (LA47_1==Promisify) ) {s = 69;}

                        else if ( (LA47_1==Await) ) {s = 70;}

                        else if ( (LA47_1==Async) ) {s = 71;}

                        else if ( (LA47_1==Implements) ) {s = 72;}

                        else if ( (LA47_1==Interface) ) {s = 73;}

                        else if ( (LA47_1==Private) ) {s = 74;}

                        else if ( (LA47_1==Protected) ) {s = 75;}

                        else if ( (LA47_1==Public) ) {s = 76;}

                        else if ( (LA47_1==Out) ) {s = 77;}

                        else if ( (LA47_1==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA47_1==LessThanSign) && (synpred7_InternalTypesParser())) {s = 79;}

                         
                        input.seek(index47_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA47_18 = input.LA(1);

                         
                        int index47_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_18==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_18==Colon||LA47_18==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA47_71 = input.LA(1);

                         
                        int index47_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_71==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_71==LessThanSign) && (synpred7_InternalTypesParser())) {s = 79;}

                        else if ( (LA47_71==Any) && (synpred7_InternalTypesParser())) {s = 227;}

                        else if ( (LA47_71==Undefined) && (synpred7_InternalTypesParser())) {s = 228;}

                        else if ( (LA47_71==Object) && (synpred7_InternalTypesParser())) {s = 229;}

                        else if ( (LA47_71==VirtualBase) && (synpred7_InternalTypesParser())) {s = 230;}

                        else if ( (LA47_71==Primitive) && (synpred7_InternalTypesParser())) {s = 231;}

                        else if ( (LA47_71==AutoboxedType) && (synpred7_InternalTypesParser())) {s = 232;}

                        else if ( (LA47_71==AssignmnentCompatible) && (synpred7_InternalTypesParser())) {s = 233;}

                        else if ( (LA47_71==RULE_IDENTIFIER) && (synpred7_InternalTypesParser())) {s = 234;}

                        else if ( (LA47_71==Break) && (synpred7_InternalTypesParser())) {s = 235;}

                        else if ( (LA47_71==Case) && (synpred7_InternalTypesParser())) {s = 236;}

                        else if ( (LA47_71==Catch) && (synpred7_InternalTypesParser())) {s = 237;}

                        else if ( (LA47_71==Class) && (synpred7_InternalTypesParser())) {s = 238;}

                        else if ( (LA47_71==Const) && (synpred7_InternalTypesParser())) {s = 239;}

                        else if ( (LA47_71==Continue) && (synpred7_InternalTypesParser())) {s = 240;}

                        else if ( (LA47_71==Debugger) && (synpred7_InternalTypesParser())) {s = 241;}

                        else if ( (LA47_71==Default) && (synpred7_InternalTypesParser())) {s = 242;}

                        else if ( (LA47_71==Delete) && (synpred7_InternalTypesParser())) {s = 243;}

                        else if ( (LA47_71==Do) && (synpred7_InternalTypesParser())) {s = 244;}

                        else if ( (LA47_71==Else) && (synpred7_InternalTypesParser())) {s = 245;}

                        else if ( (LA47_71==Export) && (synpred7_InternalTypesParser())) {s = 246;}

                        else if ( (LA47_71==Extends) && (synpred7_InternalTypesParser())) {s = 247;}

                        else if ( (LA47_71==Finally) && (synpred7_InternalTypesParser())) {s = 248;}

                        else if ( (LA47_71==For) && (synpred7_InternalTypesParser())) {s = 249;}

                        else if ( (LA47_71==Function) && (synpred7_InternalTypesParser())) {s = 250;}

                        else if ( (LA47_71==If) && (synpred7_InternalTypesParser())) {s = 251;}

                        else if ( (LA47_71==Import) && (synpred7_InternalTypesParser())) {s = 252;}

                        else if ( (LA47_71==In) && (synpred7_InternalTypesParser())) {s = 253;}

                        else if ( (LA47_71==Instanceof) && (synpred7_InternalTypesParser())) {s = 254;}

                        else if ( (LA47_71==New) && (synpred7_InternalTypesParser())) {s = 255;}

                        else if ( (LA47_71==Return) && (synpred7_InternalTypesParser())) {s = 256;}

                        else if ( (LA47_71==Super) && (synpred7_InternalTypesParser())) {s = 257;}

                        else if ( (LA47_71==Switch) && (synpred7_InternalTypesParser())) {s = 258;}

                        else if ( (LA47_71==This_1) && (synpred7_InternalTypesParser())) {s = 259;}

                        else if ( (LA47_71==Throw) && (synpred7_InternalTypesParser())) {s = 260;}

                        else if ( (LA47_71==Try) && (synpred7_InternalTypesParser())) {s = 261;}

                        else if ( (LA47_71==Typeof) && (synpred7_InternalTypesParser())) {s = 262;}

                        else if ( (LA47_71==Var) && (synpred7_InternalTypesParser())) {s = 263;}

                        else if ( (LA47_71==Void) && (synpred7_InternalTypesParser())) {s = 264;}

                        else if ( (LA47_71==While) && (synpred7_InternalTypesParser())) {s = 265;}

                        else if ( (LA47_71==With) && (synpred7_InternalTypesParser())) {s = 266;}

                        else if ( (LA47_71==Yield) && (synpred7_InternalTypesParser())) {s = 267;}

                        else if ( (LA47_71==Null) && (synpred7_InternalTypesParser())) {s = 268;}

                        else if ( (LA47_71==True) && (synpred7_InternalTypesParser())) {s = 269;}

                        else if ( (LA47_71==False) && (synpred7_InternalTypesParser())) {s = 270;}

                        else if ( (LA47_71==Enum) && (synpred7_InternalTypesParser())) {s = 271;}

                        else if ( (LA47_71==Get) && (synpred7_InternalTypesParser())) {s = 297;}

                        else if ( (LA47_71==Set) && (synpred7_InternalTypesParser())) {s = 298;}

                        else if ( (LA47_71==Let) && (synpred7_InternalTypesParser())) {s = 274;}

                        else if ( (LA47_71==Project) && (synpred7_InternalTypesParser())) {s = 275;}

                        else if ( (LA47_71==External) && (synpred7_InternalTypesParser())) {s = 276;}

                        else if ( (LA47_71==Abstract) && (synpred7_InternalTypesParser())) {s = 277;}

                        else if ( (LA47_71==Static) && (synpred7_InternalTypesParser())) {s = 278;}

                        else if ( (LA47_71==As) && (synpred7_InternalTypesParser())) {s = 279;}

                        else if ( (LA47_71==From) && (synpred7_InternalTypesParser())) {s = 280;}

                        else if ( (LA47_71==Constructor) && (synpred7_InternalTypesParser())) {s = 281;}

                        else if ( (LA47_71==Of) && (synpred7_InternalTypesParser())) {s = 282;}

                        else if ( (LA47_71==Target) && (synpred7_InternalTypesParser())) {s = 283;}

                        else if ( (LA47_71==Type) && (synpred7_InternalTypesParser())) {s = 284;}

                        else if ( (LA47_71==Union) && (synpred7_InternalTypesParser())) {s = 285;}

                        else if ( (LA47_71==Intersection) && (synpred7_InternalTypesParser())) {s = 286;}

                        else if ( (LA47_71==This) && (synpred7_InternalTypesParser())) {s = 287;}

                        else if ( (LA47_71==Promisify) && (synpred7_InternalTypesParser())) {s = 288;}

                        else if ( (LA47_71==Await) && (synpred7_InternalTypesParser())) {s = 289;}

                        else if ( (LA47_71==Async) && (synpred7_InternalTypesParser())) {s = 299;}

                        else if ( (LA47_71==Implements) && (synpred7_InternalTypesParser())) {s = 290;}

                        else if ( (LA47_71==Interface) && (synpred7_InternalTypesParser())) {s = 291;}

                        else if ( (LA47_71==Private) && (synpred7_InternalTypesParser())) {s = 292;}

                        else if ( (LA47_71==Protected) && (synpred7_InternalTypesParser())) {s = 293;}

                        else if ( (LA47_71==Public) && (synpred7_InternalTypesParser())) {s = 294;}

                        else if ( (LA47_71==Out) && (synpred7_InternalTypesParser())) {s = 295;}

                        else if ( (LA47_71==LeftSquareBracket) && (synpred7_InternalTypesParser())) {s = 296;}

                        else if ( (LA47_71==Colon||LA47_71==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_71);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA47_2 = input.LA(1);

                         
                        int index47_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_2==Abstract) ) {s = 59;}

                        else if ( (LA47_2==Static) ) {s = 7;}

                        else if ( (LA47_2==Set) ) {s = 55;}

                        else if ( (LA47_2==Async) ) {s = 71;}

                        else if ( (LA47_2==LessThanSign) && (synpred7_InternalTypesParser())) {s = 79;}

                        else if ( (LA47_2==Any) ) {s = 10;}

                        else if ( (LA47_2==Undefined) ) {s = 11;}

                        else if ( (LA47_2==Object) ) {s = 12;}

                        else if ( (LA47_2==VirtualBase) ) {s = 13;}

                        else if ( (LA47_2==Primitive) ) {s = 14;}

                        else if ( (LA47_2==AutoboxedType) ) {s = 15;}

                        else if ( (LA47_2==AssignmnentCompatible) ) {s = 16;}

                        else if ( (LA47_2==RULE_IDENTIFIER) ) {s = 17;}

                        else if ( (LA47_2==Break) ) {s = 18;}

                        else if ( (LA47_2==Case) ) {s = 19;}

                        else if ( (LA47_2==Catch) ) {s = 20;}

                        else if ( (LA47_2==Class) ) {s = 21;}

                        else if ( (LA47_2==Const) ) {s = 8;}

                        else if ( (LA47_2==Continue) ) {s = 22;}

                        else if ( (LA47_2==Debugger) ) {s = 23;}

                        else if ( (LA47_2==Default) ) {s = 24;}

                        else if ( (LA47_2==Delete) ) {s = 25;}

                        else if ( (LA47_2==Do) ) {s = 26;}

                        else if ( (LA47_2==Else) ) {s = 27;}

                        else if ( (LA47_2==Export) ) {s = 28;}

                        else if ( (LA47_2==Extends) ) {s = 29;}

                        else if ( (LA47_2==Finally) ) {s = 30;}

                        else if ( (LA47_2==For) ) {s = 31;}

                        else if ( (LA47_2==Function) ) {s = 32;}

                        else if ( (LA47_2==If) ) {s = 33;}

                        else if ( (LA47_2==Import) ) {s = 34;}

                        else if ( (LA47_2==In) ) {s = 35;}

                        else if ( (LA47_2==Instanceof) ) {s = 36;}

                        else if ( (LA47_2==New) ) {s = 37;}

                        else if ( (LA47_2==Return) ) {s = 38;}

                        else if ( (LA47_2==Super) ) {s = 39;}

                        else if ( (LA47_2==Switch) ) {s = 40;}

                        else if ( (LA47_2==This_1) ) {s = 41;}

                        else if ( (LA47_2==Throw) ) {s = 42;}

                        else if ( (LA47_2==Try) ) {s = 43;}

                        else if ( (LA47_2==Typeof) ) {s = 44;}

                        else if ( (LA47_2==Var) ) {s = 45;}

                        else if ( (LA47_2==Void) ) {s = 46;}

                        else if ( (LA47_2==While) ) {s = 47;}

                        else if ( (LA47_2==With) ) {s = 48;}

                        else if ( (LA47_2==Yield) ) {s = 49;}

                        else if ( (LA47_2==Null) ) {s = 50;}

                        else if ( (LA47_2==True) ) {s = 51;}

                        else if ( (LA47_2==False) ) {s = 52;}

                        else if ( (LA47_2==Enum) ) {s = 53;}

                        else if ( (LA47_2==Get) ) {s = 54;}

                        else if ( (LA47_2==Let) ) {s = 56;}

                        else if ( (LA47_2==Project) ) {s = 57;}

                        else if ( (LA47_2==External) ) {s = 58;}

                        else if ( (LA47_2==As) ) {s = 60;}

                        else if ( (LA47_2==From) ) {s = 61;}

                        else if ( (LA47_2==Constructor) ) {s = 62;}

                        else if ( (LA47_2==Of) ) {s = 63;}

                        else if ( (LA47_2==Target) ) {s = 64;}

                        else if ( (LA47_2==Type) ) {s = 65;}

                        else if ( (LA47_2==Union) ) {s = 66;}

                        else if ( (LA47_2==Intersection) ) {s = 67;}

                        else if ( (LA47_2==This) ) {s = 68;}

                        else if ( (LA47_2==Promisify) ) {s = 69;}

                        else if ( (LA47_2==Await) ) {s = 70;}

                        else if ( (LA47_2==Implements) ) {s = 72;}

                        else if ( (LA47_2==Interface) ) {s = 73;}

                        else if ( (LA47_2==Private) ) {s = 74;}

                        else if ( (LA47_2==Protected) ) {s = 75;}

                        else if ( (LA47_2==Public) ) {s = 76;}

                        else if ( (LA47_2==Out) ) {s = 77;}

                        else if ( (LA47_2==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA47_2==Final) ) {s = 9;}

                         
                        input.seek(index47_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA47_19 = input.LA(1);

                         
                        int index47_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_19==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_19==Colon||LA47_19==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_19);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA47_20 = input.LA(1);

                         
                        int index47_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_20==Colon||LA47_20==QuestionMark) ) {s = 9;}

                        else if ( (LA47_20==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_20);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA47_8 = input.LA(1);

                         
                        int index47_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_8==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_8==AssignmnentCompatible||(LA47_8>=AutoboxedType && LA47_8<=Finally)||(LA47_8>=Private && LA47_8<=False)||(LA47_8>=Super && LA47_8<=With)||(LA47_8>=Any && LA47_8<=Var)||(LA47_8>=As && LA47_8<=Of)||LA47_8==Colon||LA47_8==QuestionMark||LA47_8==LeftSquareBracket||LA47_8==RULE_IDENTIFIER) ) {s = 9;}

                         
                        input.seek(index47_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA47_21 = input.LA(1);

                         
                        int index47_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_21==Colon||LA47_21==QuestionMark) ) {s = 9;}

                        else if ( (LA47_21==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_21);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA47_81 = input.LA(1);

                         
                        int index47_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_81==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_81==Colon||LA47_81==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_81);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA47_3 = input.LA(1);

                         
                        int index47_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_3==Abstract) ) {s = 59;}

                        else if ( (LA47_3==Static) ) {s = 7;}

                        else if ( (LA47_3==Set) ) {s = 55;}

                        else if ( (LA47_3==Async) ) {s = 71;}

                        else if ( (LA47_3==LessThanSign) && (synpred7_InternalTypesParser())) {s = 79;}

                        else if ( (LA47_3==Any) ) {s = 10;}

                        else if ( (LA47_3==Undefined) ) {s = 11;}

                        else if ( (LA47_3==Object) ) {s = 12;}

                        else if ( (LA47_3==VirtualBase) ) {s = 13;}

                        else if ( (LA47_3==Primitive) ) {s = 14;}

                        else if ( (LA47_3==AutoboxedType) ) {s = 15;}

                        else if ( (LA47_3==AssignmnentCompatible) ) {s = 16;}

                        else if ( (LA47_3==RULE_IDENTIFIER) ) {s = 17;}

                        else if ( (LA47_3==Break) ) {s = 18;}

                        else if ( (LA47_3==Case) ) {s = 19;}

                        else if ( (LA47_3==Catch) ) {s = 20;}

                        else if ( (LA47_3==Class) ) {s = 21;}

                        else if ( (LA47_3==Const) ) {s = 8;}

                        else if ( (LA47_3==Continue) ) {s = 22;}

                        else if ( (LA47_3==Debugger) ) {s = 23;}

                        else if ( (LA47_3==Default) ) {s = 24;}

                        else if ( (LA47_3==Delete) ) {s = 25;}

                        else if ( (LA47_3==Do) ) {s = 26;}

                        else if ( (LA47_3==Else) ) {s = 27;}

                        else if ( (LA47_3==Export) ) {s = 28;}

                        else if ( (LA47_3==Extends) ) {s = 29;}

                        else if ( (LA47_3==Finally) ) {s = 30;}

                        else if ( (LA47_3==For) ) {s = 31;}

                        else if ( (LA47_3==Function) ) {s = 32;}

                        else if ( (LA47_3==If) ) {s = 33;}

                        else if ( (LA47_3==Import) ) {s = 34;}

                        else if ( (LA47_3==In) ) {s = 35;}

                        else if ( (LA47_3==Instanceof) ) {s = 36;}

                        else if ( (LA47_3==New) ) {s = 37;}

                        else if ( (LA47_3==Return) ) {s = 38;}

                        else if ( (LA47_3==Super) ) {s = 39;}

                        else if ( (LA47_3==Switch) ) {s = 40;}

                        else if ( (LA47_3==This_1) ) {s = 41;}

                        else if ( (LA47_3==Throw) ) {s = 42;}

                        else if ( (LA47_3==Try) ) {s = 43;}

                        else if ( (LA47_3==Typeof) ) {s = 44;}

                        else if ( (LA47_3==Var) ) {s = 45;}

                        else if ( (LA47_3==Void) ) {s = 46;}

                        else if ( (LA47_3==While) ) {s = 47;}

                        else if ( (LA47_3==With) ) {s = 48;}

                        else if ( (LA47_3==Yield) ) {s = 49;}

                        else if ( (LA47_3==Null) ) {s = 50;}

                        else if ( (LA47_3==True) ) {s = 51;}

                        else if ( (LA47_3==False) ) {s = 52;}

                        else if ( (LA47_3==Enum) ) {s = 53;}

                        else if ( (LA47_3==Get) ) {s = 54;}

                        else if ( (LA47_3==Let) ) {s = 56;}

                        else if ( (LA47_3==Project) ) {s = 57;}

                        else if ( (LA47_3==External) ) {s = 58;}

                        else if ( (LA47_3==As) ) {s = 60;}

                        else if ( (LA47_3==From) ) {s = 61;}

                        else if ( (LA47_3==Constructor) ) {s = 62;}

                        else if ( (LA47_3==Of) ) {s = 63;}

                        else if ( (LA47_3==Target) ) {s = 64;}

                        else if ( (LA47_3==Type) ) {s = 65;}

                        else if ( (LA47_3==Union) ) {s = 66;}

                        else if ( (LA47_3==Intersection) ) {s = 67;}

                        else if ( (LA47_3==This) ) {s = 68;}

                        else if ( (LA47_3==Promisify) ) {s = 69;}

                        else if ( (LA47_3==Await) ) {s = 70;}

                        else if ( (LA47_3==Implements) ) {s = 72;}

                        else if ( (LA47_3==Interface) ) {s = 73;}

                        else if ( (LA47_3==Private) ) {s = 74;}

                        else if ( (LA47_3==Protected) ) {s = 75;}

                        else if ( (LA47_3==Public) ) {s = 76;}

                        else if ( (LA47_3==Out) ) {s = 77;}

                        else if ( (LA47_3==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA47_3==Final) ) {s = 9;}

                         
                        input.seek(index47_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA47_22 = input.LA(1);

                         
                        int index47_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_22==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_22==Colon||LA47_22==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_22);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA47_372 = input.LA(1);

                         
                        int index47_372 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_372==Colon||LA47_372==QuestionMark) ) {s = 9;}

                        else if ( (LA47_372==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_372);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA47_23 = input.LA(1);

                         
                        int index47_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_23==Colon||LA47_23==QuestionMark) ) {s = 9;}

                        else if ( (LA47_23==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_23);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA47_24 = input.LA(1);

                         
                        int index47_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_24==Colon||LA47_24==QuestionMark) ) {s = 9;}

                        else if ( (LA47_24==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_24);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA47_4 = input.LA(1);

                         
                        int index47_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_4==Static) ) {s = 7;}

                        else if ( (LA47_4==Const) ) {s = 8;}

                        else if ( (LA47_4==Final) ) {s = 9;}

                        else if ( (LA47_4==Any) ) {s = 10;}

                        else if ( (LA47_4==Undefined) ) {s = 11;}

                        else if ( (LA47_4==Object) ) {s = 12;}

                        else if ( (LA47_4==VirtualBase) ) {s = 13;}

                        else if ( (LA47_4==Primitive) ) {s = 14;}

                        else if ( (LA47_4==AutoboxedType) ) {s = 15;}

                        else if ( (LA47_4==AssignmnentCompatible) ) {s = 16;}

                        else if ( (LA47_4==RULE_IDENTIFIER) ) {s = 17;}

                        else if ( (LA47_4==Break) ) {s = 18;}

                        else if ( (LA47_4==Case) ) {s = 19;}

                        else if ( (LA47_4==Catch) ) {s = 20;}

                        else if ( (LA47_4==Class) ) {s = 21;}

                        else if ( (LA47_4==Continue) ) {s = 22;}

                        else if ( (LA47_4==Debugger) ) {s = 23;}

                        else if ( (LA47_4==Default) ) {s = 24;}

                        else if ( (LA47_4==Delete) ) {s = 25;}

                        else if ( (LA47_4==Do) ) {s = 26;}

                        else if ( (LA47_4==Else) ) {s = 27;}

                        else if ( (LA47_4==Export) ) {s = 28;}

                        else if ( (LA47_4==Extends) ) {s = 29;}

                        else if ( (LA47_4==Finally) ) {s = 30;}

                        else if ( (LA47_4==For) ) {s = 31;}

                        else if ( (LA47_4==Function) ) {s = 32;}

                        else if ( (LA47_4==If) ) {s = 33;}

                        else if ( (LA47_4==Import) ) {s = 34;}

                        else if ( (LA47_4==In) ) {s = 35;}

                        else if ( (LA47_4==Instanceof) ) {s = 36;}

                        else if ( (LA47_4==New) ) {s = 37;}

                        else if ( (LA47_4==Return) ) {s = 38;}

                        else if ( (LA47_4==Super) ) {s = 39;}

                        else if ( (LA47_4==Switch) ) {s = 40;}

                        else if ( (LA47_4==This_1) ) {s = 41;}

                        else if ( (LA47_4==Throw) ) {s = 42;}

                        else if ( (LA47_4==Try) ) {s = 43;}

                        else if ( (LA47_4==Typeof) ) {s = 44;}

                        else if ( (LA47_4==Var) ) {s = 45;}

                        else if ( (LA47_4==Void) ) {s = 46;}

                        else if ( (LA47_4==While) ) {s = 47;}

                        else if ( (LA47_4==With) ) {s = 48;}

                        else if ( (LA47_4==Yield) ) {s = 49;}

                        else if ( (LA47_4==Null) ) {s = 50;}

                        else if ( (LA47_4==True) ) {s = 51;}

                        else if ( (LA47_4==False) ) {s = 52;}

                        else if ( (LA47_4==Enum) ) {s = 53;}

                        else if ( (LA47_4==Get) ) {s = 54;}

                        else if ( (LA47_4==Set) ) {s = 55;}

                        else if ( (LA47_4==Let) ) {s = 56;}

                        else if ( (LA47_4==Project) ) {s = 57;}

                        else if ( (LA47_4==External) ) {s = 58;}

                        else if ( (LA47_4==Abstract) ) {s = 59;}

                        else if ( (LA47_4==As) ) {s = 60;}

                        else if ( (LA47_4==From) ) {s = 61;}

                        else if ( (LA47_4==Constructor) ) {s = 62;}

                        else if ( (LA47_4==Of) ) {s = 63;}

                        else if ( (LA47_4==Target) ) {s = 64;}

                        else if ( (LA47_4==Type) ) {s = 65;}

                        else if ( (LA47_4==Union) ) {s = 66;}

                        else if ( (LA47_4==Intersection) ) {s = 67;}

                        else if ( (LA47_4==This) ) {s = 68;}

                        else if ( (LA47_4==Promisify) ) {s = 69;}

                        else if ( (LA47_4==Await) ) {s = 70;}

                        else if ( (LA47_4==Async) ) {s = 71;}

                        else if ( (LA47_4==Implements) ) {s = 72;}

                        else if ( (LA47_4==Interface) ) {s = 73;}

                        else if ( (LA47_4==Private) ) {s = 74;}

                        else if ( (LA47_4==Protected) ) {s = 75;}

                        else if ( (LA47_4==Public) ) {s = 76;}

                        else if ( (LA47_4==Out) ) {s = 77;}

                        else if ( (LA47_4==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA47_4==LessThanSign) && (synpred7_InternalTypesParser())) {s = 79;}

                         
                        input.seek(index47_4);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA47_5 = input.LA(1);

                         
                        int index47_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_5==Abstract) ) {s = 59;}

                        else if ( (LA47_5==Static) ) {s = 7;}

                        else if ( (LA47_5==Set) ) {s = 55;}

                        else if ( (LA47_5==Async) ) {s = 71;}

                        else if ( (LA47_5==LessThanSign) && (synpred7_InternalTypesParser())) {s = 79;}

                        else if ( (LA47_5==Any) ) {s = 10;}

                        else if ( (LA47_5==Undefined) ) {s = 11;}

                        else if ( (LA47_5==Object) ) {s = 12;}

                        else if ( (LA47_5==VirtualBase) ) {s = 13;}

                        else if ( (LA47_5==Primitive) ) {s = 14;}

                        else if ( (LA47_5==AutoboxedType) ) {s = 15;}

                        else if ( (LA47_5==AssignmnentCompatible) ) {s = 16;}

                        else if ( (LA47_5==RULE_IDENTIFIER) ) {s = 17;}

                        else if ( (LA47_5==Break) ) {s = 18;}

                        else if ( (LA47_5==Case) ) {s = 19;}

                        else if ( (LA47_5==Catch) ) {s = 20;}

                        else if ( (LA47_5==Class) ) {s = 21;}

                        else if ( (LA47_5==Const) ) {s = 8;}

                        else if ( (LA47_5==Continue) ) {s = 22;}

                        else if ( (LA47_5==Debugger) ) {s = 23;}

                        else if ( (LA47_5==Default) ) {s = 24;}

                        else if ( (LA47_5==Delete) ) {s = 25;}

                        else if ( (LA47_5==Do) ) {s = 26;}

                        else if ( (LA47_5==Else) ) {s = 27;}

                        else if ( (LA47_5==Export) ) {s = 28;}

                        else if ( (LA47_5==Extends) ) {s = 29;}

                        else if ( (LA47_5==Finally) ) {s = 30;}

                        else if ( (LA47_5==For) ) {s = 31;}

                        else if ( (LA47_5==Function) ) {s = 32;}

                        else if ( (LA47_5==If) ) {s = 33;}

                        else if ( (LA47_5==Import) ) {s = 34;}

                        else if ( (LA47_5==In) ) {s = 35;}

                        else if ( (LA47_5==Instanceof) ) {s = 36;}

                        else if ( (LA47_5==New) ) {s = 37;}

                        else if ( (LA47_5==Return) ) {s = 38;}

                        else if ( (LA47_5==Super) ) {s = 39;}

                        else if ( (LA47_5==Switch) ) {s = 40;}

                        else if ( (LA47_5==This_1) ) {s = 41;}

                        else if ( (LA47_5==Throw) ) {s = 42;}

                        else if ( (LA47_5==Try) ) {s = 43;}

                        else if ( (LA47_5==Typeof) ) {s = 44;}

                        else if ( (LA47_5==Var) ) {s = 45;}

                        else if ( (LA47_5==Void) ) {s = 46;}

                        else if ( (LA47_5==While) ) {s = 47;}

                        else if ( (LA47_5==With) ) {s = 48;}

                        else if ( (LA47_5==Yield) ) {s = 49;}

                        else if ( (LA47_5==Null) ) {s = 50;}

                        else if ( (LA47_5==True) ) {s = 51;}

                        else if ( (LA47_5==False) ) {s = 52;}

                        else if ( (LA47_5==Enum) ) {s = 53;}

                        else if ( (LA47_5==Get) ) {s = 54;}

                        else if ( (LA47_5==Let) ) {s = 56;}

                        else if ( (LA47_5==Project) ) {s = 57;}

                        else if ( (LA47_5==External) ) {s = 58;}

                        else if ( (LA47_5==As) ) {s = 60;}

                        else if ( (LA47_5==From) ) {s = 61;}

                        else if ( (LA47_5==Constructor) ) {s = 62;}

                        else if ( (LA47_5==Of) ) {s = 63;}

                        else if ( (LA47_5==Target) ) {s = 64;}

                        else if ( (LA47_5==Type) ) {s = 65;}

                        else if ( (LA47_5==Union) ) {s = 66;}

                        else if ( (LA47_5==Intersection) ) {s = 67;}

                        else if ( (LA47_5==This) ) {s = 68;}

                        else if ( (LA47_5==Promisify) ) {s = 69;}

                        else if ( (LA47_5==Await) ) {s = 70;}

                        else if ( (LA47_5==Implements) ) {s = 72;}

                        else if ( (LA47_5==Interface) ) {s = 73;}

                        else if ( (LA47_5==Private) ) {s = 74;}

                        else if ( (LA47_5==Protected) ) {s = 75;}

                        else if ( (LA47_5==Public) ) {s = 76;}

                        else if ( (LA47_5==Out) ) {s = 77;}

                        else if ( (LA47_5==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA47_5==Final) ) {s = 9;}

                         
                        input.seek(index47_5);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA47_25 = input.LA(1);

                         
                        int index47_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_25==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_25==Colon||LA47_25==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_25);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA47_26 = input.LA(1);

                         
                        int index47_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_26==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_26==Colon||LA47_26==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_26);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA47_56 = input.LA(1);

                         
                        int index47_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_56==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_56==Colon||LA47_56==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_56);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA47_27 = input.LA(1);

                         
                        int index47_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_27==Colon||LA47_27==QuestionMark) ) {s = 9;}

                        else if ( (LA47_27==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_27);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA47_6 = input.LA(1);

                         
                        int index47_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_6==Abstract) ) {s = 59;}

                        else if ( (LA47_6==Static) ) {s = 7;}

                        else if ( (LA47_6==Set) ) {s = 55;}

                        else if ( (LA47_6==Async) ) {s = 71;}

                        else if ( (LA47_6==LessThanSign) && (synpred7_InternalTypesParser())) {s = 79;}

                        else if ( (LA47_6==Any) ) {s = 10;}

                        else if ( (LA47_6==Undefined) ) {s = 11;}

                        else if ( (LA47_6==Object) ) {s = 12;}

                        else if ( (LA47_6==VirtualBase) ) {s = 13;}

                        else if ( (LA47_6==Primitive) ) {s = 14;}

                        else if ( (LA47_6==AutoboxedType) ) {s = 15;}

                        else if ( (LA47_6==AssignmnentCompatible) ) {s = 16;}

                        else if ( (LA47_6==RULE_IDENTIFIER) ) {s = 17;}

                        else if ( (LA47_6==Break) ) {s = 18;}

                        else if ( (LA47_6==Case) ) {s = 19;}

                        else if ( (LA47_6==Catch) ) {s = 20;}

                        else if ( (LA47_6==Class) ) {s = 21;}

                        else if ( (LA47_6==Const) ) {s = 8;}

                        else if ( (LA47_6==Continue) ) {s = 22;}

                        else if ( (LA47_6==Debugger) ) {s = 23;}

                        else if ( (LA47_6==Default) ) {s = 24;}

                        else if ( (LA47_6==Delete) ) {s = 25;}

                        else if ( (LA47_6==Do) ) {s = 26;}

                        else if ( (LA47_6==Else) ) {s = 27;}

                        else if ( (LA47_6==Export) ) {s = 28;}

                        else if ( (LA47_6==Extends) ) {s = 29;}

                        else if ( (LA47_6==Finally) ) {s = 30;}

                        else if ( (LA47_6==For) ) {s = 31;}

                        else if ( (LA47_6==Function) ) {s = 32;}

                        else if ( (LA47_6==If) ) {s = 33;}

                        else if ( (LA47_6==Import) ) {s = 34;}

                        else if ( (LA47_6==In) ) {s = 35;}

                        else if ( (LA47_6==Instanceof) ) {s = 36;}

                        else if ( (LA47_6==New) ) {s = 37;}

                        else if ( (LA47_6==Return) ) {s = 38;}

                        else if ( (LA47_6==Super) ) {s = 39;}

                        else if ( (LA47_6==Switch) ) {s = 40;}

                        else if ( (LA47_6==This_1) ) {s = 41;}

                        else if ( (LA47_6==Throw) ) {s = 42;}

                        else if ( (LA47_6==Try) ) {s = 43;}

                        else if ( (LA47_6==Typeof) ) {s = 44;}

                        else if ( (LA47_6==Var) ) {s = 45;}

                        else if ( (LA47_6==Void) ) {s = 46;}

                        else if ( (LA47_6==While) ) {s = 47;}

                        else if ( (LA47_6==With) ) {s = 48;}

                        else if ( (LA47_6==Yield) ) {s = 49;}

                        else if ( (LA47_6==Null) ) {s = 50;}

                        else if ( (LA47_6==True) ) {s = 51;}

                        else if ( (LA47_6==False) ) {s = 52;}

                        else if ( (LA47_6==Enum) ) {s = 53;}

                        else if ( (LA47_6==Get) ) {s = 54;}

                        else if ( (LA47_6==Let) ) {s = 56;}

                        else if ( (LA47_6==Project) ) {s = 57;}

                        else if ( (LA47_6==External) ) {s = 58;}

                        else if ( (LA47_6==As) ) {s = 60;}

                        else if ( (LA47_6==From) ) {s = 61;}

                        else if ( (LA47_6==Constructor) ) {s = 62;}

                        else if ( (LA47_6==Of) ) {s = 63;}

                        else if ( (LA47_6==Target) ) {s = 64;}

                        else if ( (LA47_6==Type) ) {s = 65;}

                        else if ( (LA47_6==Union) ) {s = 66;}

                        else if ( (LA47_6==Intersection) ) {s = 67;}

                        else if ( (LA47_6==This) ) {s = 68;}

                        else if ( (LA47_6==Promisify) ) {s = 69;}

                        else if ( (LA47_6==Await) ) {s = 70;}

                        else if ( (LA47_6==Implements) ) {s = 72;}

                        else if ( (LA47_6==Interface) ) {s = 73;}

                        else if ( (LA47_6==Private) ) {s = 74;}

                        else if ( (LA47_6==Protected) ) {s = 75;}

                        else if ( (LA47_6==Public) ) {s = 76;}

                        else if ( (LA47_6==Out) ) {s = 77;}

                        else if ( (LA47_6==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA47_6==Final) ) {s = 9;}

                         
                        input.seek(index47_6);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA47_57 = input.LA(1);

                         
                        int index47_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_57==Colon||LA47_57==QuestionMark) ) {s = 9;}

                        else if ( (LA47_57==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_57);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA47_28 = input.LA(1);

                         
                        int index47_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_28==Colon||LA47_28==QuestionMark) ) {s = 9;}

                        else if ( (LA47_28==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_28);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA47_58 = input.LA(1);

                         
                        int index47_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_58==Colon||LA47_58==QuestionMark) ) {s = 9;}

                        else if ( (LA47_58==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_58);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA47_29 = input.LA(1);

                         
                        int index47_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_29==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_29==Colon||LA47_29==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_29);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA47_82 = input.LA(1);

                         
                        int index47_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_82==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_82==Colon||LA47_82==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_82);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA47_30 = input.LA(1);

                         
                        int index47_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_30==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_30==Colon||LA47_30==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_30);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA47_83 = input.LA(1);

                         
                        int index47_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_83==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_83==Colon||LA47_83==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_83);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA47_31 = input.LA(1);

                         
                        int index47_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_31==Colon||LA47_31==QuestionMark) ) {s = 9;}

                        else if ( (LA47_31==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA47_60 = input.LA(1);

                         
                        int index47_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_60==Colon||LA47_60==QuestionMark) ) {s = 9;}

                        else if ( (LA47_60==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_60);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA47_32 = input.LA(1);

                         
                        int index47_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_32==Colon||LA47_32==QuestionMark) ) {s = 9;}

                        else if ( (LA47_32==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA47_61 = input.LA(1);

                         
                        int index47_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_61==Colon||LA47_61==QuestionMark) ) {s = 9;}

                        else if ( (LA47_61==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_61);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA47_33 = input.LA(1);

                         
                        int index47_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_33==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_33==Colon||LA47_33==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA47_62 = input.LA(1);

                         
                        int index47_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_62==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_62==Colon||LA47_62==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_62);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA47_34 = input.LA(1);

                         
                        int index47_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_34==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_34==Colon||LA47_34==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA47_63 = input.LA(1);

                         
                        int index47_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_63==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_63==Colon||LA47_63==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_63);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA47_35 = input.LA(1);

                         
                        int index47_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_35==Colon||LA47_35==QuestionMark) ) {s = 9;}

                        else if ( (LA47_35==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_35);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA47_64 = input.LA(1);

                         
                        int index47_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_64==Colon||LA47_64==QuestionMark) ) {s = 9;}

                        else if ( (LA47_64==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_64);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA47_36 = input.LA(1);

                         
                        int index47_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_36==Colon||LA47_36==QuestionMark) ) {s = 9;}

                        else if ( (LA47_36==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_36);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA47_65 = input.LA(1);

                         
                        int index47_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_65==Colon||LA47_65==QuestionMark) ) {s = 9;}

                        else if ( (LA47_65==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_65);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA47_37 = input.LA(1);

                         
                        int index47_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_37==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_37==Colon||LA47_37==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_37);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA47_66 = input.LA(1);

                         
                        int index47_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_66==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_66==Colon||LA47_66==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_66);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA47_38 = input.LA(1);

                         
                        int index47_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_38==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_38==Colon||LA47_38==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_38);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA47_67 = input.LA(1);

                         
                        int index47_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_67==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_67==Colon||LA47_67==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_67);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA47_39 = input.LA(1);

                         
                        int index47_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_39==Colon||LA47_39==QuestionMark) ) {s = 9;}

                        else if ( (LA47_39==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_39);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA47_68 = input.LA(1);

                         
                        int index47_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_68==Colon||LA47_68==QuestionMark) ) {s = 9;}

                        else if ( (LA47_68==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_68);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA47_40 = input.LA(1);

                         
                        int index47_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_40==Colon||LA47_40==QuestionMark) ) {s = 9;}

                        else if ( (LA47_40==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_40);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA47_69 = input.LA(1);

                         
                        int index47_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_69==Colon||LA47_69==QuestionMark) ) {s = 9;}

                        else if ( (LA47_69==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_69);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA47_41 = input.LA(1);

                         
                        int index47_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_41==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_41==Colon||LA47_41==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_41);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA47_70 = input.LA(1);

                         
                        int index47_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_70==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_70==Colon||LA47_70==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_70);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA47_42 = input.LA(1);

                         
                        int index47_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_42==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_42==Colon||LA47_42==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_42);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA47_43 = input.LA(1);

                         
                        int index47_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_43==Colon||LA47_43==QuestionMark) ) {s = 9;}

                        else if ( (LA47_43==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_43);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA47_72 = input.LA(1);

                         
                        int index47_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_72==Colon||LA47_72==QuestionMark) ) {s = 9;}

                        else if ( (LA47_72==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_72);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA47_44 = input.LA(1);

                         
                        int index47_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_44==Colon||LA47_44==QuestionMark) ) {s = 9;}

                        else if ( (LA47_44==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_44);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA47_73 = input.LA(1);

                         
                        int index47_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_73==Colon||LA47_73==QuestionMark) ) {s = 9;}

                        else if ( (LA47_73==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_73);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA47_45 = input.LA(1);

                         
                        int index47_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_45==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_45==Colon||LA47_45==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_45);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA47_74 = input.LA(1);

                         
                        int index47_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_74==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_74==Colon||LA47_74==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_74);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA47_46 = input.LA(1);

                         
                        int index47_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_46==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_46==Colon||LA47_46==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_46);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA47_75 = input.LA(1);

                         
                        int index47_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_75==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_75==Colon||LA47_75==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_75);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA47_47 = input.LA(1);

                         
                        int index47_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_47==Colon||LA47_47==QuestionMark) ) {s = 9;}

                        else if ( (LA47_47==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_47);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA47_76 = input.LA(1);

                         
                        int index47_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_76==Colon||LA47_76==QuestionMark) ) {s = 9;}

                        else if ( (LA47_76==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_76);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA47_48 = input.LA(1);

                         
                        int index47_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_48==Colon||LA47_48==QuestionMark) ) {s = 9;}

                        else if ( (LA47_48==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_48);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA47_77 = input.LA(1);

                         
                        int index47_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_77==Colon||LA47_77==QuestionMark) ) {s = 9;}

                        else if ( (LA47_77==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_77);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA47_49 = input.LA(1);

                         
                        int index47_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_49==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_49==Colon||LA47_49==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_49);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA47_55 = input.LA(1);

                         
                        int index47_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_55==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_55==Colon||LA47_55==QuestionMark) ) {s = 9;}

                        else if ( (LA47_55==Any) && (synpred6_InternalTypesParser())) {s = 155;}

                        else if ( (LA47_55==Undefined) && (synpred6_InternalTypesParser())) {s = 156;}

                        else if ( (LA47_55==Object) && (synpred6_InternalTypesParser())) {s = 157;}

                        else if ( (LA47_55==VirtualBase) && (synpred6_InternalTypesParser())) {s = 158;}

                        else if ( (LA47_55==Primitive) && (synpred6_InternalTypesParser())) {s = 159;}

                        else if ( (LA47_55==AutoboxedType) && (synpred6_InternalTypesParser())) {s = 160;}

                        else if ( (LA47_55==AssignmnentCompatible) && (synpred6_InternalTypesParser())) {s = 161;}

                        else if ( (LA47_55==RULE_IDENTIFIER) && (synpred6_InternalTypesParser())) {s = 162;}

                        else if ( (LA47_55==Break) && (synpred6_InternalTypesParser())) {s = 163;}

                        else if ( (LA47_55==Case) && (synpred6_InternalTypesParser())) {s = 164;}

                        else if ( (LA47_55==Catch) && (synpred6_InternalTypesParser())) {s = 165;}

                        else if ( (LA47_55==Class) && (synpred6_InternalTypesParser())) {s = 166;}

                        else if ( (LA47_55==Const) && (synpred6_InternalTypesParser())) {s = 167;}

                        else if ( (LA47_55==Continue) && (synpred6_InternalTypesParser())) {s = 168;}

                        else if ( (LA47_55==Debugger) && (synpred6_InternalTypesParser())) {s = 169;}

                        else if ( (LA47_55==Default) && (synpred6_InternalTypesParser())) {s = 170;}

                        else if ( (LA47_55==Delete) && (synpred6_InternalTypesParser())) {s = 171;}

                        else if ( (LA47_55==Do) && (synpred6_InternalTypesParser())) {s = 172;}

                        else if ( (LA47_55==Else) && (synpred6_InternalTypesParser())) {s = 173;}

                        else if ( (LA47_55==Export) && (synpred6_InternalTypesParser())) {s = 174;}

                        else if ( (LA47_55==Extends) && (synpred6_InternalTypesParser())) {s = 175;}

                        else if ( (LA47_55==Finally) && (synpred6_InternalTypesParser())) {s = 176;}

                        else if ( (LA47_55==For) && (synpred6_InternalTypesParser())) {s = 177;}

                        else if ( (LA47_55==Function) && (synpred6_InternalTypesParser())) {s = 178;}

                        else if ( (LA47_55==If) && (synpred6_InternalTypesParser())) {s = 179;}

                        else if ( (LA47_55==Import) && (synpred6_InternalTypesParser())) {s = 180;}

                        else if ( (LA47_55==In) && (synpred6_InternalTypesParser())) {s = 181;}

                        else if ( (LA47_55==Instanceof) && (synpred6_InternalTypesParser())) {s = 182;}

                        else if ( (LA47_55==New) && (synpred6_InternalTypesParser())) {s = 183;}

                        else if ( (LA47_55==Return) && (synpred6_InternalTypesParser())) {s = 184;}

                        else if ( (LA47_55==Super) && (synpred6_InternalTypesParser())) {s = 185;}

                        else if ( (LA47_55==Switch) && (synpred6_InternalTypesParser())) {s = 186;}

                        else if ( (LA47_55==This_1) && (synpred6_InternalTypesParser())) {s = 187;}

                        else if ( (LA47_55==Throw) && (synpred6_InternalTypesParser())) {s = 188;}

                        else if ( (LA47_55==Try) && (synpred6_InternalTypesParser())) {s = 189;}

                        else if ( (LA47_55==Typeof) && (synpred6_InternalTypesParser())) {s = 190;}

                        else if ( (LA47_55==Var) && (synpred6_InternalTypesParser())) {s = 191;}

                        else if ( (LA47_55==Void) && (synpred6_InternalTypesParser())) {s = 192;}

                        else if ( (LA47_55==While) && (synpred6_InternalTypesParser())) {s = 193;}

                        else if ( (LA47_55==With) && (synpred6_InternalTypesParser())) {s = 194;}

                        else if ( (LA47_55==Yield) && (synpred6_InternalTypesParser())) {s = 195;}

                        else if ( (LA47_55==Null) && (synpred6_InternalTypesParser())) {s = 196;}

                        else if ( (LA47_55==True) && (synpred6_InternalTypesParser())) {s = 197;}

                        else if ( (LA47_55==False) && (synpred6_InternalTypesParser())) {s = 198;}

                        else if ( (LA47_55==Enum) && (synpred6_InternalTypesParser())) {s = 199;}

                        else if ( (LA47_55==Get) && (synpred6_InternalTypesParser())) {s = 200;}

                        else if ( (LA47_55==Set) && (synpred6_InternalTypesParser())) {s = 201;}

                        else if ( (LA47_55==Let) && (synpred6_InternalTypesParser())) {s = 202;}

                        else if ( (LA47_55==Project) && (synpred6_InternalTypesParser())) {s = 203;}

                        else if ( (LA47_55==External) && (synpred6_InternalTypesParser())) {s = 204;}

                        else if ( (LA47_55==Abstract) && (synpred6_InternalTypesParser())) {s = 205;}

                        else if ( (LA47_55==Static) && (synpred6_InternalTypesParser())) {s = 206;}

                        else if ( (LA47_55==As) && (synpred6_InternalTypesParser())) {s = 207;}

                        else if ( (LA47_55==From) && (synpred6_InternalTypesParser())) {s = 208;}

                        else if ( (LA47_55==Constructor) && (synpred6_InternalTypesParser())) {s = 209;}

                        else if ( (LA47_55==Of) && (synpred6_InternalTypesParser())) {s = 210;}

                        else if ( (LA47_55==Target) && (synpred6_InternalTypesParser())) {s = 211;}

                        else if ( (LA47_55==Type) && (synpred6_InternalTypesParser())) {s = 212;}

                        else if ( (LA47_55==Union) && (synpred6_InternalTypesParser())) {s = 213;}

                        else if ( (LA47_55==Intersection) && (synpred6_InternalTypesParser())) {s = 214;}

                        else if ( (LA47_55==This) && (synpred6_InternalTypesParser())) {s = 215;}

                        else if ( (LA47_55==Promisify) && (synpred6_InternalTypesParser())) {s = 216;}

                        else if ( (LA47_55==Await) && (synpred6_InternalTypesParser())) {s = 217;}

                        else if ( (LA47_55==Async) && (synpred6_InternalTypesParser())) {s = 218;}

                        else if ( (LA47_55==Implements) && (synpred6_InternalTypesParser())) {s = 219;}

                        else if ( (LA47_55==Interface) && (synpred6_InternalTypesParser())) {s = 220;}

                        else if ( (LA47_55==Private) && (synpred6_InternalTypesParser())) {s = 221;}

                        else if ( (LA47_55==Protected) && (synpred6_InternalTypesParser())) {s = 222;}

                        else if ( (LA47_55==Public) && (synpred6_InternalTypesParser())) {s = 223;}

                        else if ( (LA47_55==Out) && (synpred6_InternalTypesParser())) {s = 224;}

                        else if ( (LA47_55==LeftSquareBracket) && (synpred6_InternalTypesParser())) {s = 225;}

                         
                        input.seek(index47_55);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA47_50 = input.LA(1);

                         
                        int index47_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_50==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_50==Colon||LA47_50==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_50);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA47_10 = input.LA(1);

                         
                        int index47_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_10==Colon||LA47_10==QuestionMark) ) {s = 9;}

                        else if ( (LA47_10==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_10);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA47_51 = input.LA(1);

                         
                        int index47_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_51==Colon||LA47_51==QuestionMark) ) {s = 9;}

                        else if ( (LA47_51==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_51);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA47_11 = input.LA(1);

                         
                        int index47_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_11==Colon||LA47_11==QuestionMark) ) {s = 9;}

                        else if ( (LA47_11==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_11);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA47_52 = input.LA(1);

                         
                        int index47_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_52==Colon||LA47_52==QuestionMark) ) {s = 9;}

                        else if ( (LA47_52==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_52);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA47_12 = input.LA(1);

                         
                        int index47_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_12==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_12==Colon||LA47_12==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_12);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA47_53 = input.LA(1);

                         
                        int index47_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_53==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_53==Colon||LA47_53==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_53);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA47_13 = input.LA(1);

                         
                        int index47_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_13==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_13==Colon||LA47_13==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_13);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA47_54 = input.LA(1);

                         
                        int index47_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_54==Any) && (synpred5_InternalTypesParser())) {s = 84;}

                        else if ( (LA47_54==Undefined) && (synpred5_InternalTypesParser())) {s = 85;}

                        else if ( (LA47_54==Object) && (synpred5_InternalTypesParser())) {s = 86;}

                        else if ( (LA47_54==VirtualBase) && (synpred5_InternalTypesParser())) {s = 87;}

                        else if ( (LA47_54==Primitive) && (synpred5_InternalTypesParser())) {s = 88;}

                        else if ( (LA47_54==AutoboxedType) && (synpred5_InternalTypesParser())) {s = 89;}

                        else if ( (LA47_54==AssignmnentCompatible) && (synpred5_InternalTypesParser())) {s = 90;}

                        else if ( (LA47_54==RULE_IDENTIFIER) && (synpred5_InternalTypesParser())) {s = 91;}

                        else if ( (LA47_54==Break) && (synpred5_InternalTypesParser())) {s = 92;}

                        else if ( (LA47_54==Case) && (synpred5_InternalTypesParser())) {s = 93;}

                        else if ( (LA47_54==Catch) && (synpred5_InternalTypesParser())) {s = 94;}

                        else if ( (LA47_54==Class) && (synpred5_InternalTypesParser())) {s = 95;}

                        else if ( (LA47_54==Const) && (synpred5_InternalTypesParser())) {s = 96;}

                        else if ( (LA47_54==Continue) && (synpred5_InternalTypesParser())) {s = 97;}

                        else if ( (LA47_54==Debugger) && (synpred5_InternalTypesParser())) {s = 98;}

                        else if ( (LA47_54==Default) && (synpred5_InternalTypesParser())) {s = 99;}

                        else if ( (LA47_54==Delete) && (synpred5_InternalTypesParser())) {s = 100;}

                        else if ( (LA47_54==Do) && (synpred5_InternalTypesParser())) {s = 101;}

                        else if ( (LA47_54==Else) && (synpred5_InternalTypesParser())) {s = 102;}

                        else if ( (LA47_54==Export) && (synpred5_InternalTypesParser())) {s = 103;}

                        else if ( (LA47_54==Extends) && (synpred5_InternalTypesParser())) {s = 104;}

                        else if ( (LA47_54==Finally) && (synpred5_InternalTypesParser())) {s = 105;}

                        else if ( (LA47_54==For) && (synpred5_InternalTypesParser())) {s = 106;}

                        else if ( (LA47_54==Function) && (synpred5_InternalTypesParser())) {s = 107;}

                        else if ( (LA47_54==If) && (synpred5_InternalTypesParser())) {s = 108;}

                        else if ( (LA47_54==Import) && (synpred5_InternalTypesParser())) {s = 109;}

                        else if ( (LA47_54==In) && (synpred5_InternalTypesParser())) {s = 110;}

                        else if ( (LA47_54==Instanceof) && (synpred5_InternalTypesParser())) {s = 111;}

                        else if ( (LA47_54==New) && (synpred5_InternalTypesParser())) {s = 112;}

                        else if ( (LA47_54==Return) && (synpred5_InternalTypesParser())) {s = 113;}

                        else if ( (LA47_54==Super) && (synpred5_InternalTypesParser())) {s = 114;}

                        else if ( (LA47_54==Switch) && (synpred5_InternalTypesParser())) {s = 115;}

                        else if ( (LA47_54==This_1) && (synpred5_InternalTypesParser())) {s = 116;}

                        else if ( (LA47_54==Throw) && (synpred5_InternalTypesParser())) {s = 117;}

                        else if ( (LA47_54==Try) && (synpred5_InternalTypesParser())) {s = 118;}

                        else if ( (LA47_54==Typeof) && (synpred5_InternalTypesParser())) {s = 119;}

                        else if ( (LA47_54==Var) && (synpred5_InternalTypesParser())) {s = 120;}

                        else if ( (LA47_54==Void) && (synpred5_InternalTypesParser())) {s = 121;}

                        else if ( (LA47_54==While) && (synpred5_InternalTypesParser())) {s = 122;}

                        else if ( (LA47_54==With) && (synpred5_InternalTypesParser())) {s = 123;}

                        else if ( (LA47_54==Yield) && (synpred5_InternalTypesParser())) {s = 124;}

                        else if ( (LA47_54==Null) && (synpred5_InternalTypesParser())) {s = 125;}

                        else if ( (LA47_54==True) && (synpred5_InternalTypesParser())) {s = 126;}

                        else if ( (LA47_54==False) && (synpred5_InternalTypesParser())) {s = 127;}

                        else if ( (LA47_54==Enum) && (synpred5_InternalTypesParser())) {s = 128;}

                        else if ( (LA47_54==Get) && (synpred5_InternalTypesParser())) {s = 129;}

                        else if ( (LA47_54==Set) && (synpred5_InternalTypesParser())) {s = 130;}

                        else if ( (LA47_54==Let) && (synpred5_InternalTypesParser())) {s = 131;}

                        else if ( (LA47_54==Project) && (synpred5_InternalTypesParser())) {s = 132;}

                        else if ( (LA47_54==External) && (synpred5_InternalTypesParser())) {s = 133;}

                        else if ( (LA47_54==Abstract) && (synpred5_InternalTypesParser())) {s = 134;}

                        else if ( (LA47_54==Static) && (synpred5_InternalTypesParser())) {s = 135;}

                        else if ( (LA47_54==As) && (synpred5_InternalTypesParser())) {s = 136;}

                        else if ( (LA47_54==From) && (synpred5_InternalTypesParser())) {s = 137;}

                        else if ( (LA47_54==Constructor) && (synpred5_InternalTypesParser())) {s = 138;}

                        else if ( (LA47_54==Of) && (synpred5_InternalTypesParser())) {s = 139;}

                        else if ( (LA47_54==Target) && (synpred5_InternalTypesParser())) {s = 140;}

                        else if ( (LA47_54==Type) && (synpred5_InternalTypesParser())) {s = 141;}

                        else if ( (LA47_54==Union) && (synpred5_InternalTypesParser())) {s = 142;}

                        else if ( (LA47_54==Intersection) && (synpred5_InternalTypesParser())) {s = 143;}

                        else if ( (LA47_54==This) && (synpred5_InternalTypesParser())) {s = 144;}

                        else if ( (LA47_54==Promisify) && (synpred5_InternalTypesParser())) {s = 145;}

                        else if ( (LA47_54==Await) && (synpred5_InternalTypesParser())) {s = 146;}

                        else if ( (LA47_54==Async) && (synpred5_InternalTypesParser())) {s = 147;}

                        else if ( (LA47_54==Implements) && (synpred5_InternalTypesParser())) {s = 148;}

                        else if ( (LA47_54==Interface) && (synpred5_InternalTypesParser())) {s = 149;}

                        else if ( (LA47_54==Private) && (synpred5_InternalTypesParser())) {s = 150;}

                        else if ( (LA47_54==Protected) && (synpred5_InternalTypesParser())) {s = 151;}

                        else if ( (LA47_54==Public) && (synpred5_InternalTypesParser())) {s = 152;}

                        else if ( (LA47_54==Out) && (synpred5_InternalTypesParser())) {s = 153;}

                        else if ( (LA47_54==LeftSquareBracket) && (synpred5_InternalTypesParser())) {s = 154;}

                        else if ( (LA47_54==Colon||LA47_54==QuestionMark) ) {s = 9;}

                        else if ( (LA47_54==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_54);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA47_14 = input.LA(1);

                         
                        int index47_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_14==Colon||LA47_14==QuestionMark) ) {s = 9;}

                        else if ( (LA47_14==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_14);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA47_273 = input.LA(1);

                         
                        int index47_273 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_273==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_273==Any) && (synpred6_InternalTypesParser())) {s = 155;}

                        else if ( (LA47_273==Undefined) && (synpred6_InternalTypesParser())) {s = 156;}

                        else if ( (LA47_273==Object) && (synpred6_InternalTypesParser())) {s = 157;}

                        else if ( (LA47_273==VirtualBase) && (synpred6_InternalTypesParser())) {s = 158;}

                        else if ( (LA47_273==Primitive) && (synpred6_InternalTypesParser())) {s = 159;}

                        else if ( (LA47_273==AutoboxedType) && (synpred6_InternalTypesParser())) {s = 160;}

                        else if ( (LA47_273==AssignmnentCompatible) && (synpred6_InternalTypesParser())) {s = 161;}

                        else if ( (LA47_273==RULE_IDENTIFIER) && (synpred6_InternalTypesParser())) {s = 162;}

                        else if ( (LA47_273==Break) && (synpred6_InternalTypesParser())) {s = 163;}

                        else if ( (LA47_273==Case) && (synpred6_InternalTypesParser())) {s = 164;}

                        else if ( (LA47_273==Catch) && (synpred6_InternalTypesParser())) {s = 165;}

                        else if ( (LA47_273==Class) && (synpred6_InternalTypesParser())) {s = 166;}

                        else if ( (LA47_273==Const) && (synpred6_InternalTypesParser())) {s = 167;}

                        else if ( (LA47_273==Continue) && (synpred6_InternalTypesParser())) {s = 168;}

                        else if ( (LA47_273==Debugger) && (synpred6_InternalTypesParser())) {s = 169;}

                        else if ( (LA47_273==Default) && (synpred6_InternalTypesParser())) {s = 170;}

                        else if ( (LA47_273==Delete) && (synpred6_InternalTypesParser())) {s = 171;}

                        else if ( (LA47_273==Do) && (synpred6_InternalTypesParser())) {s = 172;}

                        else if ( (LA47_273==Else) && (synpred6_InternalTypesParser())) {s = 173;}

                        else if ( (LA47_273==Export) && (synpred6_InternalTypesParser())) {s = 174;}

                        else if ( (LA47_273==Extends) && (synpred6_InternalTypesParser())) {s = 175;}

                        else if ( (LA47_273==Finally) && (synpred6_InternalTypesParser())) {s = 176;}

                        else if ( (LA47_273==For) && (synpred6_InternalTypesParser())) {s = 177;}

                        else if ( (LA47_273==Function) && (synpred6_InternalTypesParser())) {s = 178;}

                        else if ( (LA47_273==If) && (synpred6_InternalTypesParser())) {s = 179;}

                        else if ( (LA47_273==Import) && (synpred6_InternalTypesParser())) {s = 180;}

                        else if ( (LA47_273==In) && (synpred6_InternalTypesParser())) {s = 181;}

                        else if ( (LA47_273==Instanceof) && (synpred6_InternalTypesParser())) {s = 182;}

                        else if ( (LA47_273==New) && (synpred6_InternalTypesParser())) {s = 183;}

                        else if ( (LA47_273==Return) && (synpred6_InternalTypesParser())) {s = 184;}

                        else if ( (LA47_273==Super) && (synpred6_InternalTypesParser())) {s = 185;}

                        else if ( (LA47_273==Switch) && (synpred6_InternalTypesParser())) {s = 186;}

                        else if ( (LA47_273==This_1) && (synpred6_InternalTypesParser())) {s = 187;}

                        else if ( (LA47_273==Throw) && (synpred6_InternalTypesParser())) {s = 188;}

                        else if ( (LA47_273==Try) && (synpred6_InternalTypesParser())) {s = 189;}

                        else if ( (LA47_273==Typeof) && (synpred6_InternalTypesParser())) {s = 190;}

                        else if ( (LA47_273==Var) && (synpred6_InternalTypesParser())) {s = 191;}

                        else if ( (LA47_273==Void) && (synpred6_InternalTypesParser())) {s = 192;}

                        else if ( (LA47_273==While) && (synpred6_InternalTypesParser())) {s = 193;}

                        else if ( (LA47_273==With) && (synpred6_InternalTypesParser())) {s = 194;}

                        else if ( (LA47_273==Yield) && (synpred6_InternalTypesParser())) {s = 195;}

                        else if ( (LA47_273==Null) && (synpred6_InternalTypesParser())) {s = 196;}

                        else if ( (LA47_273==True) && (synpred6_InternalTypesParser())) {s = 197;}

                        else if ( (LA47_273==False) && (synpred6_InternalTypesParser())) {s = 198;}

                        else if ( (LA47_273==Enum) && (synpred6_InternalTypesParser())) {s = 199;}

                        else if ( (LA47_273==Get) && (synpred6_InternalTypesParser())) {s = 200;}

                        else if ( (LA47_273==Set) && (synpred6_InternalTypesParser())) {s = 201;}

                        else if ( (LA47_273==Let) && (synpred6_InternalTypesParser())) {s = 202;}

                        else if ( (LA47_273==Project) && (synpred6_InternalTypesParser())) {s = 203;}

                        else if ( (LA47_273==External) && (synpred6_InternalTypesParser())) {s = 204;}

                        else if ( (LA47_273==Abstract) && (synpred6_InternalTypesParser())) {s = 205;}

                        else if ( (LA47_273==Static) && (synpred6_InternalTypesParser())) {s = 206;}

                        else if ( (LA47_273==As) && (synpred6_InternalTypesParser())) {s = 207;}

                        else if ( (LA47_273==From) && (synpred6_InternalTypesParser())) {s = 208;}

                        else if ( (LA47_273==Constructor) && (synpred6_InternalTypesParser())) {s = 209;}

                        else if ( (LA47_273==Of) && (synpred6_InternalTypesParser())) {s = 210;}

                        else if ( (LA47_273==Target) && (synpred6_InternalTypesParser())) {s = 211;}

                        else if ( (LA47_273==Type) && (synpred6_InternalTypesParser())) {s = 212;}

                        else if ( (LA47_273==Union) && (synpred6_InternalTypesParser())) {s = 213;}

                        else if ( (LA47_273==Intersection) && (synpred6_InternalTypesParser())) {s = 214;}

                        else if ( (LA47_273==This) && (synpred6_InternalTypesParser())) {s = 215;}

                        else if ( (LA47_273==Promisify) && (synpred6_InternalTypesParser())) {s = 216;}

                        else if ( (LA47_273==Await) && (synpred6_InternalTypesParser())) {s = 217;}

                        else if ( (LA47_273==Async) && (synpred6_InternalTypesParser())) {s = 218;}

                        else if ( (LA47_273==Implements) && (synpred6_InternalTypesParser())) {s = 219;}

                        else if ( (LA47_273==Interface) && (synpred6_InternalTypesParser())) {s = 220;}

                        else if ( (LA47_273==Private) && (synpred6_InternalTypesParser())) {s = 221;}

                        else if ( (LA47_273==Protected) && (synpred6_InternalTypesParser())) {s = 222;}

                        else if ( (LA47_273==Public) && (synpred6_InternalTypesParser())) {s = 223;}

                        else if ( (LA47_273==Out) && (synpred6_InternalTypesParser())) {s = 224;}

                        else if ( (LA47_273==LeftSquareBracket) && (synpred6_InternalTypesParser())) {s = 225;}

                         
                        input.seek(index47_273);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA47_15 = input.LA(1);

                         
                        int index47_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_15==Colon||LA47_15==QuestionMark) ) {s = 9;}

                        else if ( (LA47_15==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_15);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA47_16 = input.LA(1);

                         
                        int index47_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_16==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_16==Colon||LA47_16==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_16);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA47_272 = input.LA(1);

                         
                        int index47_272 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_272==Any) && (synpred5_InternalTypesParser())) {s = 84;}

                        else if ( (LA47_272==Undefined) && (synpred5_InternalTypesParser())) {s = 85;}

                        else if ( (LA47_272==Object) && (synpred5_InternalTypesParser())) {s = 86;}

                        else if ( (LA47_272==VirtualBase) && (synpred5_InternalTypesParser())) {s = 87;}

                        else if ( (LA47_272==Primitive) && (synpred5_InternalTypesParser())) {s = 88;}

                        else if ( (LA47_272==AutoboxedType) && (synpred5_InternalTypesParser())) {s = 89;}

                        else if ( (LA47_272==AssignmnentCompatible) && (synpred5_InternalTypesParser())) {s = 90;}

                        else if ( (LA47_272==RULE_IDENTIFIER) && (synpred5_InternalTypesParser())) {s = 91;}

                        else if ( (LA47_272==Break) && (synpred5_InternalTypesParser())) {s = 92;}

                        else if ( (LA47_272==Case) && (synpred5_InternalTypesParser())) {s = 93;}

                        else if ( (LA47_272==Catch) && (synpred5_InternalTypesParser())) {s = 94;}

                        else if ( (LA47_272==Class) && (synpred5_InternalTypesParser())) {s = 95;}

                        else if ( (LA47_272==Const) && (synpred5_InternalTypesParser())) {s = 96;}

                        else if ( (LA47_272==Continue) && (synpred5_InternalTypesParser())) {s = 97;}

                        else if ( (LA47_272==Debugger) && (synpred5_InternalTypesParser())) {s = 98;}

                        else if ( (LA47_272==Default) && (synpred5_InternalTypesParser())) {s = 99;}

                        else if ( (LA47_272==Delete) && (synpred5_InternalTypesParser())) {s = 100;}

                        else if ( (LA47_272==Do) && (synpred5_InternalTypesParser())) {s = 101;}

                        else if ( (LA47_272==Else) && (synpred5_InternalTypesParser())) {s = 102;}

                        else if ( (LA47_272==Export) && (synpred5_InternalTypesParser())) {s = 103;}

                        else if ( (LA47_272==Extends) && (synpred5_InternalTypesParser())) {s = 104;}

                        else if ( (LA47_272==Finally) && (synpred5_InternalTypesParser())) {s = 105;}

                        else if ( (LA47_272==For) && (synpred5_InternalTypesParser())) {s = 106;}

                        else if ( (LA47_272==Function) && (synpred5_InternalTypesParser())) {s = 107;}

                        else if ( (LA47_272==If) && (synpred5_InternalTypesParser())) {s = 108;}

                        else if ( (LA47_272==Import) && (synpred5_InternalTypesParser())) {s = 109;}

                        else if ( (LA47_272==In) && (synpred5_InternalTypesParser())) {s = 110;}

                        else if ( (LA47_272==Instanceof) && (synpred5_InternalTypesParser())) {s = 111;}

                        else if ( (LA47_272==New) && (synpred5_InternalTypesParser())) {s = 112;}

                        else if ( (LA47_272==Return) && (synpred5_InternalTypesParser())) {s = 113;}

                        else if ( (LA47_272==Super) && (synpred5_InternalTypesParser())) {s = 114;}

                        else if ( (LA47_272==Switch) && (synpred5_InternalTypesParser())) {s = 115;}

                        else if ( (LA47_272==This_1) && (synpred5_InternalTypesParser())) {s = 116;}

                        else if ( (LA47_272==Throw) && (synpred5_InternalTypesParser())) {s = 117;}

                        else if ( (LA47_272==Try) && (synpred5_InternalTypesParser())) {s = 118;}

                        else if ( (LA47_272==Typeof) && (synpred5_InternalTypesParser())) {s = 119;}

                        else if ( (LA47_272==Var) && (synpred5_InternalTypesParser())) {s = 120;}

                        else if ( (LA47_272==Void) && (synpred5_InternalTypesParser())) {s = 121;}

                        else if ( (LA47_272==While) && (synpred5_InternalTypesParser())) {s = 122;}

                        else if ( (LA47_272==With) && (synpred5_InternalTypesParser())) {s = 123;}

                        else if ( (LA47_272==Yield) && (synpred5_InternalTypesParser())) {s = 124;}

                        else if ( (LA47_272==Null) && (synpred5_InternalTypesParser())) {s = 125;}

                        else if ( (LA47_272==True) && (synpred5_InternalTypesParser())) {s = 126;}

                        else if ( (LA47_272==False) && (synpred5_InternalTypesParser())) {s = 127;}

                        else if ( (LA47_272==Enum) && (synpred5_InternalTypesParser())) {s = 128;}

                        else if ( (LA47_272==Get) && (synpred5_InternalTypesParser())) {s = 129;}

                        else if ( (LA47_272==Set) && (synpred5_InternalTypesParser())) {s = 130;}

                        else if ( (LA47_272==Let) && (synpred5_InternalTypesParser())) {s = 131;}

                        else if ( (LA47_272==Project) && (synpred5_InternalTypesParser())) {s = 132;}

                        else if ( (LA47_272==External) && (synpred5_InternalTypesParser())) {s = 133;}

                        else if ( (LA47_272==Abstract) && (synpred5_InternalTypesParser())) {s = 134;}

                        else if ( (LA47_272==Static) && (synpred5_InternalTypesParser())) {s = 135;}

                        else if ( (LA47_272==As) && (synpred5_InternalTypesParser())) {s = 136;}

                        else if ( (LA47_272==From) && (synpred5_InternalTypesParser())) {s = 137;}

                        else if ( (LA47_272==Constructor) && (synpred5_InternalTypesParser())) {s = 138;}

                        else if ( (LA47_272==Of) && (synpred5_InternalTypesParser())) {s = 139;}

                        else if ( (LA47_272==Target) && (synpred5_InternalTypesParser())) {s = 140;}

                        else if ( (LA47_272==Type) && (synpred5_InternalTypesParser())) {s = 141;}

                        else if ( (LA47_272==Union) && (synpred5_InternalTypesParser())) {s = 142;}

                        else if ( (LA47_272==Intersection) && (synpred5_InternalTypesParser())) {s = 143;}

                        else if ( (LA47_272==This) && (synpred5_InternalTypesParser())) {s = 144;}

                        else if ( (LA47_272==Promisify) && (synpred5_InternalTypesParser())) {s = 145;}

                        else if ( (LA47_272==Await) && (synpred5_InternalTypesParser())) {s = 146;}

                        else if ( (LA47_272==Async) && (synpred5_InternalTypesParser())) {s = 147;}

                        else if ( (LA47_272==Implements) && (synpred5_InternalTypesParser())) {s = 148;}

                        else if ( (LA47_272==Interface) && (synpred5_InternalTypesParser())) {s = 149;}

                        else if ( (LA47_272==Private) && (synpred5_InternalTypesParser())) {s = 150;}

                        else if ( (LA47_272==Protected) && (synpred5_InternalTypesParser())) {s = 151;}

                        else if ( (LA47_272==Public) && (synpred5_InternalTypesParser())) {s = 152;}

                        else if ( (LA47_272==Out) && (synpred5_InternalTypesParser())) {s = 153;}

                        else if ( (LA47_272==LeftSquareBracket) && (synpred5_InternalTypesParser())) {s = 154;}

                        else if ( (LA47_272==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index47_272);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA47_17 = input.LA(1);

                         
                        int index47_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_17==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_17==Colon||LA47_17==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_17);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA47_59 = input.LA(1);

                         
                        int index47_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_59==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_59==Async) && (synpred7_InternalTypesParser())) {s = 226;}

                        else if ( (LA47_59==LessThanSign) && (synpred7_InternalTypesParser())) {s = 79;}

                        else if ( (LA47_59==Any) && (synpred7_InternalTypesParser())) {s = 227;}

                        else if ( (LA47_59==Undefined) && (synpred7_InternalTypesParser())) {s = 228;}

                        else if ( (LA47_59==Object) && (synpred7_InternalTypesParser())) {s = 229;}

                        else if ( (LA47_59==VirtualBase) && (synpred7_InternalTypesParser())) {s = 230;}

                        else if ( (LA47_59==Primitive) && (synpred7_InternalTypesParser())) {s = 231;}

                        else if ( (LA47_59==AutoboxedType) && (synpred7_InternalTypesParser())) {s = 232;}

                        else if ( (LA47_59==AssignmnentCompatible) && (synpred7_InternalTypesParser())) {s = 233;}

                        else if ( (LA47_59==RULE_IDENTIFIER) && (synpred7_InternalTypesParser())) {s = 234;}

                        else if ( (LA47_59==Break) && (synpred7_InternalTypesParser())) {s = 235;}

                        else if ( (LA47_59==Case) && (synpred7_InternalTypesParser())) {s = 236;}

                        else if ( (LA47_59==Catch) && (synpred7_InternalTypesParser())) {s = 237;}

                        else if ( (LA47_59==Class) && (synpred7_InternalTypesParser())) {s = 238;}

                        else if ( (LA47_59==Const) && (synpred7_InternalTypesParser())) {s = 239;}

                        else if ( (LA47_59==Continue) && (synpred7_InternalTypesParser())) {s = 240;}

                        else if ( (LA47_59==Debugger) && (synpred7_InternalTypesParser())) {s = 241;}

                        else if ( (LA47_59==Default) && (synpred7_InternalTypesParser())) {s = 242;}

                        else if ( (LA47_59==Delete) && (synpred7_InternalTypesParser())) {s = 243;}

                        else if ( (LA47_59==Do) && (synpred7_InternalTypesParser())) {s = 244;}

                        else if ( (LA47_59==Else) && (synpred7_InternalTypesParser())) {s = 245;}

                        else if ( (LA47_59==Export) && (synpred7_InternalTypesParser())) {s = 246;}

                        else if ( (LA47_59==Extends) && (synpred7_InternalTypesParser())) {s = 247;}

                        else if ( (LA47_59==Finally) && (synpred7_InternalTypesParser())) {s = 248;}

                        else if ( (LA47_59==For) && (synpred7_InternalTypesParser())) {s = 249;}

                        else if ( (LA47_59==Function) && (synpred7_InternalTypesParser())) {s = 250;}

                        else if ( (LA47_59==If) && (synpred7_InternalTypesParser())) {s = 251;}

                        else if ( (LA47_59==Import) && (synpred7_InternalTypesParser())) {s = 252;}

                        else if ( (LA47_59==In) && (synpred7_InternalTypesParser())) {s = 253;}

                        else if ( (LA47_59==Instanceof) && (synpred7_InternalTypesParser())) {s = 254;}

                        else if ( (LA47_59==New) && (synpred7_InternalTypesParser())) {s = 255;}

                        else if ( (LA47_59==Return) && (synpred7_InternalTypesParser())) {s = 256;}

                        else if ( (LA47_59==Super) && (synpred7_InternalTypesParser())) {s = 257;}

                        else if ( (LA47_59==Switch) && (synpred7_InternalTypesParser())) {s = 258;}

                        else if ( (LA47_59==This_1) && (synpred7_InternalTypesParser())) {s = 259;}

                        else if ( (LA47_59==Throw) && (synpred7_InternalTypesParser())) {s = 260;}

                        else if ( (LA47_59==Try) && (synpred7_InternalTypesParser())) {s = 261;}

                        else if ( (LA47_59==Typeof) && (synpred7_InternalTypesParser())) {s = 262;}

                        else if ( (LA47_59==Var) && (synpred7_InternalTypesParser())) {s = 263;}

                        else if ( (LA47_59==Void) && (synpred7_InternalTypesParser())) {s = 264;}

                        else if ( (LA47_59==While) && (synpred7_InternalTypesParser())) {s = 265;}

                        else if ( (LA47_59==With) && (synpred7_InternalTypesParser())) {s = 266;}

                        else if ( (LA47_59==Yield) && (synpred7_InternalTypesParser())) {s = 267;}

                        else if ( (LA47_59==Null) && (synpred7_InternalTypesParser())) {s = 268;}

                        else if ( (LA47_59==True) && (synpred7_InternalTypesParser())) {s = 269;}

                        else if ( (LA47_59==False) && (synpred7_InternalTypesParser())) {s = 270;}

                        else if ( (LA47_59==Enum) && (synpred7_InternalTypesParser())) {s = 271;}

                        else if ( (LA47_59==Get) ) {s = 272;}

                        else if ( (LA47_59==Set) ) {s = 273;}

                        else if ( (LA47_59==Let) && (synpred7_InternalTypesParser())) {s = 274;}

                        else if ( (LA47_59==Project) && (synpred7_InternalTypesParser())) {s = 275;}

                        else if ( (LA47_59==External) && (synpred7_InternalTypesParser())) {s = 276;}

                        else if ( (LA47_59==Abstract) && (synpred7_InternalTypesParser())) {s = 277;}

                        else if ( (LA47_59==Static) && (synpred7_InternalTypesParser())) {s = 278;}

                        else if ( (LA47_59==As) && (synpred7_InternalTypesParser())) {s = 279;}

                        else if ( (LA47_59==From) && (synpred7_InternalTypesParser())) {s = 280;}

                        else if ( (LA47_59==Constructor) && (synpred7_InternalTypesParser())) {s = 281;}

                        else if ( (LA47_59==Of) && (synpred7_InternalTypesParser())) {s = 282;}

                        else if ( (LA47_59==Target) && (synpred7_InternalTypesParser())) {s = 283;}

                        else if ( (LA47_59==Type) && (synpred7_InternalTypesParser())) {s = 284;}

                        else if ( (LA47_59==Union) && (synpred7_InternalTypesParser())) {s = 285;}

                        else if ( (LA47_59==Intersection) && (synpred7_InternalTypesParser())) {s = 286;}

                        else if ( (LA47_59==This) && (synpred7_InternalTypesParser())) {s = 287;}

                        else if ( (LA47_59==Promisify) && (synpred7_InternalTypesParser())) {s = 288;}

                        else if ( (LA47_59==Await) && (synpred7_InternalTypesParser())) {s = 289;}

                        else if ( (LA47_59==Implements) && (synpred7_InternalTypesParser())) {s = 290;}

                        else if ( (LA47_59==Interface) && (synpred7_InternalTypesParser())) {s = 291;}

                        else if ( (LA47_59==Private) && (synpred7_InternalTypesParser())) {s = 292;}

                        else if ( (LA47_59==Protected) && (synpred7_InternalTypesParser())) {s = 293;}

                        else if ( (LA47_59==Public) && (synpred7_InternalTypesParser())) {s = 294;}

                        else if ( (LA47_59==Out) && (synpred7_InternalTypesParser())) {s = 295;}

                        else if ( (LA47_59==LeftSquareBracket) && (synpred7_InternalTypesParser())) {s = 296;}

                        else if ( (LA47_59==Colon||LA47_59==QuestionMark) ) {s = 9;}

                         
                        input.seek(index47_59);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA47_7 = input.LA(1);

                         
                        int index47_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_7==LeftParenthesis) && (synpred7_InternalTypesParser())) {s = 80;}

                        else if ( (LA47_7==Get) ) {s = 54;}

                        else if ( (LA47_7==Any) ) {s = 10;}

                        else if ( (LA47_7==Undefined) ) {s = 11;}

                        else if ( (LA47_7==Object) ) {s = 12;}

                        else if ( (LA47_7==VirtualBase) ) {s = 13;}

                        else if ( (LA47_7==Primitive) ) {s = 14;}

                        else if ( (LA47_7==AutoboxedType) ) {s = 15;}

                        else if ( (LA47_7==AssignmnentCompatible) ) {s = 16;}

                        else if ( (LA47_7==RULE_IDENTIFIER) ) {s = 17;}

                        else if ( (LA47_7==Break) ) {s = 18;}

                        else if ( (LA47_7==Case) ) {s = 19;}

                        else if ( (LA47_7==Catch) ) {s = 20;}

                        else if ( (LA47_7==Class) ) {s = 21;}

                        else if ( (LA47_7==Const) ) {s = 81;}

                        else if ( (LA47_7==Continue) ) {s = 22;}

                        else if ( (LA47_7==Debugger) ) {s = 23;}

                        else if ( (LA47_7==Default) ) {s = 24;}

                        else if ( (LA47_7==Delete) ) {s = 25;}

                        else if ( (LA47_7==Do) ) {s = 26;}

                        else if ( (LA47_7==Else) ) {s = 27;}

                        else if ( (LA47_7==Export) ) {s = 28;}

                        else if ( (LA47_7==Extends) ) {s = 29;}

                        else if ( (LA47_7==Finally) ) {s = 30;}

                        else if ( (LA47_7==For) ) {s = 31;}

                        else if ( (LA47_7==Function) ) {s = 32;}

                        else if ( (LA47_7==If) ) {s = 33;}

                        else if ( (LA47_7==Import) ) {s = 34;}

                        else if ( (LA47_7==In) ) {s = 35;}

                        else if ( (LA47_7==Instanceof) ) {s = 36;}

                        else if ( (LA47_7==New) ) {s = 37;}

                        else if ( (LA47_7==Return) ) {s = 38;}

                        else if ( (LA47_7==Super) ) {s = 39;}

                        else if ( (LA47_7==Switch) ) {s = 40;}

                        else if ( (LA47_7==This_1) ) {s = 41;}

                        else if ( (LA47_7==Throw) ) {s = 42;}

                        else if ( (LA47_7==Try) ) {s = 43;}

                        else if ( (LA47_7==Typeof) ) {s = 44;}

                        else if ( (LA47_7==Var) ) {s = 45;}

                        else if ( (LA47_7==Void) ) {s = 46;}

                        else if ( (LA47_7==While) ) {s = 47;}

                        else if ( (LA47_7==With) ) {s = 48;}

                        else if ( (LA47_7==Yield) ) {s = 49;}

                        else if ( (LA47_7==Null) ) {s = 50;}

                        else if ( (LA47_7==True) ) {s = 51;}

                        else if ( (LA47_7==False) ) {s = 52;}

                        else if ( (LA47_7==Enum) ) {s = 53;}

                        else if ( (LA47_7==Set) ) {s = 55;}

                        else if ( (LA47_7==Let) ) {s = 56;}

                        else if ( (LA47_7==Project) ) {s = 57;}

                        else if ( (LA47_7==External) ) {s = 58;}

                        else if ( (LA47_7==Abstract) ) {s = 82;}

                        else if ( (LA47_7==Static) ) {s = 83;}

                        else if ( (LA47_7==As) ) {s = 60;}

                        else if ( (LA47_7==From) ) {s = 61;}

                        else if ( (LA47_7==Constructor) ) {s = 62;}

                        else if ( (LA47_7==Of) ) {s = 63;}

                        else if ( (LA47_7==Target) ) {s = 64;}

                        else if ( (LA47_7==Type) ) {s = 65;}

                        else if ( (LA47_7==Union) ) {s = 66;}

                        else if ( (LA47_7==Intersection) ) {s = 67;}

                        else if ( (LA47_7==This) ) {s = 68;}

                        else if ( (LA47_7==Promisify) ) {s = 69;}

                        else if ( (LA47_7==Await) ) {s = 70;}

                        else if ( (LA47_7==Async) ) {s = 71;}

                        else if ( (LA47_7==Implements) ) {s = 72;}

                        else if ( (LA47_7==Interface) ) {s = 73;}

                        else if ( (LA47_7==Private) ) {s = 74;}

                        else if ( (LA47_7==Protected) ) {s = 75;}

                        else if ( (LA47_7==Public) ) {s = 76;}

                        else if ( (LA47_7==Out) ) {s = 77;}

                        else if ( (LA47_7==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA47_7==Colon||LA47_7==QuestionMark) ) {s = 9;}

                        else if ( (LA47_7==LessThanSign) && (synpred7_InternalTypesParser())) {s = 79;}

                         
                        input.seek(index47_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 47, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_13s = "\36\uffff";
    static final String dfa_14s = "\1\11\14\uffff\1\0\20\uffff";
    static final String dfa_15s = "\1\166\14\uffff\1\0\20\uffff";
    static final String dfa_16s = "\1\uffff\1\1\14\uffff\1\3\1\4\14\uffff\1\2\1\5";
    static final String dfa_17s = "\15\uffff\1\0\20\uffff}>";
    static final String[] dfa_18s = {
            "\2\17\7\uffff\1\17\10\uffff\1\17\22\uffff\1\1\3\uffff\1\17\7\uffff\2\17\1\1\2\17\2\uffff\1\17\17\uffff\1\15\1\uffff\1\1\1\uffff\1\1\11\uffff\1\16\1\uffff\1\17\1\uffff\1\17\3\uffff\1\17\1\uffff\1\1\2\uffff\1\1\1\uffff\5\1\3\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[][] dfa_18 = unpackEncodedStringArray(dfa_18s);

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "3553:2: (this_LiteralTypeRef_0= ruleLiteralTypeRef | ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=>this_ArrowFunctionTypeExpression_1= ruleArrowFunctionTypeExpression ) | this_ArrayNTypeExpression_2= ruleArrayNTypeExpression | this_TypeRefWithModifiers_3= ruleTypeRefWithModifiers | (otherlv_4= LeftParenthesis this_TypeRef_5= ruleTypeRef otherlv_6= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_13 = input.LA(1);

                         
                        int index71_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_InternalTypesParser()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index71_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_19s = "\1\uffff\1\34\34\uffff";
    static final String dfa_20s = "\1\11\1\122\12\uffff\1\130\2\uffff\3\130\14\uffff";
    static final String dfa_21s = "\1\147\1\u0088\12\uffff\1\141\2\uffff\3\141\14\uffff";
    static final String dfa_22s = "\2\uffff\12\1\1\uffff\2\1\3\uffff\12\1\1\2\1\1";
    static final String dfa_23s = "\1\3\1\2\12\uffff\1\0\2\uffff\1\4\1\1\1\5\14\uffff}>";
    static final String[] dfa_24s = {
            "\1\21\1\14\1\uffff\1\26\1\uffff\1\23\1\27\1\uffff\1\31\1\34\1\10\2\uffff\1\7\4\uffff\1\34\1\30\1\6\4\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\10\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\2\34\1\uffff\1\17\1\34\2\uffff\1\34\1\uffff\1\3\1\5\1\uffff\1\33\1\4\3\uffff\1\12\3\uffff\1\15\21\uffff\1\34\1\uffff\1\34\3\uffff\1\1",
            "\3\34\2\uffff\1\34\1\35\1\uffff\2\34\1\uffff\1\34\52\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\10\uffff\1\34",
            "",
            "",
            "\1\35\10\uffff\1\34",
            "\1\35\10\uffff\1\34",
            "\1\35\10\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[][] dfa_24 = unpackEncodedStringArray(dfa_24s);

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = dfa_13;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "4638:3: ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) ) | ( (lv_typeRef_3_0= ruleTypeRef ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA91_12 = input.LA(1);

                         
                        int index91_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA91_12==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA91_12==Colon) && (synpred20_InternalTypesParser())) {s = 29;}

                         
                        input.seek(index91_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA91_16 = input.LA(1);

                         
                        int index91_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA91_16==Colon) && (synpred20_InternalTypesParser())) {s = 29;}

                        else if ( (LA91_16==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index91_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA91_1 = input.LA(1);

                         
                        int index91_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA91_1==EOF||(LA91_1>=RightParenthesis && LA91_1<=Comma)||LA91_1==Solidus||(LA91_1>=LessThanSign && LA91_1<=EqualsSign)||LA91_1==QuestionMark||LA91_1==RULE_VERSION) ) {s = 28;}

                        else if ( (LA91_1==Colon) && (synpred20_InternalTypesParser())) {s = 29;}

                         
                        input.seek(index91_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA91_0 = input.LA(1);

                         
                        int index91_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA91_0==RULE_IDENTIFIER) ) {s = 1;}

                        else if ( (LA91_0==Yield) && (synpred20_InternalTypesParser())) {s = 2;}

                        else if ( (LA91_0==Get) && (synpred20_InternalTypesParser())) {s = 3;}

                        else if ( (LA91_0==Set) && (synpred20_InternalTypesParser())) {s = 4;}

                        else if ( (LA91_0==Let) && (synpred20_InternalTypesParser())) {s = 5;}

                        else if ( (LA91_0==Project) && (synpred20_InternalTypesParser())) {s = 6;}

                        else if ( (LA91_0==External) && (synpred20_InternalTypesParser())) {s = 7;}

                        else if ( (LA91_0==Abstract) && (synpred20_InternalTypesParser())) {s = 8;}

                        else if ( (LA91_0==Static) && (synpred20_InternalTypesParser())) {s = 9;}

                        else if ( (LA91_0==As) && (synpred20_InternalTypesParser())) {s = 10;}

                        else if ( (LA91_0==From) && (synpred20_InternalTypesParser())) {s = 11;}

                        else if ( (LA91_0==Constructor) ) {s = 12;}

                        else if ( (LA91_0==Of) && (synpred20_InternalTypesParser())) {s = 13;}

                        else if ( (LA91_0==Target) && (synpred20_InternalTypesParser())) {s = 14;}

                        else if ( (LA91_0==Type) ) {s = 15;}

                        else if ( (LA91_0==Union) ) {s = 16;}

                        else if ( (LA91_0==Intersection) ) {s = 17;}

                        else if ( (LA91_0==This) && (synpred20_InternalTypesParser())) {s = 18;}

                        else if ( (LA91_0==Promisify) && (synpred20_InternalTypesParser())) {s = 19;}

                        else if ( (LA91_0==Await) && (synpred20_InternalTypesParser())) {s = 20;}

                        else if ( (LA91_0==Async) && (synpred20_InternalTypesParser())) {s = 21;}

                        else if ( (LA91_0==Implements) && (synpred20_InternalTypesParser())) {s = 22;}

                        else if ( (LA91_0==Interface) && (synpred20_InternalTypesParser())) {s = 23;}

                        else if ( (LA91_0==Private) && (synpred20_InternalTypesParser())) {s = 24;}

                        else if ( (LA91_0==Protected) && (synpred20_InternalTypesParser())) {s = 25;}

                        else if ( (LA91_0==Public) && (synpred20_InternalTypesParser())) {s = 26;}

                        else if ( (LA91_0==Out) && (synpred20_InternalTypesParser())) {s = 27;}

                        else if ( (LA91_0==Undefined||LA91_0==Indexed||(LA91_0>=Null && LA91_0<=This_1)||LA91_0==Void||LA91_0==Any||LA91_0==LeftCurlyBracket||LA91_0==Tilde) ) {s = 28;}

                         
                        input.seek(index91_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA91_15 = input.LA(1);

                         
                        int index91_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA91_15==Colon) && (synpred20_InternalTypesParser())) {s = 29;}

                        else if ( (LA91_15==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index91_15);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA91_17 = input.LA(1);

                         
                        int index91_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA91_17==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA91_17==Colon) && (synpred20_InternalTypesParser())) {s = 29;}

                         
                        input.seek(index91_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 91, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_25s = "\13\uffff";
    static final String dfa_26s = "\1\uffff\6\7\3\uffff\1\7";
    static final String dfa_27s = "\1\22\6\5\2\uffff\1\147\1\5";
    static final String dfa_28s = "\1\147\6\u0088\2\uffff\1\147\1\u0088";
    static final String dfa_29s = "\7\uffff\1\1\1\2\2\uffff";
    static final String dfa_30s = "\13\uffff}>";
    static final String[] dfa_31s = {
            "\1\3\10\uffff\1\5\36\uffff\1\4\3\uffff\1\1\2\uffff\1\2\45\uffff\1\6",
            "\1\7\1\uffff\1\7\1\uffff\30\7\1\uffff\15\7\1\uffff\20\7\1\uffff\11\7\1\uffff\5\7\1\uffff\4\7\4\uffff\12\7\4\uffff\1\7\40\uffff\1\10",
            "\1\7\1\uffff\1\7\1\uffff\30\7\1\uffff\15\7\1\uffff\20\7\1\uffff\11\7\1\uffff\5\7\1\uffff\4\7\4\uffff\12\7\4\uffff\1\7\40\uffff\1\10",
            "\1\7\1\uffff\1\7\1\uffff\30\7\1\uffff\15\7\1\uffff\20\7\1\uffff\11\7\1\uffff\5\7\1\uffff\4\7\4\uffff\12\7\4\uffff\1\7\40\uffff\1\10",
            "\1\7\1\uffff\1\7\1\uffff\30\7\1\uffff\15\7\1\uffff\20\7\1\uffff\11\7\1\uffff\5\7\1\uffff\4\7\4\uffff\12\7\4\uffff\1\7\40\uffff\1\10",
            "\1\7\1\uffff\1\7\1\uffff\30\7\1\uffff\15\7\1\uffff\20\7\1\uffff\11\7\1\uffff\5\7\1\uffff\4\7\4\uffff\12\7\4\uffff\1\7\40\uffff\1\10",
            "\1\7\1\uffff\1\7\1\uffff\30\7\1\uffff\15\7\1\uffff\20\7\1\uffff\11\7\1\uffff\5\7\1\uffff\4\7\2\uffff\1\11\1\uffff\12\7\4\uffff\1\7\40\uffff\1\10",
            "",
            "",
            "\1\12",
            "\1\7\1\uffff\1\7\1\uffff\30\7\1\uffff\15\7\1\uffff\20\7\1\uffff\11\7\1\uffff\5\7\1\uffff\4\7\2\uffff\1\11\1\uffff\12\7\4\uffff\1\7\40\uffff\1\10"
    };

    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[][] dfa_31 = unpackEncodedStringArray(dfa_31s);

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = dfa_25;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "5056:3: (this_TypeReference_0= ruleTypeReference[$current] | ( () this_TypeReference_2= ruleTypeReference[$current] this_VersionRequest_3= ruleVersionRequest[$current] ) )";
        }
    }
    static final String dfa_32s = "\57\uffff";
    static final String dfa_33s = "\1\2\56\uffff";
    static final String dfa_34s = "\1\5\1\11\11\uffff\1\31\11\uffff\1\11\1\0\13\uffff\1\31\14\uffff";
    static final String dfa_35s = "\2\147\11\uffff\1\u0088\11\uffff\1\147\1\0\13\uffff\1\u0088\14\uffff";
    static final String dfa_36s = "\2\uffff\1\2\10\1\1\uffff\11\1\2\uffff\13\1\1\uffff\14\1";
    static final String dfa_37s = "\1\uffff\1\4\11\uffff\1\2\11\uffff\1\0\1\1\13\uffff\1\3\14\uffff}>";
    static final String[] dfa_38s = {
            "\1\2\1\uffff\1\2\1\uffff\30\2\1\uffff\15\2\1\uffff\20\2\1\uffff\11\2\1\uffff\5\2\1\uffff\4\2\4\uffff\1\2\1\1\10\2\4\uffff\1\2",
            "\1\22\1\17\7\uffff\1\10\10\uffff\1\12\26\uffff\1\21\7\uffff\1\11\1\15\1\uffff\1\16\1\6\2\uffff\1\7\4\uffff\1\4\7\uffff\1\5\16\uffff\1\3\3\uffff\1\20\1\uffff\1\14\3\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\71\uffff\1\30\1\25\2\uffff\1\23\2\uffff\1\27\1\uffff\1\26\1\31\52\uffff\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51\1\46\7\uffff\1\37\10\uffff\1\41\26\uffff\1\50\7\uffff\1\40\1\44\1\uffff\1\45\1\35\2\uffff\1\36\4\uffff\1\33\7\uffff\1\34\16\uffff\1\32\3\uffff\1\47\1\uffff\1\43\3\uffff\1\42",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\71\uffff\1\55\1\25\2\uffff\1\52\2\uffff\1\54\1\uffff\1\26\1\56\52\uffff\1\53",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = dfa_32;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "5101:3: ( ( LessThanSign )=>this_TypeArguments_4= ruleTypeArguments[$current] )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA99_21 = input.LA(1);

                         
                        int index99_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_21==QuestionMark) && (synpred22_InternalTypesParser())) {s = 26;}

                        else if ( (LA99_21==Out) && (synpred22_InternalTypesParser())) {s = 27;}

                        else if ( (LA99_21==In) && (synpred22_InternalTypesParser())) {s = 28;}

                        else if ( (LA99_21==Void) && (synpred22_InternalTypesParser())) {s = 29;}

                        else if ( (LA99_21==Any) && (synpred22_InternalTypesParser())) {s = 30;}

                        else if ( (LA99_21==Undefined) && (synpred22_InternalTypesParser())) {s = 31;}

                        else if ( (LA99_21==Null) && (synpred22_InternalTypesParser())) {s = 32;}

                        else if ( (LA99_21==Indexed) && (synpred22_InternalTypesParser())) {s = 33;}

                        else if ( (LA99_21==RULE_IDENTIFIER) ) {s = 34;}

                        else if ( (LA99_21==Tilde) && (synpred22_InternalTypesParser())) {s = 35;}

                        else if ( (LA99_21==This_1) && (synpred22_InternalTypesParser())) {s = 36;}

                        else if ( (LA99_21==Type) && (synpred22_InternalTypesParser())) {s = 37;}

                        else if ( (LA99_21==Constructor) && (synpred22_InternalTypesParser())) {s = 38;}

                        else if ( (LA99_21==LeftCurlyBracket) && (synpred22_InternalTypesParser())) {s = 39;}

                        else if ( (LA99_21==Union) && (synpred22_InternalTypesParser())) {s = 40;}

                        else if ( (LA99_21==Intersection) && (synpred22_InternalTypesParser())) {s = 41;}

                         
                        input.seek(index99_21);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA99_22 = input.LA(1);

                         
                        int index99_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalTypesParser()) ) {s = 41;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_22);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA99_11 = input.LA(1);

                         
                        int index99_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_11==Solidus) && (synpred22_InternalTypesParser())) {s = 19;}

                        else if ( (LA99_11==RULE_VERSION) && (synpred22_InternalTypesParser())) {s = 20;}

                        else if ( (LA99_11==Extends) ) {s = 2;}

                        else if ( (LA99_11==Comma) ) {s = 21;}

                        else if ( (LA99_11==GreaterThanSign) ) {s = 22;}

                        else if ( (LA99_11==LessThanSign) && (synpred22_InternalTypesParser())) {s = 23;}

                        else if ( (LA99_11==PlusSign) && (synpred22_InternalTypesParser())) {s = 24;}

                        else if ( (LA99_11==QuestionMark) && (synpred22_InternalTypesParser())) {s = 25;}

                         
                        input.seek(index99_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA99_34 = input.LA(1);

                         
                        int index99_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_34==Solidus) && (synpred22_InternalTypesParser())) {s = 42;}

                        else if ( (LA99_34==RULE_VERSION) && (synpred22_InternalTypesParser())) {s = 43;}

                        else if ( (LA99_34==Extends) ) {s = 2;}

                        else if ( (LA99_34==GreaterThanSign) ) {s = 22;}

                        else if ( (LA99_34==Comma) ) {s = 21;}

                        else if ( (LA99_34==LessThanSign) && (synpred22_InternalTypesParser())) {s = 44;}

                        else if ( (LA99_34==PlusSign) && (synpred22_InternalTypesParser())) {s = 45;}

                        else if ( (LA99_34==QuestionMark) && (synpred22_InternalTypesParser())) {s = 46;}

                         
                        input.seek(index99_34);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA99_1 = input.LA(1);

                         
                        int index99_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_1==QuestionMark) && (synpred22_InternalTypesParser())) {s = 3;}

                        else if ( (LA99_1==Out) && (synpred22_InternalTypesParser())) {s = 4;}

                        else if ( (LA99_1==In) && (synpred22_InternalTypesParser())) {s = 5;}

                        else if ( (LA99_1==Void) && (synpred22_InternalTypesParser())) {s = 6;}

                        else if ( (LA99_1==Any) && (synpred22_InternalTypesParser())) {s = 7;}

                        else if ( (LA99_1==Undefined) && (synpred22_InternalTypesParser())) {s = 8;}

                        else if ( (LA99_1==Null) && (synpred22_InternalTypesParser())) {s = 9;}

                        else if ( (LA99_1==Indexed) && (synpred22_InternalTypesParser())) {s = 10;}

                        else if ( (LA99_1==RULE_IDENTIFIER) ) {s = 11;}

                        else if ( (LA99_1==Tilde) && (synpred22_InternalTypesParser())) {s = 12;}

                        else if ( (LA99_1==This_1) && (synpred22_InternalTypesParser())) {s = 13;}

                        else if ( (LA99_1==Type) && (synpred22_InternalTypesParser())) {s = 14;}

                        else if ( (LA99_1==Constructor) && (synpred22_InternalTypesParser())) {s = 15;}

                        else if ( (LA99_1==LeftCurlyBracket) && (synpred22_InternalTypesParser())) {s = 16;}

                        else if ( (LA99_1==Union) && (synpred22_InternalTypesParser())) {s = 17;}

                        else if ( (LA99_1==Intersection) && (synpred22_InternalTypesParser())) {s = 18;}

                         
                        input.seek(index99_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_39s = "\16\uffff";
    static final String dfa_40s = "\4\uffff\6\13\3\uffff\1\13";
    static final String dfa_41s = "\1\143\3\22\6\5\2\uffff\1\147\1\5";
    static final String dfa_42s = "\1\143\3\147\6\u0088\2\uffff\1\147\1\u0088";
    static final String dfa_43s = "\12\uffff\1\2\1\1\2\uffff";
    static final String dfa_44s = "\16\uffff}>";
    static final String[] dfa_45s = {
            "\1\1",
            "\1\6\10\uffff\1\10\36\uffff\1\7\3\uffff\1\4\2\uffff\1\5\41\uffff\1\2\1\3\2\uffff\1\11",
            "\1\6\10\uffff\1\10\36\uffff\1\7\3\uffff\1\4\2\uffff\1\5\45\uffff\1\11",
            "\1\6\10\uffff\1\10\36\uffff\1\7\3\uffff\1\4\2\uffff\1\5\45\uffff\1\11",
            "\1\13\1\uffff\1\13\1\uffff\22\13\1\uffff\5\13\1\uffff\15\13\1\uffff\20\13\1\uffff\11\13\1\uffff\5\13\1\uffff\4\13\4\uffff\5\13\1\uffff\2\13\1\uffff\1\13\4\uffff\1\13\40\uffff\1\12",
            "\1\13\1\uffff\1\13\1\uffff\22\13\1\uffff\5\13\1\uffff\15\13\1\uffff\20\13\1\uffff\11\13\1\uffff\5\13\1\uffff\4\13\4\uffff\5\13\1\uffff\2\13\1\uffff\1\13\4\uffff\1\13\40\uffff\1\12",
            "\1\13\1\uffff\1\13\1\uffff\22\13\1\uffff\5\13\1\uffff\15\13\1\uffff\20\13\1\uffff\11\13\1\uffff\5\13\1\uffff\4\13\4\uffff\5\13\1\uffff\2\13\1\uffff\1\13\4\uffff\1\13\40\uffff\1\12",
            "\1\13\1\uffff\1\13\1\uffff\22\13\1\uffff\5\13\1\uffff\15\13\1\uffff\20\13\1\uffff\11\13\1\uffff\5\13\1\uffff\4\13\4\uffff\5\13\1\uffff\2\13\1\uffff\1\13\4\uffff\1\13\40\uffff\1\12",
            "\1\13\1\uffff\1\13\1\uffff\22\13\1\uffff\5\13\1\uffff\15\13\1\uffff\20\13\1\uffff\11\13\1\uffff\5\13\1\uffff\4\13\4\uffff\5\13\1\uffff\2\13\1\uffff\1\13\4\uffff\1\13\40\uffff\1\12",
            "\1\13\1\uffff\1\13\1\uffff\22\13\1\uffff\5\13\1\uffff\15\13\1\uffff\20\13\1\uffff\11\13\1\uffff\5\13\1\uffff\4\13\2\uffff\1\14\1\uffff\5\13\1\uffff\2\13\1\uffff\1\13\4\uffff\1\13\40\uffff\1\12",
            "",
            "",
            "\1\15",
            "\1\13\1\uffff\1\13\1\uffff\22\13\1\uffff\5\13\1\uffff\15\13\1\uffff\20\13\1\uffff\11\13\1\uffff\5\13\1\uffff\4\13\2\uffff\1\14\1\uffff\5\13\1\uffff\2\13\1\uffff\1\13\4\uffff\1\13\40\uffff\1\12"
    };

    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[][] dfa_45 = unpackEncodedStringArray(dfa_45s);

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "5134:3: ( ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_1= ruleTypeReference[$current] ) | ( () ( (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_4= ruleTypeReference[$current] this_VersionRequest_5= ruleVersionRequest[$current] ) )";
        }
    }
    static final String dfa_46s = "\1\5\1\11\11\uffff\1\31\13\uffff\1\11\1\0\11\uffff\1\31\14\uffff";
    static final String dfa_47s = "\2\147\11\uffff\1\u0088\13\uffff\1\147\1\0\11\uffff\1\u0088\14\uffff";
    static final String dfa_48s = "\2\uffff\1\2\10\1\1\uffff\13\1\2\uffff\11\1\1\uffff\14\1";
    static final String dfa_49s = "\1\uffff\1\3\11\uffff\1\1\13\uffff\1\0\1\4\11\uffff\1\2\14\uffff}>";
    static final String[] dfa_50s = {
            "\1\2\1\uffff\1\2\1\uffff\22\2\1\uffff\5\2\1\uffff\15\2\1\uffff\20\2\1\uffff\11\2\1\uffff\5\2\1\uffff\4\2\4\uffff\1\2\1\1\3\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\2",
            "\1\22\1\17\7\uffff\1\10\10\uffff\1\12\26\uffff\1\21\7\uffff\1\11\1\15\1\uffff\1\16\1\6\2\uffff\1\7\4\uffff\1\4\7\uffff\1\5\16\uffff\1\3\3\uffff\1\20\1\uffff\1\14\3\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\71\uffff\1\25\1\27\2\uffff\1\23\2\uffff\1\24\1\uffff\1\30\1\26\52\uffff\1\31",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51\1\46\7\uffff\1\37\10\uffff\1\41\26\uffff\1\50\7\uffff\1\40\1\44\1\uffff\1\45\1\35\2\uffff\1\36\4\uffff\1\33\7\uffff\1\34\16\uffff\1\32\3\uffff\1\47\1\uffff\1\43\3\uffff\1\42",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\71\uffff\1\54\1\27\2\uffff\1\52\2\uffff\1\53\1\uffff\1\30\1\55\52\uffff\1\56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_46 = DFA.unpackEncodedStringToUnsignedChars(dfa_46s);
    static final char[] dfa_47 = DFA.unpackEncodedStringToUnsignedChars(dfa_47s);
    static final short[] dfa_48 = DFA.unpackEncodedString(dfa_48s);
    static final short[] dfa_49 = DFA.unpackEncodedString(dfa_49s);
    static final short[][] dfa_50 = unpackEncodedStringArray(dfa_50s);

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = dfa_32;
            this.eof = dfa_33;
            this.min = dfa_46;
            this.max = dfa_47;
            this.accept = dfa_48;
            this.special = dfa_49;
            this.transition = dfa_50;
        }
        public String getDescription() {
            return "5219:3: ( ( LessThanSign )=>this_TypeArguments_6= ruleTypeArguments[$current] )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA101_23 = input.LA(1);

                         
                        int index101_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_23==QuestionMark) && (synpred23_InternalTypesParser())) {s = 26;}

                        else if ( (LA101_23==Out) && (synpred23_InternalTypesParser())) {s = 27;}

                        else if ( (LA101_23==In) && (synpred23_InternalTypesParser())) {s = 28;}

                        else if ( (LA101_23==Void) && (synpred23_InternalTypesParser())) {s = 29;}

                        else if ( (LA101_23==Any) && (synpred23_InternalTypesParser())) {s = 30;}

                        else if ( (LA101_23==Undefined) && (synpred23_InternalTypesParser())) {s = 31;}

                        else if ( (LA101_23==Null) && (synpred23_InternalTypesParser())) {s = 32;}

                        else if ( (LA101_23==Indexed) && (synpred23_InternalTypesParser())) {s = 33;}

                        else if ( (LA101_23==RULE_IDENTIFIER) ) {s = 34;}

                        else if ( (LA101_23==Tilde) && (synpred23_InternalTypesParser())) {s = 35;}

                        else if ( (LA101_23==This_1) && (synpred23_InternalTypesParser())) {s = 36;}

                        else if ( (LA101_23==Type) && (synpred23_InternalTypesParser())) {s = 37;}

                        else if ( (LA101_23==Constructor) && (synpred23_InternalTypesParser())) {s = 38;}

                        else if ( (LA101_23==LeftCurlyBracket) && (synpred23_InternalTypesParser())) {s = 39;}

                        else if ( (LA101_23==Union) && (synpred23_InternalTypesParser())) {s = 40;}

                        else if ( (LA101_23==Intersection) && (synpred23_InternalTypesParser())) {s = 41;}

                         
                        input.seek(index101_23);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA101_11 = input.LA(1);

                         
                        int index101_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_11==Solidus) && (synpred23_InternalTypesParser())) {s = 19;}

                        else if ( (LA101_11==LessThanSign) && (synpred23_InternalTypesParser())) {s = 20;}

                        else if ( (LA101_11==PlusSign) && (synpred23_InternalTypesParser())) {s = 21;}

                        else if ( (LA101_11==QuestionMark) && (synpred23_InternalTypesParser())) {s = 22;}

                        else if ( (LA101_11==Comma) ) {s = 23;}

                        else if ( (LA101_11==GreaterThanSign) ) {s = 24;}

                        else if ( (LA101_11==Extends) ) {s = 2;}

                        else if ( (LA101_11==RULE_VERSION) && (synpred23_InternalTypesParser())) {s = 25;}

                         
                        input.seek(index101_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA101_34 = input.LA(1);

                         
                        int index101_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_34==Solidus) && (synpred23_InternalTypesParser())) {s = 42;}

                        else if ( (LA101_34==LessThanSign) && (synpred23_InternalTypesParser())) {s = 43;}

                        else if ( (LA101_34==PlusSign) && (synpred23_InternalTypesParser())) {s = 44;}

                        else if ( (LA101_34==QuestionMark) && (synpred23_InternalTypesParser())) {s = 45;}

                        else if ( (LA101_34==GreaterThanSign) ) {s = 24;}

                        else if ( (LA101_34==Comma) ) {s = 23;}

                        else if ( (LA101_34==Extends) ) {s = 2;}

                        else if ( (LA101_34==RULE_VERSION) && (synpred23_InternalTypesParser())) {s = 46;}

                         
                        input.seek(index101_34);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA101_1 = input.LA(1);

                         
                        int index101_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_1==QuestionMark) && (synpred23_InternalTypesParser())) {s = 3;}

                        else if ( (LA101_1==Out) && (synpred23_InternalTypesParser())) {s = 4;}

                        else if ( (LA101_1==In) && (synpred23_InternalTypesParser())) {s = 5;}

                        else if ( (LA101_1==Void) && (synpred23_InternalTypesParser())) {s = 6;}

                        else if ( (LA101_1==Any) && (synpred23_InternalTypesParser())) {s = 7;}

                        else if ( (LA101_1==Undefined) && (synpred23_InternalTypesParser())) {s = 8;}

                        else if ( (LA101_1==Null) && (synpred23_InternalTypesParser())) {s = 9;}

                        else if ( (LA101_1==Indexed) && (synpred23_InternalTypesParser())) {s = 10;}

                        else if ( (LA101_1==RULE_IDENTIFIER) ) {s = 11;}

                        else if ( (LA101_1==Tilde) && (synpred23_InternalTypesParser())) {s = 12;}

                        else if ( (LA101_1==This_1) && (synpred23_InternalTypesParser())) {s = 13;}

                        else if ( (LA101_1==Type) && (synpred23_InternalTypesParser())) {s = 14;}

                        else if ( (LA101_1==Constructor) && (synpred23_InternalTypesParser())) {s = 15;}

                        else if ( (LA101_1==LeftCurlyBracket) && (synpred23_InternalTypesParser())) {s = 16;}

                        else if ( (LA101_1==Union) && (synpred23_InternalTypesParser())) {s = 17;}

                        else if ( (LA101_1==Intersection) && (synpred23_InternalTypesParser())) {s = 18;}

                         
                        input.seek(index101_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA101_24 = input.LA(1);

                         
                        int index101_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_InternalTypesParser()) ) {s = 41;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_51s = "\104\uffff";
    static final String dfa_52s = "\1\11\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_53s = "\1\147\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_54s = "\3\uffff\1\3\75\uffff\1\1\1\4\1\2";
    static final String dfa_55s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\uffff}>";
    static final String[] dfa_56s = {
            "\1\66\1\61\1\uffff\1\73\1\30\1\70\1\74\1\uffff\1\76\1\uffff\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\uffff\1\75\1\53\1\15\1\20\1\26\1\uffff\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\uffff\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\2\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\1\uffff\1\57\1\16\1\25\1\27\1\62\12\uffff\1\3\14\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final char[] dfa_52 = DFA.unpackEncodedStringToUnsignedChars(dfa_52s);
    static final char[] dfa_53 = DFA.unpackEncodedStringToUnsignedChars(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final short[] dfa_55 = DFA.unpackEncodedString(dfa_55s);
    static final short[][] dfa_56 = unpackEncodedStringArray(dfa_56s);

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = dfa_51;
            this.eof = dfa_51;
            this.min = dfa_52;
            this.max = dfa_53;
            this.accept = dfa_54;
            this.special = dfa_55;
            this.transition = dfa_56;
        }
        public String getDescription() {
            return "5577:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA108_0 = input.LA(1);

                         
                        int index108_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA108_0==Get) ) {s = 1;}

                        else if ( (LA108_0==Set) ) {s = 2;}

                        else if ( (LA108_0==LessThanSign) && (synpred26_InternalTypesParser())) {s = 3;}

                        else if ( (LA108_0==RULE_IDENTIFIER) ) {s = 4;}

                        else if ( (LA108_0==Break) ) {s = 5;}

                        else if ( (LA108_0==Case) ) {s = 6;}

                        else if ( (LA108_0==Catch) ) {s = 7;}

                        else if ( (LA108_0==Class) ) {s = 8;}

                        else if ( (LA108_0==Const) ) {s = 9;}

                        else if ( (LA108_0==Continue) ) {s = 10;}

                        else if ( (LA108_0==Debugger) ) {s = 11;}

                        else if ( (LA108_0==Default) ) {s = 12;}

                        else if ( (LA108_0==Delete) ) {s = 13;}

                        else if ( (LA108_0==Do) ) {s = 14;}

                        else if ( (LA108_0==Else) ) {s = 15;}

                        else if ( (LA108_0==Export) ) {s = 16;}

                        else if ( (LA108_0==Extends) ) {s = 17;}

                        else if ( (LA108_0==Finally) ) {s = 18;}

                        else if ( (LA108_0==For) ) {s = 19;}

                        else if ( (LA108_0==Function) ) {s = 20;}

                        else if ( (LA108_0==If) ) {s = 21;}

                        else if ( (LA108_0==Import) ) {s = 22;}

                        else if ( (LA108_0==In) ) {s = 23;}

                        else if ( (LA108_0==Instanceof) ) {s = 24;}

                        else if ( (LA108_0==New) ) {s = 25;}

                        else if ( (LA108_0==Return) ) {s = 26;}

                        else if ( (LA108_0==Super) ) {s = 27;}

                        else if ( (LA108_0==Switch) ) {s = 28;}

                        else if ( (LA108_0==This_1) ) {s = 29;}

                        else if ( (LA108_0==Throw) ) {s = 30;}

                        else if ( (LA108_0==Try) ) {s = 31;}

                        else if ( (LA108_0==Typeof) ) {s = 32;}

                        else if ( (LA108_0==Var) ) {s = 33;}

                        else if ( (LA108_0==Void) ) {s = 34;}

                        else if ( (LA108_0==While) ) {s = 35;}

                        else if ( (LA108_0==With) ) {s = 36;}

                        else if ( (LA108_0==Yield) ) {s = 37;}

                        else if ( (LA108_0==Null) ) {s = 38;}

                        else if ( (LA108_0==True) ) {s = 39;}

                        else if ( (LA108_0==False) ) {s = 40;}

                        else if ( (LA108_0==Enum) ) {s = 41;}

                        else if ( (LA108_0==Let) ) {s = 42;}

                        else if ( (LA108_0==Project) ) {s = 43;}

                        else if ( (LA108_0==External) ) {s = 44;}

                        else if ( (LA108_0==Abstract) ) {s = 45;}

                        else if ( (LA108_0==Static) ) {s = 46;}

                        else if ( (LA108_0==As) ) {s = 47;}

                        else if ( (LA108_0==From) ) {s = 48;}

                        else if ( (LA108_0==Constructor) ) {s = 49;}

                        else if ( (LA108_0==Of) ) {s = 50;}

                        else if ( (LA108_0==Target) ) {s = 51;}

                        else if ( (LA108_0==Type) ) {s = 52;}

                        else if ( (LA108_0==Union) ) {s = 53;}

                        else if ( (LA108_0==Intersection) ) {s = 54;}

                        else if ( (LA108_0==This) ) {s = 55;}

                        else if ( (LA108_0==Promisify) ) {s = 56;}

                        else if ( (LA108_0==Await) ) {s = 57;}

                        else if ( (LA108_0==Async) ) {s = 58;}

                        else if ( (LA108_0==Implements) ) {s = 59;}

                        else if ( (LA108_0==Interface) ) {s = 60;}

                        else if ( (LA108_0==Private) ) {s = 61;}

                        else if ( (LA108_0==Protected) ) {s = 62;}

                        else if ( (LA108_0==Public) ) {s = 63;}

                        else if ( (LA108_0==Out) ) {s = 64;}

                         
                        input.seek(index108_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA108_1 = input.LA(1);

                         
                        int index108_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_InternalTypesParser()) ) {s = 65;}

                        else if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA108_2 = input.LA(1);

                         
                        int index108_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_InternalTypesParser()) ) {s = 67;}

                        else if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA108_4 = input.LA(1);

                         
                        int index108_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA108_5 = input.LA(1);

                         
                        int index108_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA108_6 = input.LA(1);

                         
                        int index108_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA108_7 = input.LA(1);

                         
                        int index108_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA108_8 = input.LA(1);

                         
                        int index108_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA108_9 = input.LA(1);

                         
                        int index108_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA108_10 = input.LA(1);

                         
                        int index108_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA108_11 = input.LA(1);

                         
                        int index108_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA108_12 = input.LA(1);

                         
                        int index108_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA108_13 = input.LA(1);

                         
                        int index108_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA108_14 = input.LA(1);

                         
                        int index108_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA108_15 = input.LA(1);

                         
                        int index108_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA108_16 = input.LA(1);

                         
                        int index108_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA108_17 = input.LA(1);

                         
                        int index108_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA108_18 = input.LA(1);

                         
                        int index108_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA108_19 = input.LA(1);

                         
                        int index108_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA108_20 = input.LA(1);

                         
                        int index108_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA108_21 = input.LA(1);

                         
                        int index108_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA108_22 = input.LA(1);

                         
                        int index108_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA108_23 = input.LA(1);

                         
                        int index108_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA108_24 = input.LA(1);

                         
                        int index108_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA108_25 = input.LA(1);

                         
                        int index108_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA108_26 = input.LA(1);

                         
                        int index108_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA108_27 = input.LA(1);

                         
                        int index108_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA108_28 = input.LA(1);

                         
                        int index108_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA108_29 = input.LA(1);

                         
                        int index108_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA108_30 = input.LA(1);

                         
                        int index108_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA108_31 = input.LA(1);

                         
                        int index108_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA108_32 = input.LA(1);

                         
                        int index108_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA108_33 = input.LA(1);

                         
                        int index108_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA108_34 = input.LA(1);

                         
                        int index108_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA108_35 = input.LA(1);

                         
                        int index108_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA108_36 = input.LA(1);

                         
                        int index108_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA108_37 = input.LA(1);

                         
                        int index108_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA108_38 = input.LA(1);

                         
                        int index108_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA108_39 = input.LA(1);

                         
                        int index108_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA108_40 = input.LA(1);

                         
                        int index108_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA108_41 = input.LA(1);

                         
                        int index108_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA108_42 = input.LA(1);

                         
                        int index108_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA108_43 = input.LA(1);

                         
                        int index108_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA108_44 = input.LA(1);

                         
                        int index108_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA108_45 = input.LA(1);

                         
                        int index108_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA108_46 = input.LA(1);

                         
                        int index108_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA108_47 = input.LA(1);

                         
                        int index108_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA108_48 = input.LA(1);

                         
                        int index108_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA108_49 = input.LA(1);

                         
                        int index108_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA108_50 = input.LA(1);

                         
                        int index108_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA108_51 = input.LA(1);

                         
                        int index108_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA108_52 = input.LA(1);

                         
                        int index108_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA108_53 = input.LA(1);

                         
                        int index108_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA108_54 = input.LA(1);

                         
                        int index108_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA108_55 = input.LA(1);

                         
                        int index108_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA108_56 = input.LA(1);

                         
                        int index108_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA108_57 = input.LA(1);

                         
                        int index108_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA108_58 = input.LA(1);

                         
                        int index108_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA108_59 = input.LA(1);

                         
                        int index108_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA108_60 = input.LA(1);

                         
                        int index108_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA108_61 = input.LA(1);

                         
                        int index108_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA108_62 = input.LA(1);

                         
                        int index108_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA108_63 = input.LA(1);

                         
                        int index108_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA108_64 = input.LA(1);

                         
                        int index108_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index108_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 108, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x4400000420050882L,0x0000008000000002L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x6C04000008040600L,0x0040008A00040002L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000000000000L,0x0000000000140000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x6C04000008040600L,0x0040008A00000002L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x62340356304FDF10L,0x00000080000088DAL});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000008000000L,0x0000000204000000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000008000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x4400000008040000L,0x0000008000000002L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000110L,0x0000000400000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000010L,0x0000000400000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0xFFFF7FFFF7FFFF10L,0x004000800000FBFEL});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0xFFFF7FFFF7FFFF10L,0x000000800000FBFEL});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x00000004300200A0L,0x0000000400000000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000900200080040L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000900200080000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000900200000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000100200000000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x000000000A001000L,0x0000000244000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x000000000A001000L,0x0000000240000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x62340356304FDF10L,0x00000088000088DAL});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000008001000L,0x0000000240000000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000008000000L,0x0000000240100000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000000L,0x0000000240000000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x00000004300200A0L,0x0000000400020000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000000008040L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000000002000000L,0x0000000240000000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000000000000L,0x0000000240100000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0000008000004040L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000000002L,0x0000000003000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x62340356304FDF10L,0x00000080000488DBL});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x62340356304FDF10L,0x00000080000088DBL});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0xFFFF7FFFF7FFFF10L,0x000000808400FBFEL});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0xFFFFFFFFF7FFFF10L,0x000000808400FBFEL});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000000L,0x0000000021000000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000001000080000L,0x0000000000000008L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0000000000000000L,0x0000000020020000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000001000080000L,0x0000000000000080L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000800040L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x62340356304FDF10L,0x00000080040088DAL});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0100000000000040L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000000L,0x0000000400100000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000000000000000L,0x0000000020004040L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000000L,0x0007D20000000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000800000L,0x0000000040000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x6C04000008040600L,0x0040008A80000002L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000000L,0x0000000004020000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x6E340356384FDF10L,0x0040008A000488DBL});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000000L,0x0000000401000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x7C04400008040600L,0x0047D28A802A0002L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x6E340356384FDF10L,0x0040008A000088DBL});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x6E340356384FDF10L,0x0040008A000088DAL});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x4400000008040002L,0x0000008000000002L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x8000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x6C04000008040600L,0x0040008B20004042L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000000000000L,0x0000000100100000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0xFFFF7FFFF7FFFF10L,0x000000840400FBFEL});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0xFFFF7FFFF7FFFF10L,0x000000840610FBFEL});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000000002L,0x0000000021000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000002L,0x0000001800000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x4C00000008040000L,0x0000008020000002L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0001000002000002L});

}
