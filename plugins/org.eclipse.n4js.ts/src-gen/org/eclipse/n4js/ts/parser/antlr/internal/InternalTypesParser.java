package org.eclipse.n4js.ts.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.n4js.ts.services.TypesGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
/**
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@SuppressWarnings("all")
public class InternalTypesParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AssignmnentCompatible", "ProtectedInternal", "ProvidedByRuntime", "PublicInternal", "AutoboxedType", "Intersection", "Constructor", "VirtualBase", "Implements", "Instanceof", "Promisify", "Interface", "Primitive", "Protected", "Undefined", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Indexed", "Private", "Project", "Delete", "Export", "Import", "Object", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Final", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "FullStopFullStopFullStop", "Any", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "EqualsSignGreaterThanSign", "As", "Do", "If", "In", "Of", "Ampersand", "LeftParenthesis", "RightParenthesis", "PlusSign", "Comma", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_IDENTIFIER_PART", "RULE_IDENTIFIER", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=30;
    public static final int Enum=56;
    public static final int Import=32;
    public static final int EqualsSignGreaterThanSign=74;
    public static final int Var=73;
    public static final int Break=42;
    public static final int False=46;
    public static final int LessThanSign=89;
    public static final int LeftParenthesis=81;
    public static final int Throw=49;
    public static final int VirtualBase=11;
    public static final int Private=28;
    public static final int Extends=25;
    public static final int GreaterThanSign=91;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=103;
    public static final int RULE_STRUCTMODSUFFIX=104;
    public static final int RULE_EOL=113;
    public static final int ProtectedInternal=5;
    public static final int Out=70;
    public static final int RULE_ZWNJ=122;
    public static final int Project=29;
    public static final int Switch=37;
    public static final int VerticalLine=97;
    public static final int PlusSign=83;
    public static final int RULE_INT=109;
    public static final int Get=67;
    public static final int RULE_ML_COMMENT=111;
    public static final int Object=33;
    public static final int LeftSquareBracket=94;
    public static final int If=77;
    public static final int Finally=26;
    public static final int Intersection=9;
    public static final int Set=71;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=117;
    public static final int In=78;
    public static final int Catch=43;
    public static final int Union=50;
    public static final int Case=54;
    public static final int Comma=84;
    public static final int RULE_SL_COMMENT_FRAGMENT=128;
    public static final int Target=38;
    public static final int As=75;
    public static final int RULE_IDENTIFIER_PART=106;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=127;
    public static final int Export=31;
    public static final int Solidus=86;
    public static final int RightCurlyBracket=98;
    public static final int Final=47;
    public static final int FullStop=85;
    public static final int Constructor=10;
    public static final int Abstract=19;
    public static final int Promisify=14;
    public static final int Default=24;
    public static final int CommercialAt=93;
    public static final int Semicolon=88;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=102;
    public static final int Type=61;
    public static final int QuestionMark=92;
    public static final int PublicInternal=7;
    public static final int Else=55;
    public static final int RULE_HEX_DIGIT=116;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=121;
    public static final int Yield=52;
    public static final int Interface=15;
    public static final int New=69;
    public static final int Null=58;
    public static final int Typeof=39;
    public static final int True=60;
    public static final int ProvidedByRuntime=6;
    public static final int FullStopFullStopFullStop=64;
    public static final int RULE_IDENTIFIER_START=105;
    public static final int Implements=12;
    public static final int RULE_WHITESPACE_FRAGMENT=114;
    public static final int Super=48;
    public static final int Async=40;
    public static final int This=53;
    public static final int Try=72;
    public static final int Ampersand=80;
    public static final int Void=62;
    public static final int RightSquareBracket=95;
    public static final int Undefined=18;
    public static final int Protected=17;
    public static final int AutoboxedType=8;
    public static final int Const=45;
    public static final int For=66;
    public static final int RightParenthesis=82;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=119;
    public static final int Public=34;
    public static final int Do=76;
    public static final int This_1=59;
    public static final int RULE_DOT_DOT=124;
    public static final int External=22;
    public static final int Class=44;
    public static final int Static=36;
    public static final int Debugger=21;
    public static final int RULE_SINGLE_STRING_CHAR=100;
    public static final int AssignmnentCompatible=4;
    public static final int RULE_IDENTIFIER=107;
    public static final int RULE_ML_COMMENT_FRAGMENT=110;
    public static final int RULE_STRING=101;
    public static final int Continue=20;
    public static final int Any=65;
    public static final int With=63;
    public static final int RULE_SL_COMMENT=112;
    public static final int Function=23;
    public static final int EqualsSign=90;
    public static final int RULE_ZWJ=123;
    public static final int Primitive=16;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=120;
    public static final int Instanceof=13;
    public static final int Colon=87;
    public static final int EOF=-1;
    public static final int Indexed=27;
    public static final int Return=35;
    public static final int RULE_WS=115;
    public static final int RULE_BOM=126;
    public static final int LeftCurlyBracket=96;
    public static final int Tilde=99;
    public static final int While=51;
    public static final int From=57;
    public static final int RULE_ANY_OTHER=129;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=118;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=125;
    public static final int Of=79;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=108;
    public static final int Let=68;
    public static final int Await=41;

    // delegates
    // delegators


        public InternalTypesParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalTypesParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalTypesParser.tokenNames; }
    public String getGrammarFileName() { return "InternalTypesParser.g"; }



     	private TypesGrammarAccess grammarAccess;

        public InternalTypesParser(TokenStream input, TypesGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "TypeDefs";
       	}

       	@Override
       	protected TypesGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}




    // $ANTLR start "entryRuleTypeDefs"
    // InternalTypesParser.g:65:1: entryRuleTypeDefs returns [EObject current=null] : iv_ruleTypeDefs= ruleTypeDefs EOF ;
    public final EObject entryRuleTypeDefs() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeDefs = null;


        try {
            // InternalTypesParser.g:65:49: (iv_ruleTypeDefs= ruleTypeDefs EOF )
            // InternalTypesParser.g:66:2: iv_ruleTypeDefs= ruleTypeDefs EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeDefsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeDefs=ruleTypeDefs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeDefs; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeDefs"


    // $ANTLR start "ruleTypeDefs"
    // InternalTypesParser.g:72:1: ruleTypeDefs returns [EObject current=null] : ( (lv_types_0_0= ruleType ) )* ;
    public final EObject ruleTypeDefs() throws RecognitionException {
        EObject current = null;

        EObject lv_types_0_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:78:2: ( ( (lv_types_0_0= ruleType ) )* )
            // InternalTypesParser.g:79:2: ( (lv_types_0_0= ruleType ) )*
            {
            // InternalTypesParser.g:79:2: ( (lv_types_0_0= ruleType ) )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==PublicInternal||LA1_0==VirtualBase||LA1_0==Primitive||LA1_0==Undefined||LA1_0==Project||LA1_0==Public||LA1_0==Null||LA1_0==Void||LA1_0==Any||LA1_0==RULE_IDENTIFIER) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // InternalTypesParser.g:80:3: (lv_types_0_0= ruleType )
            	    {
            	    // InternalTypesParser.g:80:3: (lv_types_0_0= ruleType )
            	    // InternalTypesParser.g:81:4: lv_types_0_0= ruleType
            	    {
            	    if ( state.backtracking==0 ) {

            	      				newCompositeNode(grammarAccess.getTypeDefsAccess().getTypesTypeParserRuleCall_0());
            	      			
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_types_0_0=ruleType();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				if (current==null) {
            	      					current = createModelElementForParent(grammarAccess.getTypeDefsRule());
            	      				}
            	      				add(
            	      					current,
            	      					"types",
            	      					lv_types_0_0,
            	      					"org.eclipse.n4js.ts.Types.Type");
            	      				afterParserOrEnumRuleCall();
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeDefs"


    // $ANTLR start "entryRuleTAnnotation"
    // InternalTypesParser.g:101:1: entryRuleTAnnotation returns [EObject current=null] : iv_ruleTAnnotation= ruleTAnnotation EOF ;
    public final EObject entryRuleTAnnotation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTAnnotation = null;


        try {
            // InternalTypesParser.g:101:52: (iv_ruleTAnnotation= ruleTAnnotation EOF )
            // InternalTypesParser.g:102:2: iv_ruleTAnnotation= ruleTAnnotation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnnotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnnotation=ruleTAnnotation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnnotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTAnnotation"


    // $ANTLR start "ruleTAnnotation"
    // InternalTypesParser.g:108:1: ruleTAnnotation returns [EObject current=null] : ( ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) ) ) ( ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis )? ) ;
    public final EObject ruleTAnnotation() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_args_3_0 = null;

        EObject lv_args_5_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:114:2: ( ( ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) ) ) ( ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis )? ) )
            // InternalTypesParser.g:115:2: ( ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) ) ) ( ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis )? )
            {
            // InternalTypesParser.g:115:2: ( ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) ) ) ( ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis )? )
            // InternalTypesParser.g:116:3: ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) ) ) ( ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis )?
            {
            // InternalTypesParser.g:116:3: ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) ) )
            // InternalTypesParser.g:117:4: ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) )
            {
            // InternalTypesParser.g:126:4: (otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) ) )
            // InternalTypesParser.g:127:5: otherlv_0= CommercialAt ( (lv_name_1_0= RULE_IDENTIFIER ) )
            {
            otherlv_0=(Token)match(input,CommercialAt,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_0, grammarAccess.getTAnnotationAccess().getCommercialAtKeyword_0_0_0());
              				
            }
            // InternalTypesParser.g:131:5: ( (lv_name_1_0= RULE_IDENTIFIER ) )
            // InternalTypesParser.g:132:6: (lv_name_1_0= RULE_IDENTIFIER )
            {
            // InternalTypesParser.g:132:6: (lv_name_1_0= RULE_IDENTIFIER )
            // InternalTypesParser.g:133:7: lv_name_1_0= RULE_IDENTIFIER
            {
            lv_name_1_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							newLeafNode(lv_name_1_0, grammarAccess.getTAnnotationAccess().getNameIDENTIFIERTerminalRuleCall_0_0_1_0());
              						
            }
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElement(grammarAccess.getTAnnotationRule());
              							}
              							setWithLastConsumed(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IDENTIFIER");
              						
            }

            }


            }


            }


            }

            // InternalTypesParser.g:151:3: ( ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LeftParenthesis) && (synpred2_InternalTypesParser())) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // InternalTypesParser.g:152:4: ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis
                    {
                    // InternalTypesParser.g:152:4: ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis )
                    // InternalTypesParser.g:153:5: ( LeftParenthesis )=>otherlv_2= LeftParenthesis
                    {
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getTAnnotationAccess().getLeftParenthesisKeyword_1_0());
                      				
                    }

                    }

                    // InternalTypesParser.g:159:4: ( ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )* )?
                    int alt3=2;
                    int LA3_0 = input.LA(1);

                    if ( ((LA3_0>=Intersection && LA3_0<=Constructor)||LA3_0==Undefined||LA3_0==Indexed||LA3_0==Union||(LA3_0>=Null && LA3_0<=This_1)||(LA3_0>=Type && LA3_0<=Void)||LA3_0==Any||LA3_0==LeftCurlyBracket||LA3_0==Tilde||LA3_0==RULE_STRING||LA3_0==RULE_IDENTIFIER) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // InternalTypesParser.g:160:5: ( (lv_args_3_0= ruleTAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )*
                            {
                            // InternalTypesParser.g:160:5: ( (lv_args_3_0= ruleTAnnotationArgument ) )
                            // InternalTypesParser.g:161:6: (lv_args_3_0= ruleTAnnotationArgument )
                            {
                            // InternalTypesParser.g:161:6: (lv_args_3_0= ruleTAnnotationArgument )
                            // InternalTypesParser.g:162:7: lv_args_3_0= ruleTAnnotationArgument
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getTAnnotationAccess().getArgsTAnnotationArgumentParserRuleCall_1_1_0_0());
                              						
                            }
                            pushFollow(FOLLOW_7);
                            lv_args_3_0=ruleTAnnotationArgument();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTAnnotationRule());
                              							}
                              							add(
                              								current,
                              								"args",
                              								lv_args_3_0,
                              								"org.eclipse.n4js.ts.Types.TAnnotationArgument");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }

                            // InternalTypesParser.g:179:5: (otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) ) )*
                            loop2:
                            do {
                                int alt2=2;
                                int LA2_0 = input.LA(1);

                                if ( (LA2_0==Comma) ) {
                                    alt2=1;
                                }


                                switch (alt2) {
                            	case 1 :
                            	    // InternalTypesParser.g:180:6: otherlv_4= Comma ( (lv_args_5_0= ruleTAnnotationArgument ) )
                            	    {
                            	    otherlv_4=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      						newLeafNode(otherlv_4, grammarAccess.getTAnnotationAccess().getCommaKeyword_1_1_1_0());
                            	      					
                            	    }
                            	    // InternalTypesParser.g:184:6: ( (lv_args_5_0= ruleTAnnotationArgument ) )
                            	    // InternalTypesParser.g:185:7: (lv_args_5_0= ruleTAnnotationArgument )
                            	    {
                            	    // InternalTypesParser.g:185:7: (lv_args_5_0= ruleTAnnotationArgument )
                            	    // InternalTypesParser.g:186:8: lv_args_5_0= ruleTAnnotationArgument
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								newCompositeNode(grammarAccess.getTAnnotationAccess().getArgsTAnnotationArgumentParserRuleCall_1_1_1_1_0());
                            	      							
                            	    }
                            	    pushFollow(FOLLOW_7);
                            	    lv_args_5_0=ruleTAnnotationArgument();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getTAnnotationRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"args",
                            	      									lv_args_5_0,
                            	      									"org.eclipse.n4js.ts.Types.TAnnotationArgument");
                            	      								afterParserOrEnumRuleCall();
                            	      							
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop2;
                                }
                            } while (true);


                            }
                            break;

                    }

                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getTAnnotationAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTAnnotation"


    // $ANTLR start "entryRuleTAnnotationArgument"
    // InternalTypesParser.g:214:1: entryRuleTAnnotationArgument returns [EObject current=null] : iv_ruleTAnnotationArgument= ruleTAnnotationArgument EOF ;
    public final EObject entryRuleTAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTAnnotationArgument = null;


        try {
            // InternalTypesParser.g:214:60: (iv_ruleTAnnotationArgument= ruleTAnnotationArgument EOF )
            // InternalTypesParser.g:215:2: iv_ruleTAnnotationArgument= ruleTAnnotationArgument EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnnotationArgument=ruleTAnnotationArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTAnnotationArgument"


    // $ANTLR start "ruleTAnnotationArgument"
    // InternalTypesParser.g:221:1: ruleTAnnotationArgument returns [EObject current=null] : (this_TAnnotationStringArgument_0= ruleTAnnotationStringArgument | this_TAnnotationTypeRefArgument_1= ruleTAnnotationTypeRefArgument ) ;
    public final EObject ruleTAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject this_TAnnotationStringArgument_0 = null;

        EObject this_TAnnotationTypeRefArgument_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:227:2: ( (this_TAnnotationStringArgument_0= ruleTAnnotationStringArgument | this_TAnnotationTypeRefArgument_1= ruleTAnnotationTypeRefArgument ) )
            // InternalTypesParser.g:228:2: (this_TAnnotationStringArgument_0= ruleTAnnotationStringArgument | this_TAnnotationTypeRefArgument_1= ruleTAnnotationTypeRefArgument )
            {
            // InternalTypesParser.g:228:2: (this_TAnnotationStringArgument_0= ruleTAnnotationStringArgument | this_TAnnotationTypeRefArgument_1= ruleTAnnotationTypeRefArgument )
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==RULE_STRING) ) {
                alt5=1;
            }
            else if ( ((LA5_0>=Intersection && LA5_0<=Constructor)||LA5_0==Undefined||LA5_0==Indexed||LA5_0==Union||(LA5_0>=Null && LA5_0<=This_1)||(LA5_0>=Type && LA5_0<=Void)||LA5_0==Any||LA5_0==LeftCurlyBracket||LA5_0==Tilde||LA5_0==RULE_IDENTIFIER) ) {
                alt5=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }
            switch (alt5) {
                case 1 :
                    // InternalTypesParser.g:229:3: this_TAnnotationStringArgument_0= ruleTAnnotationStringArgument
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTAnnotationArgumentAccess().getTAnnotationStringArgumentParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TAnnotationStringArgument_0=ruleTAnnotationStringArgument();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TAnnotationStringArgument_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:238:3: this_TAnnotationTypeRefArgument_1= ruleTAnnotationTypeRefArgument
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTAnnotationArgumentAccess().getTAnnotationTypeRefArgumentParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TAnnotationTypeRefArgument_1=ruleTAnnotationTypeRefArgument();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TAnnotationTypeRefArgument_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTAnnotationArgument"


    // $ANTLR start "entryRuleTAnnotationStringArgument"
    // InternalTypesParser.g:250:1: entryRuleTAnnotationStringArgument returns [EObject current=null] : iv_ruleTAnnotationStringArgument= ruleTAnnotationStringArgument EOF ;
    public final EObject entryRuleTAnnotationStringArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTAnnotationStringArgument = null;


        try {
            // InternalTypesParser.g:250:66: (iv_ruleTAnnotationStringArgument= ruleTAnnotationStringArgument EOF )
            // InternalTypesParser.g:251:2: iv_ruleTAnnotationStringArgument= ruleTAnnotationStringArgument EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnnotationStringArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnnotationStringArgument=ruleTAnnotationStringArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnnotationStringArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTAnnotationStringArgument"


    // $ANTLR start "ruleTAnnotationStringArgument"
    // InternalTypesParser.g:257:1: ruleTAnnotationStringArgument returns [EObject current=null] : ( (lv_value_0_0= RULE_STRING ) ) ;
    public final EObject ruleTAnnotationStringArgument() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            // InternalTypesParser.g:263:2: ( ( (lv_value_0_0= RULE_STRING ) ) )
            // InternalTypesParser.g:264:2: ( (lv_value_0_0= RULE_STRING ) )
            {
            // InternalTypesParser.g:264:2: ( (lv_value_0_0= RULE_STRING ) )
            // InternalTypesParser.g:265:3: (lv_value_0_0= RULE_STRING )
            {
            // InternalTypesParser.g:265:3: (lv_value_0_0= RULE_STRING )
            // InternalTypesParser.g:266:4: lv_value_0_0= RULE_STRING
            {
            lv_value_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getTAnnotationStringArgumentAccess().getValueSTRINGTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getTAnnotationStringArgumentRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.ts.Types.STRING");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTAnnotationStringArgument"


    // $ANTLR start "entryRuleTAnnotationTypeRefArgument"
    // InternalTypesParser.g:285:1: entryRuleTAnnotationTypeRefArgument returns [EObject current=null] : iv_ruleTAnnotationTypeRefArgument= ruleTAnnotationTypeRefArgument EOF ;
    public final EObject entryRuleTAnnotationTypeRefArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTAnnotationTypeRefArgument = null;


        try {
            // InternalTypesParser.g:285:67: (iv_ruleTAnnotationTypeRefArgument= ruleTAnnotationTypeRefArgument EOF )
            // InternalTypesParser.g:286:2: iv_ruleTAnnotationTypeRefArgument= ruleTAnnotationTypeRefArgument EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnnotationTypeRefArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnnotationTypeRefArgument=ruleTAnnotationTypeRefArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnnotationTypeRefArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTAnnotationTypeRefArgument"


    // $ANTLR start "ruleTAnnotationTypeRefArgument"
    // InternalTypesParser.g:292:1: ruleTAnnotationTypeRefArgument returns [EObject current=null] : ( (lv_typeRef_0_0= ruleTypeRef ) ) ;
    public final EObject ruleTAnnotationTypeRefArgument() throws RecognitionException {
        EObject current = null;

        EObject lv_typeRef_0_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:298:2: ( ( (lv_typeRef_0_0= ruleTypeRef ) ) )
            // InternalTypesParser.g:299:2: ( (lv_typeRef_0_0= ruleTypeRef ) )
            {
            // InternalTypesParser.g:299:2: ( (lv_typeRef_0_0= ruleTypeRef ) )
            // InternalTypesParser.g:300:3: (lv_typeRef_0_0= ruleTypeRef )
            {
            // InternalTypesParser.g:300:3: (lv_typeRef_0_0= ruleTypeRef )
            // InternalTypesParser.g:301:4: lv_typeRef_0_0= ruleTypeRef
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getTAnnotationTypeRefArgumentAccess().getTypeRefTypeRefParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_typeRef_0_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getTAnnotationTypeRefArgumentRule());
              				}
              				set(
              					current,
              					"typeRef",
              					lv_typeRef_0_0,
              					"org.eclipse.n4js.ts.Types.TypeRef");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTAnnotationTypeRefArgument"


    // $ANTLR start "entryRuleType"
    // InternalTypesParser.g:321:1: entryRuleType returns [EObject current=null] : iv_ruleType= ruleType EOF ;
    public final EObject entryRuleType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleType = null;


        try {
            // InternalTypesParser.g:321:45: (iv_ruleType= ruleType EOF )
            // InternalTypesParser.g:322:2: iv_ruleType= ruleType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleType=ruleType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleType"


    // $ANTLR start "ruleType"
    // InternalTypesParser.g:328:1: ruleType returns [EObject current=null] : (this_TObjectPrototype_0= ruleTObjectPrototype | this_TClass_1= ruleTClass | this_TInterface_2= ruleTInterface | this_TEnum_3= ruleTEnum | this_AnyType_4= ruleAnyType | this_VoidType_5= ruleVoidType | this_UndefinedType_6= ruleUndefinedType | this_NullType_7= ruleNullType | this_PrimitiveType_8= rulePrimitiveType | this_TFunction_9= ruleTFunction | this_TypeVariable_10= ruleTypeVariable | this_VirtualBaseType_11= ruleVirtualBaseType ) ;
    public final EObject ruleType() throws RecognitionException {
        EObject current = null;

        EObject this_TObjectPrototype_0 = null;

        EObject this_TClass_1 = null;

        EObject this_TInterface_2 = null;

        EObject this_TEnum_3 = null;

        EObject this_AnyType_4 = null;

        EObject this_VoidType_5 = null;

        EObject this_UndefinedType_6 = null;

        EObject this_NullType_7 = null;

        EObject this_PrimitiveType_8 = null;

        EObject this_TFunction_9 = null;

        EObject this_TypeVariable_10 = null;

        EObject this_VirtualBaseType_11 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:334:2: ( (this_TObjectPrototype_0= ruleTObjectPrototype | this_TClass_1= ruleTClass | this_TInterface_2= ruleTInterface | this_TEnum_3= ruleTEnum | this_AnyType_4= ruleAnyType | this_VoidType_5= ruleVoidType | this_UndefinedType_6= ruleUndefinedType | this_NullType_7= ruleNullType | this_PrimitiveType_8= rulePrimitiveType | this_TFunction_9= ruleTFunction | this_TypeVariable_10= ruleTypeVariable | this_VirtualBaseType_11= ruleVirtualBaseType ) )
            // InternalTypesParser.g:335:2: (this_TObjectPrototype_0= ruleTObjectPrototype | this_TClass_1= ruleTClass | this_TInterface_2= ruleTInterface | this_TEnum_3= ruleTEnum | this_AnyType_4= ruleAnyType | this_VoidType_5= ruleVoidType | this_UndefinedType_6= ruleUndefinedType | this_NullType_7= ruleNullType | this_PrimitiveType_8= rulePrimitiveType | this_TFunction_9= ruleTFunction | this_TypeVariable_10= ruleTypeVariable | this_VirtualBaseType_11= ruleVirtualBaseType )
            {
            // InternalTypesParser.g:335:2: (this_TObjectPrototype_0= ruleTObjectPrototype | this_TClass_1= ruleTClass | this_TInterface_2= ruleTInterface | this_TEnum_3= ruleTEnum | this_AnyType_4= ruleAnyType | this_VoidType_5= ruleVoidType | this_UndefinedType_6= ruleUndefinedType | this_NullType_7= ruleNullType | this_PrimitiveType_8= rulePrimitiveType | this_TFunction_9= ruleTFunction | this_TypeVariable_10= ruleTypeVariable | this_VirtualBaseType_11= ruleVirtualBaseType )
            int alt6=12;
            alt6 = dfa6.predict(input);
            switch (alt6) {
                case 1 :
                    // InternalTypesParser.g:336:3: this_TObjectPrototype_0= ruleTObjectPrototype
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getTObjectPrototypeParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TObjectPrototype_0=ruleTObjectPrototype();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TObjectPrototype_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:345:3: this_TClass_1= ruleTClass
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getTClassParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TClass_1=ruleTClass();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TClass_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:354:3: this_TInterface_2= ruleTInterface
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getTInterfaceParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TInterface_2=ruleTInterface();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TInterface_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:363:3: this_TEnum_3= ruleTEnum
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getTEnumParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TEnum_3=ruleTEnum();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TEnum_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:372:3: this_AnyType_4= ruleAnyType
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getAnyTypeParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnyType_4=ruleAnyType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnyType_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalTypesParser.g:381:3: this_VoidType_5= ruleVoidType
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getVoidTypeParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VoidType_5=ruleVoidType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VoidType_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalTypesParser.g:390:3: this_UndefinedType_6= ruleUndefinedType
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getUndefinedTypeParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UndefinedType_6=ruleUndefinedType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UndefinedType_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalTypesParser.g:399:3: this_NullType_7= ruleNullType
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getNullTypeParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NullType_7=ruleNullType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NullType_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalTypesParser.g:408:3: this_PrimitiveType_8= rulePrimitiveType
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PrimitiveType_8=rulePrimitiveType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PrimitiveType_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalTypesParser.g:417:3: this_TFunction_9= ruleTFunction
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getTFunctionParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TFunction_9=ruleTFunction();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TFunction_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalTypesParser.g:426:3: this_TypeVariable_10= ruleTypeVariable
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getTypeVariableParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeVariable_10=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeVariable_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalTypesParser.g:435:3: this_VirtualBaseType_11= ruleVirtualBaseType
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeAccess().getVirtualBaseTypeParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VirtualBaseType_11=ruleVirtualBaseType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VirtualBaseType_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleType"


    // $ANTLR start "entryRuleTypeRef"
    // InternalTypesParser.g:447:1: entryRuleTypeRef returns [EObject current=null] : iv_ruleTypeRef= ruleTypeRef EOF ;
    public final EObject entryRuleTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRef = null;


        try {
            // InternalTypesParser.g:447:48: (iv_ruleTypeRef= ruleTypeRef EOF )
            // InternalTypesParser.g:448:2: iv_ruleTypeRef= ruleTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRef=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeRef"


    // $ANTLR start "ruleTypeRef"
    // InternalTypesParser.g:454:1: ruleTypeRef returns [EObject current=null] : (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( (lv_followedByQuestionMark_1_0= QuestionMark ) )? ) ;
    public final EObject ruleTypeRef() throws RecognitionException {
        EObject current = null;

        Token lv_followedByQuestionMark_1_0=null;
        EObject this_TypeRefWithoutModifiers_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:460:2: ( (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( (lv_followedByQuestionMark_1_0= QuestionMark ) )? ) )
            // InternalTypesParser.g:461:2: (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( (lv_followedByQuestionMark_1_0= QuestionMark ) )? )
            {
            // InternalTypesParser.g:461:2: (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( (lv_followedByQuestionMark_1_0= QuestionMark ) )? )
            // InternalTypesParser.g:462:3: this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( (lv_followedByQuestionMark_1_0= QuestionMark ) )?
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTypeRefAccess().getTypeRefWithoutModifiersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_9);
            this_TypeRefWithoutModifiers_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TypeRefWithoutModifiers_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalTypesParser.g:470:3: ( (lv_followedByQuestionMark_1_0= QuestionMark ) )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==QuestionMark) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // InternalTypesParser.g:471:4: (lv_followedByQuestionMark_1_0= QuestionMark )
                    {
                    // InternalTypesParser.g:471:4: (lv_followedByQuestionMark_1_0= QuestionMark )
                    // InternalTypesParser.g:472:5: lv_followedByQuestionMark_1_0= QuestionMark
                    {
                    lv_followedByQuestionMark_1_0=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_followedByQuestionMark_1_0, grammarAccess.getTypeRefAccess().getFollowedByQuestionMarkQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTypeRefRule());
                      					}
                      					setWithLastConsumed(current, "followedByQuestionMark", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeRef"


    // $ANTLR start "entryRulePrimitiveType"
    // InternalTypesParser.g:488:1: entryRulePrimitiveType returns [EObject current=null] : iv_rulePrimitiveType= rulePrimitiveType EOF ;
    public final EObject entryRulePrimitiveType() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePrimitiveType = null;


        try {
            // InternalTypesParser.g:488:54: (iv_rulePrimitiveType= rulePrimitiveType EOF )
            // InternalTypesParser.g:489:2: iv_rulePrimitiveType= rulePrimitiveType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimitiveTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimitiveType=rulePrimitiveType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimitiveType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePrimitiveType"


    // $ANTLR start "rulePrimitiveType"
    // InternalTypesParser.g:495:1: rulePrimitiveType returns [EObject current=null] : (otherlv_0= Primitive ( (lv_name_1_0= ruleVoidOrBindingIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign )? (otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_7= LeftCurlyBracket (otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) ) )? (otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) ) )? otherlv_12= RightCurlyBracket ) ;
    public final EObject rulePrimitiveType() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject lv_typeVars_3_0 = null;

        EObject lv_declaredElementType_6_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:501:2: ( (otherlv_0= Primitive ( (lv_name_1_0= ruleVoidOrBindingIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign )? (otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_7= LeftCurlyBracket (otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) ) )? (otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) ) )? otherlv_12= RightCurlyBracket ) )
            // InternalTypesParser.g:502:2: (otherlv_0= Primitive ( (lv_name_1_0= ruleVoidOrBindingIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign )? (otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_7= LeftCurlyBracket (otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) ) )? (otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) ) )? otherlv_12= RightCurlyBracket )
            {
            // InternalTypesParser.g:502:2: (otherlv_0= Primitive ( (lv_name_1_0= ruleVoidOrBindingIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign )? (otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_7= LeftCurlyBracket (otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) ) )? (otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) ) )? otherlv_12= RightCurlyBracket )
            // InternalTypesParser.g:503:3: otherlv_0= Primitive ( (lv_name_1_0= ruleVoidOrBindingIdentifier ) ) (otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign )? (otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_7= LeftCurlyBracket (otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) ) )? (otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) ) )? otherlv_12= RightCurlyBracket
            {
            otherlv_0=(Token)match(input,Primitive,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPrimitiveTypeAccess().getPrimitiveKeyword_0());
              		
            }
            // InternalTypesParser.g:507:3: ( (lv_name_1_0= ruleVoidOrBindingIdentifier ) )
            // InternalTypesParser.g:508:4: (lv_name_1_0= ruleVoidOrBindingIdentifier )
            {
            // InternalTypesParser.g:508:4: (lv_name_1_0= ruleVoidOrBindingIdentifier )
            // InternalTypesParser.g:509:5: lv_name_1_0= ruleVoidOrBindingIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getNameVoidOrBindingIdentifierParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_11);
            lv_name_1_0=ruleVoidOrBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPrimitiveTypeRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.eclipse.n4js.ts.Types.VoidOrBindingIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:526:3: (otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==LessThanSign) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // InternalTypesParser.g:527:4: otherlv_2= LessThanSign ( (lv_typeVars_3_0= ruleTypeVariable ) ) otherlv_4= GreaterThanSign
                    {
                    otherlv_2=(Token)match(input,LessThanSign,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getPrimitiveTypeAccess().getLessThanSignKeyword_2_0());
                      			
                    }
                    // InternalTypesParser.g:531:4: ( (lv_typeVars_3_0= ruleTypeVariable ) )
                    // InternalTypesParser.g:532:5: (lv_typeVars_3_0= ruleTypeVariable )
                    {
                    // InternalTypesParser.g:532:5: (lv_typeVars_3_0= ruleTypeVariable )
                    // InternalTypesParser.g:533:6: lv_typeVars_3_0= ruleTypeVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getTypeVarsTypeVariableParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_12);
                    lv_typeVars_3_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPrimitiveTypeRule());
                      						}
                      						add(
                      							current,
                      							"typeVars",
                      							lv_typeVars_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getPrimitiveTypeAccess().getGreaterThanSignKeyword_2_2());
                      			
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:555:3: (otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) ) )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==Indexed) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // InternalTypesParser.g:556:4: otherlv_5= Indexed ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) )
                    {
                    otherlv_5=(Token)match(input,Indexed,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getPrimitiveTypeAccess().getIndexedKeyword_3_0());
                      			
                    }
                    // InternalTypesParser.g:560:4: ( (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal ) )
                    // InternalTypesParser.g:561:5: (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal )
                    {
                    // InternalTypesParser.g:561:5: (lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal )
                    // InternalTypesParser.g:562:6: lv_declaredElementType_6_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getDeclaredElementTypeParameterizedTypeRefNominalParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_declaredElementType_6_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPrimitiveTypeRule());
                      						}
                      						set(
                      							current,
                      							"declaredElementType",
                      							lv_declaredElementType_6_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,LeftCurlyBracket,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getPrimitiveTypeAccess().getLeftCurlyBracketKeyword_4());
              		
            }
            // InternalTypesParser.g:584:3: (otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) ) )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==AutoboxedType) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // InternalTypesParser.g:585:4: otherlv_8= AutoboxedType ( ( ruleTypeReferenceName ) )
                    {
                    otherlv_8=(Token)match(input,AutoboxedType,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getPrimitiveTypeAccess().getAutoboxedTypeKeyword_5_0());
                      			
                    }
                    // InternalTypesParser.g:589:4: ( ( ruleTypeReferenceName ) )
                    // InternalTypesParser.g:590:5: ( ruleTypeReferenceName )
                    {
                    // InternalTypesParser.g:590:5: ( ruleTypeReferenceName )
                    // InternalTypesParser.g:591:6: ruleTypeReferenceName
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPrimitiveTypeRule());
                      						}
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getAutoboxedTypeTClassifierCrossReference_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_17);
                    ruleTypeReferenceName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:606:3: (otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) ) )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==AssignmnentCompatible) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // InternalTypesParser.g:607:4: otherlv_10= AssignmnentCompatible ( ( ruleTypeReferenceName ) )
                    {
                    otherlv_10=(Token)match(input,AssignmnentCompatible,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getPrimitiveTypeAccess().getAssignmnentCompatibleKeyword_6_0());
                      			
                    }
                    // InternalTypesParser.g:611:4: ( ( ruleTypeReferenceName ) )
                    // InternalTypesParser.g:612:5: ( ruleTypeReferenceName )
                    {
                    // InternalTypesParser.g:612:5: ( ruleTypeReferenceName )
                    // InternalTypesParser.g:613:6: ruleTypeReferenceName
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPrimitiveTypeRule());
                      						}
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getAssignmentCompatiblePrimitiveTypeCrossReference_6_1_0());
                      					
                    }
                    pushFollow(FOLLOW_18);
                    ruleTypeReferenceName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_12=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_12, grammarAccess.getPrimitiveTypeAccess().getRightCurlyBracketKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePrimitiveType"


    // $ANTLR start "entryRuleTypeReferenceName"
    // InternalTypesParser.g:636:1: entryRuleTypeReferenceName returns [String current=null] : iv_ruleTypeReferenceName= ruleTypeReferenceName EOF ;
    public final String entryRuleTypeReferenceName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypeReferenceName = null;


        try {
            // InternalTypesParser.g:636:57: (iv_ruleTypeReferenceName= ruleTypeReferenceName EOF )
            // InternalTypesParser.g:637:2: iv_ruleTypeReferenceName= ruleTypeReferenceName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeReferenceNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeReferenceName=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeReferenceName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeReferenceName"


    // $ANTLR start "ruleTypeReferenceName"
    // InternalTypesParser.g:643:1: ruleTypeReferenceName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Void | kw= Any | kw= Undefined | kw= Null | kw= Indexed | (this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )* ) ) ;
    public final AntlrDatatypeRuleToken ruleTypeReferenceName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_IDENTIFIER_5=null;
        Token this_IDENTIFIER_7=null;


        	enterRule();

        try {
            // InternalTypesParser.g:649:2: ( (kw= Void | kw= Any | kw= Undefined | kw= Null | kw= Indexed | (this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )* ) ) )
            // InternalTypesParser.g:650:2: (kw= Void | kw= Any | kw= Undefined | kw= Null | kw= Indexed | (this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )* ) )
            {
            // InternalTypesParser.g:650:2: (kw= Void | kw= Any | kw= Undefined | kw= Null | kw= Indexed | (this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )* ) )
            int alt13=6;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt13=1;
                }
                break;
            case Any:
                {
                alt13=2;
                }
                break;
            case Undefined:
                {
                alt13=3;
                }
                break;
            case Null:
                {
                alt13=4;
                }
                break;
            case Indexed:
                {
                alt13=5;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt13=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // InternalTypesParser.g:651:3: kw= Void
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:657:3: kw= Any
                    {
                    kw=(Token)match(input,Any,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getAnyKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:663:3: kw= Undefined
                    {
                    kw=(Token)match(input,Undefined,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getUndefinedKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:669:3: kw= Null
                    {
                    kw=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getNullKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:675:3: kw= Indexed
                    {
                    kw=(Token)match(input,Indexed,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getIndexedKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalTypesParser.g:681:3: (this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )* )
                    {
                    // InternalTypesParser.g:681:3: (this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )* )
                    // InternalTypesParser.g:682:4: this_IDENTIFIER_5= RULE_IDENTIFIER (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )*
                    {
                    this_IDENTIFIER_5=(Token)match(input,RULE_IDENTIFIER,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_IDENTIFIER_5);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_IDENTIFIER_5, grammarAccess.getTypeReferenceNameAccess().getIDENTIFIERTerminalRuleCall_5_0());
                      			
                    }
                    // InternalTypesParser.g:689:4: (kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER )*
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==Solidus) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    // InternalTypesParser.g:690:5: kw= Solidus this_IDENTIFIER_7= RULE_IDENTIFIER
                    	    {
                    	    kw=(Token)match(input,Solidus,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					current.merge(kw);
                    	      					newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getSolidusKeyword_5_1_0());
                    	      				
                    	    }
                    	    this_IDENTIFIER_7=(Token)match(input,RULE_IDENTIFIER,FOLLOW_19); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					current.merge(this_IDENTIFIER_7);
                    	      				
                    	    }
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(this_IDENTIFIER_7, grammarAccess.getTypeReferenceNameAccess().getIDENTIFIERTerminalRuleCall_5_1_1());
                    	      				
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeReferenceName"


    // $ANTLR start "entryRuleAnyType"
    // InternalTypesParser.g:708:1: entryRuleAnyType returns [EObject current=null] : iv_ruleAnyType= ruleAnyType EOF ;
    public final EObject entryRuleAnyType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnyType = null;


        try {
            // InternalTypesParser.g:708:48: (iv_ruleAnyType= ruleAnyType EOF )
            // InternalTypesParser.g:709:2: iv_ruleAnyType= ruleAnyType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnyTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnyType=ruleAnyType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnyType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnyType"


    // $ANTLR start "ruleAnyType"
    // InternalTypesParser.g:715:1: ruleAnyType returns [EObject current=null] : ( () ( (lv_name_1_0= Any ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) ;
    public final EObject ruleAnyType() throws RecognitionException {
        EObject current = null;

        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalTypesParser.g:721:2: ( ( () ( (lv_name_1_0= Any ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) )
            // InternalTypesParser.g:722:2: ( () ( (lv_name_1_0= Any ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            {
            // InternalTypesParser.g:722:2: ( () ( (lv_name_1_0= Any ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            // InternalTypesParser.g:723:3: () ( (lv_name_1_0= Any ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket
            {
            // InternalTypesParser.g:723:3: ()
            // InternalTypesParser.g:724:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getAnyTypeAccess().getAnyTypeAction_0(),
              					current);
              			
            }

            }

            // InternalTypesParser.g:730:3: ( (lv_name_1_0= Any ) )
            // InternalTypesParser.g:731:4: (lv_name_1_0= Any )
            {
            // InternalTypesParser.g:731:4: (lv_name_1_0= Any )
            // InternalTypesParser.g:732:5: lv_name_1_0= Any
            {
            lv_name_1_0=(Token)match(input,Any,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getAnyTypeAccess().getNameAnyKeyword_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getAnyTypeRule());
              					}
              					setWithLastConsumed(current, "name", lv_name_1_0, "any");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getAnyTypeAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getAnyTypeAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnyType"


    // $ANTLR start "entryRuleVoidType"
    // InternalTypesParser.g:756:1: entryRuleVoidType returns [EObject current=null] : iv_ruleVoidType= ruleVoidType EOF ;
    public final EObject entryRuleVoidType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVoidType = null;


        try {
            // InternalTypesParser.g:756:49: (iv_ruleVoidType= ruleVoidType EOF )
            // InternalTypesParser.g:757:2: iv_ruleVoidType= ruleVoidType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVoidTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVoidType=ruleVoidType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVoidType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVoidType"


    // $ANTLR start "ruleVoidType"
    // InternalTypesParser.g:763:1: ruleVoidType returns [EObject current=null] : ( () ( (lv_name_1_0= Void ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) ;
    public final EObject ruleVoidType() throws RecognitionException {
        EObject current = null;

        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalTypesParser.g:769:2: ( ( () ( (lv_name_1_0= Void ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) )
            // InternalTypesParser.g:770:2: ( () ( (lv_name_1_0= Void ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            {
            // InternalTypesParser.g:770:2: ( () ( (lv_name_1_0= Void ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            // InternalTypesParser.g:771:3: () ( (lv_name_1_0= Void ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket
            {
            // InternalTypesParser.g:771:3: ()
            // InternalTypesParser.g:772:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVoidTypeAccess().getVoidTypeAction_0(),
              					current);
              			
            }

            }

            // InternalTypesParser.g:778:3: ( (lv_name_1_0= Void ) )
            // InternalTypesParser.g:779:4: (lv_name_1_0= Void )
            {
            // InternalTypesParser.g:779:4: (lv_name_1_0= Void )
            // InternalTypesParser.g:780:5: lv_name_1_0= Void
            {
            lv_name_1_0=(Token)match(input,Void,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getVoidTypeAccess().getNameVoidKeyword_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getVoidTypeRule());
              					}
              					setWithLastConsumed(current, "name", lv_name_1_0, "void");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getVoidTypeAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getVoidTypeAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVoidType"


    // $ANTLR start "entryRuleUndefinedType"
    // InternalTypesParser.g:804:1: entryRuleUndefinedType returns [EObject current=null] : iv_ruleUndefinedType= ruleUndefinedType EOF ;
    public final EObject entryRuleUndefinedType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUndefinedType = null;


        try {
            // InternalTypesParser.g:804:54: (iv_ruleUndefinedType= ruleUndefinedType EOF )
            // InternalTypesParser.g:805:2: iv_ruleUndefinedType= ruleUndefinedType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUndefinedTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUndefinedType=ruleUndefinedType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUndefinedType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUndefinedType"


    // $ANTLR start "ruleUndefinedType"
    // InternalTypesParser.g:811:1: ruleUndefinedType returns [EObject current=null] : ( () ( (lv_name_1_0= Undefined ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) ;
    public final EObject ruleUndefinedType() throws RecognitionException {
        EObject current = null;

        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalTypesParser.g:817:2: ( ( () ( (lv_name_1_0= Undefined ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) )
            // InternalTypesParser.g:818:2: ( () ( (lv_name_1_0= Undefined ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            {
            // InternalTypesParser.g:818:2: ( () ( (lv_name_1_0= Undefined ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            // InternalTypesParser.g:819:3: () ( (lv_name_1_0= Undefined ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket
            {
            // InternalTypesParser.g:819:3: ()
            // InternalTypesParser.g:820:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getUndefinedTypeAccess().getUndefinedTypeAction_0(),
              					current);
              			
            }

            }

            // InternalTypesParser.g:826:3: ( (lv_name_1_0= Undefined ) )
            // InternalTypesParser.g:827:4: (lv_name_1_0= Undefined )
            {
            // InternalTypesParser.g:827:4: (lv_name_1_0= Undefined )
            // InternalTypesParser.g:828:5: lv_name_1_0= Undefined
            {
            lv_name_1_0=(Token)match(input,Undefined,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getUndefinedTypeAccess().getNameUndefinedKeyword_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getUndefinedTypeRule());
              					}
              					setWithLastConsumed(current, "name", lv_name_1_0, "undefined");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUndefinedTypeAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getUndefinedTypeAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUndefinedType"


    // $ANTLR start "entryRuleNullType"
    // InternalTypesParser.g:852:1: entryRuleNullType returns [EObject current=null] : iv_ruleNullType= ruleNullType EOF ;
    public final EObject entryRuleNullType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNullType = null;


        try {
            // InternalTypesParser.g:852:49: (iv_ruleNullType= ruleNullType EOF )
            // InternalTypesParser.g:853:2: iv_ruleNullType= ruleNullType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNullTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNullType=ruleNullType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNullType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNullType"


    // $ANTLR start "ruleNullType"
    // InternalTypesParser.g:859:1: ruleNullType returns [EObject current=null] : ( () ( (lv_name_1_0= Null ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) ;
    public final EObject ruleNullType() throws RecognitionException {
        EObject current = null;

        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalTypesParser.g:865:2: ( ( () ( (lv_name_1_0= Null ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket ) )
            // InternalTypesParser.g:866:2: ( () ( (lv_name_1_0= Null ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            {
            // InternalTypesParser.g:866:2: ( () ( (lv_name_1_0= Null ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket )
            // InternalTypesParser.g:867:3: () ( (lv_name_1_0= Null ) ) otherlv_2= LeftCurlyBracket otherlv_3= RightCurlyBracket
            {
            // InternalTypesParser.g:867:3: ()
            // InternalTypesParser.g:868:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getNullTypeAccess().getNullTypeAction_0(),
              					current);
              			
            }

            }

            // InternalTypesParser.g:874:3: ( (lv_name_1_0= Null ) )
            // InternalTypesParser.g:875:4: (lv_name_1_0= Null )
            {
            // InternalTypesParser.g:875:4: (lv_name_1_0= Null )
            // InternalTypesParser.g:876:5: lv_name_1_0= Null
            {
            lv_name_1_0=(Token)match(input,Null,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getNullTypeAccess().getNameNullKeyword_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getNullTypeRule());
              					}
              					setWithLastConsumed(current, "name", lv_name_1_0, "null");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getNullTypeAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getNullTypeAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNullType"


    // $ANTLR start "entryRuleTypesIdentifier"
    // InternalTypesParser.g:900:1: entryRuleTypesIdentifier returns [String current=null] : iv_ruleTypesIdentifier= ruleTypesIdentifier EOF ;
    public final String entryRuleTypesIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypesIdentifier = null;


        try {
            // InternalTypesParser.g:900:55: (iv_ruleTypesIdentifier= ruleTypesIdentifier EOF )
            // InternalTypesParser.g:901:2: iv_ruleTypesIdentifier= ruleTypesIdentifier EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypesIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypesIdentifier=ruleTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypesIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypesIdentifier"


    // $ANTLR start "ruleTypesIdentifier"
    // InternalTypesParser.g:907:1: ruleTypesIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_IdentifierName_1= ruleIdentifierName ) ;
    public final AntlrDatatypeRuleToken ruleTypesIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_TypesSpecificKeywords_0 = null;

        AntlrDatatypeRuleToken this_IdentifierName_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:913:2: ( (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_IdentifierName_1= ruleIdentifierName ) )
            // InternalTypesParser.g:914:2: (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_IdentifierName_1= ruleIdentifierName )
            {
            // InternalTypesParser.g:914:2: (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_IdentifierName_1= ruleIdentifierName )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==AssignmnentCompatible||LA14_0==AutoboxedType||LA14_0==VirtualBase||LA14_0==Primitive||LA14_0==Undefined||LA14_0==Object||LA14_0==Any) ) {
                alt14=1;
            }
            else if ( ((LA14_0>=Intersection && LA14_0<=Constructor)||(LA14_0>=Implements && LA14_0<=Interface)||LA14_0==Protected||(LA14_0>=Abstract && LA14_0<=Finally)||(LA14_0>=Private && LA14_0<=Import)||(LA14_0>=Public && LA14_0<=False)||(LA14_0>=Super && LA14_0<=With)||(LA14_0>=For && LA14_0<=Var)||(LA14_0>=As && LA14_0<=Of)||LA14_0==RULE_IDENTIFIER) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // InternalTypesParser.g:915:3: this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypesIdentifierAccess().getTypesSpecificKeywordsParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypesSpecificKeywords_0=ruleTypesSpecificKeywords();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_TypesSpecificKeywords_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:926:3: this_IdentifierName_1= ruleIdentifierName
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypesIdentifierAccess().getIdentifierNameParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifierName_1=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IdentifierName_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypesIdentifier"


    // $ANTLR start "entryRuleBindingTypesIdentifier"
    // InternalTypesParser.g:940:1: entryRuleBindingTypesIdentifier returns [String current=null] : iv_ruleBindingTypesIdentifier= ruleBindingTypesIdentifier EOF ;
    public final String entryRuleBindingTypesIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBindingTypesIdentifier = null;


        try {
            // InternalTypesParser.g:940:62: (iv_ruleBindingTypesIdentifier= ruleBindingTypesIdentifier EOF )
            // InternalTypesParser.g:941:2: iv_ruleBindingTypesIdentifier= ruleBindingTypesIdentifier EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingTypesIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingTypesIdentifier=ruleBindingTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingTypesIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBindingTypesIdentifier"


    // $ANTLR start "ruleBindingTypesIdentifier"
    // InternalTypesParser.g:947:1: ruleBindingTypesIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_BindingIdentifier_1= ruleBindingIdentifier ) ;
    public final AntlrDatatypeRuleToken ruleBindingTypesIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_TypesSpecificKeywords_0 = null;

        AntlrDatatypeRuleToken this_BindingIdentifier_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:953:2: ( (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_BindingIdentifier_1= ruleBindingIdentifier ) )
            // InternalTypesParser.g:954:2: (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_BindingIdentifier_1= ruleBindingIdentifier )
            {
            // InternalTypesParser.g:954:2: (this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords | this_BindingIdentifier_1= ruleBindingIdentifier )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==AssignmnentCompatible||LA15_0==AutoboxedType||LA15_0==VirtualBase||LA15_0==Primitive||LA15_0==Undefined||LA15_0==Object||LA15_0==Any) ) {
                alt15=1;
            }
            else if ( ((LA15_0>=Intersection && LA15_0<=Constructor)||LA15_0==Implements||(LA15_0>=Promisify && LA15_0<=Interface)||LA15_0==Protected||LA15_0==Abstract||LA15_0==External||(LA15_0>=Private && LA15_0<=Project)||LA15_0==Public||LA15_0==Static||LA15_0==Target||(LA15_0>=Async && LA15_0<=Await)||LA15_0==Union||(LA15_0>=Yield && LA15_0<=This)||LA15_0==From||LA15_0==Type||(LA15_0>=Get && LA15_0<=Let)||(LA15_0>=Out && LA15_0<=Set)||LA15_0==As||LA15_0==Of||LA15_0==RULE_IDENTIFIER) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // InternalTypesParser.g:955:3: this_TypesSpecificKeywords_0= ruleTypesSpecificKeywords
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingTypesIdentifierAccess().getTypesSpecificKeywordsParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypesSpecificKeywords_0=ruleTypesSpecificKeywords();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_TypesSpecificKeywords_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:966:3: this_BindingIdentifier_1= ruleBindingIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingTypesIdentifierAccess().getBindingIdentifierParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BindingIdentifier_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_BindingIdentifier_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBindingTypesIdentifier"


    // $ANTLR start "entryRuleVoidOrBindingIdentifier"
    // InternalTypesParser.g:980:1: entryRuleVoidOrBindingIdentifier returns [String current=null] : iv_ruleVoidOrBindingIdentifier= ruleVoidOrBindingIdentifier EOF ;
    public final String entryRuleVoidOrBindingIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleVoidOrBindingIdentifier = null;


        try {
            // InternalTypesParser.g:980:63: (iv_ruleVoidOrBindingIdentifier= ruleVoidOrBindingIdentifier EOF )
            // InternalTypesParser.g:981:2: iv_ruleVoidOrBindingIdentifier= ruleVoidOrBindingIdentifier EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVoidOrBindingIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVoidOrBindingIdentifier=ruleVoidOrBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVoidOrBindingIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVoidOrBindingIdentifier"


    // $ANTLR start "ruleVoidOrBindingIdentifier"
    // InternalTypesParser.g:987:1: ruleVoidOrBindingIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Void | this_BindingTypesIdentifier_1= ruleBindingTypesIdentifier ) ;
    public final AntlrDatatypeRuleToken ruleVoidOrBindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_BindingTypesIdentifier_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:993:2: ( (kw= Void | this_BindingTypesIdentifier_1= ruleBindingTypesIdentifier ) )
            // InternalTypesParser.g:994:2: (kw= Void | this_BindingTypesIdentifier_1= ruleBindingTypesIdentifier )
            {
            // InternalTypesParser.g:994:2: (kw= Void | this_BindingTypesIdentifier_1= ruleBindingTypesIdentifier )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==Void) ) {
                alt16=1;
            }
            else if ( (LA16_0==AssignmnentCompatible||(LA16_0>=AutoboxedType && LA16_0<=Implements)||(LA16_0>=Promisify && LA16_0<=Abstract)||LA16_0==External||(LA16_0>=Private && LA16_0<=Project)||(LA16_0>=Object && LA16_0<=Public)||LA16_0==Static||LA16_0==Target||(LA16_0>=Async && LA16_0<=Await)||LA16_0==Union||(LA16_0>=Yield && LA16_0<=This)||LA16_0==From||LA16_0==Type||LA16_0==Any||(LA16_0>=Get && LA16_0<=Let)||(LA16_0>=Out && LA16_0<=Set)||LA16_0==As||LA16_0==Of||LA16_0==RULE_IDENTIFIER) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // InternalTypesParser.g:995:3: kw= Void
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getVoidOrBindingIdentifierAccess().getVoidKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:1001:3: this_BindingTypesIdentifier_1= ruleBindingTypesIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVoidOrBindingIdentifierAccess().getBindingTypesIdentifierParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BindingTypesIdentifier_1=ruleBindingTypesIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_BindingTypesIdentifier_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVoidOrBindingIdentifier"


    // $ANTLR start "entryRuleTypesSpecificKeywords"
    // InternalTypesParser.g:1015:1: entryRuleTypesSpecificKeywords returns [String current=null] : iv_ruleTypesSpecificKeywords= ruleTypesSpecificKeywords EOF ;
    public final String entryRuleTypesSpecificKeywords() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypesSpecificKeywords = null;


        try {
            // InternalTypesParser.g:1015:61: (iv_ruleTypesSpecificKeywords= ruleTypesSpecificKeywords EOF )
            // InternalTypesParser.g:1016:2: iv_ruleTypesSpecificKeywords= ruleTypesSpecificKeywords EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypesSpecificKeywordsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypesSpecificKeywords=ruleTypesSpecificKeywords();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypesSpecificKeywords.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypesSpecificKeywords"


    // $ANTLR start "ruleTypesSpecificKeywords"
    // InternalTypesParser.g:1022:1: ruleTypesSpecificKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Any | kw= Undefined | kw= Object | kw= VirtualBase | kw= Primitive | kw= AutoboxedType | kw= AssignmnentCompatible ) ;
    public final AntlrDatatypeRuleToken ruleTypesSpecificKeywords() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalTypesParser.g:1028:2: ( (kw= Any | kw= Undefined | kw= Object | kw= VirtualBase | kw= Primitive | kw= AutoboxedType | kw= AssignmnentCompatible ) )
            // InternalTypesParser.g:1029:2: (kw= Any | kw= Undefined | kw= Object | kw= VirtualBase | kw= Primitive | kw= AutoboxedType | kw= AssignmnentCompatible )
            {
            // InternalTypesParser.g:1029:2: (kw= Any | kw= Undefined | kw= Object | kw= VirtualBase | kw= Primitive | kw= AutoboxedType | kw= AssignmnentCompatible )
            int alt17=7;
            switch ( input.LA(1) ) {
            case Any:
                {
                alt17=1;
                }
                break;
            case Undefined:
                {
                alt17=2;
                }
                break;
            case Object:
                {
                alt17=3;
                }
                break;
            case VirtualBase:
                {
                alt17=4;
                }
                break;
            case Primitive:
                {
                alt17=5;
                }
                break;
            case AutoboxedType:
                {
                alt17=6;
                }
                break;
            case AssignmnentCompatible:
                {
                alt17=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // InternalTypesParser.g:1030:3: kw= Any
                    {
                    kw=(Token)match(input,Any,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getAnyKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:1036:3: kw= Undefined
                    {
                    kw=(Token)match(input,Undefined,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getUndefinedKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:1042:3: kw= Object
                    {
                    kw=(Token)match(input,Object,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getObjectKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:1048:3: kw= VirtualBase
                    {
                    kw=(Token)match(input,VirtualBase,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getVirtualBaseKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:1054:3: kw= Primitive
                    {
                    kw=(Token)match(input,Primitive,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getPrimitiveKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalTypesParser.g:1060:3: kw= AutoboxedType
                    {
                    kw=(Token)match(input,AutoboxedType,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getAutoboxedTypeKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalTypesParser.g:1066:3: kw= AssignmnentCompatible
                    {
                    kw=(Token)match(input,AssignmnentCompatible,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypesSpecificKeywordsAccess().getAssignmnentCompatibleKeyword_6());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypesSpecificKeywords"


    // $ANTLR start "entryRuleTypesComputedPropertyName"
    // InternalTypesParser.g:1075:1: entryRuleTypesComputedPropertyName returns [String current=null] : iv_ruleTypesComputedPropertyName= ruleTypesComputedPropertyName EOF ;
    public final String entryRuleTypesComputedPropertyName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypesComputedPropertyName = null;


        try {
            // InternalTypesParser.g:1075:65: (iv_ruleTypesComputedPropertyName= ruleTypesComputedPropertyName EOF )
            // InternalTypesParser.g:1076:2: iv_ruleTypesComputedPropertyName= ruleTypesComputedPropertyName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypesComputedPropertyNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypesComputedPropertyName=ruleTypesComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypesComputedPropertyName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypesComputedPropertyName"


    // $ANTLR start "ruleTypesComputedPropertyName"
    // InternalTypesParser.g:1082:1: ruleTypesComputedPropertyName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= LeftSquareBracket (this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName | this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName ) kw= RightSquareBracket ) ;
    public final AntlrDatatypeRuleToken ruleTypesComputedPropertyName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_TypesSymbolLiteralComputedName_1 = null;

        AntlrDatatypeRuleToken this_TypesStringLiteralComputedName_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1088:2: ( (kw= LeftSquareBracket (this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName | this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName ) kw= RightSquareBracket ) )
            // InternalTypesParser.g:1089:2: (kw= LeftSquareBracket (this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName | this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName ) kw= RightSquareBracket )
            {
            // InternalTypesParser.g:1089:2: (kw= LeftSquareBracket (this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName | this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName ) kw= RightSquareBracket )
            // InternalTypesParser.g:1090:3: kw= LeftSquareBracket (this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName | this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName ) kw= RightSquareBracket
            {
            kw=(Token)match(input,LeftSquareBracket,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getTypesComputedPropertyNameAccess().getLeftSquareBracketKeyword_0());
              		
            }
            // InternalTypesParser.g:1095:3: (this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName | this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==AssignmnentCompatible||(LA18_0>=AutoboxedType && LA18_0<=Finally)||(LA18_0>=Private && LA18_0<=False)||(LA18_0>=Super && LA18_0<=With)||(LA18_0>=Any && LA18_0<=Var)||(LA18_0>=As && LA18_0<=Of)||LA18_0==RULE_IDENTIFIER) ) {
                alt18=1;
            }
            else if ( (LA18_0==RULE_STRING) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // InternalTypesParser.g:1096:4: this_TypesSymbolLiteralComputedName_1= ruleTypesSymbolLiteralComputedName
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTypesComputedPropertyNameAccess().getTypesSymbolLiteralComputedNameParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_21);
                    this_TypesSymbolLiteralComputedName_1=ruleTypesSymbolLiteralComputedName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_TypesSymbolLiteralComputedName_1);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:1107:4: this_TypesStringLiteralComputedName_2= ruleTypesStringLiteralComputedName
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTypesComputedPropertyNameAccess().getTypesStringLiteralComputedNameParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_21);
                    this_TypesStringLiteralComputedName_2=ruleTypesStringLiteralComputedName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_TypesStringLiteralComputedName_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getTypesComputedPropertyNameAccess().getRightSquareBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypesComputedPropertyName"


    // $ANTLR start "entryRuleTypesSymbolLiteralComputedName"
    // InternalTypesParser.g:1127:1: entryRuleTypesSymbolLiteralComputedName returns [String current=null] : iv_ruleTypesSymbolLiteralComputedName= ruleTypesSymbolLiteralComputedName EOF ;
    public final String entryRuleTypesSymbolLiteralComputedName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypesSymbolLiteralComputedName = null;


        try {
            // InternalTypesParser.g:1127:70: (iv_ruleTypesSymbolLiteralComputedName= ruleTypesSymbolLiteralComputedName EOF )
            // InternalTypesParser.g:1128:2: iv_ruleTypesSymbolLiteralComputedName= ruleTypesSymbolLiteralComputedName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypesSymbolLiteralComputedNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypesSymbolLiteralComputedName=ruleTypesSymbolLiteralComputedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypesSymbolLiteralComputedName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypesSymbolLiteralComputedName"


    // $ANTLR start "ruleTypesSymbolLiteralComputedName"
    // InternalTypesParser.g:1134:1: ruleTypesSymbolLiteralComputedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_TypesIdentifier_0= ruleTypesIdentifier kw= FullStop this_TypesIdentifier_2= ruleTypesIdentifier ) ;
    public final AntlrDatatypeRuleToken ruleTypesSymbolLiteralComputedName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_TypesIdentifier_0 = null;

        AntlrDatatypeRuleToken this_TypesIdentifier_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1140:2: ( (this_TypesIdentifier_0= ruleTypesIdentifier kw= FullStop this_TypesIdentifier_2= ruleTypesIdentifier ) )
            // InternalTypesParser.g:1141:2: (this_TypesIdentifier_0= ruleTypesIdentifier kw= FullStop this_TypesIdentifier_2= ruleTypesIdentifier )
            {
            // InternalTypesParser.g:1141:2: (this_TypesIdentifier_0= ruleTypesIdentifier kw= FullStop this_TypesIdentifier_2= ruleTypesIdentifier )
            // InternalTypesParser.g:1142:3: this_TypesIdentifier_0= ruleTypesIdentifier kw= FullStop this_TypesIdentifier_2= ruleTypesIdentifier
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTypesSymbolLiteralComputedNameAccess().getTypesIdentifierParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_22);
            this_TypesIdentifier_0=ruleTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_TypesIdentifier_0);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            kw=(Token)match(input,FullStop,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getTypesSymbolLiteralComputedNameAccess().getFullStopKeyword_1());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTypesSymbolLiteralComputedNameAccess().getTypesIdentifierParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            this_TypesIdentifier_2=ruleTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_TypesIdentifier_2);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypesSymbolLiteralComputedName"


    // $ANTLR start "entryRuleTypesStringLiteralComputedName"
    // InternalTypesParser.g:1171:1: entryRuleTypesStringLiteralComputedName returns [String current=null] : iv_ruleTypesStringLiteralComputedName= ruleTypesStringLiteralComputedName EOF ;
    public final String entryRuleTypesStringLiteralComputedName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypesStringLiteralComputedName = null;


        try {
            // InternalTypesParser.g:1171:70: (iv_ruleTypesStringLiteralComputedName= ruleTypesStringLiteralComputedName EOF )
            // InternalTypesParser.g:1172:2: iv_ruleTypesStringLiteralComputedName= ruleTypesStringLiteralComputedName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypesStringLiteralComputedNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypesStringLiteralComputedName=ruleTypesStringLiteralComputedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypesStringLiteralComputedName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypesStringLiteralComputedName"


    // $ANTLR start "ruleTypesStringLiteralComputedName"
    // InternalTypesParser.g:1178:1: ruleTypesStringLiteralComputedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_STRING_0= RULE_STRING ;
    public final AntlrDatatypeRuleToken ruleTypesStringLiteralComputedName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING_0=null;


        	enterRule();

        try {
            // InternalTypesParser.g:1184:2: (this_STRING_0= RULE_STRING )
            // InternalTypesParser.g:1185:2: this_STRING_0= RULE_STRING
            {
            this_STRING_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_STRING_0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_STRING_0, grammarAccess.getTypesStringLiteralComputedNameAccess().getSTRINGTerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypesStringLiteralComputedName"


    // $ANTLR start "entryRuleTObjectPrototype"
    // InternalTypesParser.g:1195:1: entryRuleTObjectPrototype returns [EObject current=null] : iv_ruleTObjectPrototype= ruleTObjectPrototype EOF ;
    public final EObject entryRuleTObjectPrototype() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTObjectPrototype = null;


        try {
            // InternalTypesParser.g:1195:57: (iv_ruleTObjectPrototype= ruleTObjectPrototype EOF )
            // InternalTypesParser.g:1196:2: iv_ruleTObjectPrototype= ruleTObjectPrototype EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTObjectPrototypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTObjectPrototype=ruleTObjectPrototype();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTObjectPrototype; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTObjectPrototype"


    // $ANTLR start "ruleTObjectPrototype"
    // InternalTypesParser.g:1202:1: ruleTObjectPrototype returns [EObject current=null] : ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredFinal_2_0= Final ) )? otherlv_3= Object ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) (otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariable ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariable ) ) )* otherlv_9= GreaterThanSign )? (otherlv_10= Extends ( (lv_superType_11_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_12= Indexed ( (lv_declaredElementType_13_0= ruleParameterizedTypeRefNominal ) ) )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation ) )* otherlv_15= LeftCurlyBracket ( (lv_ownedMembers_16_0= ruleTMember ) )* ( ( (lv_callableCtor_17_0= ruleCallableCtor ) ) ( (lv_ownedMembers_18_0= ruleTMember ) )* )? otherlv_19= RightCurlyBracket ) ;
    public final EObject ruleTObjectPrototype() throws RecognitionException {
        EObject current = null;

        Token lv_declaredProvidedByRuntime_1_0=null;
        Token lv_declaredFinal_2_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_15=null;
        Token otherlv_19=null;
        Enumerator lv_declaredTypeAccessModifier_0_0 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        EObject lv_typeVars_6_0 = null;

        EObject lv_typeVars_8_0 = null;

        EObject lv_superType_11_0 = null;

        EObject lv_declaredElementType_13_0 = null;

        EObject lv_annotations_14_0 = null;

        EObject lv_ownedMembers_16_0 = null;

        EObject lv_callableCtor_17_0 = null;

        EObject lv_ownedMembers_18_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1208:2: ( ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredFinal_2_0= Final ) )? otherlv_3= Object ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) (otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariable ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariable ) ) )* otherlv_9= GreaterThanSign )? (otherlv_10= Extends ( (lv_superType_11_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_12= Indexed ( (lv_declaredElementType_13_0= ruleParameterizedTypeRefNominal ) ) )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation ) )* otherlv_15= LeftCurlyBracket ( (lv_ownedMembers_16_0= ruleTMember ) )* ( ( (lv_callableCtor_17_0= ruleCallableCtor ) ) ( (lv_ownedMembers_18_0= ruleTMember ) )* )? otherlv_19= RightCurlyBracket ) )
            // InternalTypesParser.g:1209:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredFinal_2_0= Final ) )? otherlv_3= Object ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) (otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariable ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariable ) ) )* otherlv_9= GreaterThanSign )? (otherlv_10= Extends ( (lv_superType_11_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_12= Indexed ( (lv_declaredElementType_13_0= ruleParameterizedTypeRefNominal ) ) )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation ) )* otherlv_15= LeftCurlyBracket ( (lv_ownedMembers_16_0= ruleTMember ) )* ( ( (lv_callableCtor_17_0= ruleCallableCtor ) ) ( (lv_ownedMembers_18_0= ruleTMember ) )* )? otherlv_19= RightCurlyBracket )
            {
            // InternalTypesParser.g:1209:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredFinal_2_0= Final ) )? otherlv_3= Object ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) (otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariable ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariable ) ) )* otherlv_9= GreaterThanSign )? (otherlv_10= Extends ( (lv_superType_11_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_12= Indexed ( (lv_declaredElementType_13_0= ruleParameterizedTypeRefNominal ) ) )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation ) )* otherlv_15= LeftCurlyBracket ( (lv_ownedMembers_16_0= ruleTMember ) )* ( ( (lv_callableCtor_17_0= ruleCallableCtor ) ) ( (lv_ownedMembers_18_0= ruleTMember ) )* )? otherlv_19= RightCurlyBracket )
            // InternalTypesParser.g:1210:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredFinal_2_0= Final ) )? otherlv_3= Object ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) (otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariable ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariable ) ) )* otherlv_9= GreaterThanSign )? (otherlv_10= Extends ( (lv_superType_11_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_12= Indexed ( (lv_declaredElementType_13_0= ruleParameterizedTypeRefNominal ) ) )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation ) )* otherlv_15= LeftCurlyBracket ( (lv_ownedMembers_16_0= ruleTMember ) )* ( ( (lv_callableCtor_17_0= ruleCallableCtor ) ) ( (lv_ownedMembers_18_0= ruleTMember ) )* )? otherlv_19= RightCurlyBracket
            {
            // InternalTypesParser.g:1210:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) )
            // InternalTypesParser.g:1211:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            {
            // InternalTypesParser.g:1211:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            // InternalTypesParser.g:1212:5: lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTObjectPrototypeAccess().getDeclaredTypeAccessModifierTypeAccessModifierEnumRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_24);
            lv_declaredTypeAccessModifier_0_0=ruleTypeAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTObjectPrototypeRule());
              					}
              					set(
              						current,
              						"declaredTypeAccessModifier",
              						lv_declaredTypeAccessModifier_0_0,
              						"org.eclipse.n4js.ts.Types.TypeAccessModifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:1229:3: ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==ProvidedByRuntime) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // InternalTypesParser.g:1230:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    {
                    // InternalTypesParser.g:1230:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    // InternalTypesParser.g:1231:5: lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime
                    {
                    lv_declaredProvidedByRuntime_1_0=(Token)match(input,ProvidedByRuntime,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredProvidedByRuntime_1_0, grammarAccess.getTObjectPrototypeAccess().getDeclaredProvidedByRuntimeProvidedByRuntimeKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTObjectPrototypeRule());
                      					}
                      					setWithLastConsumed(current, "declaredProvidedByRuntime", true, "providedByRuntime");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1243:3: ( (lv_declaredFinal_2_0= Final ) )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==Final) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // InternalTypesParser.g:1244:4: (lv_declaredFinal_2_0= Final )
                    {
                    // InternalTypesParser.g:1244:4: (lv_declaredFinal_2_0= Final )
                    // InternalTypesParser.g:1245:5: lv_declaredFinal_2_0= Final
                    {
                    lv_declaredFinal_2_0=(Token)match(input,Final,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredFinal_2_0, grammarAccess.getTObjectPrototypeAccess().getDeclaredFinalFinalKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTObjectPrototypeRule());
                      					}
                      					setWithLastConsumed(current, "declaredFinal", true, "final");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_3=(Token)match(input,Object,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getTObjectPrototypeAccess().getObjectKeyword_3());
              		
            }
            // InternalTypesParser.g:1261:3: ( (lv_name_4_0= ruleBindingTypesIdentifier ) )
            // InternalTypesParser.g:1262:4: (lv_name_4_0= ruleBindingTypesIdentifier )
            {
            // InternalTypesParser.g:1262:4: (lv_name_4_0= ruleBindingTypesIdentifier )
            // InternalTypesParser.g:1263:5: lv_name_4_0= ruleBindingTypesIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTObjectPrototypeAccess().getNameBindingTypesIdentifierParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_27);
            lv_name_4_0=ruleBindingTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTObjectPrototypeRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_4_0,
              						"org.eclipse.n4js.ts.Types.BindingTypesIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:1280:3: (otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariable ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariable ) ) )* otherlv_9= GreaterThanSign )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==LessThanSign) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // InternalTypesParser.g:1281:4: otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariable ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariable ) ) )* otherlv_9= GreaterThanSign
                    {
                    otherlv_5=(Token)match(input,LessThanSign,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getTObjectPrototypeAccess().getLessThanSignKeyword_5_0());
                      			
                    }
                    // InternalTypesParser.g:1285:4: ( (lv_typeVars_6_0= ruleTypeVariable ) )
                    // InternalTypesParser.g:1286:5: (lv_typeVars_6_0= ruleTypeVariable )
                    {
                    // InternalTypesParser.g:1286:5: (lv_typeVars_6_0= ruleTypeVariable )
                    // InternalTypesParser.g:1287:6: lv_typeVars_6_0= ruleTypeVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTObjectPrototypeAccess().getTypeVarsTypeVariableParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_28);
                    lv_typeVars_6_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTObjectPrototypeRule());
                      						}
                      						add(
                      							current,
                      							"typeVars",
                      							lv_typeVars_6_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:1304:4: (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariable ) ) )*
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==Comma) ) {
                            alt21=1;
                        }


                        switch (alt21) {
                    	case 1 :
                    	    // InternalTypesParser.g:1305:5: otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariable ) )
                    	    {
                    	    otherlv_7=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_7, grammarAccess.getTObjectPrototypeAccess().getCommaKeyword_5_2_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:1309:5: ( (lv_typeVars_8_0= ruleTypeVariable ) )
                    	    // InternalTypesParser.g:1310:6: (lv_typeVars_8_0= ruleTypeVariable )
                    	    {
                    	    // InternalTypesParser.g:1310:6: (lv_typeVars_8_0= ruleTypeVariable )
                    	    // InternalTypesParser.g:1311:7: lv_typeVars_8_0= ruleTypeVariable
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTObjectPrototypeAccess().getTypeVarsTypeVariableParserRuleCall_5_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_28);
                    	    lv_typeVars_8_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTObjectPrototypeRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeVars",
                    	      								lv_typeVars_8_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop21;
                        }
                    } while (true);

                    otherlv_9=(Token)match(input,GreaterThanSign,FOLLOW_29); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getTObjectPrototypeAccess().getGreaterThanSignKeyword_5_3());
                      			
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:1334:3: (otherlv_10= Extends ( (lv_superType_11_0= ruleParameterizedTypeRefNominal ) ) )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==Extends) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // InternalTypesParser.g:1335:4: otherlv_10= Extends ( (lv_superType_11_0= ruleParameterizedTypeRefNominal ) )
                    {
                    otherlv_10=(Token)match(input,Extends,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getTObjectPrototypeAccess().getExtendsKeyword_6_0());
                      			
                    }
                    // InternalTypesParser.g:1339:4: ( (lv_superType_11_0= ruleParameterizedTypeRefNominal ) )
                    // InternalTypesParser.g:1340:5: (lv_superType_11_0= ruleParameterizedTypeRefNominal )
                    {
                    // InternalTypesParser.g:1340:5: (lv_superType_11_0= ruleParameterizedTypeRefNominal )
                    // InternalTypesParser.g:1341:6: lv_superType_11_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTObjectPrototypeAccess().getSuperTypeParameterizedTypeRefNominalParserRuleCall_6_1_0());
                      					
                    }
                    pushFollow(FOLLOW_30);
                    lv_superType_11_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTObjectPrototypeRule());
                      						}
                      						set(
                      							current,
                      							"superType",
                      							lv_superType_11_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1359:3: (otherlv_12= Indexed ( (lv_declaredElementType_13_0= ruleParameterizedTypeRefNominal ) ) )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==Indexed) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // InternalTypesParser.g:1360:4: otherlv_12= Indexed ( (lv_declaredElementType_13_0= ruleParameterizedTypeRefNominal ) )
                    {
                    otherlv_12=(Token)match(input,Indexed,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getTObjectPrototypeAccess().getIndexedKeyword_7_0());
                      			
                    }
                    // InternalTypesParser.g:1364:4: ( (lv_declaredElementType_13_0= ruleParameterizedTypeRefNominal ) )
                    // InternalTypesParser.g:1365:5: (lv_declaredElementType_13_0= ruleParameterizedTypeRefNominal )
                    {
                    // InternalTypesParser.g:1365:5: (lv_declaredElementType_13_0= ruleParameterizedTypeRefNominal )
                    // InternalTypesParser.g:1366:6: lv_declaredElementType_13_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTObjectPrototypeAccess().getDeclaredElementTypeParameterizedTypeRefNominalParserRuleCall_7_1_0());
                      					
                    }
                    pushFollow(FOLLOW_31);
                    lv_declaredElementType_13_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTObjectPrototypeRule());
                      						}
                      						set(
                      							current,
                      							"declaredElementType",
                      							lv_declaredElementType_13_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1384:3: ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation ) )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==CommercialAt) && (synpred3_InternalTypesParser())) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // InternalTypesParser.g:1385:4: ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation )
            	    {
            	    // InternalTypesParser.g:1394:4: (lv_annotations_14_0= ruleTAnnotation )
            	    // InternalTypesParser.g:1395:5: lv_annotations_14_0= ruleTAnnotation
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getTObjectPrototypeAccess().getAnnotationsTAnnotationParserRuleCall_8_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_31);
            	    lv_annotations_14_0=ruleTAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getTObjectPrototypeRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_14_0,
            	      						"org.eclipse.n4js.ts.Types.TAnnotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);

            otherlv_15=(Token)match(input,LeftCurlyBracket,FOLLOW_32); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_15, grammarAccess.getTObjectPrototypeAccess().getLeftCurlyBracketKeyword_9());
              		
            }
            // InternalTypesParser.g:1416:3: ( (lv_ownedMembers_16_0= ruleTMember ) )*
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==ProtectedInternal||LA26_0==PublicInternal||LA26_0==Protected||(LA26_0>=Private && LA26_0<=Project)||LA26_0==Public) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // InternalTypesParser.g:1417:4: (lv_ownedMembers_16_0= ruleTMember )
            	    {
            	    // InternalTypesParser.g:1417:4: (lv_ownedMembers_16_0= ruleTMember )
            	    // InternalTypesParser.g:1418:5: lv_ownedMembers_16_0= ruleTMember
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getTObjectPrototypeAccess().getOwnedMembersTMemberParserRuleCall_10_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_32);
            	    lv_ownedMembers_16_0=ruleTMember();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getTObjectPrototypeRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembers",
            	      						lv_ownedMembers_16_0,
            	      						"org.eclipse.n4js.ts.Types.TMember");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);

            // InternalTypesParser.g:1435:3: ( ( (lv_callableCtor_17_0= ruleCallableCtor ) ) ( (lv_ownedMembers_18_0= ruleTMember ) )* )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==LeftParenthesis) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // InternalTypesParser.g:1436:4: ( (lv_callableCtor_17_0= ruleCallableCtor ) ) ( (lv_ownedMembers_18_0= ruleTMember ) )*
                    {
                    // InternalTypesParser.g:1436:4: ( (lv_callableCtor_17_0= ruleCallableCtor ) )
                    // InternalTypesParser.g:1437:5: (lv_callableCtor_17_0= ruleCallableCtor )
                    {
                    // InternalTypesParser.g:1437:5: (lv_callableCtor_17_0= ruleCallableCtor )
                    // InternalTypesParser.g:1438:6: lv_callableCtor_17_0= ruleCallableCtor
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTObjectPrototypeAccess().getCallableCtorCallableCtorParserRuleCall_11_0_0());
                      					
                    }
                    pushFollow(FOLLOW_33);
                    lv_callableCtor_17_0=ruleCallableCtor();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTObjectPrototypeRule());
                      						}
                      						set(
                      							current,
                      							"callableCtor",
                      							lv_callableCtor_17_0,
                      							"org.eclipse.n4js.ts.Types.CallableCtor");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:1455:4: ( (lv_ownedMembers_18_0= ruleTMember ) )*
                    loop27:
                    do {
                        int alt27=2;
                        int LA27_0 = input.LA(1);

                        if ( (LA27_0==ProtectedInternal||LA27_0==PublicInternal||LA27_0==Protected||(LA27_0>=Private && LA27_0<=Project)||LA27_0==Public) ) {
                            alt27=1;
                        }


                        switch (alt27) {
                    	case 1 :
                    	    // InternalTypesParser.g:1456:5: (lv_ownedMembers_18_0= ruleTMember )
                    	    {
                    	    // InternalTypesParser.g:1456:5: (lv_ownedMembers_18_0= ruleTMember )
                    	    // InternalTypesParser.g:1457:6: lv_ownedMembers_18_0= ruleTMember
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getTObjectPrototypeAccess().getOwnedMembersTMemberParserRuleCall_11_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_33);
                    	    lv_ownedMembers_18_0=ruleTMember();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getTObjectPrototypeRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"ownedMembers",
                    	      							lv_ownedMembers_18_0,
                    	      							"org.eclipse.n4js.ts.Types.TMember");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_19=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_19, grammarAccess.getTObjectPrototypeAccess().getRightCurlyBracketKeyword_12());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTObjectPrototype"


    // $ANTLR start "entryRuleVirtualBaseType"
    // InternalTypesParser.g:1483:1: entryRuleVirtualBaseType returns [EObject current=null] : iv_ruleVirtualBaseType= ruleVirtualBaseType EOF ;
    public final EObject entryRuleVirtualBaseType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVirtualBaseType = null;


        try {
            // InternalTypesParser.g:1483:56: (iv_ruleVirtualBaseType= ruleVirtualBaseType EOF )
            // InternalTypesParser.g:1484:2: iv_ruleVirtualBaseType= ruleVirtualBaseType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVirtualBaseTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVirtualBaseType=ruleVirtualBaseType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVirtualBaseType; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVirtualBaseType"


    // $ANTLR start "ruleVirtualBaseType"
    // InternalTypesParser.g:1490:1: ruleVirtualBaseType returns [EObject current=null] : ( () otherlv_1= VirtualBase ( (lv_name_2_0= ruleBindingTypesIdentifier ) ) (otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_5= LeftCurlyBracket ( (lv_ownedMembers_6_0= ruleTMember ) )* otherlv_7= RightCurlyBracket ) ;
    public final EObject ruleVirtualBaseType() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject lv_declaredElementType_4_0 = null;

        EObject lv_ownedMembers_6_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1496:2: ( ( () otherlv_1= VirtualBase ( (lv_name_2_0= ruleBindingTypesIdentifier ) ) (otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_5= LeftCurlyBracket ( (lv_ownedMembers_6_0= ruleTMember ) )* otherlv_7= RightCurlyBracket ) )
            // InternalTypesParser.g:1497:2: ( () otherlv_1= VirtualBase ( (lv_name_2_0= ruleBindingTypesIdentifier ) ) (otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_5= LeftCurlyBracket ( (lv_ownedMembers_6_0= ruleTMember ) )* otherlv_7= RightCurlyBracket )
            {
            // InternalTypesParser.g:1497:2: ( () otherlv_1= VirtualBase ( (lv_name_2_0= ruleBindingTypesIdentifier ) ) (otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_5= LeftCurlyBracket ( (lv_ownedMembers_6_0= ruleTMember ) )* otherlv_7= RightCurlyBracket )
            // InternalTypesParser.g:1498:3: () otherlv_1= VirtualBase ( (lv_name_2_0= ruleBindingTypesIdentifier ) ) (otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) ) )? otherlv_5= LeftCurlyBracket ( (lv_ownedMembers_6_0= ruleTMember ) )* otherlv_7= RightCurlyBracket
            {
            // InternalTypesParser.g:1498:3: ()
            // InternalTypesParser.g:1499:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVirtualBaseTypeAccess().getVirtualBaseTypeAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,VirtualBase,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getVirtualBaseTypeAccess().getVirtualBaseKeyword_1());
              		
            }
            // InternalTypesParser.g:1509:3: ( (lv_name_2_0= ruleBindingTypesIdentifier ) )
            // InternalTypesParser.g:1510:4: (lv_name_2_0= ruleBindingTypesIdentifier )
            {
            // InternalTypesParser.g:1510:4: (lv_name_2_0= ruleBindingTypesIdentifier )
            // InternalTypesParser.g:1511:5: lv_name_2_0= ruleBindingTypesIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVirtualBaseTypeAccess().getNameBindingTypesIdentifierParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_name_2_0=ruleBindingTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVirtualBaseTypeRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.eclipse.n4js.ts.Types.BindingTypesIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:1528:3: (otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) ) )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==Indexed) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // InternalTypesParser.g:1529:4: otherlv_3= Indexed ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) )
                    {
                    otherlv_3=(Token)match(input,Indexed,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getVirtualBaseTypeAccess().getIndexedKeyword_3_0());
                      			
                    }
                    // InternalTypesParser.g:1533:4: ( (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal ) )
                    // InternalTypesParser.g:1534:5: (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal )
                    {
                    // InternalTypesParser.g:1534:5: (lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal )
                    // InternalTypesParser.g:1535:6: lv_declaredElementType_4_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getVirtualBaseTypeAccess().getDeclaredElementTypeParameterizedTypeRefNominalParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_declaredElementType_4_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVirtualBaseTypeRule());
                      						}
                      						set(
                      							current,
                      							"declaredElementType",
                      							lv_declaredElementType_4_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,LeftCurlyBracket,FOLLOW_33); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getVirtualBaseTypeAccess().getLeftCurlyBracketKeyword_4());
              		
            }
            // InternalTypesParser.g:1557:3: ( (lv_ownedMembers_6_0= ruleTMember ) )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==ProtectedInternal||LA30_0==PublicInternal||LA30_0==Protected||(LA30_0>=Private && LA30_0<=Project)||LA30_0==Public) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // InternalTypesParser.g:1558:4: (lv_ownedMembers_6_0= ruleTMember )
            	    {
            	    // InternalTypesParser.g:1558:4: (lv_ownedMembers_6_0= ruleTMember )
            	    // InternalTypesParser.g:1559:5: lv_ownedMembers_6_0= ruleTMember
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVirtualBaseTypeAccess().getOwnedMembersTMemberParserRuleCall_5_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_33);
            	    lv_ownedMembers_6_0=ruleTMember();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVirtualBaseTypeRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembers",
            	      						lv_ownedMembers_6_0,
            	      						"org.eclipse.n4js.ts.Types.TMember");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);

            otherlv_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getVirtualBaseTypeAccess().getRightCurlyBracketKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVirtualBaseType"


    // $ANTLR start "entryRuleTClass"
    // InternalTypesParser.g:1584:1: entryRuleTClass returns [EObject current=null] : iv_ruleTClass= ruleTClass EOF ;
    public final EObject entryRuleTClass() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTClass = null;


        try {
            // InternalTypesParser.g:1584:47: (iv_ruleTClass= ruleTClass EOF )
            // InternalTypesParser.g:1585:2: iv_ruleTClass= ruleTClass EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTClassRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTClass=ruleTClass();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTClass; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTClass"


    // $ANTLR start "ruleTClass"
    // InternalTypesParser.g:1591:1: ruleTClass returns [EObject current=null] : ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredAbstract_2_0= Abstract ) )? ( (lv_declaredFinal_3_0= Final ) )? otherlv_4= Class ( (lv_typingStrategy_5_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_6_0= ruleBindingTypesIdentifier ) ) (otherlv_7= LessThanSign ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_9= Comma ( (lv_typeVars_10_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_11= GreaterThanSign )? (otherlv_12= Extends ( (lv_superClassRef_13_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_14= Implements ( (lv_implementedInterfaceRefs_15_0= ruleParameterizedTypeRefNominal ) ) (otherlv_16= Comma ( (lv_implementedInterfaceRefs_17_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_18_0= ruleTAnnotation ) )* otherlv_19= LeftCurlyBracket ( (lv_ownedMembers_20_0= ruleTMember ) )* ( ( (lv_callableCtor_21_0= ruleCallableCtor ) ) ( (lv_ownedMembers_22_0= ruleTMember ) )* )? otherlv_23= RightCurlyBracket ) ;
    public final EObject ruleTClass() throws RecognitionException {
        EObject current = null;

        Token lv_declaredProvidedByRuntime_1_0=null;
        Token lv_declaredAbstract_2_0=null;
        Token lv_declaredFinal_3_0=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_14=null;
        Token otherlv_16=null;
        Token otherlv_19=null;
        Token otherlv_23=null;
        Enumerator lv_declaredTypeAccessModifier_0_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_5_0 = null;

        AntlrDatatypeRuleToken lv_name_6_0 = null;

        EObject lv_typeVars_8_0 = null;

        EObject lv_typeVars_10_0 = null;

        EObject lv_superClassRef_13_0 = null;

        EObject lv_implementedInterfaceRefs_15_0 = null;

        EObject lv_implementedInterfaceRefs_17_0 = null;

        EObject lv_annotations_18_0 = null;

        EObject lv_ownedMembers_20_0 = null;

        EObject lv_callableCtor_21_0 = null;

        EObject lv_ownedMembers_22_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1597:2: ( ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredAbstract_2_0= Abstract ) )? ( (lv_declaredFinal_3_0= Final ) )? otherlv_4= Class ( (lv_typingStrategy_5_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_6_0= ruleBindingTypesIdentifier ) ) (otherlv_7= LessThanSign ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_9= Comma ( (lv_typeVars_10_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_11= GreaterThanSign )? (otherlv_12= Extends ( (lv_superClassRef_13_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_14= Implements ( (lv_implementedInterfaceRefs_15_0= ruleParameterizedTypeRefNominal ) ) (otherlv_16= Comma ( (lv_implementedInterfaceRefs_17_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_18_0= ruleTAnnotation ) )* otherlv_19= LeftCurlyBracket ( (lv_ownedMembers_20_0= ruleTMember ) )* ( ( (lv_callableCtor_21_0= ruleCallableCtor ) ) ( (lv_ownedMembers_22_0= ruleTMember ) )* )? otherlv_23= RightCurlyBracket ) )
            // InternalTypesParser.g:1598:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredAbstract_2_0= Abstract ) )? ( (lv_declaredFinal_3_0= Final ) )? otherlv_4= Class ( (lv_typingStrategy_5_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_6_0= ruleBindingTypesIdentifier ) ) (otherlv_7= LessThanSign ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_9= Comma ( (lv_typeVars_10_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_11= GreaterThanSign )? (otherlv_12= Extends ( (lv_superClassRef_13_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_14= Implements ( (lv_implementedInterfaceRefs_15_0= ruleParameterizedTypeRefNominal ) ) (otherlv_16= Comma ( (lv_implementedInterfaceRefs_17_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_18_0= ruleTAnnotation ) )* otherlv_19= LeftCurlyBracket ( (lv_ownedMembers_20_0= ruleTMember ) )* ( ( (lv_callableCtor_21_0= ruleCallableCtor ) ) ( (lv_ownedMembers_22_0= ruleTMember ) )* )? otherlv_23= RightCurlyBracket )
            {
            // InternalTypesParser.g:1598:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredAbstract_2_0= Abstract ) )? ( (lv_declaredFinal_3_0= Final ) )? otherlv_4= Class ( (lv_typingStrategy_5_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_6_0= ruleBindingTypesIdentifier ) ) (otherlv_7= LessThanSign ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_9= Comma ( (lv_typeVars_10_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_11= GreaterThanSign )? (otherlv_12= Extends ( (lv_superClassRef_13_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_14= Implements ( (lv_implementedInterfaceRefs_15_0= ruleParameterizedTypeRefNominal ) ) (otherlv_16= Comma ( (lv_implementedInterfaceRefs_17_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_18_0= ruleTAnnotation ) )* otherlv_19= LeftCurlyBracket ( (lv_ownedMembers_20_0= ruleTMember ) )* ( ( (lv_callableCtor_21_0= ruleCallableCtor ) ) ( (lv_ownedMembers_22_0= ruleTMember ) )* )? otherlv_23= RightCurlyBracket )
            // InternalTypesParser.g:1599:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? ( (lv_declaredAbstract_2_0= Abstract ) )? ( (lv_declaredFinal_3_0= Final ) )? otherlv_4= Class ( (lv_typingStrategy_5_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_6_0= ruleBindingTypesIdentifier ) ) (otherlv_7= LessThanSign ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_9= Comma ( (lv_typeVars_10_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_11= GreaterThanSign )? (otherlv_12= Extends ( (lv_superClassRef_13_0= ruleParameterizedTypeRefNominal ) ) )? (otherlv_14= Implements ( (lv_implementedInterfaceRefs_15_0= ruleParameterizedTypeRefNominal ) ) (otherlv_16= Comma ( (lv_implementedInterfaceRefs_17_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_18_0= ruleTAnnotation ) )* otherlv_19= LeftCurlyBracket ( (lv_ownedMembers_20_0= ruleTMember ) )* ( ( (lv_callableCtor_21_0= ruleCallableCtor ) ) ( (lv_ownedMembers_22_0= ruleTMember ) )* )? otherlv_23= RightCurlyBracket
            {
            // InternalTypesParser.g:1599:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) )
            // InternalTypesParser.g:1600:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            {
            // InternalTypesParser.g:1600:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            // InternalTypesParser.g:1601:5: lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTClassAccess().getDeclaredTypeAccessModifierTypeAccessModifierEnumRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_34);
            lv_declaredTypeAccessModifier_0_0=ruleTypeAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTClassRule());
              					}
              					set(
              						current,
              						"declaredTypeAccessModifier",
              						lv_declaredTypeAccessModifier_0_0,
              						"org.eclipse.n4js.ts.Types.TypeAccessModifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:1618:3: ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==ProvidedByRuntime) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // InternalTypesParser.g:1619:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    {
                    // InternalTypesParser.g:1619:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    // InternalTypesParser.g:1620:5: lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime
                    {
                    lv_declaredProvidedByRuntime_1_0=(Token)match(input,ProvidedByRuntime,FOLLOW_35); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredProvidedByRuntime_1_0, grammarAccess.getTClassAccess().getDeclaredProvidedByRuntimeProvidedByRuntimeKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTClassRule());
                      					}
                      					setWithLastConsumed(current, "declaredProvidedByRuntime", true, "providedByRuntime");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1632:3: ( (lv_declaredAbstract_2_0= Abstract ) )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==Abstract) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // InternalTypesParser.g:1633:4: (lv_declaredAbstract_2_0= Abstract )
                    {
                    // InternalTypesParser.g:1633:4: (lv_declaredAbstract_2_0= Abstract )
                    // InternalTypesParser.g:1634:5: lv_declaredAbstract_2_0= Abstract
                    {
                    lv_declaredAbstract_2_0=(Token)match(input,Abstract,FOLLOW_36); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredAbstract_2_0, grammarAccess.getTClassAccess().getDeclaredAbstractAbstractKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTClassRule());
                      					}
                      					setWithLastConsumed(current, "declaredAbstract", true, "abstract");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1646:3: ( (lv_declaredFinal_3_0= Final ) )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==Final) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // InternalTypesParser.g:1647:4: (lv_declaredFinal_3_0= Final )
                    {
                    // InternalTypesParser.g:1647:4: (lv_declaredFinal_3_0= Final )
                    // InternalTypesParser.g:1648:5: lv_declaredFinal_3_0= Final
                    {
                    lv_declaredFinal_3_0=(Token)match(input,Final,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredFinal_3_0, grammarAccess.getTClassAccess().getDeclaredFinalFinalKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTClassRule());
                      					}
                      					setWithLastConsumed(current, "declaredFinal", true, "final");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,Class,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTClassAccess().getClassKeyword_4());
              		
            }
            // InternalTypesParser.g:1664:3: ( (lv_typingStrategy_5_0= ruleTypingStrategyDefSiteOperator ) )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==Tilde) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // InternalTypesParser.g:1665:4: (lv_typingStrategy_5_0= ruleTypingStrategyDefSiteOperator )
                    {
                    // InternalTypesParser.g:1665:4: (lv_typingStrategy_5_0= ruleTypingStrategyDefSiteOperator )
                    // InternalTypesParser.g:1666:5: lv_typingStrategy_5_0= ruleTypingStrategyDefSiteOperator
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTClassAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_10);
                    lv_typingStrategy_5_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTClassRule());
                      					}
                      					set(
                      						current,
                      						"typingStrategy",
                      						lv_typingStrategy_5_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1683:3: ( (lv_name_6_0= ruleBindingTypesIdentifier ) )
            // InternalTypesParser.g:1684:4: (lv_name_6_0= ruleBindingTypesIdentifier )
            {
            // InternalTypesParser.g:1684:4: (lv_name_6_0= ruleBindingTypesIdentifier )
            // InternalTypesParser.g:1685:5: lv_name_6_0= ruleBindingTypesIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTClassAccess().getNameBindingTypesIdentifierParserRuleCall_6_0());
              				
            }
            pushFollow(FOLLOW_39);
            lv_name_6_0=ruleBindingTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTClassRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_6_0,
              						"org.eclipse.n4js.ts.Types.BindingTypesIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:1702:3: (otherlv_7= LessThanSign ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_9= Comma ( (lv_typeVars_10_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_11= GreaterThanSign )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==LessThanSign) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // InternalTypesParser.g:1703:4: otherlv_7= LessThanSign ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_9= Comma ( (lv_typeVars_10_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_11= GreaterThanSign
                    {
                    otherlv_7=(Token)match(input,LessThanSign,FOLLOW_40); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getTClassAccess().getLessThanSignKeyword_7_0());
                      			
                    }
                    // InternalTypesParser.g:1707:4: ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) )
                    // InternalTypesParser.g:1708:5: (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance )
                    {
                    // InternalTypesParser.g:1708:5: (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance )
                    // InternalTypesParser.g:1709:6: lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTClassAccess().getTypeVarsTypeVariableWithDefSiteVarianceParserRuleCall_7_1_0());
                      					
                    }
                    pushFollow(FOLLOW_28);
                    lv_typeVars_8_0=ruleTypeVariableWithDefSiteVariance();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTClassRule());
                      						}
                      						add(
                      							current,
                      							"typeVars",
                      							lv_typeVars_8_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeVariableWithDefSiteVariance");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:1726:4: (otherlv_9= Comma ( (lv_typeVars_10_0= ruleTypeVariableWithDefSiteVariance ) ) )*
                    loop35:
                    do {
                        int alt35=2;
                        int LA35_0 = input.LA(1);

                        if ( (LA35_0==Comma) ) {
                            alt35=1;
                        }


                        switch (alt35) {
                    	case 1 :
                    	    // InternalTypesParser.g:1727:5: otherlv_9= Comma ( (lv_typeVars_10_0= ruleTypeVariableWithDefSiteVariance ) )
                    	    {
                    	    otherlv_9=(Token)match(input,Comma,FOLLOW_40); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_9, grammarAccess.getTClassAccess().getCommaKeyword_7_2_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:1731:5: ( (lv_typeVars_10_0= ruleTypeVariableWithDefSiteVariance ) )
                    	    // InternalTypesParser.g:1732:6: (lv_typeVars_10_0= ruleTypeVariableWithDefSiteVariance )
                    	    {
                    	    // InternalTypesParser.g:1732:6: (lv_typeVars_10_0= ruleTypeVariableWithDefSiteVariance )
                    	    // InternalTypesParser.g:1733:7: lv_typeVars_10_0= ruleTypeVariableWithDefSiteVariance
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTClassAccess().getTypeVarsTypeVariableWithDefSiteVarianceParserRuleCall_7_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_28);
                    	    lv_typeVars_10_0=ruleTypeVariableWithDefSiteVariance();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTClassRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeVars",
                    	      								lv_typeVars_10_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.TypeVariableWithDefSiteVariance");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop35;
                        }
                    } while (true);

                    otherlv_11=(Token)match(input,GreaterThanSign,FOLLOW_41); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_11, grammarAccess.getTClassAccess().getGreaterThanSignKeyword_7_3());
                      			
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:1756:3: (otherlv_12= Extends ( (lv_superClassRef_13_0= ruleParameterizedTypeRefNominal ) ) )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==Extends) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // InternalTypesParser.g:1757:4: otherlv_12= Extends ( (lv_superClassRef_13_0= ruleParameterizedTypeRefNominal ) )
                    {
                    otherlv_12=(Token)match(input,Extends,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getTClassAccess().getExtendsKeyword_8_0());
                      			
                    }
                    // InternalTypesParser.g:1761:4: ( (lv_superClassRef_13_0= ruleParameterizedTypeRefNominal ) )
                    // InternalTypesParser.g:1762:5: (lv_superClassRef_13_0= ruleParameterizedTypeRefNominal )
                    {
                    // InternalTypesParser.g:1762:5: (lv_superClassRef_13_0= ruleParameterizedTypeRefNominal )
                    // InternalTypesParser.g:1763:6: lv_superClassRef_13_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTClassAccess().getSuperClassRefParameterizedTypeRefNominalParserRuleCall_8_1_0());
                      					
                    }
                    pushFollow(FOLLOW_42);
                    lv_superClassRef_13_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTClassRule());
                      						}
                      						set(
                      							current,
                      							"superClassRef",
                      							lv_superClassRef_13_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:1781:3: (otherlv_14= Implements ( (lv_implementedInterfaceRefs_15_0= ruleParameterizedTypeRefNominal ) ) (otherlv_16= Comma ( (lv_implementedInterfaceRefs_17_0= ruleParameterizedTypeRefNominal ) ) )* )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==Implements) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // InternalTypesParser.g:1782:4: otherlv_14= Implements ( (lv_implementedInterfaceRefs_15_0= ruleParameterizedTypeRefNominal ) ) (otherlv_16= Comma ( (lv_implementedInterfaceRefs_17_0= ruleParameterizedTypeRefNominal ) ) )*
                    {
                    otherlv_14=(Token)match(input,Implements,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_14, grammarAccess.getTClassAccess().getImplementsKeyword_9_0());
                      			
                    }
                    // InternalTypesParser.g:1786:4: ( (lv_implementedInterfaceRefs_15_0= ruleParameterizedTypeRefNominal ) )
                    // InternalTypesParser.g:1787:5: (lv_implementedInterfaceRefs_15_0= ruleParameterizedTypeRefNominal )
                    {
                    // InternalTypesParser.g:1787:5: (lv_implementedInterfaceRefs_15_0= ruleParameterizedTypeRefNominal )
                    // InternalTypesParser.g:1788:6: lv_implementedInterfaceRefs_15_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTClassAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_9_1_0());
                      					
                    }
                    pushFollow(FOLLOW_43);
                    lv_implementedInterfaceRefs_15_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTClassRule());
                      						}
                      						add(
                      							current,
                      							"implementedInterfaceRefs",
                      							lv_implementedInterfaceRefs_15_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:1805:4: (otherlv_16= Comma ( (lv_implementedInterfaceRefs_17_0= ruleParameterizedTypeRefNominal ) ) )*
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==Comma) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    // InternalTypesParser.g:1806:5: otherlv_16= Comma ( (lv_implementedInterfaceRefs_17_0= ruleParameterizedTypeRefNominal ) )
                    	    {
                    	    otherlv_16=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_16, grammarAccess.getTClassAccess().getCommaKeyword_9_2_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:1810:5: ( (lv_implementedInterfaceRefs_17_0= ruleParameterizedTypeRefNominal ) )
                    	    // InternalTypesParser.g:1811:6: (lv_implementedInterfaceRefs_17_0= ruleParameterizedTypeRefNominal )
                    	    {
                    	    // InternalTypesParser.g:1811:6: (lv_implementedInterfaceRefs_17_0= ruleParameterizedTypeRefNominal )
                    	    // InternalTypesParser.g:1812:7: lv_implementedInterfaceRefs_17_0= ruleParameterizedTypeRefNominal
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTClassAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_9_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_43);
                    	    lv_implementedInterfaceRefs_17_0=ruleParameterizedTypeRefNominal();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTClassRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"implementedInterfaceRefs",
                    	      								lv_implementedInterfaceRefs_17_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);


                    }
                    break;

            }

            // InternalTypesParser.g:1831:3: ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_18_0= ruleTAnnotation ) )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==CommercialAt) && (synpred4_InternalTypesParser())) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // InternalTypesParser.g:1832:4: ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_18_0= ruleTAnnotation )
            	    {
            	    // InternalTypesParser.g:1841:4: (lv_annotations_18_0= ruleTAnnotation )
            	    // InternalTypesParser.g:1842:5: lv_annotations_18_0= ruleTAnnotation
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getTClassAccess().getAnnotationsTAnnotationParserRuleCall_10_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_31);
            	    lv_annotations_18_0=ruleTAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getTClassRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_18_0,
            	      						"org.eclipse.n4js.ts.Types.TAnnotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);

            otherlv_19=(Token)match(input,LeftCurlyBracket,FOLLOW_32); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_19, grammarAccess.getTClassAccess().getLeftCurlyBracketKeyword_11());
              		
            }
            // InternalTypesParser.g:1863:3: ( (lv_ownedMembers_20_0= ruleTMember ) )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==ProtectedInternal||LA41_0==PublicInternal||LA41_0==Protected||(LA41_0>=Private && LA41_0<=Project)||LA41_0==Public) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // InternalTypesParser.g:1864:4: (lv_ownedMembers_20_0= ruleTMember )
            	    {
            	    // InternalTypesParser.g:1864:4: (lv_ownedMembers_20_0= ruleTMember )
            	    // InternalTypesParser.g:1865:5: lv_ownedMembers_20_0= ruleTMember
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getTClassAccess().getOwnedMembersTMemberParserRuleCall_12_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_32);
            	    lv_ownedMembers_20_0=ruleTMember();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getTClassRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembers",
            	      						lv_ownedMembers_20_0,
            	      						"org.eclipse.n4js.ts.Types.TMember");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);

            // InternalTypesParser.g:1882:3: ( ( (lv_callableCtor_21_0= ruleCallableCtor ) ) ( (lv_ownedMembers_22_0= ruleTMember ) )* )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==LeftParenthesis) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // InternalTypesParser.g:1883:4: ( (lv_callableCtor_21_0= ruleCallableCtor ) ) ( (lv_ownedMembers_22_0= ruleTMember ) )*
                    {
                    // InternalTypesParser.g:1883:4: ( (lv_callableCtor_21_0= ruleCallableCtor ) )
                    // InternalTypesParser.g:1884:5: (lv_callableCtor_21_0= ruleCallableCtor )
                    {
                    // InternalTypesParser.g:1884:5: (lv_callableCtor_21_0= ruleCallableCtor )
                    // InternalTypesParser.g:1885:6: lv_callableCtor_21_0= ruleCallableCtor
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTClassAccess().getCallableCtorCallableCtorParserRuleCall_13_0_0());
                      					
                    }
                    pushFollow(FOLLOW_33);
                    lv_callableCtor_21_0=ruleCallableCtor();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTClassRule());
                      						}
                      						set(
                      							current,
                      							"callableCtor",
                      							lv_callableCtor_21_0,
                      							"org.eclipse.n4js.ts.Types.CallableCtor");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:1902:4: ( (lv_ownedMembers_22_0= ruleTMember ) )*
                    loop42:
                    do {
                        int alt42=2;
                        int LA42_0 = input.LA(1);

                        if ( (LA42_0==ProtectedInternal||LA42_0==PublicInternal||LA42_0==Protected||(LA42_0>=Private && LA42_0<=Project)||LA42_0==Public) ) {
                            alt42=1;
                        }


                        switch (alt42) {
                    	case 1 :
                    	    // InternalTypesParser.g:1903:5: (lv_ownedMembers_22_0= ruleTMember )
                    	    {
                    	    // InternalTypesParser.g:1903:5: (lv_ownedMembers_22_0= ruleTMember )
                    	    // InternalTypesParser.g:1904:6: lv_ownedMembers_22_0= ruleTMember
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getTClassAccess().getOwnedMembersTMemberParserRuleCall_13_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_33);
                    	    lv_ownedMembers_22_0=ruleTMember();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getTClassRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"ownedMembers",
                    	      							lv_ownedMembers_22_0,
                    	      							"org.eclipse.n4js.ts.Types.TMember");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop42;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_23=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_23, grammarAccess.getTClassAccess().getRightCurlyBracketKeyword_14());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTClass"


    // $ANTLR start "entryRuleTInterface"
    // InternalTypesParser.g:1930:1: entryRuleTInterface returns [EObject current=null] : iv_ruleTInterface= ruleTInterface EOF ;
    public final EObject entryRuleTInterface() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTInterface = null;


        try {
            // InternalTypesParser.g:1930:51: (iv_ruleTInterface= ruleTInterface EOF )
            // InternalTypesParser.g:1931:2: iv_ruleTInterface= ruleTInterface EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTInterfaceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTInterface=ruleTInterface();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTInterface; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTInterface"


    // $ANTLR start "ruleTInterface"
    // InternalTypesParser.g:1937:1: ruleTInterface returns [EObject current=null] : ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Interface ( (lv_typingStrategy_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) (otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_9= GreaterThanSign )? (otherlv_10= Extends ( (lv_superInterfaceRefs_11_0= ruleParameterizedTypeRefNominal ) ) (otherlv_12= Comma ( (lv_superInterfaceRefs_13_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation ) )* otherlv_15= LeftCurlyBracket ( (lv_ownedMembers_16_0= ruleTMember ) )* otherlv_17= RightCurlyBracket ) ;
    public final EObject ruleTInterface() throws RecognitionException {
        EObject current = null;

        Token lv_declaredProvidedByRuntime_1_0=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Enumerator lv_declaredTypeAccessModifier_0_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_3_0 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        EObject lv_typeVars_6_0 = null;

        EObject lv_typeVars_8_0 = null;

        EObject lv_superInterfaceRefs_11_0 = null;

        EObject lv_superInterfaceRefs_13_0 = null;

        EObject lv_annotations_14_0 = null;

        EObject lv_ownedMembers_16_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:1943:2: ( ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Interface ( (lv_typingStrategy_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) (otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_9= GreaterThanSign )? (otherlv_10= Extends ( (lv_superInterfaceRefs_11_0= ruleParameterizedTypeRefNominal ) ) (otherlv_12= Comma ( (lv_superInterfaceRefs_13_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation ) )* otherlv_15= LeftCurlyBracket ( (lv_ownedMembers_16_0= ruleTMember ) )* otherlv_17= RightCurlyBracket ) )
            // InternalTypesParser.g:1944:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Interface ( (lv_typingStrategy_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) (otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_9= GreaterThanSign )? (otherlv_10= Extends ( (lv_superInterfaceRefs_11_0= ruleParameterizedTypeRefNominal ) ) (otherlv_12= Comma ( (lv_superInterfaceRefs_13_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation ) )* otherlv_15= LeftCurlyBracket ( (lv_ownedMembers_16_0= ruleTMember ) )* otherlv_17= RightCurlyBracket )
            {
            // InternalTypesParser.g:1944:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Interface ( (lv_typingStrategy_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) (otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_9= GreaterThanSign )? (otherlv_10= Extends ( (lv_superInterfaceRefs_11_0= ruleParameterizedTypeRefNominal ) ) (otherlv_12= Comma ( (lv_superInterfaceRefs_13_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation ) )* otherlv_15= LeftCurlyBracket ( (lv_ownedMembers_16_0= ruleTMember ) )* otherlv_17= RightCurlyBracket )
            // InternalTypesParser.g:1945:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Interface ( (lv_typingStrategy_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_4_0= ruleBindingTypesIdentifier ) ) (otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_9= GreaterThanSign )? (otherlv_10= Extends ( (lv_superInterfaceRefs_11_0= ruleParameterizedTypeRefNominal ) ) (otherlv_12= Comma ( (lv_superInterfaceRefs_13_0= ruleParameterizedTypeRefNominal ) ) )* )? ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation ) )* otherlv_15= LeftCurlyBracket ( (lv_ownedMembers_16_0= ruleTMember ) )* otherlv_17= RightCurlyBracket
            {
            // InternalTypesParser.g:1945:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) )
            // InternalTypesParser.g:1946:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            {
            // InternalTypesParser.g:1946:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            // InternalTypesParser.g:1947:5: lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTInterfaceAccess().getDeclaredTypeAccessModifierTypeAccessModifierEnumRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_44);
            lv_declaredTypeAccessModifier_0_0=ruleTypeAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTInterfaceRule());
              					}
              					set(
              						current,
              						"declaredTypeAccessModifier",
              						lv_declaredTypeAccessModifier_0_0,
              						"org.eclipse.n4js.ts.Types.TypeAccessModifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:1964:3: ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==ProvidedByRuntime) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // InternalTypesParser.g:1965:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    {
                    // InternalTypesParser.g:1965:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    // InternalTypesParser.g:1966:5: lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime
                    {
                    lv_declaredProvidedByRuntime_1_0=(Token)match(input,ProvidedByRuntime,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredProvidedByRuntime_1_0, grammarAccess.getTInterfaceAccess().getDeclaredProvidedByRuntimeProvidedByRuntimeKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTInterfaceRule());
                      					}
                      					setWithLastConsumed(current, "declaredProvidedByRuntime", true, "providedByRuntime");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_2=(Token)match(input,Interface,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getTInterfaceAccess().getInterfaceKeyword_2());
              		
            }
            // InternalTypesParser.g:1982:3: ( (lv_typingStrategy_3_0= ruleTypingStrategyDefSiteOperator ) )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==Tilde) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // InternalTypesParser.g:1983:4: (lv_typingStrategy_3_0= ruleTypingStrategyDefSiteOperator )
                    {
                    // InternalTypesParser.g:1983:4: (lv_typingStrategy_3_0= ruleTypingStrategyDefSiteOperator )
                    // InternalTypesParser.g:1984:5: lv_typingStrategy_3_0= ruleTypingStrategyDefSiteOperator
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTInterfaceAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_10);
                    lv_typingStrategy_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTInterfaceRule());
                      					}
                      					set(
                      						current,
                      						"typingStrategy",
                      						lv_typingStrategy_3_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:2001:3: ( (lv_name_4_0= ruleBindingTypesIdentifier ) )
            // InternalTypesParser.g:2002:4: (lv_name_4_0= ruleBindingTypesIdentifier )
            {
            // InternalTypesParser.g:2002:4: (lv_name_4_0= ruleBindingTypesIdentifier )
            // InternalTypesParser.g:2003:5: lv_name_4_0= ruleBindingTypesIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTInterfaceAccess().getNameBindingTypesIdentifierParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_46);
            lv_name_4_0=ruleBindingTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTInterfaceRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_4_0,
              						"org.eclipse.n4js.ts.Types.BindingTypesIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:2020:3: (otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_9= GreaterThanSign )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==LessThanSign) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // InternalTypesParser.g:2021:4: otherlv_5= LessThanSign ( (lv_typeVars_6_0= ruleTypeVariableWithDefSiteVariance ) ) (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) )* otherlv_9= GreaterThanSign
                    {
                    otherlv_5=(Token)match(input,LessThanSign,FOLLOW_40); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getTInterfaceAccess().getLessThanSignKeyword_5_0());
                      			
                    }
                    // InternalTypesParser.g:2025:4: ( (lv_typeVars_6_0= ruleTypeVariableWithDefSiteVariance ) )
                    // InternalTypesParser.g:2026:5: (lv_typeVars_6_0= ruleTypeVariableWithDefSiteVariance )
                    {
                    // InternalTypesParser.g:2026:5: (lv_typeVars_6_0= ruleTypeVariableWithDefSiteVariance )
                    // InternalTypesParser.g:2027:6: lv_typeVars_6_0= ruleTypeVariableWithDefSiteVariance
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTInterfaceAccess().getTypeVarsTypeVariableWithDefSiteVarianceParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_28);
                    lv_typeVars_6_0=ruleTypeVariableWithDefSiteVariance();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTInterfaceRule());
                      						}
                      						add(
                      							current,
                      							"typeVars",
                      							lv_typeVars_6_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeVariableWithDefSiteVariance");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:2044:4: (otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) ) )*
                    loop46:
                    do {
                        int alt46=2;
                        int LA46_0 = input.LA(1);

                        if ( (LA46_0==Comma) ) {
                            alt46=1;
                        }


                        switch (alt46) {
                    	case 1 :
                    	    // InternalTypesParser.g:2045:5: otherlv_7= Comma ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) )
                    	    {
                    	    otherlv_7=(Token)match(input,Comma,FOLLOW_40); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_7, grammarAccess.getTInterfaceAccess().getCommaKeyword_5_2_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:2049:5: ( (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance ) )
                    	    // InternalTypesParser.g:2050:6: (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance )
                    	    {
                    	    // InternalTypesParser.g:2050:6: (lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance )
                    	    // InternalTypesParser.g:2051:7: lv_typeVars_8_0= ruleTypeVariableWithDefSiteVariance
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTInterfaceAccess().getTypeVarsTypeVariableWithDefSiteVarianceParserRuleCall_5_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_28);
                    	    lv_typeVars_8_0=ruleTypeVariableWithDefSiteVariance();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTInterfaceRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeVars",
                    	      								lv_typeVars_8_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.TypeVariableWithDefSiteVariance");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop46;
                        }
                    } while (true);

                    otherlv_9=(Token)match(input,GreaterThanSign,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getTInterfaceAccess().getGreaterThanSignKeyword_5_3());
                      			
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:2074:3: (otherlv_10= Extends ( (lv_superInterfaceRefs_11_0= ruleParameterizedTypeRefNominal ) ) (otherlv_12= Comma ( (lv_superInterfaceRefs_13_0= ruleParameterizedTypeRefNominal ) ) )* )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==Extends) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // InternalTypesParser.g:2075:4: otherlv_10= Extends ( (lv_superInterfaceRefs_11_0= ruleParameterizedTypeRefNominal ) ) (otherlv_12= Comma ( (lv_superInterfaceRefs_13_0= ruleParameterizedTypeRefNominal ) ) )*
                    {
                    otherlv_10=(Token)match(input,Extends,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getTInterfaceAccess().getExtendsKeyword_6_0());
                      			
                    }
                    // InternalTypesParser.g:2079:4: ( (lv_superInterfaceRefs_11_0= ruleParameterizedTypeRefNominal ) )
                    // InternalTypesParser.g:2080:5: (lv_superInterfaceRefs_11_0= ruleParameterizedTypeRefNominal )
                    {
                    // InternalTypesParser.g:2080:5: (lv_superInterfaceRefs_11_0= ruleParameterizedTypeRefNominal )
                    // InternalTypesParser.g:2081:6: lv_superInterfaceRefs_11_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTInterfaceAccess().getSuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_6_1_0());
                      					
                    }
                    pushFollow(FOLLOW_43);
                    lv_superInterfaceRefs_11_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTInterfaceRule());
                      						}
                      						add(
                      							current,
                      							"superInterfaceRefs",
                      							lv_superInterfaceRefs_11_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:2098:4: (otherlv_12= Comma ( (lv_superInterfaceRefs_13_0= ruleParameterizedTypeRefNominal ) ) )*
                    loop48:
                    do {
                        int alt48=2;
                        int LA48_0 = input.LA(1);

                        if ( (LA48_0==Comma) ) {
                            alt48=1;
                        }


                        switch (alt48) {
                    	case 1 :
                    	    // InternalTypesParser.g:2099:5: otherlv_12= Comma ( (lv_superInterfaceRefs_13_0= ruleParameterizedTypeRefNominal ) )
                    	    {
                    	    otherlv_12=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_12, grammarAccess.getTInterfaceAccess().getCommaKeyword_6_2_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:2103:5: ( (lv_superInterfaceRefs_13_0= ruleParameterizedTypeRefNominal ) )
                    	    // InternalTypesParser.g:2104:6: (lv_superInterfaceRefs_13_0= ruleParameterizedTypeRefNominal )
                    	    {
                    	    // InternalTypesParser.g:2104:6: (lv_superInterfaceRefs_13_0= ruleParameterizedTypeRefNominal )
                    	    // InternalTypesParser.g:2105:7: lv_superInterfaceRefs_13_0= ruleParameterizedTypeRefNominal
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTInterfaceAccess().getSuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_6_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_43);
                    	    lv_superInterfaceRefs_13_0=ruleParameterizedTypeRefNominal();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTInterfaceRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"superInterfaceRefs",
                    	      								lv_superInterfaceRefs_13_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop48;
                        }
                    } while (true);


                    }
                    break;

            }

            // InternalTypesParser.g:2124:3: ( ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation ) )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==CommercialAt) && (synpred5_InternalTypesParser())) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // InternalTypesParser.g:2125:4: ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )=> (lv_annotations_14_0= ruleTAnnotation )
            	    {
            	    // InternalTypesParser.g:2134:4: (lv_annotations_14_0= ruleTAnnotation )
            	    // InternalTypesParser.g:2135:5: lv_annotations_14_0= ruleTAnnotation
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getTInterfaceAccess().getAnnotationsTAnnotationParserRuleCall_7_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_31);
            	    lv_annotations_14_0=ruleTAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getTInterfaceRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_14_0,
            	      						"org.eclipse.n4js.ts.Types.TAnnotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);

            otherlv_15=(Token)match(input,LeftCurlyBracket,FOLLOW_33); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_15, grammarAccess.getTInterfaceAccess().getLeftCurlyBracketKeyword_8());
              		
            }
            // InternalTypesParser.g:2156:3: ( (lv_ownedMembers_16_0= ruleTMember ) )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==ProtectedInternal||LA51_0==PublicInternal||LA51_0==Protected||(LA51_0>=Private && LA51_0<=Project)||LA51_0==Public) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // InternalTypesParser.g:2157:4: (lv_ownedMembers_16_0= ruleTMember )
            	    {
            	    // InternalTypesParser.g:2157:4: (lv_ownedMembers_16_0= ruleTMember )
            	    // InternalTypesParser.g:2158:5: lv_ownedMembers_16_0= ruleTMember
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getTInterfaceAccess().getOwnedMembersTMemberParserRuleCall_9_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_33);
            	    lv_ownedMembers_16_0=ruleTMember();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getTInterfaceRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembers",
            	      						lv_ownedMembers_16_0,
            	      						"org.eclipse.n4js.ts.Types.TMember");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);

            otherlv_17=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_17, grammarAccess.getTInterfaceAccess().getRightCurlyBracketKeyword_10());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTInterface"


    // $ANTLR start "entryRuleCallableCtor"
    // InternalTypesParser.g:2183:1: entryRuleCallableCtor returns [EObject current=null] : iv_ruleCallableCtor= ruleCallableCtor EOF ;
    public final EObject entryRuleCallableCtor() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCallableCtor = null;


        try {
            // InternalTypesParser.g:2183:53: (iv_ruleCallableCtor= ruleCallableCtor EOF )
            // InternalTypesParser.g:2184:2: iv_ruleCallableCtor= ruleCallableCtor EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCallableCtorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCallableCtor=ruleCallableCtor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCallableCtor; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCallableCtor"


    // $ANTLR start "ruleCallableCtor"
    // InternalTypesParser.g:2190:1: ruleCallableCtor returns [EObject current=null] : ( () otherlv_1= LeftParenthesis ( ( (lv_fpars_2_0= ruleTFormalParameter ) ) (otherlv_3= Comma ( (lv_fpars_4_0= ruleTFormalParameter ) ) )* )? otherlv_5= RightParenthesis (otherlv_6= Colon ( (lv_returnTypeRef_7_0= ruleTypeRef ) ) )? (otherlv_8= Semicolon )? ) ;
    public final EObject ruleCallableCtor() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        EObject lv_fpars_2_0 = null;

        EObject lv_fpars_4_0 = null;

        EObject lv_returnTypeRef_7_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:2196:2: ( ( () otherlv_1= LeftParenthesis ( ( (lv_fpars_2_0= ruleTFormalParameter ) ) (otherlv_3= Comma ( (lv_fpars_4_0= ruleTFormalParameter ) ) )* )? otherlv_5= RightParenthesis (otherlv_6= Colon ( (lv_returnTypeRef_7_0= ruleTypeRef ) ) )? (otherlv_8= Semicolon )? ) )
            // InternalTypesParser.g:2197:2: ( () otherlv_1= LeftParenthesis ( ( (lv_fpars_2_0= ruleTFormalParameter ) ) (otherlv_3= Comma ( (lv_fpars_4_0= ruleTFormalParameter ) ) )* )? otherlv_5= RightParenthesis (otherlv_6= Colon ( (lv_returnTypeRef_7_0= ruleTypeRef ) ) )? (otherlv_8= Semicolon )? )
            {
            // InternalTypesParser.g:2197:2: ( () otherlv_1= LeftParenthesis ( ( (lv_fpars_2_0= ruleTFormalParameter ) ) (otherlv_3= Comma ( (lv_fpars_4_0= ruleTFormalParameter ) ) )* )? otherlv_5= RightParenthesis (otherlv_6= Colon ( (lv_returnTypeRef_7_0= ruleTypeRef ) ) )? (otherlv_8= Semicolon )? )
            // InternalTypesParser.g:2198:3: () otherlv_1= LeftParenthesis ( ( (lv_fpars_2_0= ruleTFormalParameter ) ) (otherlv_3= Comma ( (lv_fpars_4_0= ruleTFormalParameter ) ) )* )? otherlv_5= RightParenthesis (otherlv_6= Colon ( (lv_returnTypeRef_7_0= ruleTypeRef ) ) )? (otherlv_8= Semicolon )?
            {
            // InternalTypesParser.g:2198:3: ()
            // InternalTypesParser.g:2199:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCallableCtorAccess().getTMethodAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_48); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getCallableCtorAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalTypesParser.g:2209:3: ( ( (lv_fpars_2_0= ruleTFormalParameter ) ) (otherlv_3= Comma ( (lv_fpars_4_0= ruleTFormalParameter ) ) )* )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( ((LA53_0>=Intersection && LA53_0<=Constructor)||LA53_0==Implements||(LA53_0>=Promisify && LA53_0<=Interface)||LA53_0==Protected||LA53_0==Abstract||LA53_0==External||(LA53_0>=Private && LA53_0<=Project)||LA53_0==Public||LA53_0==Static||LA53_0==Target||(LA53_0>=Async && LA53_0<=Await)||LA53_0==Union||(LA53_0>=Yield && LA53_0<=This)||LA53_0==From||LA53_0==Type||LA53_0==FullStopFullStopFullStop||(LA53_0>=Get && LA53_0<=Let)||(LA53_0>=Out && LA53_0<=Set)||LA53_0==As||LA53_0==Of||LA53_0==RULE_IDENTIFIER) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // InternalTypesParser.g:2210:4: ( (lv_fpars_2_0= ruleTFormalParameter ) ) (otherlv_3= Comma ( (lv_fpars_4_0= ruleTFormalParameter ) ) )*
                    {
                    // InternalTypesParser.g:2210:4: ( (lv_fpars_2_0= ruleTFormalParameter ) )
                    // InternalTypesParser.g:2211:5: (lv_fpars_2_0= ruleTFormalParameter )
                    {
                    // InternalTypesParser.g:2211:5: (lv_fpars_2_0= ruleTFormalParameter )
                    // InternalTypesParser.g:2212:6: lv_fpars_2_0= ruleTFormalParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCallableCtorAccess().getFparsTFormalParameterParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_7);
                    lv_fpars_2_0=ruleTFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCallableCtorRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_2_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TFormalParameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:2229:4: (otherlv_3= Comma ( (lv_fpars_4_0= ruleTFormalParameter ) ) )*
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);

                        if ( (LA52_0==Comma) ) {
                            alt52=1;
                        }


                        switch (alt52) {
                    	case 1 :
                    	    // InternalTypesParser.g:2230:5: otherlv_3= Comma ( (lv_fpars_4_0= ruleTFormalParameter ) )
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getCallableCtorAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:2234:5: ( (lv_fpars_4_0= ruleTFormalParameter ) )
                    	    // InternalTypesParser.g:2235:6: (lv_fpars_4_0= ruleTFormalParameter )
                    	    {
                    	    // InternalTypesParser.g:2235:6: (lv_fpars_4_0= ruleTFormalParameter )
                    	    // InternalTypesParser.g:2236:7: lv_fpars_4_0= ruleTFormalParameter
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getCallableCtorAccess().getFparsTFormalParameterParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_7);
                    	    lv_fpars_4_0=ruleTFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getCallableCtorRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_4_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.TFormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop52;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getCallableCtorAccess().getRightParenthesisKeyword_3());
              		
            }
            // InternalTypesParser.g:2259:3: (otherlv_6= Colon ( (lv_returnTypeRef_7_0= ruleTypeRef ) ) )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==Colon) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // InternalTypesParser.g:2260:4: otherlv_6= Colon ( (lv_returnTypeRef_7_0= ruleTypeRef ) )
                    {
                    otherlv_6=(Token)match(input,Colon,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getCallableCtorAccess().getColonKeyword_4_0());
                      			
                    }
                    // InternalTypesParser.g:2264:4: ( (lv_returnTypeRef_7_0= ruleTypeRef ) )
                    // InternalTypesParser.g:2265:5: (lv_returnTypeRef_7_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:2265:5: (lv_returnTypeRef_7_0= ruleTypeRef )
                    // InternalTypesParser.g:2266:6: lv_returnTypeRef_7_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCallableCtorAccess().getReturnTypeRefTypeRefParserRuleCall_4_1_0());
                      					
                    }
                    pushFollow(FOLLOW_51);
                    lv_returnTypeRef_7_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCallableCtorRule());
                      						}
                      						set(
                      							current,
                      							"returnTypeRef",
                      							lv_returnTypeRef_7_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:2284:3: (otherlv_8= Semicolon )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==Semicolon) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // InternalTypesParser.g:2285:4: otherlv_8= Semicolon
                    {
                    otherlv_8=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getCallableCtorAccess().getSemicolonKeyword_5());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCallableCtor"


    // $ANTLR start "entryRuleTMember"
    // InternalTypesParser.g:2294:1: entryRuleTMember returns [EObject current=null] : iv_ruleTMember= ruleTMember EOF ;
    public final EObject entryRuleTMember() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTMember = null;


        try {
            // InternalTypesParser.g:2294:48: (iv_ruleTMember= ruleTMember EOF )
            // InternalTypesParser.g:2295:2: iv_ruleTMember= ruleTMember EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTMemberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTMember=ruleTMember();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTMember; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTMember"


    // $ANTLR start "ruleTMember"
    // InternalTypesParser.g:2301:1: ruleTMember returns [EObject current=null] : ( ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter ) | ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod ) | this_TField_3= ruleTField ) ;
    public final EObject ruleTMember() throws RecognitionException {
        EObject current = null;

        EObject this_TGetter_0 = null;

        EObject this_TSetter_1 = null;

        EObject this_TMethod_2 = null;

        EObject this_TField_3 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:2307:2: ( ( ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter ) | ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod ) | this_TField_3= ruleTField ) )
            // InternalTypesParser.g:2308:2: ( ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter ) | ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod ) | this_TField_3= ruleTField )
            {
            // InternalTypesParser.g:2308:2: ( ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter ) | ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod ) | this_TField_3= ruleTField )
            int alt56=4;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    // InternalTypesParser.g:2309:3: ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter )
                    {
                    // InternalTypesParser.g:2309:3: ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter )
                    // InternalTypesParser.g:2310:4: ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTMemberAccess().getTGetterParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TGetter_0=ruleTGetter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TGetter_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2357:3: ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter )
                    {
                    // InternalTypesParser.g:2357:3: ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter )
                    // InternalTypesParser.g:2358:4: ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTMemberAccess().getTSetterParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TSetter_1=ruleTSetter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TSetter_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:2405:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod )
                    {
                    // InternalTypesParser.g:2405:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod )
                    // InternalTypesParser.g:2406:4: ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTMemberAccess().getTMethodParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TMethod_2=ruleTMethod();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TMethod_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:2468:3: this_TField_3= ruleTField
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTMemberAccess().getTFieldParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TField_3=ruleTField();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TField_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTMember"


    // $ANTLR start "entryRuleTMethod"
    // InternalTypesParser.g:2480:1: entryRuleTMethod returns [EObject current=null] : iv_ruleTMethod= ruleTMethod EOF ;
    public final EObject entryRuleTMethod() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTMethod = null;


        try {
            // InternalTypesParser.g:2480:48: (iv_ruleTMethod= ruleTMethod EOF )
            // InternalTypesParser.g:2481:2: iv_ruleTMethod= ruleTMethod EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTMethodRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTMethod=ruleTMethod();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTMethod; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTMethod"


    // $ANTLR start "ruleTMethod"
    // InternalTypesParser.g:2487:1: ruleTMethod returns [EObject current=null] : ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_declaredAbstract_2_0= Abstract ) ) )? (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( ( (lv_name_8_0= ruleTypesIdentifier ) ) | ( (lv_name_9_0= ruleTypesComputedPropertyName ) ) ) otherlv_10= LeftParenthesis ) ) ( ( (lv_fpars_11_0= ruleTFormalParameter ) ) (otherlv_12= Comma ( (lv_fpars_13_0= ruleTFormalParameter ) ) )* )? otherlv_14= RightParenthesis otherlv_15= Colon ( (lv_returnTypeRef_16_0= ruleTypeRef ) ) (otherlv_17= Semicolon )? ) ;
    public final EObject ruleTMethod() throws RecognitionException {
        EObject current = null;

        Token lv_declaredStatic_1_0=null;
        Token lv_declaredAbstract_2_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Enumerator lv_declaredMemberAccessModifier_0_0 = null;

        EObject lv_typeVars_4_0 = null;

        EObject lv_typeVars_6_0 = null;

        AntlrDatatypeRuleToken lv_name_8_0 = null;

        AntlrDatatypeRuleToken lv_name_9_0 = null;

        EObject lv_fpars_11_0 = null;

        EObject lv_fpars_13_0 = null;

        EObject lv_returnTypeRef_16_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:2493:2: ( ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_declaredAbstract_2_0= Abstract ) ) )? (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( ( (lv_name_8_0= ruleTypesIdentifier ) ) | ( (lv_name_9_0= ruleTypesComputedPropertyName ) ) ) otherlv_10= LeftParenthesis ) ) ( ( (lv_fpars_11_0= ruleTFormalParameter ) ) (otherlv_12= Comma ( (lv_fpars_13_0= ruleTFormalParameter ) ) )* )? otherlv_14= RightParenthesis otherlv_15= Colon ( (lv_returnTypeRef_16_0= ruleTypeRef ) ) (otherlv_17= Semicolon )? ) )
            // InternalTypesParser.g:2494:2: ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_declaredAbstract_2_0= Abstract ) ) )? (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( ( (lv_name_8_0= ruleTypesIdentifier ) ) | ( (lv_name_9_0= ruleTypesComputedPropertyName ) ) ) otherlv_10= LeftParenthesis ) ) ( ( (lv_fpars_11_0= ruleTFormalParameter ) ) (otherlv_12= Comma ( (lv_fpars_13_0= ruleTFormalParameter ) ) )* )? otherlv_14= RightParenthesis otherlv_15= Colon ( (lv_returnTypeRef_16_0= ruleTypeRef ) ) (otherlv_17= Semicolon )? )
            {
            // InternalTypesParser.g:2494:2: ( ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_declaredAbstract_2_0= Abstract ) ) )? (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( ( (lv_name_8_0= ruleTypesIdentifier ) ) | ( (lv_name_9_0= ruleTypesComputedPropertyName ) ) ) otherlv_10= LeftParenthesis ) ) ( ( (lv_fpars_11_0= ruleTFormalParameter ) ) (otherlv_12= Comma ( (lv_fpars_13_0= ruleTFormalParameter ) ) )* )? otherlv_14= RightParenthesis otherlv_15= Colon ( (lv_returnTypeRef_16_0= ruleTypeRef ) ) (otherlv_17= Semicolon )? )
            // InternalTypesParser.g:2495:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_declaredAbstract_2_0= Abstract ) ) )? (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( ( (lv_name_8_0= ruleTypesIdentifier ) ) | ( (lv_name_9_0= ruleTypesComputedPropertyName ) ) ) otherlv_10= LeftParenthesis ) ) ( ( (lv_fpars_11_0= ruleTFormalParameter ) ) (otherlv_12= Comma ( (lv_fpars_13_0= ruleTFormalParameter ) ) )* )? otherlv_14= RightParenthesis otherlv_15= Colon ( (lv_returnTypeRef_16_0= ruleTypeRef ) ) (otherlv_17= Semicolon )?
            {
            // InternalTypesParser.g:2495:3: ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_declaredAbstract_2_0= Abstract ) ) )? (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( ( (lv_name_8_0= ruleTypesIdentifier ) ) | ( (lv_name_9_0= ruleTypesComputedPropertyName ) ) ) otherlv_10= LeftParenthesis ) )
            // InternalTypesParser.g:2496:4: ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=> ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_declaredAbstract_2_0= Abstract ) ) )? (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( ( (lv_name_8_0= ruleTypesIdentifier ) ) | ( (lv_name_9_0= ruleTypesComputedPropertyName ) ) ) otherlv_10= LeftParenthesis )
            {
            // InternalTypesParser.g:2548:4: ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_declaredAbstract_2_0= Abstract ) ) )? (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( ( (lv_name_8_0= ruleTypesIdentifier ) ) | ( (lv_name_9_0= ruleTypesComputedPropertyName ) ) ) otherlv_10= LeftParenthesis )
            // InternalTypesParser.g:2549:5: ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_declaredAbstract_2_0= Abstract ) ) )? (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( ( (lv_name_8_0= ruleTypesIdentifier ) ) | ( (lv_name_9_0= ruleTypesComputedPropertyName ) ) ) otherlv_10= LeftParenthesis
            {
            // InternalTypesParser.g:2549:5: ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) )
            // InternalTypesParser.g:2550:6: (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier )
            {
            // InternalTypesParser.g:2550:6: (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier )
            // InternalTypesParser.g:2551:7: lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTMethodAccess().getDeclaredMemberAccessModifierMemberAccessModifierEnumRuleCall_0_0_0_0());
              						
            }
            pushFollow(FOLLOW_52);
            lv_declaredMemberAccessModifier_0_0=ruleMemberAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTMethodRule());
              							}
              							set(
              								current,
              								"declaredMemberAccessModifier",
              								lv_declaredMemberAccessModifier_0_0,
              								"org.eclipse.n4js.ts.Types.MemberAccessModifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            // InternalTypesParser.g:2568:5: ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_declaredAbstract_2_0= Abstract ) ) )?
            int alt57=3;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==Static) ) {
                int LA57_1 = input.LA(2);

                if ( (LA57_1==AssignmnentCompatible||(LA57_1>=AutoboxedType && LA57_1<=Finally)||(LA57_1>=Private && LA57_1<=False)||(LA57_1>=Super && LA57_1<=With)||(LA57_1>=Any && LA57_1<=Var)||(LA57_1>=As && LA57_1<=Of)||LA57_1==LessThanSign||LA57_1==LeftSquareBracket||LA57_1==RULE_IDENTIFIER) ) {
                    alt57=1;
                }
            }
            else if ( (LA57_0==Abstract) ) {
                int LA57_2 = input.LA(2);

                if ( (LA57_2==AssignmnentCompatible||(LA57_2>=AutoboxedType && LA57_2<=Finally)||(LA57_2>=Private && LA57_2<=False)||(LA57_2>=Super && LA57_2<=With)||(LA57_2>=Any && LA57_2<=Var)||(LA57_2>=As && LA57_2<=Of)||LA57_2==LessThanSign||LA57_2==LeftSquareBracket||LA57_2==RULE_IDENTIFIER) ) {
                    alt57=2;
                }
            }
            switch (alt57) {
                case 1 :
                    // InternalTypesParser.g:2569:6: ( (lv_declaredStatic_1_0= Static ) )
                    {
                    // InternalTypesParser.g:2569:6: ( (lv_declaredStatic_1_0= Static ) )
                    // InternalTypesParser.g:2570:7: (lv_declaredStatic_1_0= Static )
                    {
                    // InternalTypesParser.g:2570:7: (lv_declaredStatic_1_0= Static )
                    // InternalTypesParser.g:2571:8: lv_declaredStatic_1_0= Static
                    {
                    lv_declaredStatic_1_0=(Token)match(input,Static,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_declaredStatic_1_0, grammarAccess.getTMethodAccess().getDeclaredStaticStaticKeyword_0_0_1_0_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getTMethodRule());
                      								}
                      								setWithLastConsumed(current, "declaredStatic", true, "static");
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2584:6: ( (lv_declaredAbstract_2_0= Abstract ) )
                    {
                    // InternalTypesParser.g:2584:6: ( (lv_declaredAbstract_2_0= Abstract ) )
                    // InternalTypesParser.g:2585:7: (lv_declaredAbstract_2_0= Abstract )
                    {
                    // InternalTypesParser.g:2585:7: (lv_declaredAbstract_2_0= Abstract )
                    // InternalTypesParser.g:2586:8: lv_declaredAbstract_2_0= Abstract
                    {
                    lv_declaredAbstract_2_0=(Token)match(input,Abstract,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_declaredAbstract_2_0, grammarAccess.getTMethodAccess().getDeclaredAbstractAbstractKeyword_0_0_1_1_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getTMethodRule());
                      								}
                      								setWithLastConsumed(current, "declaredAbstract", true, "abstract");
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:2599:5: (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==LessThanSign) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // InternalTypesParser.g:2600:6: otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign
                    {
                    otherlv_3=(Token)match(input,LessThanSign,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_3, grammarAccess.getTMethodAccess().getLessThanSignKeyword_0_0_2_0());
                      					
                    }
                    // InternalTypesParser.g:2604:6: ( (lv_typeVars_4_0= ruleTypeVariable ) )
                    // InternalTypesParser.g:2605:7: (lv_typeVars_4_0= ruleTypeVariable )
                    {
                    // InternalTypesParser.g:2605:7: (lv_typeVars_4_0= ruleTypeVariable )
                    // InternalTypesParser.g:2606:8: lv_typeVars_4_0= ruleTypeVariable
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTMethodAccess().getTypeVarsTypeVariableParserRuleCall_0_0_2_1_0());
                      							
                    }
                    pushFollow(FOLLOW_28);
                    lv_typeVars_4_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTMethodRule());
                      								}
                      								add(
                      									current,
                      									"typeVars",
                      									lv_typeVars_4_0,
                      									"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }

                    // InternalTypesParser.g:2623:6: (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )*
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( (LA58_0==Comma) ) {
                            alt58=1;
                        }


                        switch (alt58) {
                    	case 1 :
                    	    // InternalTypesParser.g:2624:7: otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) )
                    	    {
                    	    otherlv_5=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							newLeafNode(otherlv_5, grammarAccess.getTMethodAccess().getCommaKeyword_0_0_2_2_0());
                    	      						
                    	    }
                    	    // InternalTypesParser.g:2628:7: ( (lv_typeVars_6_0= ruleTypeVariable ) )
                    	    // InternalTypesParser.g:2629:8: (lv_typeVars_6_0= ruleTypeVariable )
                    	    {
                    	    // InternalTypesParser.g:2629:8: (lv_typeVars_6_0= ruleTypeVariable )
                    	    // InternalTypesParser.g:2630:9: lv_typeVars_6_0= ruleTypeVariable
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getTMethodAccess().getTypeVarsTypeVariableParserRuleCall_0_0_2_2_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_28);
                    	    lv_typeVars_6_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getTMethodRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"typeVars",
                    	      										lv_typeVars_6_0,
                    	      										"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop58;
                        }
                    } while (true);

                    otherlv_7=(Token)match(input,GreaterThanSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_7, grammarAccess.getTMethodAccess().getGreaterThanSignKeyword_0_0_2_3());
                      					
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:2653:5: ( ( (lv_name_8_0= ruleTypesIdentifier ) ) | ( (lv_name_9_0= ruleTypesComputedPropertyName ) ) )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==AssignmnentCompatible||(LA60_0>=AutoboxedType && LA60_0<=Finally)||(LA60_0>=Private && LA60_0<=False)||(LA60_0>=Super && LA60_0<=With)||(LA60_0>=Any && LA60_0<=Var)||(LA60_0>=As && LA60_0<=Of)||LA60_0==RULE_IDENTIFIER) ) {
                alt60=1;
            }
            else if ( (LA60_0==LeftSquareBracket) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    // InternalTypesParser.g:2654:6: ( (lv_name_8_0= ruleTypesIdentifier ) )
                    {
                    // InternalTypesParser.g:2654:6: ( (lv_name_8_0= ruleTypesIdentifier ) )
                    // InternalTypesParser.g:2655:7: (lv_name_8_0= ruleTypesIdentifier )
                    {
                    // InternalTypesParser.g:2655:7: (lv_name_8_0= ruleTypesIdentifier )
                    // InternalTypesParser.g:2656:8: lv_name_8_0= ruleTypesIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTMethodAccess().getNameTypesIdentifierParserRuleCall_0_0_3_0_0());
                      							
                    }
                    pushFollow(FOLLOW_53);
                    lv_name_8_0=ruleTypesIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTMethodRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_8_0,
                      									"org.eclipse.n4js.ts.Types.TypesIdentifier");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2674:6: ( (lv_name_9_0= ruleTypesComputedPropertyName ) )
                    {
                    // InternalTypesParser.g:2674:6: ( (lv_name_9_0= ruleTypesComputedPropertyName ) )
                    // InternalTypesParser.g:2675:7: (lv_name_9_0= ruleTypesComputedPropertyName )
                    {
                    // InternalTypesParser.g:2675:7: (lv_name_9_0= ruleTypesComputedPropertyName )
                    // InternalTypesParser.g:2676:8: lv_name_9_0= ruleTypesComputedPropertyName
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTMethodAccess().getNameTypesComputedPropertyNameParserRuleCall_0_0_3_1_0());
                      							
                    }
                    pushFollow(FOLLOW_53);
                    lv_name_9_0=ruleTypesComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTMethodRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_9_0,
                      									"org.eclipse.n4js.ts.Types.TypesComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_10=(Token)match(input,LeftParenthesis,FOLLOW_48); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_10, grammarAccess.getTMethodAccess().getLeftParenthesisKeyword_0_0_4());
              				
            }

            }


            }

            // InternalTypesParser.g:2700:3: ( ( (lv_fpars_11_0= ruleTFormalParameter ) ) (otherlv_12= Comma ( (lv_fpars_13_0= ruleTFormalParameter ) ) )* )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( ((LA62_0>=Intersection && LA62_0<=Constructor)||LA62_0==Implements||(LA62_0>=Promisify && LA62_0<=Interface)||LA62_0==Protected||LA62_0==Abstract||LA62_0==External||(LA62_0>=Private && LA62_0<=Project)||LA62_0==Public||LA62_0==Static||LA62_0==Target||(LA62_0>=Async && LA62_0<=Await)||LA62_0==Union||(LA62_0>=Yield && LA62_0<=This)||LA62_0==From||LA62_0==Type||LA62_0==FullStopFullStopFullStop||(LA62_0>=Get && LA62_0<=Let)||(LA62_0>=Out && LA62_0<=Set)||LA62_0==As||LA62_0==Of||LA62_0==RULE_IDENTIFIER) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // InternalTypesParser.g:2701:4: ( (lv_fpars_11_0= ruleTFormalParameter ) ) (otherlv_12= Comma ( (lv_fpars_13_0= ruleTFormalParameter ) ) )*
                    {
                    // InternalTypesParser.g:2701:4: ( (lv_fpars_11_0= ruleTFormalParameter ) )
                    // InternalTypesParser.g:2702:5: (lv_fpars_11_0= ruleTFormalParameter )
                    {
                    // InternalTypesParser.g:2702:5: (lv_fpars_11_0= ruleTFormalParameter )
                    // InternalTypesParser.g:2703:6: lv_fpars_11_0= ruleTFormalParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTMethodAccess().getFparsTFormalParameterParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_7);
                    lv_fpars_11_0=ruleTFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTMethodRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_11_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TFormalParameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:2720:4: (otherlv_12= Comma ( (lv_fpars_13_0= ruleTFormalParameter ) ) )*
                    loop61:
                    do {
                        int alt61=2;
                        int LA61_0 = input.LA(1);

                        if ( (LA61_0==Comma) ) {
                            alt61=1;
                        }


                        switch (alt61) {
                    	case 1 :
                    	    // InternalTypesParser.g:2721:5: otherlv_12= Comma ( (lv_fpars_13_0= ruleTFormalParameter ) )
                    	    {
                    	    otherlv_12=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_12, grammarAccess.getTMethodAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:2725:5: ( (lv_fpars_13_0= ruleTFormalParameter ) )
                    	    // InternalTypesParser.g:2726:6: (lv_fpars_13_0= ruleTFormalParameter )
                    	    {
                    	    // InternalTypesParser.g:2726:6: (lv_fpars_13_0= ruleTFormalParameter )
                    	    // InternalTypesParser.g:2727:7: lv_fpars_13_0= ruleTFormalParameter
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTMethodAccess().getFparsTFormalParameterParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_7);
                    	    lv_fpars_13_0=ruleTFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTMethodRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_13_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.TFormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop61;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_14=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_14, grammarAccess.getTMethodAccess().getRightParenthesisKeyword_2());
              		
            }
            otherlv_15=(Token)match(input,Colon,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_15, grammarAccess.getTMethodAccess().getColonKeyword_3());
              		
            }
            // InternalTypesParser.g:2754:3: ( (lv_returnTypeRef_16_0= ruleTypeRef ) )
            // InternalTypesParser.g:2755:4: (lv_returnTypeRef_16_0= ruleTypeRef )
            {
            // InternalTypesParser.g:2755:4: (lv_returnTypeRef_16_0= ruleTypeRef )
            // InternalTypesParser.g:2756:5: lv_returnTypeRef_16_0= ruleTypeRef
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTMethodAccess().getReturnTypeRefTypeRefParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_51);
            lv_returnTypeRef_16_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTMethodRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_16_0,
              						"org.eclipse.n4js.ts.Types.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:2773:3: (otherlv_17= Semicolon )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==Semicolon) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // InternalTypesParser.g:2774:4: otherlv_17= Semicolon
                    {
                    otherlv_17=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_17, grammarAccess.getTMethodAccess().getSemicolonKeyword_5());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTMethod"


    // $ANTLR start "entryRuleTField"
    // InternalTypesParser.g:2783:1: entryRuleTField returns [EObject current=null] : iv_ruleTField= ruleTField EOF ;
    public final EObject entryRuleTField() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTField = null;


        try {
            // InternalTypesParser.g:2783:47: (iv_ruleTField= ruleTField EOF )
            // InternalTypesParser.g:2784:2: iv_ruleTField= ruleTField EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTField=ruleTField();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTField; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTField"


    // $ANTLR start "ruleTField"
    // InternalTypesParser.g:2790:1: ruleTField returns [EObject current=null] : ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_const_2_0= Const ) ) | ( (lv_declaredFinal_3_0= Final ) ) )? ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= Colon ( (lv_typeRef_8_0= ruleTypeRef ) ) (otherlv_9= Semicolon )? ) ;
    public final EObject ruleTField() throws RecognitionException {
        EObject current = null;

        Token lv_declaredStatic_1_0=null;
        Token lv_const_2_0=null;
        Token lv_declaredFinal_3_0=null;
        Token lv_optional_6_0=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredMemberAccessModifier_0_0 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        AntlrDatatypeRuleToken lv_name_5_0 = null;

        EObject lv_typeRef_8_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:2796:2: ( ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_const_2_0= Const ) ) | ( (lv_declaredFinal_3_0= Final ) ) )? ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= Colon ( (lv_typeRef_8_0= ruleTypeRef ) ) (otherlv_9= Semicolon )? ) )
            // InternalTypesParser.g:2797:2: ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_const_2_0= Const ) ) | ( (lv_declaredFinal_3_0= Final ) ) )? ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= Colon ( (lv_typeRef_8_0= ruleTypeRef ) ) (otherlv_9= Semicolon )? )
            {
            // InternalTypesParser.g:2797:2: ( ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_const_2_0= Const ) ) | ( (lv_declaredFinal_3_0= Final ) ) )? ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= Colon ( (lv_typeRef_8_0= ruleTypeRef ) ) (otherlv_9= Semicolon )? )
            // InternalTypesParser.g:2798:3: ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_const_2_0= Const ) ) | ( (lv_declaredFinal_3_0= Final ) ) )? ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) ) ( (lv_optional_6_0= QuestionMark ) )? otherlv_7= Colon ( (lv_typeRef_8_0= ruleTypeRef ) ) (otherlv_9= Semicolon )?
            {
            // InternalTypesParser.g:2798:3: ( (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier ) )
            // InternalTypesParser.g:2799:4: (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier )
            {
            // InternalTypesParser.g:2799:4: (lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier )
            // InternalTypesParser.g:2800:5: lv_declaredMemberAccessModifier_0_0= ruleMemberAccessModifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTFieldAccess().getDeclaredMemberAccessModifierMemberAccessModifierEnumRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_55);
            lv_declaredMemberAccessModifier_0_0=ruleMemberAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTFieldRule());
              					}
              					set(
              						current,
              						"declaredMemberAccessModifier",
              						lv_declaredMemberAccessModifier_0_0,
              						"org.eclipse.n4js.ts.Types.MemberAccessModifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:2817:3: ( ( (lv_declaredStatic_1_0= Static ) ) | ( (lv_const_2_0= Const ) ) | ( (lv_declaredFinal_3_0= Final ) ) )?
            int alt64=4;
            switch ( input.LA(1) ) {
                case Static:
                    {
                    int LA64_1 = input.LA(2);

                    if ( (LA64_1==AssignmnentCompatible||(LA64_1>=AutoboxedType && LA64_1<=Finally)||(LA64_1>=Private && LA64_1<=False)||(LA64_1>=Super && LA64_1<=With)||(LA64_1>=Any && LA64_1<=Var)||(LA64_1>=As && LA64_1<=Of)||LA64_1==LeftSquareBracket||LA64_1==RULE_IDENTIFIER) ) {
                        alt64=1;
                    }
                    }
                    break;
                case Const:
                    {
                    int LA64_2 = input.LA(2);

                    if ( (LA64_2==AssignmnentCompatible||(LA64_2>=AutoboxedType && LA64_2<=Finally)||(LA64_2>=Private && LA64_2<=False)||(LA64_2>=Super && LA64_2<=With)||(LA64_2>=Any && LA64_2<=Var)||(LA64_2>=As && LA64_2<=Of)||LA64_2==LeftSquareBracket||LA64_2==RULE_IDENTIFIER) ) {
                        alt64=2;
                    }
                    }
                    break;
                case Final:
                    {
                    alt64=3;
                    }
                    break;
            }

            switch (alt64) {
                case 1 :
                    // InternalTypesParser.g:2818:4: ( (lv_declaredStatic_1_0= Static ) )
                    {
                    // InternalTypesParser.g:2818:4: ( (lv_declaredStatic_1_0= Static ) )
                    // InternalTypesParser.g:2819:5: (lv_declaredStatic_1_0= Static )
                    {
                    // InternalTypesParser.g:2819:5: (lv_declaredStatic_1_0= Static )
                    // InternalTypesParser.g:2820:6: lv_declaredStatic_1_0= Static
                    {
                    lv_declaredStatic_1_0=(Token)match(input,Static,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_declaredStatic_1_0, grammarAccess.getTFieldAccess().getDeclaredStaticStaticKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTFieldRule());
                      						}
                      						setWithLastConsumed(current, "declaredStatic", true, "static");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2833:4: ( (lv_const_2_0= Const ) )
                    {
                    // InternalTypesParser.g:2833:4: ( (lv_const_2_0= Const ) )
                    // InternalTypesParser.g:2834:5: (lv_const_2_0= Const )
                    {
                    // InternalTypesParser.g:2834:5: (lv_const_2_0= Const )
                    // InternalTypesParser.g:2835:6: lv_const_2_0= Const
                    {
                    lv_const_2_0=(Token)match(input,Const,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_const_2_0, grammarAccess.getTFieldAccess().getConstConstKeyword_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTFieldRule());
                      						}
                      						setWithLastConsumed(current, "const", true, "const");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:2848:4: ( (lv_declaredFinal_3_0= Final ) )
                    {
                    // InternalTypesParser.g:2848:4: ( (lv_declaredFinal_3_0= Final ) )
                    // InternalTypesParser.g:2849:5: (lv_declaredFinal_3_0= Final )
                    {
                    // InternalTypesParser.g:2849:5: (lv_declaredFinal_3_0= Final )
                    // InternalTypesParser.g:2850:6: lv_declaredFinal_3_0= Final
                    {
                    lv_declaredFinal_3_0=(Token)match(input,Final,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_declaredFinal_3_0, grammarAccess.getTFieldAccess().getDeclaredFinalFinalKeyword_1_2_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTFieldRule());
                      						}
                      						setWithLastConsumed(current, "declaredFinal", true, "final");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:2863:3: ( ( (lv_name_4_0= ruleTypesIdentifier ) ) | ( (lv_name_5_0= ruleTypesComputedPropertyName ) ) )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==AssignmnentCompatible||(LA65_0>=AutoboxedType && LA65_0<=Finally)||(LA65_0>=Private && LA65_0<=False)||(LA65_0>=Super && LA65_0<=With)||(LA65_0>=Any && LA65_0<=Var)||(LA65_0>=As && LA65_0<=Of)||LA65_0==RULE_IDENTIFIER) ) {
                alt65=1;
            }
            else if ( (LA65_0==LeftSquareBracket) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    // InternalTypesParser.g:2864:4: ( (lv_name_4_0= ruleTypesIdentifier ) )
                    {
                    // InternalTypesParser.g:2864:4: ( (lv_name_4_0= ruleTypesIdentifier ) )
                    // InternalTypesParser.g:2865:5: (lv_name_4_0= ruleTypesIdentifier )
                    {
                    // InternalTypesParser.g:2865:5: (lv_name_4_0= ruleTypesIdentifier )
                    // InternalTypesParser.g:2866:6: lv_name_4_0= ruleTypesIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTFieldAccess().getNameTypesIdentifierParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_56);
                    lv_name_4_0=ruleTypesIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTFieldRule());
                      						}
                      						set(
                      							current,
                      							"name",
                      							lv_name_4_0,
                      							"org.eclipse.n4js.ts.Types.TypesIdentifier");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:2884:4: ( (lv_name_5_0= ruleTypesComputedPropertyName ) )
                    {
                    // InternalTypesParser.g:2884:4: ( (lv_name_5_0= ruleTypesComputedPropertyName ) )
                    // InternalTypesParser.g:2885:5: (lv_name_5_0= ruleTypesComputedPropertyName )
                    {
                    // InternalTypesParser.g:2885:5: (lv_name_5_0= ruleTypesComputedPropertyName )
                    // InternalTypesParser.g:2886:6: lv_name_5_0= ruleTypesComputedPropertyName
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTFieldAccess().getNameTypesComputedPropertyNameParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_56);
                    lv_name_5_0=ruleTypesComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTFieldRule());
                      						}
                      						set(
                      							current,
                      							"name",
                      							lv_name_5_0,
                      							"org.eclipse.n4js.ts.Types.TypesComputedPropertyName");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:2904:3: ( (lv_optional_6_0= QuestionMark ) )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==QuestionMark) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // InternalTypesParser.g:2905:4: (lv_optional_6_0= QuestionMark )
                    {
                    // InternalTypesParser.g:2905:4: (lv_optional_6_0= QuestionMark )
                    // InternalTypesParser.g:2906:5: lv_optional_6_0= QuestionMark
                    {
                    lv_optional_6_0=(Token)match(input,QuestionMark,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_6_0, grammarAccess.getTFieldAccess().getOptionalQuestionMarkKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTFieldRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,Colon,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getTFieldAccess().getColonKeyword_4());
              		
            }
            // InternalTypesParser.g:2922:3: ( (lv_typeRef_8_0= ruleTypeRef ) )
            // InternalTypesParser.g:2923:4: (lv_typeRef_8_0= ruleTypeRef )
            {
            // InternalTypesParser.g:2923:4: (lv_typeRef_8_0= ruleTypeRef )
            // InternalTypesParser.g:2924:5: lv_typeRef_8_0= ruleTypeRef
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTFieldAccess().getTypeRefTypeRefParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_51);
            lv_typeRef_8_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTFieldRule());
              					}
              					set(
              						current,
              						"typeRef",
              						lv_typeRef_8_0,
              						"org.eclipse.n4js.ts.Types.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:2941:3: (otherlv_9= Semicolon )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==Semicolon) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // InternalTypesParser.g:2942:4: otherlv_9= Semicolon
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getTFieldAccess().getSemicolonKeyword_6());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTField"


    // $ANTLR start "entryRuleTGetter"
    // InternalTypesParser.g:2951:1: entryRuleTGetter returns [EObject current=null] : iv_ruleTGetter= ruleTGetter EOF ;
    public final EObject entryRuleTGetter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTGetter = null;


        try {
            // InternalTypesParser.g:2951:48: (iv_ruleTGetter= ruleTGetter EOF )
            // InternalTypesParser.g:2952:2: iv_ruleTGetter= ruleTGetter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTGetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTGetter=ruleTGetter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTGetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTGetter"


    // $ANTLR start "ruleTGetter"
    // InternalTypesParser.g:2958:1: ruleTGetter returns [EObject current=null] : ( ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Get ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_7_0= QuestionMark ) )? otherlv_8= LeftParenthesis otherlv_9= RightParenthesis otherlv_10= Colon ( (lv_declaredTypeRef_11_0= ruleTypeRef ) ) ) ;
    public final EObject ruleTGetter() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAbstract_2_0=null;
        Token lv_declaredStatic_3_0=null;
        Token otherlv_4=null;
        Token lv_optional_7_0=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Enumerator lv_declaredMemberAccessModifier_1_0 = null;

        AntlrDatatypeRuleToken lv_name_5_0 = null;

        AntlrDatatypeRuleToken lv_name_6_0 = null;

        EObject lv_declaredTypeRef_11_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:2964:2: ( ( ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Get ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_7_0= QuestionMark ) )? otherlv_8= LeftParenthesis otherlv_9= RightParenthesis otherlv_10= Colon ( (lv_declaredTypeRef_11_0= ruleTypeRef ) ) ) )
            // InternalTypesParser.g:2965:2: ( ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Get ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_7_0= QuestionMark ) )? otherlv_8= LeftParenthesis otherlv_9= RightParenthesis otherlv_10= Colon ( (lv_declaredTypeRef_11_0= ruleTypeRef ) ) )
            {
            // InternalTypesParser.g:2965:2: ( ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Get ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_7_0= QuestionMark ) )? otherlv_8= LeftParenthesis otherlv_9= RightParenthesis otherlv_10= Colon ( (lv_declaredTypeRef_11_0= ruleTypeRef ) ) )
            // InternalTypesParser.g:2966:3: ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Get ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_7_0= QuestionMark ) )? otherlv_8= LeftParenthesis otherlv_9= RightParenthesis otherlv_10= Colon ( (lv_declaredTypeRef_11_0= ruleTypeRef ) )
            {
            // InternalTypesParser.g:2966:3: ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Get ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ) )
            // InternalTypesParser.g:2967:4: ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Get ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) )
            {
            // InternalTypesParser.g:3004:4: ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Get ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) )
            // InternalTypesParser.g:3005:5: () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Get ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) )
            {
            // InternalTypesParser.g:3005:5: ()
            // InternalTypesParser.g:3006:6: 
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTGetterAccess().getTGetterAction_0_0_0(),
              							current);
              					
            }

            }

            // InternalTypesParser.g:3012:5: ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) )
            // InternalTypesParser.g:3013:6: (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier )
            {
            // InternalTypesParser.g:3013:6: (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier )
            // InternalTypesParser.g:3014:7: lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTGetterAccess().getDeclaredMemberAccessModifierMemberAccessModifierEnumRuleCall_0_0_1_0());
              						
            }
            pushFollow(FOLLOW_57);
            lv_declaredMemberAccessModifier_1_0=ruleMemberAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTGetterRule());
              							}
              							set(
              								current,
              								"declaredMemberAccessModifier",
              								lv_declaredMemberAccessModifier_1_0,
              								"org.eclipse.n4js.ts.Types.MemberAccessModifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            // InternalTypesParser.g:3031:5: ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )?
            int alt68=3;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==Abstract) ) {
                alt68=1;
            }
            else if ( (LA68_0==Static) ) {
                alt68=2;
            }
            switch (alt68) {
                case 1 :
                    // InternalTypesParser.g:3032:6: ( (lv_declaredAbstract_2_0= Abstract ) )
                    {
                    // InternalTypesParser.g:3032:6: ( (lv_declaredAbstract_2_0= Abstract ) )
                    // InternalTypesParser.g:3033:7: (lv_declaredAbstract_2_0= Abstract )
                    {
                    // InternalTypesParser.g:3033:7: (lv_declaredAbstract_2_0= Abstract )
                    // InternalTypesParser.g:3034:8: lv_declaredAbstract_2_0= Abstract
                    {
                    lv_declaredAbstract_2_0=(Token)match(input,Abstract,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_declaredAbstract_2_0, grammarAccess.getTGetterAccess().getDeclaredAbstractAbstractKeyword_0_0_2_0_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getTGetterRule());
                      								}
                      								setWithLastConsumed(current, "declaredAbstract", true, "abstract");
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:3047:6: ( (lv_declaredStatic_3_0= Static ) )
                    {
                    // InternalTypesParser.g:3047:6: ( (lv_declaredStatic_3_0= Static ) )
                    // InternalTypesParser.g:3048:7: (lv_declaredStatic_3_0= Static )
                    {
                    // InternalTypesParser.g:3048:7: (lv_declaredStatic_3_0= Static )
                    // InternalTypesParser.g:3049:8: lv_declaredStatic_3_0= Static
                    {
                    lv_declaredStatic_3_0=(Token)match(input,Static,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_declaredStatic_3_0, grammarAccess.getTGetterAccess().getDeclaredStaticStaticKeyword_0_0_2_1_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getTGetterRule());
                      								}
                      								setWithLastConsumed(current, "declaredStatic", true, "static");
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,Get,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_4, grammarAccess.getTGetterAccess().getGetKeyword_0_0_3());
              				
            }
            // InternalTypesParser.g:3066:5: ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==AssignmnentCompatible||(LA69_0>=AutoboxedType && LA69_0<=Finally)||(LA69_0>=Private && LA69_0<=False)||(LA69_0>=Super && LA69_0<=With)||(LA69_0>=Any && LA69_0<=Var)||(LA69_0>=As && LA69_0<=Of)||LA69_0==RULE_IDENTIFIER) ) {
                alt69=1;
            }
            else if ( (LA69_0==LeftSquareBracket) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // InternalTypesParser.g:3067:6: ( (lv_name_5_0= ruleTypesIdentifier ) )
                    {
                    // InternalTypesParser.g:3067:6: ( (lv_name_5_0= ruleTypesIdentifier ) )
                    // InternalTypesParser.g:3068:7: (lv_name_5_0= ruleTypesIdentifier )
                    {
                    // InternalTypesParser.g:3068:7: (lv_name_5_0= ruleTypesIdentifier )
                    // InternalTypesParser.g:3069:8: lv_name_5_0= ruleTypesIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTGetterAccess().getNameTypesIdentifierParserRuleCall_0_0_4_0_0());
                      							
                    }
                    pushFollow(FOLLOW_59);
                    lv_name_5_0=ruleTypesIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTGetterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_5_0,
                      									"org.eclipse.n4js.ts.Types.TypesIdentifier");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:3087:6: ( (lv_name_6_0= ruleTypesComputedPropertyName ) )
                    {
                    // InternalTypesParser.g:3087:6: ( (lv_name_6_0= ruleTypesComputedPropertyName ) )
                    // InternalTypesParser.g:3088:7: (lv_name_6_0= ruleTypesComputedPropertyName )
                    {
                    // InternalTypesParser.g:3088:7: (lv_name_6_0= ruleTypesComputedPropertyName )
                    // InternalTypesParser.g:3089:8: lv_name_6_0= ruleTypesComputedPropertyName
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTGetterAccess().getNameTypesComputedPropertyNameParserRuleCall_0_0_4_1_0());
                      							
                    }
                    pushFollow(FOLLOW_59);
                    lv_name_6_0=ruleTypesComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTGetterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_6_0,
                      									"org.eclipse.n4js.ts.Types.TypesComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            // InternalTypesParser.g:3109:3: ( (lv_optional_7_0= QuestionMark ) )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==QuestionMark) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // InternalTypesParser.g:3110:4: (lv_optional_7_0= QuestionMark )
                    {
                    // InternalTypesParser.g:3110:4: (lv_optional_7_0= QuestionMark )
                    // InternalTypesParser.g:3111:5: lv_optional_7_0= QuestionMark
                    {
                    lv_optional_7_0=(Token)match(input,QuestionMark,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_7_0, grammarAccess.getTGetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTGetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getTGetterAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getTGetterAccess().getRightParenthesisKeyword_3());
              		
            }
            otherlv_10=(Token)match(input,Colon,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_10, grammarAccess.getTGetterAccess().getColonKeyword_4());
              		
            }
            // InternalTypesParser.g:3135:3: ( (lv_declaredTypeRef_11_0= ruleTypeRef ) )
            // InternalTypesParser.g:3136:4: (lv_declaredTypeRef_11_0= ruleTypeRef )
            {
            // InternalTypesParser.g:3136:4: (lv_declaredTypeRef_11_0= ruleTypeRef )
            // InternalTypesParser.g:3137:5: lv_declaredTypeRef_11_0= ruleTypeRef
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTGetterAccess().getDeclaredTypeRefTypeRefParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_declaredTypeRef_11_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTGetterRule());
              					}
              					set(
              						current,
              						"declaredTypeRef",
              						lv_declaredTypeRef_11_0,
              						"org.eclipse.n4js.ts.Types.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTGetter"


    // $ANTLR start "entryRuleTSetter"
    // InternalTypesParser.g:3158:1: entryRuleTSetter returns [EObject current=null] : iv_ruleTSetter= ruleTSetter EOF ;
    public final EObject entryRuleTSetter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTSetter = null;


        try {
            // InternalTypesParser.g:3158:48: (iv_ruleTSetter= ruleTSetter EOF )
            // InternalTypesParser.g:3159:2: iv_ruleTSetter= ruleTSetter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTSetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTSetter=ruleTSetter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTSetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTSetter"


    // $ANTLR start "ruleTSetter"
    // InternalTypesParser.g:3165:1: ruleTSetter returns [EObject current=null] : ( ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Set ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_7_0= QuestionMark ) )? otherlv_8= LeftParenthesis ( (lv_fpar_9_0= ruleTFormalParameter ) ) otherlv_10= RightParenthesis ) ;
    public final EObject ruleTSetter() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAbstract_2_0=null;
        Token lv_declaredStatic_3_0=null;
        Token otherlv_4=null;
        Token lv_optional_7_0=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Enumerator lv_declaredMemberAccessModifier_1_0 = null;

        AntlrDatatypeRuleToken lv_name_5_0 = null;

        AntlrDatatypeRuleToken lv_name_6_0 = null;

        EObject lv_fpar_9_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3171:2: ( ( ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Set ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_7_0= QuestionMark ) )? otherlv_8= LeftParenthesis ( (lv_fpar_9_0= ruleTFormalParameter ) ) otherlv_10= RightParenthesis ) )
            // InternalTypesParser.g:3172:2: ( ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Set ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_7_0= QuestionMark ) )? otherlv_8= LeftParenthesis ( (lv_fpar_9_0= ruleTFormalParameter ) ) otherlv_10= RightParenthesis )
            {
            // InternalTypesParser.g:3172:2: ( ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Set ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_7_0= QuestionMark ) )? otherlv_8= LeftParenthesis ( (lv_fpar_9_0= ruleTFormalParameter ) ) otherlv_10= RightParenthesis )
            // InternalTypesParser.g:3173:3: ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Set ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ) ) ( (lv_optional_7_0= QuestionMark ) )? otherlv_8= LeftParenthesis ( (lv_fpar_9_0= ruleTFormalParameter ) ) otherlv_10= RightParenthesis
            {
            // InternalTypesParser.g:3173:3: ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Set ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) ) )
            // InternalTypesParser.g:3174:4: ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=> ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Set ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) )
            {
            // InternalTypesParser.g:3211:4: ( () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Set ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) ) )
            // InternalTypesParser.g:3212:5: () ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) ) ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )? otherlv_4= Set ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) )
            {
            // InternalTypesParser.g:3212:5: ()
            // InternalTypesParser.g:3213:6: 
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTSetterAccess().getTSetterAction_0_0_0(),
              							current);
              					
            }

            }

            // InternalTypesParser.g:3219:5: ( (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier ) )
            // InternalTypesParser.g:3220:6: (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier )
            {
            // InternalTypesParser.g:3220:6: (lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier )
            // InternalTypesParser.g:3221:7: lv_declaredMemberAccessModifier_1_0= ruleMemberAccessModifier
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTSetterAccess().getDeclaredMemberAccessModifierMemberAccessModifierEnumRuleCall_0_0_1_0());
              						
            }
            pushFollow(FOLLOW_61);
            lv_declaredMemberAccessModifier_1_0=ruleMemberAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTSetterRule());
              							}
              							set(
              								current,
              								"declaredMemberAccessModifier",
              								lv_declaredMemberAccessModifier_1_0,
              								"org.eclipse.n4js.ts.Types.MemberAccessModifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            // InternalTypesParser.g:3238:5: ( ( (lv_declaredAbstract_2_0= Abstract ) ) | ( (lv_declaredStatic_3_0= Static ) ) )?
            int alt71=3;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==Abstract) ) {
                alt71=1;
            }
            else if ( (LA71_0==Static) ) {
                alt71=2;
            }
            switch (alt71) {
                case 1 :
                    // InternalTypesParser.g:3239:6: ( (lv_declaredAbstract_2_0= Abstract ) )
                    {
                    // InternalTypesParser.g:3239:6: ( (lv_declaredAbstract_2_0= Abstract ) )
                    // InternalTypesParser.g:3240:7: (lv_declaredAbstract_2_0= Abstract )
                    {
                    // InternalTypesParser.g:3240:7: (lv_declaredAbstract_2_0= Abstract )
                    // InternalTypesParser.g:3241:8: lv_declaredAbstract_2_0= Abstract
                    {
                    lv_declaredAbstract_2_0=(Token)match(input,Abstract,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_declaredAbstract_2_0, grammarAccess.getTSetterAccess().getDeclaredAbstractAbstractKeyword_0_0_2_0_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getTSetterRule());
                      								}
                      								setWithLastConsumed(current, "declaredAbstract", true, "abstract");
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:3254:6: ( (lv_declaredStatic_3_0= Static ) )
                    {
                    // InternalTypesParser.g:3254:6: ( (lv_declaredStatic_3_0= Static ) )
                    // InternalTypesParser.g:3255:7: (lv_declaredStatic_3_0= Static )
                    {
                    // InternalTypesParser.g:3255:7: (lv_declaredStatic_3_0= Static )
                    // InternalTypesParser.g:3256:8: lv_declaredStatic_3_0= Static
                    {
                    lv_declaredStatic_3_0=(Token)match(input,Static,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_declaredStatic_3_0, grammarAccess.getTSetterAccess().getDeclaredStaticStaticKeyword_0_0_2_1_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getTSetterRule());
                      								}
                      								setWithLastConsumed(current, "declaredStatic", true, "static");
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,Set,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_4, grammarAccess.getTSetterAccess().getSetKeyword_0_0_3());
              				
            }
            // InternalTypesParser.g:3273:5: ( ( (lv_name_5_0= ruleTypesIdentifier ) ) | ( (lv_name_6_0= ruleTypesComputedPropertyName ) ) )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==AssignmnentCompatible||(LA72_0>=AutoboxedType && LA72_0<=Finally)||(LA72_0>=Private && LA72_0<=False)||(LA72_0>=Super && LA72_0<=With)||(LA72_0>=Any && LA72_0<=Var)||(LA72_0>=As && LA72_0<=Of)||LA72_0==RULE_IDENTIFIER) ) {
                alt72=1;
            }
            else if ( (LA72_0==LeftSquareBracket) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // InternalTypesParser.g:3274:6: ( (lv_name_5_0= ruleTypesIdentifier ) )
                    {
                    // InternalTypesParser.g:3274:6: ( (lv_name_5_0= ruleTypesIdentifier ) )
                    // InternalTypesParser.g:3275:7: (lv_name_5_0= ruleTypesIdentifier )
                    {
                    // InternalTypesParser.g:3275:7: (lv_name_5_0= ruleTypesIdentifier )
                    // InternalTypesParser.g:3276:8: lv_name_5_0= ruleTypesIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTSetterAccess().getNameTypesIdentifierParserRuleCall_0_0_4_0_0());
                      							
                    }
                    pushFollow(FOLLOW_59);
                    lv_name_5_0=ruleTypesIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTSetterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_5_0,
                      									"org.eclipse.n4js.ts.Types.TypesIdentifier");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:3294:6: ( (lv_name_6_0= ruleTypesComputedPropertyName ) )
                    {
                    // InternalTypesParser.g:3294:6: ( (lv_name_6_0= ruleTypesComputedPropertyName ) )
                    // InternalTypesParser.g:3295:7: (lv_name_6_0= ruleTypesComputedPropertyName )
                    {
                    // InternalTypesParser.g:3295:7: (lv_name_6_0= ruleTypesComputedPropertyName )
                    // InternalTypesParser.g:3296:8: lv_name_6_0= ruleTypesComputedPropertyName
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTSetterAccess().getNameTypesComputedPropertyNameParserRuleCall_0_0_4_1_0());
                      							
                    }
                    pushFollow(FOLLOW_59);
                    lv_name_6_0=ruleTypesComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTSetterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_6_0,
                      									"org.eclipse.n4js.ts.Types.TypesComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            // InternalTypesParser.g:3316:3: ( (lv_optional_7_0= QuestionMark ) )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==QuestionMark) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // InternalTypesParser.g:3317:4: (lv_optional_7_0= QuestionMark )
                    {
                    // InternalTypesParser.g:3317:4: (lv_optional_7_0= QuestionMark )
                    // InternalTypesParser.g:3318:5: lv_optional_7_0= QuestionMark
                    {
                    lv_optional_7_0=(Token)match(input,QuestionMark,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_7_0, grammarAccess.getTSetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTSetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getTSetterAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalTypesParser.g:3334:3: ( (lv_fpar_9_0= ruleTFormalParameter ) )
            // InternalTypesParser.g:3335:4: (lv_fpar_9_0= ruleTFormalParameter )
            {
            // InternalTypesParser.g:3335:4: (lv_fpar_9_0= ruleTFormalParameter )
            // InternalTypesParser.g:3336:5: lv_fpar_9_0= ruleTFormalParameter
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTSetterAccess().getFparTFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_60);
            lv_fpar_9_0=ruleTFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTSetterRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_9_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TFormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_10, grammarAccess.getTSetterAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTSetter"


    // $ANTLR start "entryRuleTFunction"
    // InternalTypesParser.g:3361:1: entryRuleTFunction returns [EObject current=null] : iv_ruleTFunction= ruleTFunction EOF ;
    public final EObject entryRuleTFunction() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTFunction = null;


        try {
            // InternalTypesParser.g:3361:50: (iv_ruleTFunction= ruleTFunction EOF )
            // InternalTypesParser.g:3362:2: iv_ruleTFunction= ruleTFunction EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTFunctionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTFunction=ruleTFunction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTFunction; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTFunction"


    // $ANTLR start "ruleTFunction"
    // InternalTypesParser.g:3368:1: ruleTFunction returns [EObject current=null] : ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Function (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( (lv_name_8_0= ruleBindingTypesIdentifier ) ) otherlv_9= LeftParenthesis ( ( (lv_fpars_10_0= ruleTFormalParameter ) ) (otherlv_11= Comma ( (lv_fpars_12_0= ruleTFormalParameter ) ) )* )? otherlv_13= RightParenthesis otherlv_14= Colon ( (lv_returnTypeRef_15_0= ruleTypeRef ) ) ) ;
    public final EObject ruleTFunction() throws RecognitionException {
        EObject current = null;

        Token lv_declaredProvidedByRuntime_1_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Enumerator lv_declaredTypeAccessModifier_0_0 = null;

        EObject lv_typeVars_4_0 = null;

        EObject lv_typeVars_6_0 = null;

        AntlrDatatypeRuleToken lv_name_8_0 = null;

        EObject lv_fpars_10_0 = null;

        EObject lv_fpars_12_0 = null;

        EObject lv_returnTypeRef_15_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3374:2: ( ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Function (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( (lv_name_8_0= ruleBindingTypesIdentifier ) ) otherlv_9= LeftParenthesis ( ( (lv_fpars_10_0= ruleTFormalParameter ) ) (otherlv_11= Comma ( (lv_fpars_12_0= ruleTFormalParameter ) ) )* )? otherlv_13= RightParenthesis otherlv_14= Colon ( (lv_returnTypeRef_15_0= ruleTypeRef ) ) ) )
            // InternalTypesParser.g:3375:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Function (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( (lv_name_8_0= ruleBindingTypesIdentifier ) ) otherlv_9= LeftParenthesis ( ( (lv_fpars_10_0= ruleTFormalParameter ) ) (otherlv_11= Comma ( (lv_fpars_12_0= ruleTFormalParameter ) ) )* )? otherlv_13= RightParenthesis otherlv_14= Colon ( (lv_returnTypeRef_15_0= ruleTypeRef ) ) )
            {
            // InternalTypesParser.g:3375:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Function (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( (lv_name_8_0= ruleBindingTypesIdentifier ) ) otherlv_9= LeftParenthesis ( ( (lv_fpars_10_0= ruleTFormalParameter ) ) (otherlv_11= Comma ( (lv_fpars_12_0= ruleTFormalParameter ) ) )* )? otherlv_13= RightParenthesis otherlv_14= Colon ( (lv_returnTypeRef_15_0= ruleTypeRef ) ) )
            // InternalTypesParser.g:3376:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Function (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )? ( (lv_name_8_0= ruleBindingTypesIdentifier ) ) otherlv_9= LeftParenthesis ( ( (lv_fpars_10_0= ruleTFormalParameter ) ) (otherlv_11= Comma ( (lv_fpars_12_0= ruleTFormalParameter ) ) )* )? otherlv_13= RightParenthesis otherlv_14= Colon ( (lv_returnTypeRef_15_0= ruleTypeRef ) )
            {
            // InternalTypesParser.g:3376:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) )
            // InternalTypesParser.g:3377:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            {
            // InternalTypesParser.g:3377:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            // InternalTypesParser.g:3378:5: lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTFunctionAccess().getDeclaredTypeAccessModifierTypeAccessModifierEnumRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_63);
            lv_declaredTypeAccessModifier_0_0=ruleTypeAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTFunctionRule());
              					}
              					set(
              						current,
              						"declaredTypeAccessModifier",
              						lv_declaredTypeAccessModifier_0_0,
              						"org.eclipse.n4js.ts.Types.TypeAccessModifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:3395:3: ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ProvidedByRuntime) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // InternalTypesParser.g:3396:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    {
                    // InternalTypesParser.g:3396:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    // InternalTypesParser.g:3397:5: lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime
                    {
                    lv_declaredProvidedByRuntime_1_0=(Token)match(input,ProvidedByRuntime,FOLLOW_64); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredProvidedByRuntime_1_0, grammarAccess.getTFunctionAccess().getDeclaredProvidedByRuntimeProvidedByRuntimeKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTFunctionRule());
                      					}
                      					setWithLastConsumed(current, "declaredProvidedByRuntime", true, "providedByRuntime");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_2=(Token)match(input,Function,FOLLOW_65); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getTFunctionAccess().getFunctionKeyword_2());
              		
            }
            // InternalTypesParser.g:3413:3: (otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==LessThanSign) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // InternalTypesParser.g:3414:4: otherlv_3= LessThanSign ( (lv_typeVars_4_0= ruleTypeVariable ) ) (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )* otherlv_7= GreaterThanSign
                    {
                    otherlv_3=(Token)match(input,LessThanSign,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getTFunctionAccess().getLessThanSignKeyword_3_0());
                      			
                    }
                    // InternalTypesParser.g:3418:4: ( (lv_typeVars_4_0= ruleTypeVariable ) )
                    // InternalTypesParser.g:3419:5: (lv_typeVars_4_0= ruleTypeVariable )
                    {
                    // InternalTypesParser.g:3419:5: (lv_typeVars_4_0= ruleTypeVariable )
                    // InternalTypesParser.g:3420:6: lv_typeVars_4_0= ruleTypeVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTFunctionAccess().getTypeVarsTypeVariableParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_28);
                    lv_typeVars_4_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTFunctionRule());
                      						}
                      						add(
                      							current,
                      							"typeVars",
                      							lv_typeVars_4_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:3437:4: (otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) ) )*
                    loop75:
                    do {
                        int alt75=2;
                        int LA75_0 = input.LA(1);

                        if ( (LA75_0==Comma) ) {
                            alt75=1;
                        }


                        switch (alt75) {
                    	case 1 :
                    	    // InternalTypesParser.g:3438:5: otherlv_5= Comma ( (lv_typeVars_6_0= ruleTypeVariable ) )
                    	    {
                    	    otherlv_5=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_5, grammarAccess.getTFunctionAccess().getCommaKeyword_3_2_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:3442:5: ( (lv_typeVars_6_0= ruleTypeVariable ) )
                    	    // InternalTypesParser.g:3443:6: (lv_typeVars_6_0= ruleTypeVariable )
                    	    {
                    	    // InternalTypesParser.g:3443:6: (lv_typeVars_6_0= ruleTypeVariable )
                    	    // InternalTypesParser.g:3444:7: lv_typeVars_6_0= ruleTypeVariable
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTFunctionAccess().getTypeVarsTypeVariableParserRuleCall_3_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_28);
                    	    lv_typeVars_6_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTFunctionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeVars",
                    	      								lv_typeVars_6_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop75;
                        }
                    } while (true);

                    otherlv_7=(Token)match(input,GreaterThanSign,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getTFunctionAccess().getGreaterThanSignKeyword_3_3());
                      			
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:3467:3: ( (lv_name_8_0= ruleBindingTypesIdentifier ) )
            // InternalTypesParser.g:3468:4: (lv_name_8_0= ruleBindingTypesIdentifier )
            {
            // InternalTypesParser.g:3468:4: (lv_name_8_0= ruleBindingTypesIdentifier )
            // InternalTypesParser.g:3469:5: lv_name_8_0= ruleBindingTypesIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTFunctionAccess().getNameBindingTypesIdentifierParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_53);
            lv_name_8_0=ruleBindingTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTFunctionRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_8_0,
              						"org.eclipse.n4js.ts.Types.BindingTypesIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_9=(Token)match(input,LeftParenthesis,FOLLOW_48); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getTFunctionAccess().getLeftParenthesisKeyword_5());
              		
            }
            // InternalTypesParser.g:3490:3: ( ( (lv_fpars_10_0= ruleTFormalParameter ) ) (otherlv_11= Comma ( (lv_fpars_12_0= ruleTFormalParameter ) ) )* )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( ((LA78_0>=Intersection && LA78_0<=Constructor)||LA78_0==Implements||(LA78_0>=Promisify && LA78_0<=Interface)||LA78_0==Protected||LA78_0==Abstract||LA78_0==External||(LA78_0>=Private && LA78_0<=Project)||LA78_0==Public||LA78_0==Static||LA78_0==Target||(LA78_0>=Async && LA78_0<=Await)||LA78_0==Union||(LA78_0>=Yield && LA78_0<=This)||LA78_0==From||LA78_0==Type||LA78_0==FullStopFullStopFullStop||(LA78_0>=Get && LA78_0<=Let)||(LA78_0>=Out && LA78_0<=Set)||LA78_0==As||LA78_0==Of||LA78_0==RULE_IDENTIFIER) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // InternalTypesParser.g:3491:4: ( (lv_fpars_10_0= ruleTFormalParameter ) ) (otherlv_11= Comma ( (lv_fpars_12_0= ruleTFormalParameter ) ) )*
                    {
                    // InternalTypesParser.g:3491:4: ( (lv_fpars_10_0= ruleTFormalParameter ) )
                    // InternalTypesParser.g:3492:5: (lv_fpars_10_0= ruleTFormalParameter )
                    {
                    // InternalTypesParser.g:3492:5: (lv_fpars_10_0= ruleTFormalParameter )
                    // InternalTypesParser.g:3493:6: lv_fpars_10_0= ruleTFormalParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTFunctionAccess().getFparsTFormalParameterParserRuleCall_6_0_0());
                      					
                    }
                    pushFollow(FOLLOW_7);
                    lv_fpars_10_0=ruleTFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTFunctionRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_10_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TFormalParameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:3510:4: (otherlv_11= Comma ( (lv_fpars_12_0= ruleTFormalParameter ) ) )*
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==Comma) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // InternalTypesParser.g:3511:5: otherlv_11= Comma ( (lv_fpars_12_0= ruleTFormalParameter ) )
                    	    {
                    	    otherlv_11=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_11, grammarAccess.getTFunctionAccess().getCommaKeyword_6_1_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:3515:5: ( (lv_fpars_12_0= ruleTFormalParameter ) )
                    	    // InternalTypesParser.g:3516:6: (lv_fpars_12_0= ruleTFormalParameter )
                    	    {
                    	    // InternalTypesParser.g:3516:6: (lv_fpars_12_0= ruleTFormalParameter )
                    	    // InternalTypesParser.g:3517:7: lv_fpars_12_0= ruleTFormalParameter
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTFunctionAccess().getFparsTFormalParameterParserRuleCall_6_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_7);
                    	    lv_fpars_12_0=ruleTFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTFunctionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_12_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.TFormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop77;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_13, grammarAccess.getTFunctionAccess().getRightParenthesisKeyword_7());
              		
            }
            otherlv_14=(Token)match(input,Colon,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_14, grammarAccess.getTFunctionAccess().getColonKeyword_8());
              		
            }
            // InternalTypesParser.g:3544:3: ( (lv_returnTypeRef_15_0= ruleTypeRef ) )
            // InternalTypesParser.g:3545:4: (lv_returnTypeRef_15_0= ruleTypeRef )
            {
            // InternalTypesParser.g:3545:4: (lv_returnTypeRef_15_0= ruleTypeRef )
            // InternalTypesParser.g:3546:5: lv_returnTypeRef_15_0= ruleTypeRef
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTFunctionAccess().getReturnTypeRefTypeRefParserRuleCall_9_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_15_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTFunctionRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_15_0,
              						"org.eclipse.n4js.ts.Types.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTFunction"


    // $ANTLR start "entryRuleTEnum"
    // InternalTypesParser.g:3567:1: entryRuleTEnum returns [EObject current=null] : iv_ruleTEnum= ruleTEnum EOF ;
    public final EObject entryRuleTEnum() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTEnum = null;


        try {
            // InternalTypesParser.g:3567:46: (iv_ruleTEnum= ruleTEnum EOF )
            // InternalTypesParser.g:3568:2: iv_ruleTEnum= ruleTEnum EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTEnumRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTEnum=ruleTEnum();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTEnum; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTEnum"


    // $ANTLR start "ruleTEnum"
    // InternalTypesParser.g:3574:1: ruleTEnum returns [EObject current=null] : ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Enum ( (lv_name_3_0= ruleBindingTypesIdentifier ) ) otherlv_4= LeftCurlyBracket ( (lv_literals_5_0= ruleTEnumLiteral ) ) (otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) ) )* otherlv_8= RightCurlyBracket ) ;
    public final EObject ruleTEnum() throws RecognitionException {
        EObject current = null;

        Token lv_declaredProvidedByRuntime_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Enumerator lv_declaredTypeAccessModifier_0_0 = null;

        AntlrDatatypeRuleToken lv_name_3_0 = null;

        EObject lv_literals_5_0 = null;

        EObject lv_literals_7_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3580:2: ( ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Enum ( (lv_name_3_0= ruleBindingTypesIdentifier ) ) otherlv_4= LeftCurlyBracket ( (lv_literals_5_0= ruleTEnumLiteral ) ) (otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) ) )* otherlv_8= RightCurlyBracket ) )
            // InternalTypesParser.g:3581:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Enum ( (lv_name_3_0= ruleBindingTypesIdentifier ) ) otherlv_4= LeftCurlyBracket ( (lv_literals_5_0= ruleTEnumLiteral ) ) (otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) ) )* otherlv_8= RightCurlyBracket )
            {
            // InternalTypesParser.g:3581:2: ( ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Enum ( (lv_name_3_0= ruleBindingTypesIdentifier ) ) otherlv_4= LeftCurlyBracket ( (lv_literals_5_0= ruleTEnumLiteral ) ) (otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) ) )* otherlv_8= RightCurlyBracket )
            // InternalTypesParser.g:3582:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) ) ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )? otherlv_2= Enum ( (lv_name_3_0= ruleBindingTypesIdentifier ) ) otherlv_4= LeftCurlyBracket ( (lv_literals_5_0= ruleTEnumLiteral ) ) (otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) ) )* otherlv_8= RightCurlyBracket
            {
            // InternalTypesParser.g:3582:3: ( (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier ) )
            // InternalTypesParser.g:3583:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            {
            // InternalTypesParser.g:3583:4: (lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier )
            // InternalTypesParser.g:3584:5: lv_declaredTypeAccessModifier_0_0= ruleTypeAccessModifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTEnumAccess().getDeclaredTypeAccessModifierTypeAccessModifierEnumRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_66);
            lv_declaredTypeAccessModifier_0_0=ruleTypeAccessModifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTEnumRule());
              					}
              					set(
              						current,
              						"declaredTypeAccessModifier",
              						lv_declaredTypeAccessModifier_0_0,
              						"org.eclipse.n4js.ts.Types.TypeAccessModifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:3601:3: ( (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime ) )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==ProvidedByRuntime) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // InternalTypesParser.g:3602:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    {
                    // InternalTypesParser.g:3602:4: (lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime )
                    // InternalTypesParser.g:3603:5: lv_declaredProvidedByRuntime_1_0= ProvidedByRuntime
                    {
                    lv_declaredProvidedByRuntime_1_0=(Token)match(input,ProvidedByRuntime,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredProvidedByRuntime_1_0, grammarAccess.getTEnumAccess().getDeclaredProvidedByRuntimeProvidedByRuntimeKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTEnumRule());
                      					}
                      					setWithLastConsumed(current, "declaredProvidedByRuntime", true, "providedByRuntime");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_2=(Token)match(input,Enum,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getTEnumAccess().getEnumKeyword_2());
              		
            }
            // InternalTypesParser.g:3619:3: ( (lv_name_3_0= ruleBindingTypesIdentifier ) )
            // InternalTypesParser.g:3620:4: (lv_name_3_0= ruleBindingTypesIdentifier )
            {
            // InternalTypesParser.g:3620:4: (lv_name_3_0= ruleBindingTypesIdentifier )
            // InternalTypesParser.g:3621:5: lv_name_3_0= ruleBindingTypesIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTEnumAccess().getNameBindingTypesIdentifierParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_15);
            lv_name_3_0=ruleBindingTypesIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTEnumRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_3_0,
              						"org.eclipse.n4js.ts.Types.BindingTypesIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTEnumAccess().getLeftCurlyBracketKeyword_4());
              		
            }
            // InternalTypesParser.g:3642:3: ( (lv_literals_5_0= ruleTEnumLiteral ) )
            // InternalTypesParser.g:3643:4: (lv_literals_5_0= ruleTEnumLiteral )
            {
            // InternalTypesParser.g:3643:4: (lv_literals_5_0= ruleTEnumLiteral )
            // InternalTypesParser.g:3644:5: lv_literals_5_0= ruleTEnumLiteral
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTEnumAccess().getLiteralsTEnumLiteralParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_68);
            lv_literals_5_0=ruleTEnumLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTEnumRule());
              					}
              					add(
              						current,
              						"literals",
              						lv_literals_5_0,
              						"org.eclipse.n4js.ts.Types.TEnumLiteral");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:3661:3: (otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) ) )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==Comma) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // InternalTypesParser.g:3662:4: otherlv_6= Comma ( (lv_literals_7_0= ruleTEnumLiteral ) )
            	    {
            	    otherlv_6=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_6, grammarAccess.getTEnumAccess().getCommaKeyword_6_0());
            	      			
            	    }
            	    // InternalTypesParser.g:3666:4: ( (lv_literals_7_0= ruleTEnumLiteral ) )
            	    // InternalTypesParser.g:3667:5: (lv_literals_7_0= ruleTEnumLiteral )
            	    {
            	    // InternalTypesParser.g:3667:5: (lv_literals_7_0= ruleTEnumLiteral )
            	    // InternalTypesParser.g:3668:6: lv_literals_7_0= ruleTEnumLiteral
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTEnumAccess().getLiteralsTEnumLiteralParserRuleCall_6_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_68);
            	    lv_literals_7_0=ruleTEnumLiteral();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTEnumRule());
            	      						}
            	      						add(
            	      							current,
            	      							"literals",
            	      							lv_literals_7_0,
            	      							"org.eclipse.n4js.ts.Types.TEnumLiteral");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);

            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getTEnumAccess().getRightCurlyBracketKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTEnum"


    // $ANTLR start "entryRuleTEnumLiteral"
    // InternalTypesParser.g:3694:1: entryRuleTEnumLiteral returns [EObject current=null] : iv_ruleTEnumLiteral= ruleTEnumLiteral EOF ;
    public final EObject entryRuleTEnumLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTEnumLiteral = null;


        try {
            // InternalTypesParser.g:3694:53: (iv_ruleTEnumLiteral= ruleTEnumLiteral EOF )
            // InternalTypesParser.g:3695:2: iv_ruleTEnumLiteral= ruleTEnumLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTEnumLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTEnumLiteral=ruleTEnumLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTEnumLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTEnumLiteral"


    // $ANTLR start "ruleTEnumLiteral"
    // InternalTypesParser.g:3701:1: ruleTEnumLiteral returns [EObject current=null] : ( (lv_name_0_0= RULE_IDENTIFIER ) ) ;
    public final EObject ruleTEnumLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;


        	enterRule();

        try {
            // InternalTypesParser.g:3707:2: ( ( (lv_name_0_0= RULE_IDENTIFIER ) ) )
            // InternalTypesParser.g:3708:2: ( (lv_name_0_0= RULE_IDENTIFIER ) )
            {
            // InternalTypesParser.g:3708:2: ( (lv_name_0_0= RULE_IDENTIFIER ) )
            // InternalTypesParser.g:3709:3: (lv_name_0_0= RULE_IDENTIFIER )
            {
            // InternalTypesParser.g:3709:3: (lv_name_0_0= RULE_IDENTIFIER )
            // InternalTypesParser.g:3710:4: lv_name_0_0= RULE_IDENTIFIER
            {
            lv_name_0_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_name_0_0, grammarAccess.getTEnumLiteralAccess().getNameIDENTIFIERTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getTEnumLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.IDENTIFIER");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTEnumLiteral"


    // $ANTLR start "entryRuleIntersectionTypeExpression"
    // InternalTypesParser.g:3729:1: entryRuleIntersectionTypeExpression returns [EObject current=null] : iv_ruleIntersectionTypeExpression= ruleIntersectionTypeExpression EOF ;
    public final EObject entryRuleIntersectionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIntersectionTypeExpression = null;


        try {
            // InternalTypesParser.g:3729:67: (iv_ruleIntersectionTypeExpression= ruleIntersectionTypeExpression EOF )
            // InternalTypesParser.g:3730:2: iv_ruleIntersectionTypeExpression= ruleIntersectionTypeExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntersectionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntersectionTypeExpression=ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntersectionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIntersectionTypeExpression"


    // $ANTLR start "ruleIntersectionTypeExpression"
    // InternalTypesParser.g:3736:1: ruleIntersectionTypeExpression returns [EObject current=null] : (this_PrimaryTypeExpression_0= rulePrimaryTypeExpression ( () (otherlv_2= Ampersand ( (lv_typeRefs_3_0= rulePrimaryTypeExpression ) ) )+ )? ) ;
    public final EObject ruleIntersectionTypeExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_PrimaryTypeExpression_0 = null;

        EObject lv_typeRefs_3_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3742:2: ( (this_PrimaryTypeExpression_0= rulePrimaryTypeExpression ( () (otherlv_2= Ampersand ( (lv_typeRefs_3_0= rulePrimaryTypeExpression ) ) )+ )? ) )
            // InternalTypesParser.g:3743:2: (this_PrimaryTypeExpression_0= rulePrimaryTypeExpression ( () (otherlv_2= Ampersand ( (lv_typeRefs_3_0= rulePrimaryTypeExpression ) ) )+ )? )
            {
            // InternalTypesParser.g:3743:2: (this_PrimaryTypeExpression_0= rulePrimaryTypeExpression ( () (otherlv_2= Ampersand ( (lv_typeRefs_3_0= rulePrimaryTypeExpression ) ) )+ )? )
            // InternalTypesParser.g:3744:3: this_PrimaryTypeExpression_0= rulePrimaryTypeExpression ( () (otherlv_2= Ampersand ( (lv_typeRefs_3_0= rulePrimaryTypeExpression ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getIntersectionTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_69);
            this_PrimaryTypeExpression_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PrimaryTypeExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalTypesParser.g:3752:3: ( () (otherlv_2= Ampersand ( (lv_typeRefs_3_0= rulePrimaryTypeExpression ) ) )+ )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==Ampersand) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // InternalTypesParser.g:3753:4: () (otherlv_2= Ampersand ( (lv_typeRefs_3_0= rulePrimaryTypeExpression ) ) )+
                    {
                    // InternalTypesParser.g:3753:4: ()
                    // InternalTypesParser.g:3754:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getIntersectionTypeExpressionAccess().getIntersectionTypeExpressionTypeRefsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalTypesParser.g:3760:4: (otherlv_2= Ampersand ( (lv_typeRefs_3_0= rulePrimaryTypeExpression ) ) )+
                    int cnt81=0;
                    loop81:
                    do {
                        int alt81=2;
                        int LA81_0 = input.LA(1);

                        if ( (LA81_0==Ampersand) ) {
                            alt81=1;
                        }


                        switch (alt81) {
                    	case 1 :
                    	    // InternalTypesParser.g:3761:5: otherlv_2= Ampersand ( (lv_typeRefs_3_0= rulePrimaryTypeExpression ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Ampersand,FOLLOW_70); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:3765:5: ( (lv_typeRefs_3_0= rulePrimaryTypeExpression ) )
                    	    // InternalTypesParser.g:3766:6: (lv_typeRefs_3_0= rulePrimaryTypeExpression )
                    	    {
                    	    // InternalTypesParser.g:3766:6: (lv_typeRefs_3_0= rulePrimaryTypeExpression )
                    	    // InternalTypesParser.g:3767:7: lv_typeRefs_3_0= rulePrimaryTypeExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_69);
                    	    lv_typeRefs_3_0=rulePrimaryTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeRefs",
                    	      								lv_typeRefs_3_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.PrimaryTypeExpression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt81 >= 1 ) break loop81;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(81, input);
                                throw eee;
                        }
                        cnt81++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIntersectionTypeExpression"


    // $ANTLR start "entryRulePrimaryTypeExpression"
    // InternalTypesParser.g:3790:1: entryRulePrimaryTypeExpression returns [EObject current=null] : iv_rulePrimaryTypeExpression= rulePrimaryTypeExpression EOF ;
    public final EObject entryRulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePrimaryTypeExpression = null;


        try {
            // InternalTypesParser.g:3790:62: (iv_rulePrimaryTypeExpression= rulePrimaryTypeExpression EOF )
            // InternalTypesParser.g:3791:2: iv_rulePrimaryTypeExpression= rulePrimaryTypeExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryTypeExpression=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePrimaryTypeExpression"


    // $ANTLR start "rulePrimaryTypeExpression"
    // InternalTypesParser.g:3797:1: rulePrimaryTypeExpression returns [EObject current=null] : ( ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) ) ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) ) | this_ArrayTypeRef_6= ruleArrayTypeRef | this_TypeRefWithModifiers_7= ruleTypeRefWithModifiers | (otherlv_8= LeftParenthesis this_TypeRef_9= ruleTypeRef otherlv_10= RightParenthesis ) ) ;
    public final EObject rulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        EObject this_TAnonymousFormalParameterList_2 = null;

        EObject lv_returnTypeRef_5_0 = null;

        EObject this_ArrayTypeRef_6 = null;

        EObject this_TypeRefWithModifiers_7 = null;

        EObject this_TypeRef_9 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3803:2: ( ( ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) ) ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) ) | this_ArrayTypeRef_6= ruleArrayTypeRef | this_TypeRefWithModifiers_7= ruleTypeRefWithModifiers | (otherlv_8= LeftParenthesis this_TypeRef_9= ruleTypeRef otherlv_10= RightParenthesis ) ) )
            // InternalTypesParser.g:3804:2: ( ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) ) ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) ) | this_ArrayTypeRef_6= ruleArrayTypeRef | this_TypeRefWithModifiers_7= ruleTypeRefWithModifiers | (otherlv_8= LeftParenthesis this_TypeRef_9= ruleTypeRef otherlv_10= RightParenthesis ) )
            {
            // InternalTypesParser.g:3804:2: ( ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) ) ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) ) | this_ArrayTypeRef_6= ruleArrayTypeRef | this_TypeRefWithModifiers_7= ruleTypeRefWithModifiers | (otherlv_8= LeftParenthesis this_TypeRef_9= ruleTypeRef otherlv_10= RightParenthesis ) )
            int alt83=4;
            alt83 = dfa83.predict(input);
            switch (alt83) {
                case 1 :
                    // InternalTypesParser.g:3805:3: ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) ) ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) )
                    {
                    // InternalTypesParser.g:3805:3: ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) ) ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) )
                    // InternalTypesParser.g:3806:4: ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) ) ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) )
                    {
                    // InternalTypesParser.g:3806:4: ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) )
                    // InternalTypesParser.g:3807:5: ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign )
                    {
                    // InternalTypesParser.g:3816:5: ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign )
                    // InternalTypesParser.g:3817:6: () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign
                    {
                    // InternalTypesParser.g:3817:6: ()
                    // InternalTypesParser.g:3818:7: 
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElement(
                      								grammarAccess.getPrimaryTypeExpressionAccess().getFunctionTypeExpressionAction_0_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_1, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_0_0_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPrimaryTypeExpressionRule());
                      						}
                      						newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_0_2());
                      					
                    }
                    pushFollow(FOLLOW_60);
                    this_TAnonymousFormalParameterList_2=ruleTAnonymousFormalParameterList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_TAnonymousFormalParameterList_2;
                      						afterParserOrEnumRuleCall();
                      					
                    }
                    otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_72); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_3, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_0_0_0_3());
                      					
                    }
                    otherlv_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_4, grammarAccess.getPrimaryTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_0_4());
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:3849:4: ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) )
                    // InternalTypesParser.g:3850:5: (lv_returnTypeRef_5_0= rulePrimaryTypeExpression )
                    {
                    // InternalTypesParser.g:3850:5: (lv_returnTypeRef_5_0= rulePrimaryTypeExpression )
                    // InternalTypesParser.g:3851:6: lv_returnTypeRef_5_0= rulePrimaryTypeExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_returnTypeRef_5_0=rulePrimaryTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPrimaryTypeExpressionRule());
                      						}
                      						set(
                      							current,
                      							"returnTypeRef",
                      							lv_returnTypeRef_5_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.PrimaryTypeExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:3870:3: this_ArrayTypeRef_6= ruleArrayTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getArrayTypeRefParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayTypeRef_6=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayTypeRef_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:3879:3: this_TypeRefWithModifiers_7= ruleTypeRefWithModifiers
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRefWithModifiers_7=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeRefWithModifiers_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:3888:3: (otherlv_8= LeftParenthesis this_TypeRef_9= ruleTypeRef otherlv_10= RightParenthesis )
                    {
                    // InternalTypesParser.g:3888:3: (otherlv_8= LeftParenthesis this_TypeRef_9= ruleTypeRef otherlv_10= RightParenthesis )
                    // InternalTypesParser.g:3889:4: otherlv_8= LeftParenthesis this_TypeRef_9= ruleTypeRef otherlv_10= RightParenthesis
                    {
                    otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_3_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_3_1());
                      			
                    }
                    pushFollow(FOLLOW_60);
                    this_TypeRef_9=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeRef_9;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_3_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePrimaryTypeExpression"


    // $ANTLR start "entryRuleTypeRefWithModifiers"
    // InternalTypesParser.g:3910:1: entryRuleTypeRefWithModifiers returns [EObject current=null] : iv_ruleTypeRefWithModifiers= ruleTypeRefWithModifiers EOF ;
    public final EObject entryRuleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefWithModifiers = null;


        try {
            // InternalTypesParser.g:3910:61: (iv_ruleTypeRefWithModifiers= ruleTypeRefWithModifiers EOF )
            // InternalTypesParser.g:3911:2: iv_ruleTypeRefWithModifiers= ruleTypeRefWithModifiers EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithModifiers=ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeRefWithModifiers"


    // $ANTLR start "ruleTypeRefWithModifiers"
    // InternalTypesParser.g:3917:1: ruleTypeRefWithModifiers returns [EObject current=null] : (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )? ) ;
    public final EObject ruleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;

        Token lv_followedByQuestionMark_1_0=null;
        EObject this_TypeRefWithoutModifiers_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3923:2: ( (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )? ) )
            // InternalTypesParser.g:3924:2: (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )? )
            {
            // InternalTypesParser.g:3924:2: (this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )? )
            // InternalTypesParser.g:3925:3: this_TypeRefWithoutModifiers_0= ruleTypeRefWithoutModifiers ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )?
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_9);
            this_TypeRefWithoutModifiers_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TypeRefWithoutModifiers_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalTypesParser.g:3933:3: ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==QuestionMark) && (synpred13_InternalTypesParser())) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // InternalTypesParser.g:3934:4: ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark )
                    {
                    // InternalTypesParser.g:3938:4: (lv_followedByQuestionMark_1_0= QuestionMark )
                    // InternalTypesParser.g:3939:5: lv_followedByQuestionMark_1_0= QuestionMark
                    {
                    lv_followedByQuestionMark_1_0=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_followedByQuestionMark_1_0, grammarAccess.getTypeRefWithModifiersAccess().getFollowedByQuestionMarkQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTypeRefWithModifiersRule());
                      					}
                      					setWithLastConsumed(current, "followedByQuestionMark", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeRefWithModifiers"


    // $ANTLR start "entryRuleTypeRefWithoutModifiers"
    // InternalTypesParser.g:3955:1: entryRuleTypeRefWithoutModifiers returns [EObject current=null] : iv_ruleTypeRefWithoutModifiers= ruleTypeRefWithoutModifiers EOF ;
    public final EObject entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefWithoutModifiers = null;


        try {
            // InternalTypesParser.g:3955:64: (iv_ruleTypeRefWithoutModifiers= ruleTypeRefWithoutModifiers EOF )
            // InternalTypesParser.g:3956:2: iv_ruleTypeRefWithoutModifiers= ruleTypeRefWithoutModifiers EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithoutModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithoutModifiers=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithoutModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeRefWithoutModifiers"


    // $ANTLR start "ruleTypeRefWithoutModifiers"
    // InternalTypesParser.g:3962:1: ruleTypeRefWithoutModifiers returns [EObject current=null] : ( ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )? ) | this_TypeTypeRef_3= ruleTypeTypeRef | this_FunctionTypeExpressionOLD_4= ruleFunctionTypeExpressionOLD | this_UnionTypeExpressionOLD_5= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_6= ruleIntersectionTypeExpressionOLD ) ;
    public final EObject ruleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;

        Token lv_dynamic_2_0=null;
        EObject this_ParameterizedTypeRef_0 = null;

        EObject this_ThisTypeRef_1 = null;

        EObject this_TypeTypeRef_3 = null;

        EObject this_FunctionTypeExpressionOLD_4 = null;

        EObject this_UnionTypeExpressionOLD_5 = null;

        EObject this_IntersectionTypeExpressionOLD_6 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:3968:2: ( ( ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )? ) | this_TypeTypeRef_3= ruleTypeTypeRef | this_FunctionTypeExpressionOLD_4= ruleFunctionTypeExpressionOLD | this_UnionTypeExpressionOLD_5= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_6= ruleIntersectionTypeExpressionOLD ) )
            // InternalTypesParser.g:3969:2: ( ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )? ) | this_TypeTypeRef_3= ruleTypeTypeRef | this_FunctionTypeExpressionOLD_4= ruleFunctionTypeExpressionOLD | this_UnionTypeExpressionOLD_5= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_6= ruleIntersectionTypeExpressionOLD )
            {
            // InternalTypesParser.g:3969:2: ( ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )? ) | this_TypeTypeRef_3= ruleTypeTypeRef | this_FunctionTypeExpressionOLD_4= ruleFunctionTypeExpressionOLD | this_UnionTypeExpressionOLD_5= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_6= ruleIntersectionTypeExpressionOLD )
            int alt87=5;
            switch ( input.LA(1) ) {
            case Undefined:
            case Indexed:
            case Null:
            case This_1:
            case Void:
            case Any:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt87=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt87=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt87=3;
                }
                break;
            case Union:
                {
                alt87=4;
                }
                break;
            case Intersection:
                {
                alt87=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }

            switch (alt87) {
                case 1 :
                    // InternalTypesParser.g:3970:3: ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )? )
                    {
                    // InternalTypesParser.g:3970:3: ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )? )
                    // InternalTypesParser.g:3971:4: (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef ) ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )?
                    {
                    // InternalTypesParser.g:3971:4: (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ThisTypeRef_1= ruleThisTypeRef )
                    int alt85=2;
                    switch ( input.LA(1) ) {
                    case Undefined:
                    case Indexed:
                    case Null:
                    case Void:
                    case Any:
                    case RULE_IDENTIFIER:
                        {
                        alt85=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA85_4 = input.LA(3);

                            if ( (LA85_4==This_1) ) {
                                alt85=2;
                            }
                            else if ( (LA85_4==Undefined||LA85_4==Indexed||LA85_4==Null||LA85_4==Void||LA85_4==Any||LA85_4==RULE_IDENTIFIER) ) {
                                alt85=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 85, 4, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA85_5 = input.LA(3);

                            if ( (LA85_5==This_1) ) {
                                alt85=2;
                            }
                            else if ( (LA85_5==Undefined||LA85_5==Indexed||LA85_5==Null||LA85_5==Void||LA85_5==Any||LA85_5==RULE_IDENTIFIER) ) {
                                alt85=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 85, 5, input);

                                throw nvae;
                            }
                            }
                            break;
                        case Undefined:
                        case Indexed:
                        case Null:
                        case Void:
                        case Any:
                        case RULE_IDENTIFIER:
                            {
                            alt85=1;
                            }
                            break;
                        case This_1:
                            {
                            alt85=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 85, 2, input);

                            throw nvae;
                        }

                        }
                        break;
                    case This_1:
                        {
                        alt85=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 85, 0, input);

                        throw nvae;
                    }

                    switch (alt85) {
                        case 1 :
                            // InternalTypesParser.g:3972:5: this_ParameterizedTypeRef_0= ruleParameterizedTypeRef
                            {
                            if ( state.backtracking==0 ) {

                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0());
                              				
                            }
                            pushFollow(FOLLOW_73);
                            this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ParameterizedTypeRef_0;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalTypesParser.g:3981:5: this_ThisTypeRef_1= ruleThisTypeRef
                            {
                            if ( state.backtracking==0 ) {

                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1());
                              				
                            }
                            pushFollow(FOLLOW_73);
                            this_ThisTypeRef_1=ruleThisTypeRef();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ThisTypeRef_1;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }

                    // InternalTypesParser.g:3990:4: ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==PlusSign) && (synpred14_InternalTypesParser())) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // InternalTypesParser.g:3991:5: ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign )
                            {
                            // InternalTypesParser.g:3995:5: (lv_dynamic_2_0= PlusSign )
                            // InternalTypesParser.g:3996:6: lv_dynamic_2_0= PlusSign
                            {
                            lv_dynamic_2_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_dynamic_2_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getTypeRefWithoutModifiersRule());
                              						}
                              						setWithLastConsumed(current, "dynamic", true, "+");
                              					
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:4010:3: this_TypeTypeRef_3= ruleTypeTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_3=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeTypeRef_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:4019:3: this_FunctionTypeExpressionOLD_4= ruleFunctionTypeExpressionOLD
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionTypeExpressionOLD_4=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FunctionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:4028:3: this_UnionTypeExpressionOLD_5= ruleUnionTypeExpressionOLD
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_5=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UnionTypeExpressionOLD_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:4037:3: this_IntersectionTypeExpressionOLD_6= ruleIntersectionTypeExpressionOLD
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_6=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IntersectionTypeExpressionOLD_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeRefWithoutModifiers"


    // $ANTLR start "entryRuleTypeRefFunctionTypeExpression"
    // InternalTypesParser.g:4049:1: entryRuleTypeRefFunctionTypeExpression returns [EObject current=null] : iv_ruleTypeRefFunctionTypeExpression= ruleTypeRefFunctionTypeExpression EOF ;
    public final EObject entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefFunctionTypeExpression = null;


        try {
            // InternalTypesParser.g:4049:70: (iv_ruleTypeRefFunctionTypeExpression= ruleTypeRefFunctionTypeExpression EOF )
            // InternalTypesParser.g:4050:2: iv_ruleTypeRefFunctionTypeExpression= ruleTypeRefFunctionTypeExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefFunctionTypeExpression=ruleTypeRefFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeRefFunctionTypeExpression"


    // $ANTLR start "ruleTypeRefFunctionTypeExpression"
    // InternalTypesParser.g:4056:1: ruleTypeRefFunctionTypeExpression returns [EObject current=null] : (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ArrayTypeRef_1= ruleArrayTypeRef | this_TypeTypeRef_2= ruleTypeTypeRef | this_UnionTypeExpressionOLD_3= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_4= ruleIntersectionTypeExpressionOLD ) ;
    public final EObject ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ParameterizedTypeRef_0 = null;

        EObject this_ArrayTypeRef_1 = null;

        EObject this_TypeTypeRef_2 = null;

        EObject this_UnionTypeExpressionOLD_3 = null;

        EObject this_IntersectionTypeExpressionOLD_4 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4062:2: ( (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ArrayTypeRef_1= ruleArrayTypeRef | this_TypeTypeRef_2= ruleTypeTypeRef | this_UnionTypeExpressionOLD_3= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_4= ruleIntersectionTypeExpressionOLD ) )
            // InternalTypesParser.g:4063:2: (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ArrayTypeRef_1= ruleArrayTypeRef | this_TypeTypeRef_2= ruleTypeTypeRef | this_UnionTypeExpressionOLD_3= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_4= ruleIntersectionTypeExpressionOLD )
            {
            // InternalTypesParser.g:4063:2: (this_ParameterizedTypeRef_0= ruleParameterizedTypeRef | this_ArrayTypeRef_1= ruleArrayTypeRef | this_TypeTypeRef_2= ruleTypeTypeRef | this_UnionTypeExpressionOLD_3= ruleUnionTypeExpressionOLD | this_IntersectionTypeExpressionOLD_4= ruleIntersectionTypeExpressionOLD )
            int alt88=5;
            switch ( input.LA(1) ) {
            case Undefined:
            case Indexed:
            case Null:
            case Void:
            case Any:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt88=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt88=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt88=3;
                }
                break;
            case Union:
                {
                alt88=4;
                }
                break;
            case Intersection:
                {
                alt88=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }

            switch (alt88) {
                case 1 :
                    // InternalTypesParser.g:4064:3: this_ParameterizedTypeRef_0= ruleParameterizedTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRef_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:4073:3: this_ArrayTypeRef_1= ruleArrayTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getArrayTypeRefParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayTypeRef_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayTypeRef_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:4082:3: this_TypeTypeRef_2= ruleTypeTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_2=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeTypeRef_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:4091:3: this_UnionTypeExpressionOLD_3= ruleUnionTypeExpressionOLD
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UnionTypeExpressionOLD_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:4100:3: this_IntersectionTypeExpressionOLD_4= ruleIntersectionTypeExpressionOLD
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IntersectionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeRefFunctionTypeExpression"


    // $ANTLR start "entryRuleTypeArgInTypeTypeRef"
    // InternalTypesParser.g:4112:1: entryRuleTypeArgInTypeTypeRef returns [EObject current=null] : iv_ruleTypeArgInTypeTypeRef= ruleTypeArgInTypeTypeRef EOF ;
    public final EObject entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeArgInTypeTypeRef = null;


        try {
            // InternalTypesParser.g:4112:61: (iv_ruleTypeArgInTypeTypeRef= ruleTypeArgInTypeTypeRef EOF )
            // InternalTypesParser.g:4113:2: iv_ruleTypeArgInTypeTypeRef= ruleTypeArgInTypeTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgInTypeTypeRef=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgInTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeArgInTypeTypeRef"


    // $ANTLR start "ruleTypeArgInTypeTypeRef"
    // InternalTypesParser.g:4119:1: ruleTypeArgInTypeTypeRef returns [EObject current=null] : (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ThisTypeRefNominal_1= ruleThisTypeRefNominal | ( ( ( () QuestionMark ) )=>this_Wildcard_2= ruleWildcard ) ) ;
    public final EObject ruleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_ParameterizedTypeRefNominal_0 = null;

        EObject this_ThisTypeRefNominal_1 = null;

        EObject this_Wildcard_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4125:2: ( (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ThisTypeRefNominal_1= ruleThisTypeRefNominal | ( ( ( () QuestionMark ) )=>this_Wildcard_2= ruleWildcard ) ) )
            // InternalTypesParser.g:4126:2: (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ThisTypeRefNominal_1= ruleThisTypeRefNominal | ( ( ( () QuestionMark ) )=>this_Wildcard_2= ruleWildcard ) )
            {
            // InternalTypesParser.g:4126:2: (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ThisTypeRefNominal_1= ruleThisTypeRefNominal | ( ( ( () QuestionMark ) )=>this_Wildcard_2= ruleWildcard ) )
            int alt89=3;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==Undefined||LA89_0==Indexed||LA89_0==Null||LA89_0==Void||LA89_0==Any||LA89_0==RULE_IDENTIFIER) ) {
                alt89=1;
            }
            else if ( (LA89_0==This_1) ) {
                alt89=2;
            }
            else if ( (LA89_0==QuestionMark) && (synpred15_InternalTypesParser())) {
                alt89=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    // InternalTypesParser.g:4127:3: this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:4136:3: this_ThisTypeRefNominal_1= ruleThisTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_1=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisTypeRefNominal_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:4145:3: ( ( ( () QuestionMark ) )=>this_Wildcard_2= ruleWildcard )
                    {
                    // InternalTypesParser.g:4145:3: ( ( ( () QuestionMark ) )=>this_Wildcard_2= ruleWildcard )
                    // InternalTypesParser.g:4146:4: ( ( () QuestionMark ) )=>this_Wildcard_2= ruleWildcard
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_Wildcard_2=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Wildcard_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeArgInTypeTypeRef"


    // $ANTLR start "entryRuleThisTypeRef"
    // InternalTypesParser.g:4165:1: entryRuleThisTypeRef returns [EObject current=null] : iv_ruleThisTypeRef= ruleThisTypeRef EOF ;
    public final EObject entryRuleThisTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisTypeRef = null;


        try {
            // InternalTypesParser.g:4165:52: (iv_ruleThisTypeRef= ruleThisTypeRef EOF )
            // InternalTypesParser.g:4166:2: iv_ruleThisTypeRef= ruleThisTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRef=ruleThisTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleThisTypeRef"


    // $ANTLR start "ruleThisTypeRef"
    // InternalTypesParser.g:4172:1: ruleThisTypeRef returns [EObject current=null] : (this_ThisTypeRefNominal_0= ruleThisTypeRefNominal | this_ThisTypeRefStructural_1= ruleThisTypeRefStructural ) ;
    public final EObject ruleThisTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_ThisTypeRefNominal_0 = null;

        EObject this_ThisTypeRefStructural_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4178:2: ( (this_ThisTypeRefNominal_0= ruleThisTypeRefNominal | this_ThisTypeRefStructural_1= ruleThisTypeRefStructural ) )
            // InternalTypesParser.g:4179:2: (this_ThisTypeRefNominal_0= ruleThisTypeRefNominal | this_ThisTypeRefStructural_1= ruleThisTypeRefStructural )
            {
            // InternalTypesParser.g:4179:2: (this_ThisTypeRefNominal_0= ruleThisTypeRefNominal | this_ThisTypeRefStructural_1= ruleThisTypeRefStructural )
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==This_1) ) {
                alt90=1;
            }
            else if ( (LA90_0==Tilde) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    // InternalTypesParser.g:4180:3: this_ThisTypeRefNominal_0= ruleThisTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_0=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:4189:3: this_ThisTypeRefStructural_1= ruleThisTypeRefStructural
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefStructural_1=ruleThisTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleThisTypeRef"


    // $ANTLR start "entryRuleThisTypeRefNominal"
    // InternalTypesParser.g:4201:1: entryRuleThisTypeRefNominal returns [EObject current=null] : iv_ruleThisTypeRefNominal= ruleThisTypeRefNominal EOF ;
    public final EObject entryRuleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisTypeRefNominal = null;


        try {
            // InternalTypesParser.g:4201:59: (iv_ruleThisTypeRefNominal= ruleThisTypeRefNominal EOF )
            // InternalTypesParser.g:4202:2: iv_ruleThisTypeRefNominal= ruleThisTypeRefNominal EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefNominal=ruleThisTypeRefNominal();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleThisTypeRefNominal"


    // $ANTLR start "ruleThisTypeRefNominal"
    // InternalTypesParser.g:4208:1: ruleThisTypeRefNominal returns [EObject current=null] : ( () otherlv_1= This_1 ) ;
    public final EObject ruleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalTypesParser.g:4214:2: ( ( () otherlv_1= This_1 ) )
            // InternalTypesParser.g:4215:2: ( () otherlv_1= This_1 )
            {
            // InternalTypesParser.g:4215:2: ( () otherlv_1= This_1 )
            // InternalTypesParser.g:4216:3: () otherlv_1= This_1
            {
            // InternalTypesParser.g:4216:3: ()
            // InternalTypesParser.g:4217:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getThisTypeRefNominalAccess().getThisTypeRefNominalAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleThisTypeRefNominal"


    // $ANTLR start "entryRuleThisTypeRefStructural"
    // InternalTypesParser.g:4231:1: entryRuleThisTypeRefStructural returns [EObject current=null] : iv_ruleThisTypeRefStructural= ruleThisTypeRefStructural EOF ;
    public final EObject entryRuleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisTypeRefStructural = null;


        try {
            // InternalTypesParser.g:4231:62: (iv_ruleThisTypeRefStructural= ruleThisTypeRefStructural EOF )
            // InternalTypesParser.g:4232:2: iv_ruleThisTypeRefStructural= ruleThisTypeRefStructural EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefStructural=ruleThisTypeRefStructural();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleThisTypeRefStructural"


    // $ANTLR start "ruleThisTypeRefStructural"
    // InternalTypesParser.g:4238:1: ruleThisTypeRefStructural returns [EObject current=null] : ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) otherlv_1= This_1 (otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current] )? ) ;
    public final EObject ruleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;

        EObject this_TStructMemberList_3 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4244:2: ( ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) otherlv_1= This_1 (otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current] )? ) )
            // InternalTypesParser.g:4245:2: ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) otherlv_1= This_1 (otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current] )? )
            {
            // InternalTypesParser.g:4245:2: ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) otherlv_1= This_1 (otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current] )? )
            // InternalTypesParser.g:4246:3: ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) otherlv_1= This_1 (otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current] )?
            {
            // InternalTypesParser.g:4246:3: ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) )
            // InternalTypesParser.g:4247:4: (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator )
            {
            // InternalTypesParser.g:4247:4: (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator )
            // InternalTypesParser.g:4248:5: lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_74);
            lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThisTypeRefStructuralRule());
              					}
              					set(
              						current,
              						"definedTypingStrategy",
              						lv_definedTypingStrategy_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyUseSiteOperator");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,This_1,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1());
              		
            }
            // InternalTypesParser.g:4269:3: (otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current] )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==With) ) {
                int LA91_1 = input.LA(2);

                if ( (LA91_1==LeftCurlyBracket) ) {
                    alt91=1;
                }
            }
            switch (alt91) {
                case 1 :
                    // InternalTypesParser.g:4270:4: otherlv_2= With this_TStructMemberList_3= ruleTStructMemberList[$current]
                    {
                    otherlv_2=(Token)match(input,With,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getThisTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_3=ruleTStructMemberList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructMemberList_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleThisTypeRefStructural"


    // $ANTLR start "entryRuleFunctionTypeExpressionOLD"
    // InternalTypesParser.g:4290:1: entryRuleFunctionTypeExpressionOLD returns [EObject current=null] : iv_ruleFunctionTypeExpressionOLD= ruleFunctionTypeExpressionOLD EOF ;
    public final EObject entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionTypeExpressionOLD = null;


        try {
            // InternalTypesParser.g:4290:66: (iv_ruleFunctionTypeExpressionOLD= ruleFunctionTypeExpressionOLD EOF )
            // InternalTypesParser.g:4291:2: iv_ruleFunctionTypeExpressionOLD= ruleFunctionTypeExpressionOLD EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionTypeExpressionOLD=ruleFunctionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionTypeExpressionOLD"


    // $ANTLR start "ruleFunctionTypeExpressionOLD"
    // InternalTypesParser.g:4297:1: ruleFunctionTypeExpressionOLD returns [EObject current=null] : ( () otherlv_1= LeftCurlyBracket (otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis )? otherlv_7= Function (otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign )? otherlv_13= LeftParenthesis this_TAnonymousFormalParameterList_14= ruleTAnonymousFormalParameterList[$current] otherlv_15= RightParenthesis (otherlv_16= Colon ( (lv_returnTypeRef_17_0= ruleTypeRef ) ) )? otherlv_18= RightCurlyBracket ) ;
    public final EObject ruleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        EObject lv_declaredThisType_5_0 = null;

        EObject lv_ownedTypeVars_9_0 = null;

        EObject lv_ownedTypeVars_11_0 = null;

        EObject this_TAnonymousFormalParameterList_14 = null;

        EObject lv_returnTypeRef_17_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4303:2: ( ( () otherlv_1= LeftCurlyBracket (otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis )? otherlv_7= Function (otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign )? otherlv_13= LeftParenthesis this_TAnonymousFormalParameterList_14= ruleTAnonymousFormalParameterList[$current] otherlv_15= RightParenthesis (otherlv_16= Colon ( (lv_returnTypeRef_17_0= ruleTypeRef ) ) )? otherlv_18= RightCurlyBracket ) )
            // InternalTypesParser.g:4304:2: ( () otherlv_1= LeftCurlyBracket (otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis )? otherlv_7= Function (otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign )? otherlv_13= LeftParenthesis this_TAnonymousFormalParameterList_14= ruleTAnonymousFormalParameterList[$current] otherlv_15= RightParenthesis (otherlv_16= Colon ( (lv_returnTypeRef_17_0= ruleTypeRef ) ) )? otherlv_18= RightCurlyBracket )
            {
            // InternalTypesParser.g:4304:2: ( () otherlv_1= LeftCurlyBracket (otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis )? otherlv_7= Function (otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign )? otherlv_13= LeftParenthesis this_TAnonymousFormalParameterList_14= ruleTAnonymousFormalParameterList[$current] otherlv_15= RightParenthesis (otherlv_16= Colon ( (lv_returnTypeRef_17_0= ruleTypeRef ) ) )? otherlv_18= RightCurlyBracket )
            // InternalTypesParser.g:4305:3: () otherlv_1= LeftCurlyBracket (otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis )? otherlv_7= Function (otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign )? otherlv_13= LeftParenthesis this_TAnonymousFormalParameterList_14= ruleTAnonymousFormalParameterList[$current] otherlv_15= RightParenthesis (otherlv_16= Colon ( (lv_returnTypeRef_17_0= ruleTypeRef ) ) )? otherlv_18= RightCurlyBracket
            {
            // InternalTypesParser.g:4305:3: ()
            // InternalTypesParser.g:4306:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionTypeExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_76); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            // InternalTypesParser.g:4316:3: (otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==CommercialAt) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // InternalTypesParser.g:4317:4: otherlv_2= CommercialAt otherlv_3= This otherlv_4= LeftParenthesis ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) ) otherlv_6= RightParenthesis
                    {
                    otherlv_2=(Token)match(input,CommercialAt,FOLLOW_77); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0());
                      			
                    }
                    otherlv_3=(Token)match(input,This,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1());
                      			
                    }
                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_78); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2());
                      			
                    }
                    // InternalTypesParser.g:4329:4: ( (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression ) )
                    // InternalTypesParser.g:4330:5: (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression )
                    {
                    // InternalTypesParser.g:4330:5: (lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression )
                    // InternalTypesParser.g:4331:6: lv_declaredThisType_5_0= ruleTypeRefFunctionTypeExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0());
                      					
                    }
                    pushFollow(FOLLOW_60);
                    lv_declaredThisType_5_0=ruleTypeRefFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						set(
                      							current,
                      							"declaredThisType",
                      							lv_declaredThisType_5_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRefFunctionTypeExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_64); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4());
                      			
                    }

                    }
                    break;

            }

            otherlv_7=(Token)match(input,Function,FOLLOW_79); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3());
              		
            }
            // InternalTypesParser.g:4357:3: (otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==LessThanSign) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // InternalTypesParser.g:4358:4: otherlv_8= LessThanSign ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) ) (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )* otherlv_12= GreaterThanSign
                    {
                    otherlv_8=(Token)match(input,LessThanSign,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0());
                      			
                    }
                    // InternalTypesParser.g:4362:4: ( (lv_ownedTypeVars_9_0= ruleTypeVariable ) )
                    // InternalTypesParser.g:4363:5: (lv_ownedTypeVars_9_0= ruleTypeVariable )
                    {
                    // InternalTypesParser.g:4363:5: (lv_ownedTypeVars_9_0= ruleTypeVariable )
                    // InternalTypesParser.g:4364:6: lv_ownedTypeVars_9_0= ruleTypeVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_1_0());
                      					
                    }
                    pushFollow(FOLLOW_28);
                    lv_ownedTypeVars_9_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						add(
                      							current,
                      							"ownedTypeVars",
                      							lv_ownedTypeVars_9_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:4381:4: (otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) ) )*
                    loop93:
                    do {
                        int alt93=2;
                        int LA93_0 = input.LA(1);

                        if ( (LA93_0==Comma) ) {
                            alt93=1;
                        }


                        switch (alt93) {
                    	case 1 :
                    	    // InternalTypesParser.g:4382:5: otherlv_10= Comma ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) )
                    	    {
                    	    otherlv_10=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_10, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:4386:5: ( (lv_ownedTypeVars_11_0= ruleTypeVariable ) )
                    	    // InternalTypesParser.g:4387:6: (lv_ownedTypeVars_11_0= ruleTypeVariable )
                    	    {
                    	    // InternalTypesParser.g:4387:6: (lv_ownedTypeVars_11_0= ruleTypeVariable )
                    	    // InternalTypesParser.g:4388:7: lv_ownedTypeVars_11_0= ruleTypeVariable
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_28);
                    	    lv_ownedTypeVars_11_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"ownedTypeVars",
                    	      								lv_ownedTypeVars_11_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop93;
                        }
                    } while (true);

                    otherlv_12=(Token)match(input,GreaterThanSign,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3());
                      			
                    }

                    }
                    break;

            }

            otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_13, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionTypeExpressionOLDRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6());
              		
            }
            pushFollow(FOLLOW_60);
            this_TAnonymousFormalParameterList_14=ruleTAnonymousFormalParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TAnonymousFormalParameterList_14;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_80); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_15, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7());
              		
            }
            // InternalTypesParser.g:4430:3: (otherlv_16= Colon ( (lv_returnTypeRef_17_0= ruleTypeRef ) ) )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==Colon) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // InternalTypesParser.g:4431:4: otherlv_16= Colon ( (lv_returnTypeRef_17_0= ruleTypeRef ) )
                    {
                    otherlv_16=(Token)match(input,Colon,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_16, grammarAccess.getFunctionTypeExpressionOLDAccess().getColonKeyword_8_0());
                      			
                    }
                    // InternalTypesParser.g:4435:4: ( (lv_returnTypeRef_17_0= ruleTypeRef ) )
                    // InternalTypesParser.g:4436:5: (lv_returnTypeRef_17_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:4436:5: (lv_returnTypeRef_17_0= ruleTypeRef )
                    // InternalTypesParser.g:4437:6: lv_returnTypeRef_17_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getReturnTypeRefTypeRefParserRuleCall_8_1_0());
                      					
                    }
                    pushFollow(FOLLOW_18);
                    lv_returnTypeRef_17_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						set(
                      							current,
                      							"returnTypeRef",
                      							lv_returnTypeRef_17_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_18=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_18, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionTypeExpressionOLD"


    // $ANTLR start "entryRuleArrowFunctionTypeExpression"
    // InternalTypesParser.g:4463:1: entryRuleArrowFunctionTypeExpression returns [EObject current=null] : iv_ruleArrowFunctionTypeExpression= ruleArrowFunctionTypeExpression EOF ;
    public final EObject entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrowFunctionTypeExpression = null;


        try {
            // InternalTypesParser.g:4463:68: (iv_ruleArrowFunctionTypeExpression= ruleArrowFunctionTypeExpression EOF )
            // InternalTypesParser.g:4464:2: iv_ruleArrowFunctionTypeExpression= ruleArrowFunctionTypeExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrowFunctionTypeExpression=ruleArrowFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrowFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleArrowFunctionTypeExpression"


    // $ANTLR start "ruleArrowFunctionTypeExpression"
    // InternalTypesParser.g:4470:1: ruleArrowFunctionTypeExpression returns [EObject current=null] : ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) ) ;
    public final EObject ruleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject this_TAnonymousFormalParameterList_2 = null;

        EObject lv_returnTypeRef_5_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4476:2: ( ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) ) )
            // InternalTypesParser.g:4477:2: ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) )
            {
            // InternalTypesParser.g:4477:2: ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) )
            // InternalTypesParser.g:4478:3: () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) )
            {
            // InternalTypesParser.g:4478:3: ()
            // InternalTypesParser.g:4479:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrowFunctionTypeExpressionAccess().getFunctionTypeExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_1());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getArrowFunctionTypeExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_60);
            this_TAnonymousFormalParameterList_2=ruleTAnonymousFormalParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TAnonymousFormalParameterList_2;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_72); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_3());
              		
            }
            otherlv_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getArrowFunctionTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_4());
              		
            }
            // InternalTypesParser.g:4508:3: ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) )
            // InternalTypesParser.g:4509:4: (lv_returnTypeRef_5_0= rulePrimaryTypeExpression )
            {
            // InternalTypesParser.g:4509:4: (lv_returnTypeRef_5_0= rulePrimaryTypeExpression )
            // InternalTypesParser.g:4510:5: lv_returnTypeRef_5_0= rulePrimaryTypeExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_5_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrowFunctionTypeExpressionRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_5_0,
              						"org.eclipse.n4js.ts.TypeExpressions.PrimaryTypeExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleArrowFunctionTypeExpression"


    // $ANTLR start "ruleTAnonymousFormalParameterList"
    // InternalTypesParser.g:4532:1: ruleTAnonymousFormalParameterList[EObject in_current] returns [EObject current=in_current] : ( ( (lv_fpars_0_0= ruleTAnonymousFormalParameter ) ) (otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) ) )* )? ;
    public final EObject ruleTAnonymousFormalParameterList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_fpars_0_0 = null;

        EObject lv_fpars_2_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4538:2: ( ( ( (lv_fpars_0_0= ruleTAnonymousFormalParameter ) ) (otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) ) )* )? )
            // InternalTypesParser.g:4539:2: ( ( (lv_fpars_0_0= ruleTAnonymousFormalParameter ) ) (otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) ) )* )?
            {
            // InternalTypesParser.g:4539:2: ( ( (lv_fpars_0_0= ruleTAnonymousFormalParameter ) ) (otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) ) )* )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( ((LA97_0>=Intersection && LA97_0<=Constructor)||LA97_0==Implements||(LA97_0>=Promisify && LA97_0<=Interface)||(LA97_0>=Protected && LA97_0<=Abstract)||LA97_0==External||(LA97_0>=Indexed && LA97_0<=Project)||LA97_0==Public||LA97_0==Static||LA97_0==Target||(LA97_0>=Async && LA97_0<=Await)||LA97_0==Union||(LA97_0>=Yield && LA97_0<=This)||(LA97_0>=From && LA97_0<=This_1)||(LA97_0>=Type && LA97_0<=Void)||(LA97_0>=FullStopFullStopFullStop && LA97_0<=Any)||(LA97_0>=Get && LA97_0<=Let)||(LA97_0>=Out && LA97_0<=Set)||LA97_0==As||LA97_0==Of||LA97_0==LeftCurlyBracket||LA97_0==Tilde||LA97_0==RULE_IDENTIFIER) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // InternalTypesParser.g:4540:3: ( (lv_fpars_0_0= ruleTAnonymousFormalParameter ) ) (otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) ) )*
                    {
                    // InternalTypesParser.g:4540:3: ( (lv_fpars_0_0= ruleTAnonymousFormalParameter ) )
                    // InternalTypesParser.g:4541:4: (lv_fpars_0_0= ruleTAnonymousFormalParameter )
                    {
                    // InternalTypesParser.g:4541:4: (lv_fpars_0_0= ruleTAnonymousFormalParameter )
                    // InternalTypesParser.g:4542:5: lv_fpars_0_0= ruleTAnonymousFormalParameter
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_81);
                    lv_fpars_0_0=ruleTAnonymousFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                      					}
                      					add(
                      						current,
                      						"fpars",
                      						lv_fpars_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }

                    // InternalTypesParser.g:4559:3: (otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) ) )*
                    loop96:
                    do {
                        int alt96=2;
                        int LA96_0 = input.LA(1);

                        if ( (LA96_0==Comma) ) {
                            alt96=1;
                        }


                        switch (alt96) {
                    	case 1 :
                    	    // InternalTypesParser.g:4560:4: otherlv_1= Comma ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) )
                    	    {
                    	    otherlv_1=(Token)match(input,Comma,FOLLOW_82); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      				newLeafNode(otherlv_1, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0());
                    	      			
                    	    }
                    	    // InternalTypesParser.g:4564:4: ( (lv_fpars_2_0= ruleTAnonymousFormalParameter ) )
                    	    // InternalTypesParser.g:4565:5: (lv_fpars_2_0= ruleTAnonymousFormalParameter )
                    	    {
                    	    // InternalTypesParser.g:4565:5: (lv_fpars_2_0= ruleTAnonymousFormalParameter )
                    	    // InternalTypesParser.g:4566:6: lv_fpars_2_0= ruleTAnonymousFormalParameter
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_81);
                    	    lv_fpars_2_0=ruleTAnonymousFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"fpars",
                    	      							lv_fpars_2_0,
                    	      							"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop96;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTAnonymousFormalParameterList"


    // $ANTLR start "entryRuleTAnonymousFormalParameter"
    // InternalTypesParser.g:4588:1: entryRuleTAnonymousFormalParameter returns [EObject current=null] : iv_ruleTAnonymousFormalParameter= ruleTAnonymousFormalParameter EOF ;
    public final EObject entryRuleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTAnonymousFormalParameter = null;


        try {
            // InternalTypesParser.g:4588:66: (iv_ruleTAnonymousFormalParameter= ruleTAnonymousFormalParameter EOF )
            // InternalTypesParser.g:4589:2: iv_ruleTAnonymousFormalParameter= ruleTAnonymousFormalParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnonymousFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnonymousFormalParameter=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnonymousFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTAnonymousFormalParameter"


    // $ANTLR start "ruleTAnonymousFormalParameter"
    // InternalTypesParser.g:4595:1: ruleTAnonymousFormalParameter returns [EObject current=null] : ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( ( ( ( ruleBindingIdentifier ) )=> (lv_name_1_0= ruleBindingIdentifier ) ) otherlv_2= Colon )? ( (lv_typeRef_3_0= ruleTypeRef ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current] ) ;
    public final EObject ruleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;

        Token lv_variadic_0_0=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject lv_typeRef_3_0 = null;

        EObject this_DefaultFormalParameter_4 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4601:2: ( ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( ( ( ( ruleBindingIdentifier ) )=> (lv_name_1_0= ruleBindingIdentifier ) ) otherlv_2= Colon )? ( (lv_typeRef_3_0= ruleTypeRef ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current] ) )
            // InternalTypesParser.g:4602:2: ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( ( ( ( ruleBindingIdentifier ) )=> (lv_name_1_0= ruleBindingIdentifier ) ) otherlv_2= Colon )? ( (lv_typeRef_3_0= ruleTypeRef ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current] )
            {
            // InternalTypesParser.g:4602:2: ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( ( ( ( ruleBindingIdentifier ) )=> (lv_name_1_0= ruleBindingIdentifier ) ) otherlv_2= Colon )? ( (lv_typeRef_3_0= ruleTypeRef ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current] )
            // InternalTypesParser.g:4603:3: ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( ( ( ( ruleBindingIdentifier ) )=> (lv_name_1_0= ruleBindingIdentifier ) ) otherlv_2= Colon )? ( (lv_typeRef_3_0= ruleTypeRef ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current]
            {
            // InternalTypesParser.g:4603:3: ( (lv_variadic_0_0= FullStopFullStopFullStop ) )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==FullStopFullStopFullStop) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // InternalTypesParser.g:4604:4: (lv_variadic_0_0= FullStopFullStopFullStop )
                    {
                    // InternalTypesParser.g:4604:4: (lv_variadic_0_0= FullStopFullStopFullStop )
                    // InternalTypesParser.g:4605:5: lv_variadic_0_0= FullStopFullStopFullStop
                    {
                    lv_variadic_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_83); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_variadic_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "variadic", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:4617:3: ( ( ( ( ruleBindingIdentifier ) )=> (lv_name_1_0= ruleBindingIdentifier ) ) otherlv_2= Colon )?
            int alt99=2;
            alt99 = dfa99.predict(input);
            switch (alt99) {
                case 1 :
                    // InternalTypesParser.g:4618:4: ( ( ( ruleBindingIdentifier ) )=> (lv_name_1_0= ruleBindingIdentifier ) ) otherlv_2= Colon
                    {
                    // InternalTypesParser.g:4618:4: ( ( ( ruleBindingIdentifier ) )=> (lv_name_1_0= ruleBindingIdentifier ) )
                    // InternalTypesParser.g:4619:5: ( ( ruleBindingIdentifier ) )=> (lv_name_1_0= ruleBindingIdentifier )
                    {
                    // InternalTypesParser.g:4623:5: (lv_name_1_0= ruleBindingIdentifier )
                    // InternalTypesParser.g:4624:6: lv_name_1_0= ruleBindingIdentifier
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getNameBindingIdentifierParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_54);
                    lv_name_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
                      						}
                      						set(
                      							current,
                      							"name",
                      							lv_name_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_2=(Token)match(input,Colon,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getTAnonymousFormalParameterAccess().getColonKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:4646:3: ( (lv_typeRef_3_0= ruleTypeRef ) )
            // InternalTypesParser.g:4647:4: (lv_typeRef_3_0= ruleTypeRef )
            {
            // InternalTypesParser.g:4647:4: (lv_typeRef_3_0= ruleTypeRef )
            // InternalTypesParser.g:4648:5: lv_typeRef_3_0= ruleTypeRef
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefTypeRefParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_84);
            lv_typeRef_3_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
              					}
              					set(
              						current,
              						"typeRef",
              						lv_typeRef_3_0,
              						"org.eclipse.n4js.ts.Types.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getDefaultFormalParameterParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_DefaultFormalParameter_4=ruleDefaultFormalParameter(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DefaultFormalParameter_4;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTAnonymousFormalParameter"


    // $ANTLR start "entryRuleTFormalParameter"
    // InternalTypesParser.g:4680:1: entryRuleTFormalParameter returns [EObject current=null] : iv_ruleTFormalParameter= ruleTFormalParameter EOF ;
    public final EObject entryRuleTFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTFormalParameter = null;


        try {
            // InternalTypesParser.g:4680:57: (iv_ruleTFormalParameter= ruleTFormalParameter EOF )
            // InternalTypesParser.g:4681:2: iv_ruleTFormalParameter= ruleTFormalParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTFormalParameter=ruleTFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTFormalParameter"


    // $ANTLR start "ruleTFormalParameter"
    // InternalTypesParser.g:4687:1: ruleTFormalParameter returns [EObject current=null] : ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( (lv_name_1_0= ruleBindingIdentifier ) ) otherlv_2= Colon ( (lv_typeRef_3_0= ruleTypeRef ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current] ) ;
    public final EObject ruleTFormalParameter() throws RecognitionException {
        EObject current = null;

        Token lv_variadic_0_0=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject lv_typeRef_3_0 = null;

        EObject this_DefaultFormalParameter_4 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4693:2: ( ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( (lv_name_1_0= ruleBindingIdentifier ) ) otherlv_2= Colon ( (lv_typeRef_3_0= ruleTypeRef ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current] ) )
            // InternalTypesParser.g:4694:2: ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( (lv_name_1_0= ruleBindingIdentifier ) ) otherlv_2= Colon ( (lv_typeRef_3_0= ruleTypeRef ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current] )
            {
            // InternalTypesParser.g:4694:2: ( ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( (lv_name_1_0= ruleBindingIdentifier ) ) otherlv_2= Colon ( (lv_typeRef_3_0= ruleTypeRef ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current] )
            // InternalTypesParser.g:4695:3: ( (lv_variadic_0_0= FullStopFullStopFullStop ) )? ( (lv_name_1_0= ruleBindingIdentifier ) ) otherlv_2= Colon ( (lv_typeRef_3_0= ruleTypeRef ) ) this_DefaultFormalParameter_4= ruleDefaultFormalParameter[$current]
            {
            // InternalTypesParser.g:4695:3: ( (lv_variadic_0_0= FullStopFullStopFullStop ) )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==FullStopFullStopFullStop) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // InternalTypesParser.g:4696:4: (lv_variadic_0_0= FullStopFullStopFullStop )
                    {
                    // InternalTypesParser.g:4696:4: (lv_variadic_0_0= FullStopFullStopFullStop )
                    // InternalTypesParser.g:4697:5: lv_variadic_0_0= FullStopFullStopFullStop
                    {
                    lv_variadic_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_variadic_0_0, grammarAccess.getTFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "variadic", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:4709:3: ( (lv_name_1_0= ruleBindingIdentifier ) )
            // InternalTypesParser.g:4710:4: (lv_name_1_0= ruleBindingIdentifier )
            {
            // InternalTypesParser.g:4710:4: (lv_name_1_0= ruleBindingIdentifier )
            // InternalTypesParser.g:4711:5: lv_name_1_0= ruleBindingIdentifier
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTFormalParameterAccess().getNameBindingIdentifierParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_54);
            lv_name_1_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTFormalParameterRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Colon,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getTFormalParameterAccess().getColonKeyword_2());
              		
            }
            // InternalTypesParser.g:4732:3: ( (lv_typeRef_3_0= ruleTypeRef ) )
            // InternalTypesParser.g:4733:4: (lv_typeRef_3_0= ruleTypeRef )
            {
            // InternalTypesParser.g:4733:4: (lv_typeRef_3_0= ruleTypeRef )
            // InternalTypesParser.g:4734:5: lv_typeRef_3_0= ruleTypeRef
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTFormalParameterAccess().getTypeRefTypeRefParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_84);
            lv_typeRef_3_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTFormalParameterRule());
              					}
              					set(
              						current,
              						"typeRef",
              						lv_typeRef_3_0,
              						"org.eclipse.n4js.ts.Types.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getTFormalParameterAccess().getDefaultFormalParameterParserRuleCall_4());
              		
            }
            pushFollow(FOLLOW_2);
            this_DefaultFormalParameter_4=ruleDefaultFormalParameter(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DefaultFormalParameter_4;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTFormalParameter"


    // $ANTLR start "ruleDefaultFormalParameter"
    // InternalTypesParser.g:4767:1: ruleDefaultFormalParameter[EObject in_current] returns [EObject current=in_current] : ( ( (lv_hasInitializerAssignment_0_0= EqualsSign ) ) ( (lv_astInitializer_1_0= ruleTypeReferenceName ) )? )? ;
    public final EObject ruleDefaultFormalParameter(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_hasInitializerAssignment_0_0=null;
        AntlrDatatypeRuleToken lv_astInitializer_1_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4773:2: ( ( ( (lv_hasInitializerAssignment_0_0= EqualsSign ) ) ( (lv_astInitializer_1_0= ruleTypeReferenceName ) )? )? )
            // InternalTypesParser.g:4774:2: ( ( (lv_hasInitializerAssignment_0_0= EqualsSign ) ) ( (lv_astInitializer_1_0= ruleTypeReferenceName ) )? )?
            {
            // InternalTypesParser.g:4774:2: ( ( (lv_hasInitializerAssignment_0_0= EqualsSign ) ) ( (lv_astInitializer_1_0= ruleTypeReferenceName ) )? )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==EqualsSign) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // InternalTypesParser.g:4775:3: ( (lv_hasInitializerAssignment_0_0= EqualsSign ) ) ( (lv_astInitializer_1_0= ruleTypeReferenceName ) )?
                    {
                    // InternalTypesParser.g:4775:3: ( (lv_hasInitializerAssignment_0_0= EqualsSign ) )
                    // InternalTypesParser.g:4776:4: (lv_hasInitializerAssignment_0_0= EqualsSign )
                    {
                    // InternalTypesParser.g:4776:4: (lv_hasInitializerAssignment_0_0= EqualsSign )
                    // InternalTypesParser.g:4777:5: lv_hasInitializerAssignment_0_0= EqualsSign
                    {
                    lv_hasInitializerAssignment_0_0=(Token)match(input,EqualsSign,FOLLOW_85); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_hasInitializerAssignment_0_0, grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getDefaultFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "hasInitializerAssignment", true, "=");
                      				
                    }

                    }


                    }

                    // InternalTypesParser.g:4789:3: ( (lv_astInitializer_1_0= ruleTypeReferenceName ) )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==Undefined||LA101_0==Indexed||LA101_0==Null||LA101_0==Void||LA101_0==Any||LA101_0==RULE_IDENTIFIER) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // InternalTypesParser.g:4790:4: (lv_astInitializer_1_0= ruleTypeReferenceName )
                            {
                            // InternalTypesParser.g:4790:4: (lv_astInitializer_1_0= ruleTypeReferenceName )
                            // InternalTypesParser.g:4791:5: lv_astInitializer_1_0= ruleTypeReferenceName
                            {
                            if ( state.backtracking==0 ) {

                              					newCompositeNode(grammarAccess.getDefaultFormalParameterAccess().getAstInitializerTypeReferenceNameParserRuleCall_1_0());
                              				
                            }
                            pushFollow(FOLLOW_2);
                            lv_astInitializer_1_0=ruleTypeReferenceName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElementForParent(grammarAccess.getDefaultFormalParameterRule());
                              					}
                              					set(
                              						current,
                              						"astInitializer",
                              						lv_astInitializer_1_0,
                              						"org.eclipse.n4js.ts.Types.TypeReferenceName");
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDefaultFormalParameter"


    // $ANTLR start "entryRuleUnionTypeExpressionOLD"
    // InternalTypesParser.g:4812:1: entryRuleUnionTypeExpressionOLD returns [EObject current=null] : iv_ruleUnionTypeExpressionOLD= ruleUnionTypeExpressionOLD EOF ;
    public final EObject entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnionTypeExpressionOLD = null;


        try {
            // InternalTypesParser.g:4812:63: (iv_ruleUnionTypeExpressionOLD= ruleUnionTypeExpressionOLD EOF )
            // InternalTypesParser.g:4813:2: iv_ruleUnionTypeExpressionOLD= ruleUnionTypeExpressionOLD EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnionTypeExpressionOLD=ruleUnionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnionTypeExpressionOLD"


    // $ANTLR start "ruleUnionTypeExpressionOLD"
    // InternalTypesParser.g:4819:1: ruleUnionTypeExpressionOLD returns [EObject current=null] : ( () otherlv_1= Union otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) ) )* otherlv_6= RightCurlyBracket ) ;
    public final EObject ruleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;

        EObject lv_typeRefs_5_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4825:2: ( ( () otherlv_1= Union otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) ) )* otherlv_6= RightCurlyBracket ) )
            // InternalTypesParser.g:4826:2: ( () otherlv_1= Union otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) ) )* otherlv_6= RightCurlyBracket )
            {
            // InternalTypesParser.g:4826:2: ( () otherlv_1= Union otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) ) )* otherlv_6= RightCurlyBracket )
            // InternalTypesParser.g:4827:3: () otherlv_1= Union otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) ) )* otherlv_6= RightCurlyBracket
            {
            // InternalTypesParser.g:4827:3: ()
            // InternalTypesParser.g:4828:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getUnionTypeExpressionOLDAccess().getUnionTypeExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Union,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            // InternalTypesParser.g:4842:3: ( (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers ) )
            // InternalTypesParser.g:4843:4: (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers )
            {
            // InternalTypesParser.g:4843:4: (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers )
            // InternalTypesParser.g:4844:5: lv_typeRefs_3_0= ruleTypeRefWithoutModifiers
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefWithoutModifiersParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_68);
            lv_typeRefs_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithoutModifiers");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:4861:3: (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) ) )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==Comma) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // InternalTypesParser.g:4862:4: otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) )
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_4, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	      			
            	    }
            	    // InternalTypesParser.g:4866:4: ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) )
            	    // InternalTypesParser.g:4867:5: (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers )
            	    {
            	    // InternalTypesParser.g:4867:5: (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers )
            	    // InternalTypesParser.g:4868:6: lv_typeRefs_5_0= ruleTypeRefWithoutModifiers
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_68);
            	    lv_typeRefs_5_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithoutModifiers");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);

            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnionTypeExpressionOLD"


    // $ANTLR start "entryRuleIntersectionTypeExpressionOLD"
    // InternalTypesParser.g:4894:1: entryRuleIntersectionTypeExpressionOLD returns [EObject current=null] : iv_ruleIntersectionTypeExpressionOLD= ruleIntersectionTypeExpressionOLD EOF ;
    public final EObject entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIntersectionTypeExpressionOLD = null;


        try {
            // InternalTypesParser.g:4894:70: (iv_ruleIntersectionTypeExpressionOLD= ruleIntersectionTypeExpressionOLD EOF )
            // InternalTypesParser.g:4895:2: iv_ruleIntersectionTypeExpressionOLD= ruleIntersectionTypeExpressionOLD EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntersectionTypeExpressionOLD=ruleIntersectionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntersectionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIntersectionTypeExpressionOLD"


    // $ANTLR start "ruleIntersectionTypeExpressionOLD"
    // InternalTypesParser.g:4901:1: ruleIntersectionTypeExpressionOLD returns [EObject current=null] : ( () otherlv_1= Intersection otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) ) )* otherlv_6= RightCurlyBracket ) ;
    public final EObject ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;

        EObject lv_typeRefs_5_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4907:2: ( ( () otherlv_1= Intersection otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) ) )* otherlv_6= RightCurlyBracket ) )
            // InternalTypesParser.g:4908:2: ( () otherlv_1= Intersection otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) ) )* otherlv_6= RightCurlyBracket )
            {
            // InternalTypesParser.g:4908:2: ( () otherlv_1= Intersection otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) ) )* otherlv_6= RightCurlyBracket )
            // InternalTypesParser.g:4909:3: () otherlv_1= Intersection otherlv_2= LeftCurlyBracket ( (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers ) ) (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) ) )* otherlv_6= RightCurlyBracket
            {
            // InternalTypesParser.g:4909:3: ()
            // InternalTypesParser.g:4910:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionTypeExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Intersection,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            // InternalTypesParser.g:4924:3: ( (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers ) )
            // InternalTypesParser.g:4925:4: (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers )
            {
            // InternalTypesParser.g:4925:4: (lv_typeRefs_3_0= ruleTypeRefWithoutModifiers )
            // InternalTypesParser.g:4926:5: lv_typeRefs_3_0= ruleTypeRefWithoutModifiers
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefWithoutModifiersParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_68);
            lv_typeRefs_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithoutModifiers");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:4943:3: (otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) ) )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==Comma) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // InternalTypesParser.g:4944:4: otherlv_4= Comma ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) )
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_4, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	      			
            	    }
            	    // InternalTypesParser.g:4948:4: ( (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers ) )
            	    // InternalTypesParser.g:4949:5: (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers )
            	    {
            	    // InternalTypesParser.g:4949:5: (lv_typeRefs_5_0= ruleTypeRefWithoutModifiers )
            	    // InternalTypesParser.g:4950:6: lv_typeRefs_5_0= ruleTypeRefWithoutModifiers
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_68);
            	    lv_typeRefs_5_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithoutModifiers");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);

            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIntersectionTypeExpressionOLD"


    // $ANTLR start "entryRuleParameterizedTypeRef"
    // InternalTypesParser.g:4976:1: entryRuleParameterizedTypeRef returns [EObject current=null] : iv_ruleParameterizedTypeRef= ruleParameterizedTypeRef EOF ;
    public final EObject entryRuleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedTypeRef = null;


        try {
            // InternalTypesParser.g:4976:61: (iv_ruleParameterizedTypeRef= ruleParameterizedTypeRef EOF )
            // InternalTypesParser.g:4977:2: iv_ruleParameterizedTypeRef= ruleParameterizedTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRef=ruleParameterizedTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameterizedTypeRef"


    // $ANTLR start "ruleParameterizedTypeRef"
    // InternalTypesParser.g:4983:1: ruleParameterizedTypeRef returns [EObject current=null] : (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ParameterizedTypeRefStructural_1= ruleParameterizedTypeRefStructural ) ;
    public final EObject ruleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_ParameterizedTypeRefNominal_0 = null;

        EObject this_ParameterizedTypeRefStructural_1 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:4989:2: ( (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ParameterizedTypeRefStructural_1= ruleParameterizedTypeRefStructural ) )
            // InternalTypesParser.g:4990:2: (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ParameterizedTypeRefStructural_1= ruleParameterizedTypeRefStructural )
            {
            // InternalTypesParser.g:4990:2: (this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal | this_ParameterizedTypeRefStructural_1= ruleParameterizedTypeRefStructural )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==Undefined||LA105_0==Indexed||LA105_0==Null||LA105_0==Void||LA105_0==Any||LA105_0==RULE_IDENTIFIER) ) {
                alt105=1;
            }
            else if ( (LA105_0==Tilde) ) {
                alt105=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }
            switch (alt105) {
                case 1 :
                    // InternalTypesParser.g:4991:3: this_ParameterizedTypeRefNominal_0= ruleParameterizedTypeRefNominal
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:5000:3: this_ParameterizedTypeRefStructural_1= ruleParameterizedTypeRefStructural
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefStructural_1=ruleParameterizedTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameterizedTypeRef"


    // $ANTLR start "entryRuleParameterizedTypeRefNominal"
    // InternalTypesParser.g:5012:1: entryRuleParameterizedTypeRefNominal returns [EObject current=null] : iv_ruleParameterizedTypeRefNominal= ruleParameterizedTypeRefNominal EOF ;
    public final EObject entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedTypeRefNominal = null;


        try {
            // InternalTypesParser.g:5012:68: (iv_ruleParameterizedTypeRefNominal= ruleParameterizedTypeRefNominal EOF )
            // InternalTypesParser.g:5013:2: iv_ruleParameterizedTypeRefNominal= ruleParameterizedTypeRefNominal EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefNominal=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameterizedTypeRefNominal"


    // $ANTLR start "ruleParameterizedTypeRefNominal"
    // InternalTypesParser.g:5019:1: ruleParameterizedTypeRefNominal returns [EObject current=null] : ( ( ( ruleTypeReferenceName ) ) ( ( ( LessThanSign )=>otherlv_1= LessThanSign ) ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= GreaterThanSign )? ) ;
    public final EObject ruleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_typeArgs_2_0 = null;

        EObject lv_typeArgs_4_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5025:2: ( ( ( ( ruleTypeReferenceName ) ) ( ( ( LessThanSign )=>otherlv_1= LessThanSign ) ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= GreaterThanSign )? ) )
            // InternalTypesParser.g:5026:2: ( ( ( ruleTypeReferenceName ) ) ( ( ( LessThanSign )=>otherlv_1= LessThanSign ) ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= GreaterThanSign )? )
            {
            // InternalTypesParser.g:5026:2: ( ( ( ruleTypeReferenceName ) ) ( ( ( LessThanSign )=>otherlv_1= LessThanSign ) ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= GreaterThanSign )? )
            // InternalTypesParser.g:5027:3: ( ( ruleTypeReferenceName ) ) ( ( ( LessThanSign )=>otherlv_1= LessThanSign ) ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= GreaterThanSign )?
            {
            // InternalTypesParser.g:5027:3: ( ( ruleTypeReferenceName ) )
            // InternalTypesParser.g:5028:4: ( ruleTypeReferenceName )
            {
            // InternalTypesParser.g:5028:4: ( ruleTypeReferenceName )
            // InternalTypesParser.g:5029:5: ruleTypeReferenceName
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getDeclaredTypeTypeCrossReference_0_0());
              				
            }
            pushFollow(FOLLOW_86);
            ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:5043:3: ( ( ( LessThanSign )=>otherlv_1= LessThanSign ) ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= GreaterThanSign )?
            int alt107=2;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // InternalTypesParser.g:5044:4: ( ( LessThanSign )=>otherlv_1= LessThanSign ) ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= GreaterThanSign
                    {
                    // InternalTypesParser.g:5044:4: ( ( LessThanSign )=>otherlv_1= LessThanSign )
                    // InternalTypesParser.g:5045:5: ( LessThanSign )=>otherlv_1= LessThanSign
                    {
                    otherlv_1=(Token)match(input,LessThanSign,FOLLOW_87); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_1, grammarAccess.getParameterizedTypeRefNominalAccess().getLessThanSignKeyword_1_0());
                      				
                    }

                    }

                    // InternalTypesParser.g:5051:4: ( (lv_typeArgs_2_0= ruleTypeArgument ) )
                    // InternalTypesParser.g:5052:5: (lv_typeArgs_2_0= ruleTypeArgument )
                    {
                    // InternalTypesParser.g:5052:5: (lv_typeArgs_2_0= ruleTypeArgument )
                    // InternalTypesParser.g:5053:6: lv_typeArgs_2_0= ruleTypeArgument
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsTypeArgumentParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_28);
                    lv_typeArgs_2_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getParameterizedTypeRefNominalRule());
                      						}
                      						add(
                      							current,
                      							"typeArgs",
                      							lv_typeArgs_2_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:5070:4: (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )*
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);

                        if ( (LA106_0==Comma) ) {
                            alt106=1;
                        }


                        switch (alt106) {
                    	case 1 :
                    	    // InternalTypesParser.g:5071:5: otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) )
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_87); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getParameterizedTypeRefNominalAccess().getCommaKeyword_1_2_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:5075:5: ( (lv_typeArgs_4_0= ruleTypeArgument ) )
                    	    // InternalTypesParser.g:5076:6: (lv_typeArgs_4_0= ruleTypeArgument )
                    	    {
                    	    // InternalTypesParser.g:5076:6: (lv_typeArgs_4_0= ruleTypeArgument )
                    	    // InternalTypesParser.g:5077:7: lv_typeArgs_4_0= ruleTypeArgument
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsTypeArgumentParserRuleCall_1_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_28);
                    	    lv_typeArgs_4_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getParameterizedTypeRefNominalRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeArgs",
                    	      								lv_typeArgs_4_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop106;
                        }
                    } while (true);

                    otherlv_5=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getParameterizedTypeRefNominalAccess().getGreaterThanSignKeyword_1_3());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameterizedTypeRefNominal"


    // $ANTLR start "entryRuleArrayTypeRef"
    // InternalTypesParser.g:5104:1: entryRuleArrayTypeRef returns [EObject current=null] : iv_ruleArrayTypeRef= ruleArrayTypeRef EOF ;
    public final EObject entryRuleArrayTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayTypeRef = null;


        try {
            // InternalTypesParser.g:5104:53: (iv_ruleArrayTypeRef= ruleArrayTypeRef EOF )
            // InternalTypesParser.g:5105:2: iv_ruleArrayTypeRef= ruleArrayTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayTypeRef=ruleArrayTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleArrayTypeRef"


    // $ANTLR start "ruleArrayTypeRef"
    // InternalTypesParser.g:5111:1: ruleArrayTypeRef returns [EObject current=null] : ( ( (lv_arrayTypeLiteral_0_0= LeftSquareBracket ) ) ( (lv_typeArgs_1_0= ruleTypeArgument ) ) otherlv_2= RightSquareBracket ) ;
    public final EObject ruleArrayTypeRef() throws RecognitionException {
        EObject current = null;

        Token lv_arrayTypeLiteral_0_0=null;
        Token otherlv_2=null;
        EObject lv_typeArgs_1_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5117:2: ( ( ( (lv_arrayTypeLiteral_0_0= LeftSquareBracket ) ) ( (lv_typeArgs_1_0= ruleTypeArgument ) ) otherlv_2= RightSquareBracket ) )
            // InternalTypesParser.g:5118:2: ( ( (lv_arrayTypeLiteral_0_0= LeftSquareBracket ) ) ( (lv_typeArgs_1_0= ruleTypeArgument ) ) otherlv_2= RightSquareBracket )
            {
            // InternalTypesParser.g:5118:2: ( ( (lv_arrayTypeLiteral_0_0= LeftSquareBracket ) ) ( (lv_typeArgs_1_0= ruleTypeArgument ) ) otherlv_2= RightSquareBracket )
            // InternalTypesParser.g:5119:3: ( (lv_arrayTypeLiteral_0_0= LeftSquareBracket ) ) ( (lv_typeArgs_1_0= ruleTypeArgument ) ) otherlv_2= RightSquareBracket
            {
            // InternalTypesParser.g:5119:3: ( (lv_arrayTypeLiteral_0_0= LeftSquareBracket ) )
            // InternalTypesParser.g:5120:4: (lv_arrayTypeLiteral_0_0= LeftSquareBracket )
            {
            // InternalTypesParser.g:5120:4: (lv_arrayTypeLiteral_0_0= LeftSquareBracket )
            // InternalTypesParser.g:5121:5: lv_arrayTypeLiteral_0_0= LeftSquareBracket
            {
            lv_arrayTypeLiteral_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_87); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_arrayTypeLiteral_0_0, grammarAccess.getArrayTypeRefAccess().getArrayTypeLiteralLeftSquareBracketKeyword_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getArrayTypeRefRule());
              					}
              					setWithLastConsumed(current, "arrayTypeLiteral", true, "[");
              				
            }

            }


            }

            // InternalTypesParser.g:5133:3: ( (lv_typeArgs_1_0= ruleTypeArgument ) )
            // InternalTypesParser.g:5134:4: (lv_typeArgs_1_0= ruleTypeArgument )
            {
            // InternalTypesParser.g:5134:4: (lv_typeArgs_1_0= ruleTypeArgument )
            // InternalTypesParser.g:5135:5: lv_typeArgs_1_0= ruleTypeArgument
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArrayTypeRefAccess().getTypeArgsTypeArgumentParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_21);
            lv_typeArgs_1_0=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayTypeRefRule());
              					}
              					add(
              						current,
              						"typeArgs",
              						lv_typeArgs_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getArrayTypeRefAccess().getRightSquareBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleArrayTypeRef"


    // $ANTLR start "entryRuleParameterizedTypeRefStructural"
    // InternalTypesParser.g:5160:1: entryRuleParameterizedTypeRefStructural returns [EObject current=null] : iv_ruleParameterizedTypeRefStructural= ruleParameterizedTypeRefStructural EOF ;
    public final EObject entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedTypeRefStructural = null;


        try {
            // InternalTypesParser.g:5160:71: (iv_ruleParameterizedTypeRefStructural= ruleParameterizedTypeRefStructural EOF )
            // InternalTypesParser.g:5161:2: iv_ruleParameterizedTypeRefStructural= ruleParameterizedTypeRefStructural EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefStructural=ruleParameterizedTypeRefStructural();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameterizedTypeRefStructural"


    // $ANTLR start "ruleParameterizedTypeRefStructural"
    // InternalTypesParser.g:5167:1: ruleParameterizedTypeRefStructural returns [EObject current=null] : ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) ( ( ruleTypeReferenceName ) ) ( ( ( LessThanSign )=>otherlv_2= LessThanSign ) ( (lv_typeArgs_3_0= ruleTypeArgument ) ) (otherlv_4= Comma ( (lv_typeArgs_5_0= ruleTypeArgument ) ) )* otherlv_6= GreaterThanSign )? (otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current] )? ) ;
    public final EObject ruleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;

        EObject lv_typeArgs_3_0 = null;

        EObject lv_typeArgs_5_0 = null;

        EObject this_TStructMemberList_8 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5173:2: ( ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) ( ( ruleTypeReferenceName ) ) ( ( ( LessThanSign )=>otherlv_2= LessThanSign ) ( (lv_typeArgs_3_0= ruleTypeArgument ) ) (otherlv_4= Comma ( (lv_typeArgs_5_0= ruleTypeArgument ) ) )* otherlv_6= GreaterThanSign )? (otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current] )? ) )
            // InternalTypesParser.g:5174:2: ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) ( ( ruleTypeReferenceName ) ) ( ( ( LessThanSign )=>otherlv_2= LessThanSign ) ( (lv_typeArgs_3_0= ruleTypeArgument ) ) (otherlv_4= Comma ( (lv_typeArgs_5_0= ruleTypeArgument ) ) )* otherlv_6= GreaterThanSign )? (otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current] )? )
            {
            // InternalTypesParser.g:5174:2: ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) ( ( ruleTypeReferenceName ) ) ( ( ( LessThanSign )=>otherlv_2= LessThanSign ) ( (lv_typeArgs_3_0= ruleTypeArgument ) ) (otherlv_4= Comma ( (lv_typeArgs_5_0= ruleTypeArgument ) ) )* otherlv_6= GreaterThanSign )? (otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current] )? )
            // InternalTypesParser.g:5175:3: ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) ( ( ruleTypeReferenceName ) ) ( ( ( LessThanSign )=>otherlv_2= LessThanSign ) ( (lv_typeArgs_3_0= ruleTypeArgument ) ) (otherlv_4= Comma ( (lv_typeArgs_5_0= ruleTypeArgument ) ) )* otherlv_6= GreaterThanSign )? (otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current] )?
            {
            // InternalTypesParser.g:5175:3: ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) )
            // InternalTypesParser.g:5176:4: (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator )
            {
            // InternalTypesParser.g:5176:4: (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator )
            // InternalTypesParser.g:5177:5: lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_14);
            lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedTypeRefStructuralRule());
              					}
              					set(
              						current,
              						"definedTypingStrategy",
              						lv_definedTypingStrategy_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyUseSiteOperator");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:5194:3: ( ( ruleTypeReferenceName ) )
            // InternalTypesParser.g:5195:4: ( ruleTypeReferenceName )
            {
            // InternalTypesParser.g:5195:4: ( ruleTypeReferenceName )
            // InternalTypesParser.g:5196:5: ruleTypeReferenceName
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getDeclaredTypeTypeCrossReference_1_0());
              				
            }
            pushFollow(FOLLOW_88);
            ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:5210:3: ( ( ( LessThanSign )=>otherlv_2= LessThanSign ) ( (lv_typeArgs_3_0= ruleTypeArgument ) ) (otherlv_4= Comma ( (lv_typeArgs_5_0= ruleTypeArgument ) ) )* otherlv_6= GreaterThanSign )?
            int alt109=2;
            alt109 = dfa109.predict(input);
            switch (alt109) {
                case 1 :
                    // InternalTypesParser.g:5211:4: ( ( LessThanSign )=>otherlv_2= LessThanSign ) ( (lv_typeArgs_3_0= ruleTypeArgument ) ) (otherlv_4= Comma ( (lv_typeArgs_5_0= ruleTypeArgument ) ) )* otherlv_6= GreaterThanSign
                    {
                    // InternalTypesParser.g:5211:4: ( ( LessThanSign )=>otherlv_2= LessThanSign )
                    // InternalTypesParser.g:5212:5: ( LessThanSign )=>otherlv_2= LessThanSign
                    {
                    otherlv_2=(Token)match(input,LessThanSign,FOLLOW_87); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getParameterizedTypeRefStructuralAccess().getLessThanSignKeyword_2_0());
                      				
                    }

                    }

                    // InternalTypesParser.g:5218:4: ( (lv_typeArgs_3_0= ruleTypeArgument ) )
                    // InternalTypesParser.g:5219:5: (lv_typeArgs_3_0= ruleTypeArgument )
                    {
                    // InternalTypesParser.g:5219:5: (lv_typeArgs_3_0= ruleTypeArgument )
                    // InternalTypesParser.g:5220:6: lv_typeArgs_3_0= ruleTypeArgument
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsTypeArgumentParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_28);
                    lv_typeArgs_3_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getParameterizedTypeRefStructuralRule());
                      						}
                      						add(
                      							current,
                      							"typeArgs",
                      							lv_typeArgs_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:5237:4: (otherlv_4= Comma ( (lv_typeArgs_5_0= ruleTypeArgument ) ) )*
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);

                        if ( (LA108_0==Comma) ) {
                            alt108=1;
                        }


                        switch (alt108) {
                    	case 1 :
                    	    // InternalTypesParser.g:5238:5: otherlv_4= Comma ( (lv_typeArgs_5_0= ruleTypeArgument ) )
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_87); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getParameterizedTypeRefStructuralAccess().getCommaKeyword_2_2_0());
                    	      				
                    	    }
                    	    // InternalTypesParser.g:5242:5: ( (lv_typeArgs_5_0= ruleTypeArgument ) )
                    	    // InternalTypesParser.g:5243:6: (lv_typeArgs_5_0= ruleTypeArgument )
                    	    {
                    	    // InternalTypesParser.g:5243:6: (lv_typeArgs_5_0= ruleTypeArgument )
                    	    // InternalTypesParser.g:5244:7: lv_typeArgs_5_0= ruleTypeArgument
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsTypeArgumentParserRuleCall_2_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_28);
                    	    lv_typeArgs_5_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getParameterizedTypeRefStructuralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeArgs",
                    	      								lv_typeArgs_5_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop108;
                        }
                    } while (true);

                    otherlv_6=(Token)match(input,GreaterThanSign,FOLLOW_75); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getParameterizedTypeRefStructuralAccess().getGreaterThanSignKeyword_2_3());
                      			
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:5267:3: (otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current] )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==With) ) {
                int LA110_1 = input.LA(2);

                if ( (LA110_1==LeftCurlyBracket) ) {
                    alt110=1;
                }
            }
            switch (alt110) {
                case 1 :
                    // InternalTypesParser.g:5268:4: otherlv_7= With this_TStructMemberList_8= ruleTStructMemberList[$current]
                    {
                    otherlv_7=(Token)match(input,With,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_3_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_3_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_8=ruleTStructMemberList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructMemberList_8;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameterizedTypeRefStructural"


    // $ANTLR start "ruleTStructMemberList"
    // InternalTypesParser.g:5289:1: ruleTStructMemberList[EObject in_current] returns [EObject current=in_current] : (otherlv_0= LeftCurlyBracket ( ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )? )* otherlv_4= RightCurlyBracket ) ;
    public final EObject ruleTStructMemberList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_astStructuralMembers_1_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5295:2: ( (otherlv_0= LeftCurlyBracket ( ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )? )* otherlv_4= RightCurlyBracket ) )
            // InternalTypesParser.g:5296:2: (otherlv_0= LeftCurlyBracket ( ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )? )* otherlv_4= RightCurlyBracket )
            {
            // InternalTypesParser.g:5296:2: (otherlv_0= LeftCurlyBracket ( ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )? )* otherlv_4= RightCurlyBracket )
            // InternalTypesParser.g:5297:3: otherlv_0= LeftCurlyBracket ( ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )? )* otherlv_4= RightCurlyBracket
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_89); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            // InternalTypesParser.g:5301:3: ( ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )? )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( ((LA112_0>=Intersection && LA112_0<=Constructor)||(LA112_0>=Implements && LA112_0<=Interface)||LA112_0==Protected||(LA112_0>=Abstract && LA112_0<=Finally)||(LA112_0>=Private && LA112_0<=Import)||(LA112_0>=Public && LA112_0<=False)||(LA112_0>=Super && LA112_0<=With)||(LA112_0>=For && LA112_0<=Var)||(LA112_0>=As && LA112_0<=Of)||LA112_0==LessThanSign||LA112_0==RULE_IDENTIFIER) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // InternalTypesParser.g:5302:4: ( (lv_astStructuralMembers_1_0= ruleTStructMember ) ) (otherlv_2= Semicolon | otherlv_3= Comma )?
            	    {
            	    // InternalTypesParser.g:5302:4: ( (lv_astStructuralMembers_1_0= ruleTStructMember ) )
            	    // InternalTypesParser.g:5303:5: (lv_astStructuralMembers_1_0= ruleTStructMember )
            	    {
            	    // InternalTypesParser.g:5303:5: (lv_astStructuralMembers_1_0= ruleTStructMember )
            	    // InternalTypesParser.g:5304:6: lv_astStructuralMembers_1_0= ruleTStructMember
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTStructMemberListAccess().getAstStructuralMembersTStructMemberParserRuleCall_1_0_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_90);
            	    lv_astStructuralMembers_1_0=ruleTStructMember();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTStructMemberListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"astStructuralMembers",
            	      							lv_astStructuralMembers_1_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TStructMember");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalTypesParser.g:5321:4: (otherlv_2= Semicolon | otherlv_3= Comma )?
            	    int alt111=3;
            	    int LA111_0 = input.LA(1);

            	    if ( (LA111_0==Semicolon) ) {
            	        alt111=1;
            	    }
            	    else if ( (LA111_0==Comma) ) {
            	        alt111=2;
            	    }
            	    switch (alt111) {
            	        case 1 :
            	            // InternalTypesParser.g:5322:5: otherlv_2= Semicolon
            	            {
            	            otherlv_2=(Token)match(input,Semicolon,FOLLOW_89); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_2, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0());
            	              				
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalTypesParser.g:5327:5: otherlv_3= Comma
            	            {
            	            otherlv_3=(Token)match(input,Comma,FOLLOW_89); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_3, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1());
            	              				
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);

            otherlv_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTStructMemberList"


    // $ANTLR start "entryRuleTStructMember"
    // InternalTypesParser.g:5341:1: entryRuleTStructMember returns [EObject current=null] : iv_ruleTStructMember= ruleTStructMember EOF ;
    public final EObject entryRuleTStructMember() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructMember = null;


        try {
            // InternalTypesParser.g:5341:54: (iv_ruleTStructMember= ruleTStructMember EOF )
            // InternalTypesParser.g:5342:2: iv_ruleTStructMember= ruleTStructMember EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMemberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMember=ruleTStructMember();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMember; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTStructMember"


    // $ANTLR start "ruleTStructMember"
    // InternalTypesParser.g:5348:1: ruleTStructMember returns [EObject current=null] : ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField ) ;
    public final EObject ruleTStructMember() throws RecognitionException {
        EObject current = null;

        EObject this_TStructGetter_0 = null;

        EObject this_TStructSetter_1 = null;

        EObject this_TStructMethod_2 = null;

        EObject this_TStructField_3 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5354:2: ( ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField ) )
            // InternalTypesParser.g:5355:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField )
            {
            // InternalTypesParser.g:5355:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField )
            int alt113=4;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    // InternalTypesParser.g:5356:3: ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter )
                    {
                    // InternalTypesParser.g:5356:3: ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter )
                    // InternalTypesParser.g:5357:4: ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructGetter_0=ruleTStructGetter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructGetter_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:5378:3: ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter )
                    {
                    // InternalTypesParser.g:5378:3: ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter )
                    // InternalTypesParser.g:5379:4: ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructSetter_1=ruleTStructSetter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructSetter_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:5400:3: ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod )
                    {
                    // InternalTypesParser.g:5400:3: ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod )
                    // InternalTypesParser.g:5401:4: ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMethod_2=ruleTStructMethod();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructMethod_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:5439:3: this_TStructField_3= ruleTStructField
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructField_3=ruleTStructField();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TStructField_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTStructMember"


    // $ANTLR start "entryRuleTStructMethod"
    // InternalTypesParser.g:5451:1: entryRuleTStructMethod returns [EObject current=null] : iv_ruleTStructMethod= ruleTStructMethod EOF ;
    public final EObject entryRuleTStructMethod() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructMethod = null;


        try {
            // InternalTypesParser.g:5451:54: (iv_ruleTStructMethod= ruleTStructMethod EOF )
            // InternalTypesParser.g:5452:2: iv_ruleTStructMethod= ruleTStructMethod EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMethodRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMethod=ruleTStructMethod();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMethod; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTStructMethod"


    // $ANTLR start "ruleTStructMethod"
    // InternalTypesParser.g:5458:1: ruleTStructMethod returns [EObject current=null] : ( ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (otherlv_1= LessThanSign ( (lv_typeVars_2_0= ruleTypeVariable ) ) (otherlv_3= Comma ( (lv_typeVars_4_0= ruleTypeVariable ) ) )* otherlv_5= GreaterThanSign )? ( (lv_name_6_0= ruleIdentifierName ) ) otherlv_7= LeftParenthesis ) ) this_TAnonymousFormalParameterList_8= ruleTAnonymousFormalParameterList[$current] otherlv_9= RightParenthesis (otherlv_10= Colon ( (lv_returnTypeRef_11_0= ruleTypeRef ) ) )? ) ;
    public final EObject ruleTStructMethod() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        EObject lv_typeVars_2_0 = null;

        EObject lv_typeVars_4_0 = null;

        AntlrDatatypeRuleToken lv_name_6_0 = null;

        EObject this_TAnonymousFormalParameterList_8 = null;

        EObject lv_returnTypeRef_11_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5464:2: ( ( ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (otherlv_1= LessThanSign ( (lv_typeVars_2_0= ruleTypeVariable ) ) (otherlv_3= Comma ( (lv_typeVars_4_0= ruleTypeVariable ) ) )* otherlv_5= GreaterThanSign )? ( (lv_name_6_0= ruleIdentifierName ) ) otherlv_7= LeftParenthesis ) ) this_TAnonymousFormalParameterList_8= ruleTAnonymousFormalParameterList[$current] otherlv_9= RightParenthesis (otherlv_10= Colon ( (lv_returnTypeRef_11_0= ruleTypeRef ) ) )? ) )
            // InternalTypesParser.g:5465:2: ( ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (otherlv_1= LessThanSign ( (lv_typeVars_2_0= ruleTypeVariable ) ) (otherlv_3= Comma ( (lv_typeVars_4_0= ruleTypeVariable ) ) )* otherlv_5= GreaterThanSign )? ( (lv_name_6_0= ruleIdentifierName ) ) otherlv_7= LeftParenthesis ) ) this_TAnonymousFormalParameterList_8= ruleTAnonymousFormalParameterList[$current] otherlv_9= RightParenthesis (otherlv_10= Colon ( (lv_returnTypeRef_11_0= ruleTypeRef ) ) )? )
            {
            // InternalTypesParser.g:5465:2: ( ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (otherlv_1= LessThanSign ( (lv_typeVars_2_0= ruleTypeVariable ) ) (otherlv_3= Comma ( (lv_typeVars_4_0= ruleTypeVariable ) ) )* otherlv_5= GreaterThanSign )? ( (lv_name_6_0= ruleIdentifierName ) ) otherlv_7= LeftParenthesis ) ) this_TAnonymousFormalParameterList_8= ruleTAnonymousFormalParameterList[$current] otherlv_9= RightParenthesis (otherlv_10= Colon ( (lv_returnTypeRef_11_0= ruleTypeRef ) ) )? )
            // InternalTypesParser.g:5466:3: ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (otherlv_1= LessThanSign ( (lv_typeVars_2_0= ruleTypeVariable ) ) (otherlv_3= Comma ( (lv_typeVars_4_0= ruleTypeVariable ) ) )* otherlv_5= GreaterThanSign )? ( (lv_name_6_0= ruleIdentifierName ) ) otherlv_7= LeftParenthesis ) ) this_TAnonymousFormalParameterList_8= ruleTAnonymousFormalParameterList[$current] otherlv_9= RightParenthesis (otherlv_10= Colon ( (lv_returnTypeRef_11_0= ruleTypeRef ) ) )?
            {
            // InternalTypesParser.g:5466:3: ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (otherlv_1= LessThanSign ( (lv_typeVars_2_0= ruleTypeVariable ) ) (otherlv_3= Comma ( (lv_typeVars_4_0= ruleTypeVariable ) ) )* otherlv_5= GreaterThanSign )? ( (lv_name_6_0= ruleIdentifierName ) ) otherlv_7= LeftParenthesis ) )
            // InternalTypesParser.g:5467:4: ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=> ( () (otherlv_1= LessThanSign ( (lv_typeVars_2_0= ruleTypeVariable ) ) (otherlv_3= Comma ( (lv_typeVars_4_0= ruleTypeVariable ) ) )* otherlv_5= GreaterThanSign )? ( (lv_name_6_0= ruleIdentifierName ) ) otherlv_7= LeftParenthesis )
            {
            // InternalTypesParser.g:5495:4: ( () (otherlv_1= LessThanSign ( (lv_typeVars_2_0= ruleTypeVariable ) ) (otherlv_3= Comma ( (lv_typeVars_4_0= ruleTypeVariable ) ) )* otherlv_5= GreaterThanSign )? ( (lv_name_6_0= ruleIdentifierName ) ) otherlv_7= LeftParenthesis )
            // InternalTypesParser.g:5496:5: () (otherlv_1= LessThanSign ( (lv_typeVars_2_0= ruleTypeVariable ) ) (otherlv_3= Comma ( (lv_typeVars_4_0= ruleTypeVariable ) ) )* otherlv_5= GreaterThanSign )? ( (lv_name_6_0= ruleIdentifierName ) ) otherlv_7= LeftParenthesis
            {
            // InternalTypesParser.g:5496:5: ()
            // InternalTypesParser.g:5497:6: 
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTStructMethodAccess().getTStructMethodAction_0_0_0(),
              							current);
              					
            }

            }

            // InternalTypesParser.g:5503:5: (otherlv_1= LessThanSign ( (lv_typeVars_2_0= ruleTypeVariable ) ) (otherlv_3= Comma ( (lv_typeVars_4_0= ruleTypeVariable ) ) )* otherlv_5= GreaterThanSign )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==LessThanSign) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // InternalTypesParser.g:5504:6: otherlv_1= LessThanSign ( (lv_typeVars_2_0= ruleTypeVariable ) ) (otherlv_3= Comma ( (lv_typeVars_4_0= ruleTypeVariable ) ) )* otherlv_5= GreaterThanSign
                    {
                    otherlv_1=(Token)match(input,LessThanSign,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_1, grammarAccess.getTStructMethodAccess().getLessThanSignKeyword_0_0_1_0());
                      					
                    }
                    // InternalTypesParser.g:5508:6: ( (lv_typeVars_2_0= ruleTypeVariable ) )
                    // InternalTypesParser.g:5509:7: (lv_typeVars_2_0= ruleTypeVariable )
                    {
                    // InternalTypesParser.g:5509:7: (lv_typeVars_2_0= ruleTypeVariable )
                    // InternalTypesParser.g:5510:8: lv_typeVars_2_0= ruleTypeVariable
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTStructMethodAccess().getTypeVarsTypeVariableParserRuleCall_0_0_1_1_0());
                      							
                    }
                    pushFollow(FOLLOW_28);
                    lv_typeVars_2_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTStructMethodRule());
                      								}
                      								add(
                      									current,
                      									"typeVars",
                      									lv_typeVars_2_0,
                      									"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }

                    // InternalTypesParser.g:5527:6: (otherlv_3= Comma ( (lv_typeVars_4_0= ruleTypeVariable ) ) )*
                    loop114:
                    do {
                        int alt114=2;
                        int LA114_0 = input.LA(1);

                        if ( (LA114_0==Comma) ) {
                            alt114=1;
                        }


                        switch (alt114) {
                    	case 1 :
                    	    // InternalTypesParser.g:5528:7: otherlv_3= Comma ( (lv_typeVars_4_0= ruleTypeVariable ) )
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							newLeafNode(otherlv_3, grammarAccess.getTStructMethodAccess().getCommaKeyword_0_0_1_2_0());
                    	      						
                    	    }
                    	    // InternalTypesParser.g:5532:7: ( (lv_typeVars_4_0= ruleTypeVariable ) )
                    	    // InternalTypesParser.g:5533:8: (lv_typeVars_4_0= ruleTypeVariable )
                    	    {
                    	    // InternalTypesParser.g:5533:8: (lv_typeVars_4_0= ruleTypeVariable )
                    	    // InternalTypesParser.g:5534:9: lv_typeVars_4_0= ruleTypeVariable
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getTStructMethodAccess().getTypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_28);
                    	    lv_typeVars_4_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getTStructMethodRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"typeVars",
                    	      										lv_typeVars_4_0,
                    	      										"org.eclipse.n4js.ts.TypeExpressions.TypeVariable");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop114;
                        }
                    } while (true);

                    otherlv_5=(Token)match(input,GreaterThanSign,FOLLOW_23); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_5, grammarAccess.getTStructMethodAccess().getGreaterThanSignKeyword_0_0_1_3());
                      					
                    }

                    }
                    break;

            }

            // InternalTypesParser.g:5557:5: ( (lv_name_6_0= ruleIdentifierName ) )
            // InternalTypesParser.g:5558:6: (lv_name_6_0= ruleIdentifierName )
            {
            // InternalTypesParser.g:5558:6: (lv_name_6_0= ruleIdentifierName )
            // InternalTypesParser.g:5559:7: lv_name_6_0= ruleIdentifierName
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTStructMethodAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_53);
            lv_name_6_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructMethodRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_6_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            otherlv_7=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_7, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3());
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTStructMethodRule());
              			}
              			newCompositeNode(grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_60);
            this_TAnonymousFormalParameterList_8=ruleTAnonymousFormalParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TAnonymousFormalParameterList_8;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_91); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2());
              		
            }
            // InternalTypesParser.g:5597:3: (otherlv_10= Colon ( (lv_returnTypeRef_11_0= ruleTypeRef ) ) )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==Colon) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // InternalTypesParser.g:5598:4: otherlv_10= Colon ( (lv_returnTypeRef_11_0= ruleTypeRef ) )
                    {
                    otherlv_10=(Token)match(input,Colon,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getTStructMethodAccess().getColonKeyword_3_0());
                      			
                    }
                    // InternalTypesParser.g:5602:4: ( (lv_returnTypeRef_11_0= ruleTypeRef ) )
                    // InternalTypesParser.g:5603:5: (lv_returnTypeRef_11_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:5603:5: (lv_returnTypeRef_11_0= ruleTypeRef )
                    // InternalTypesParser.g:5604:6: lv_returnTypeRef_11_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTStructMethodAccess().getReturnTypeRefTypeRefParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_returnTypeRef_11_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTStructMethodRule());
                      						}
                      						set(
                      							current,
                      							"returnTypeRef",
                      							lv_returnTypeRef_11_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTStructMethod"


    // $ANTLR start "entryRuleTStructField"
    // InternalTypesParser.g:5626:1: entryRuleTStructField returns [EObject current=null] : iv_ruleTStructField= ruleTStructField EOF ;
    public final EObject entryRuleTStructField() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructField = null;


        try {
            // InternalTypesParser.g:5626:53: (iv_ruleTStructField= ruleTStructField EOF )
            // InternalTypesParser.g:5627:2: iv_ruleTStructField= ruleTStructField EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructField=ruleTStructField();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructField; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTStructField"


    // $ANTLR start "ruleTStructField"
    // InternalTypesParser.g:5633:1: ruleTStructField returns [EObject current=null] : ( ( (lv_name_0_0= ruleIdentifierName ) ) ( (lv_optional_1_0= QuestionMark ) )? (otherlv_2= Colon ( (lv_typeRef_3_0= ruleTypeRef ) ) )? ) ;
    public final EObject ruleTStructField() throws RecognitionException {
        EObject current = null;

        Token lv_optional_1_0=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;

        EObject lv_typeRef_3_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5639:2: ( ( ( (lv_name_0_0= ruleIdentifierName ) ) ( (lv_optional_1_0= QuestionMark ) )? (otherlv_2= Colon ( (lv_typeRef_3_0= ruleTypeRef ) ) )? ) )
            // InternalTypesParser.g:5640:2: ( ( (lv_name_0_0= ruleIdentifierName ) ) ( (lv_optional_1_0= QuestionMark ) )? (otherlv_2= Colon ( (lv_typeRef_3_0= ruleTypeRef ) ) )? )
            {
            // InternalTypesParser.g:5640:2: ( ( (lv_name_0_0= ruleIdentifierName ) ) ( (lv_optional_1_0= QuestionMark ) )? (otherlv_2= Colon ( (lv_typeRef_3_0= ruleTypeRef ) ) )? )
            // InternalTypesParser.g:5641:3: ( (lv_name_0_0= ruleIdentifierName ) ) ( (lv_optional_1_0= QuestionMark ) )? (otherlv_2= Colon ( (lv_typeRef_3_0= ruleTypeRef ) ) )?
            {
            // InternalTypesParser.g:5641:3: ( (lv_name_0_0= ruleIdentifierName ) )
            // InternalTypesParser.g:5642:4: (lv_name_0_0= ruleIdentifierName )
            {
            // InternalTypesParser.g:5642:4: (lv_name_0_0= ruleIdentifierName )
            // InternalTypesParser.g:5643:5: lv_name_0_0= ruleIdentifierName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTStructFieldAccess().getNameIdentifierNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_92);
            lv_name_0_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructFieldRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalTypesParser.g:5660:3: ( (lv_optional_1_0= QuestionMark ) )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==QuestionMark) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // InternalTypesParser.g:5661:4: (lv_optional_1_0= QuestionMark )
                    {
                    // InternalTypesParser.g:5661:4: (lv_optional_1_0= QuestionMark )
                    // InternalTypesParser.g:5662:5: lv_optional_1_0= QuestionMark
                    {
                    lv_optional_1_0=(Token)match(input,QuestionMark,FOLLOW_91); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_1_0, grammarAccess.getTStructFieldAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructFieldRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalTypesParser.g:5674:3: (otherlv_2= Colon ( (lv_typeRef_3_0= ruleTypeRef ) ) )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==Colon) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // InternalTypesParser.g:5675:4: otherlv_2= Colon ( (lv_typeRef_3_0= ruleTypeRef ) )
                    {
                    otherlv_2=(Token)match(input,Colon,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getTStructFieldAccess().getColonKeyword_2_0());
                      			
                    }
                    // InternalTypesParser.g:5679:4: ( (lv_typeRef_3_0= ruleTypeRef ) )
                    // InternalTypesParser.g:5680:5: (lv_typeRef_3_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:5680:5: (lv_typeRef_3_0= ruleTypeRef )
                    // InternalTypesParser.g:5681:6: lv_typeRef_3_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTStructFieldAccess().getTypeRefTypeRefParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_typeRef_3_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTStructFieldRule());
                      						}
                      						set(
                      							current,
                      							"typeRef",
                      							lv_typeRef_3_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTStructField"


    // $ANTLR start "entryRuleTStructGetter"
    // InternalTypesParser.g:5703:1: entryRuleTStructGetter returns [EObject current=null] : iv_ruleTStructGetter= ruleTStructGetter EOF ;
    public final EObject entryRuleTStructGetter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructGetter = null;


        try {
            // InternalTypesParser.g:5703:54: (iv_ruleTStructGetter= ruleTStructGetter EOF )
            // InternalTypesParser.g:5704:2: iv_ruleTStructGetter= ruleTStructGetter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructGetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructGetter=ruleTStructGetter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructGetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTStructGetter"


    // $ANTLR start "ruleTStructGetter"
    // InternalTypesParser.g:5710:1: ruleTStructGetter returns [EObject current=null] : ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis otherlv_5= RightParenthesis (otherlv_6= Colon ( (lv_declaredTypeRef_7_0= ruleTypeRef ) ) )? ) ;
    public final EObject ruleTStructGetter() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject lv_declaredTypeRef_7_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5716:2: ( ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis otherlv_5= RightParenthesis (otherlv_6= Colon ( (lv_declaredTypeRef_7_0= ruleTypeRef ) ) )? ) )
            // InternalTypesParser.g:5717:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis otherlv_5= RightParenthesis (otherlv_6= Colon ( (lv_declaredTypeRef_7_0= ruleTypeRef ) ) )? )
            {
            // InternalTypesParser.g:5717:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis otherlv_5= RightParenthesis (otherlv_6= Colon ( (lv_declaredTypeRef_7_0= ruleTypeRef ) ) )? )
            // InternalTypesParser.g:5718:3: ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis otherlv_5= RightParenthesis (otherlv_6= Colon ( (lv_declaredTypeRef_7_0= ruleTypeRef ) ) )?
            {
            // InternalTypesParser.g:5718:3: ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) ) )
            // InternalTypesParser.g:5719:4: ( ( () Get ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) )
            {
            // InternalTypesParser.g:5730:4: ( () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) ) )
            // InternalTypesParser.g:5731:5: () otherlv_1= Get ( (lv_name_2_0= ruleIdentifierName ) )
            {
            // InternalTypesParser.g:5731:5: ()
            // InternalTypesParser.g:5732:6: 
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTStructGetterAccess().getTStructGetterAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Get,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1());
              				
            }
            // InternalTypesParser.g:5742:5: ( (lv_name_2_0= ruleIdentifierName ) )
            // InternalTypesParser.g:5743:6: (lv_name_2_0= ruleIdentifierName )
            {
            // InternalTypesParser.g:5743:6: (lv_name_2_0= ruleIdentifierName )
            // InternalTypesParser.g:5744:7: lv_name_2_0= ruleIdentifierName
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTStructGetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_59);
            lv_name_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructGetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }

            // InternalTypesParser.g:5763:3: ( (lv_optional_3_0= QuestionMark ) )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==QuestionMark) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // InternalTypesParser.g:5764:4: (lv_optional_3_0= QuestionMark )
                    {
                    // InternalTypesParser.g:5764:4: (lv_optional_3_0= QuestionMark )
                    // InternalTypesParser.g:5765:5: lv_optional_3_0= QuestionMark
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructGetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructGetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_91); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_3());
              		
            }
            // InternalTypesParser.g:5785:3: (otherlv_6= Colon ( (lv_declaredTypeRef_7_0= ruleTypeRef ) ) )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==Colon) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // InternalTypesParser.g:5786:4: otherlv_6= Colon ( (lv_declaredTypeRef_7_0= ruleTypeRef ) )
                    {
                    otherlv_6=(Token)match(input,Colon,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getTStructGetterAccess().getColonKeyword_4_0());
                      			
                    }
                    // InternalTypesParser.g:5790:4: ( (lv_declaredTypeRef_7_0= ruleTypeRef ) )
                    // InternalTypesParser.g:5791:5: (lv_declaredTypeRef_7_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:5791:5: (lv_declaredTypeRef_7_0= ruleTypeRef )
                    // InternalTypesParser.g:5792:6: lv_declaredTypeRef_7_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTStructGetterAccess().getDeclaredTypeRefTypeRefParserRuleCall_4_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredTypeRef_7_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTStructGetterRule());
                      						}
                      						set(
                      							current,
                      							"declaredTypeRef",
                      							lv_declaredTypeRef_7_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTStructGetter"


    // $ANTLR start "entryRuleTStructSetter"
    // InternalTypesParser.g:5814:1: entryRuleTStructSetter returns [EObject current=null] : iv_ruleTStructSetter= ruleTStructSetter EOF ;
    public final EObject entryRuleTStructSetter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructSetter = null;


        try {
            // InternalTypesParser.g:5814:54: (iv_ruleTStructSetter= ruleTStructSetter EOF )
            // InternalTypesParser.g:5815:2: iv_ruleTStructSetter= ruleTStructSetter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructSetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructSetter=ruleTStructSetter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructSetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTStructSetter"


    // $ANTLR start "ruleTStructSetter"
    // InternalTypesParser.g:5821:1: ruleTStructSetter returns [EObject current=null] : ( ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis ( (lv_fpar_5_0= ruleTAnonymousFormalParameter ) ) otherlv_6= RightParenthesis ) ;
    public final EObject ruleTStructSetter() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject lv_fpar_5_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5827:2: ( ( ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis ( (lv_fpar_5_0= ruleTAnonymousFormalParameter ) ) otherlv_6= RightParenthesis ) )
            // InternalTypesParser.g:5828:2: ( ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis ( (lv_fpar_5_0= ruleTAnonymousFormalParameter ) ) otherlv_6= RightParenthesis )
            {
            // InternalTypesParser.g:5828:2: ( ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis ( (lv_fpar_5_0= ruleTAnonymousFormalParameter ) ) otherlv_6= RightParenthesis )
            // InternalTypesParser.g:5829:3: ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) ) ) ( (lv_optional_3_0= QuestionMark ) )? otherlv_4= LeftParenthesis ( (lv_fpar_5_0= ruleTAnonymousFormalParameter ) ) otherlv_6= RightParenthesis
            {
            // InternalTypesParser.g:5829:3: ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) ) )
            // InternalTypesParser.g:5830:4: ( ( () Set ( ( ruleIdentifierName ) ) ) )=> ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) )
            {
            // InternalTypesParser.g:5841:4: ( () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) ) )
            // InternalTypesParser.g:5842:5: () otherlv_1= Set ( (lv_name_2_0= ruleIdentifierName ) )
            {
            // InternalTypesParser.g:5842:5: ()
            // InternalTypesParser.g:5843:6: 
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTStructSetterAccess().getTStructSetterAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Set,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1());
              				
            }
            // InternalTypesParser.g:5853:5: ( (lv_name_2_0= ruleIdentifierName ) )
            // InternalTypesParser.g:5854:6: (lv_name_2_0= ruleIdentifierName )
            {
            // InternalTypesParser.g:5854:6: (lv_name_2_0= ruleIdentifierName )
            // InternalTypesParser.g:5855:7: lv_name_2_0= ruleIdentifierName
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTStructSetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_59);
            lv_name_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }

            // InternalTypesParser.g:5874:3: ( (lv_optional_3_0= QuestionMark ) )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==QuestionMark) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // InternalTypesParser.g:5875:4: (lv_optional_3_0= QuestionMark )
                    {
                    // InternalTypesParser.g:5875:4: (lv_optional_3_0= QuestionMark )
                    // InternalTypesParser.g:5876:5: lv_optional_3_0= QuestionMark
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructSetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructSetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_82); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalTypesParser.g:5892:3: ( (lv_fpar_5_0= ruleTAnonymousFormalParameter ) )
            // InternalTypesParser.g:5893:4: (lv_fpar_5_0= ruleTAnonymousFormalParameter )
            {
            // InternalTypesParser.g:5893:4: (lv_fpar_5_0= ruleTAnonymousFormalParameter )
            // InternalTypesParser.g:5894:5: lv_fpar_5_0= ruleTAnonymousFormalParameter
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTStructSetterAccess().getFparTAnonymousFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_60);
            lv_fpar_5_0=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTStructSetter"


    // $ANTLR start "entryRuleTypingStrategyUseSiteOperator"
    // InternalTypesParser.g:5919:1: entryRuleTypingStrategyUseSiteOperator returns [String current=null] : iv_ruleTypingStrategyUseSiteOperator= ruleTypingStrategyUseSiteOperator EOF ;
    public final String entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypingStrategyUseSiteOperator = null;


        try {
            // InternalTypesParser.g:5919:69: (iv_ruleTypingStrategyUseSiteOperator= ruleTypingStrategyUseSiteOperator EOF )
            // InternalTypesParser.g:5920:2: iv_ruleTypingStrategyUseSiteOperator= ruleTypingStrategyUseSiteOperator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyUseSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyUseSiteOperator=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyUseSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypingStrategyUseSiteOperator"


    // $ANTLR start "ruleTypingStrategyUseSiteOperator"
    // InternalTypesParser.g:5926:1: ruleTypingStrategyUseSiteOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Tilde (kw= Tilde | this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX )? ) ;
    public final AntlrDatatypeRuleToken ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_STRUCTMODSUFFIX_2=null;


        	enterRule();

        try {
            // InternalTypesParser.g:5932:2: ( (kw= Tilde (kw= Tilde | this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX )? ) )
            // InternalTypesParser.g:5933:2: (kw= Tilde (kw= Tilde | this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX )? )
            {
            // InternalTypesParser.g:5933:2: (kw= Tilde (kw= Tilde | this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX )? )
            // InternalTypesParser.g:5934:3: kw= Tilde (kw= Tilde | this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX )?
            {
            kw=(Token)match(input,Tilde,FOLLOW_93); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0());
              		
            }
            // InternalTypesParser.g:5939:3: (kw= Tilde | this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX )?
            int alt122=3;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==Tilde) ) {
                alt122=1;
            }
            else if ( (LA122_0==RULE_STRUCTMODSUFFIX) ) {
                alt122=2;
            }
            switch (alt122) {
                case 1 :
                    // InternalTypesParser.g:5940:4: kw= Tilde
                    {
                    kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:5946:4: this_STRUCTMODSUFFIX_2= RULE_STRUCTMODSUFFIX
                    {
                    this_STRUCTMODSUFFIX_2=(Token)match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_STRUCTMODSUFFIX_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_STRUCTMODSUFFIX_2, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getSTRUCTMODSUFFIXTerminalRuleCall_1_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypingStrategyUseSiteOperator"


    // $ANTLR start "entryRuleTypingStrategyDefSiteOperator"
    // InternalTypesParser.g:5958:1: entryRuleTypingStrategyDefSiteOperator returns [String current=null] : iv_ruleTypingStrategyDefSiteOperator= ruleTypingStrategyDefSiteOperator EOF ;
    public final String entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypingStrategyDefSiteOperator = null;


        try {
            // InternalTypesParser.g:5958:69: (iv_ruleTypingStrategyDefSiteOperator= ruleTypingStrategyDefSiteOperator EOF )
            // InternalTypesParser.g:5959:2: iv_ruleTypingStrategyDefSiteOperator= ruleTypingStrategyDefSiteOperator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyDefSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyDefSiteOperator=ruleTypingStrategyDefSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyDefSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypingStrategyDefSiteOperator"


    // $ANTLR start "ruleTypingStrategyDefSiteOperator"
    // InternalTypesParser.g:5965:1: ruleTypingStrategyDefSiteOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= Tilde ;
    public final AntlrDatatypeRuleToken ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalTypesParser.g:5971:2: (kw= Tilde )
            // InternalTypesParser.g:5972:2: kw= Tilde
            {
            kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypingStrategyDefSiteOperator"


    // $ANTLR start "entryRuleTypeTypeRef"
    // InternalTypesParser.g:5980:1: entryRuleTypeTypeRef returns [EObject current=null] : iv_ruleTypeTypeRef= ruleTypeTypeRef EOF ;
    public final EObject entryRuleTypeTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeTypeRef = null;


        try {
            // InternalTypesParser.g:5980:52: (iv_ruleTypeTypeRef= ruleTypeTypeRef EOF )
            // InternalTypesParser.g:5981:2: iv_ruleTypeTypeRef= ruleTypeTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeTypeRef=ruleTypeTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeTypeRef"


    // $ANTLR start "ruleTypeTypeRef"
    // InternalTypesParser.g:5987:1: ruleTypeTypeRef returns [EObject current=null] : ( () (otherlv_1= Type | ( (lv_constructorRef_2_0= Constructor ) ) ) otherlv_3= LeftCurlyBracket ( (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef ) ) otherlv_5= RightCurlyBracket ) ;
    public final EObject ruleTypeTypeRef() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_constructorRef_2_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_typeArg_4_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:5993:2: ( ( () (otherlv_1= Type | ( (lv_constructorRef_2_0= Constructor ) ) ) otherlv_3= LeftCurlyBracket ( (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef ) ) otherlv_5= RightCurlyBracket ) )
            // InternalTypesParser.g:5994:2: ( () (otherlv_1= Type | ( (lv_constructorRef_2_0= Constructor ) ) ) otherlv_3= LeftCurlyBracket ( (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef ) ) otherlv_5= RightCurlyBracket )
            {
            // InternalTypesParser.g:5994:2: ( () (otherlv_1= Type | ( (lv_constructorRef_2_0= Constructor ) ) ) otherlv_3= LeftCurlyBracket ( (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef ) ) otherlv_5= RightCurlyBracket )
            // InternalTypesParser.g:5995:3: () (otherlv_1= Type | ( (lv_constructorRef_2_0= Constructor ) ) ) otherlv_3= LeftCurlyBracket ( (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef ) ) otherlv_5= RightCurlyBracket
            {
            // InternalTypesParser.g:5995:3: ()
            // InternalTypesParser.g:5996:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTypeTypeRefAccess().getTypeTypeRefAction_0(),
              					current);
              			
            }

            }

            // InternalTypesParser.g:6002:3: (otherlv_1= Type | ( (lv_constructorRef_2_0= Constructor ) ) )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==Type) ) {
                alt123=1;
            }
            else if ( (LA123_0==Constructor) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // InternalTypesParser.g:6003:4: otherlv_1= Type
                    {
                    otherlv_1=(Token)match(input,Type,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6008:4: ( (lv_constructorRef_2_0= Constructor ) )
                    {
                    // InternalTypesParser.g:6008:4: ( (lv_constructorRef_2_0= Constructor ) )
                    // InternalTypesParser.g:6009:5: (lv_constructorRef_2_0= Constructor )
                    {
                    // InternalTypesParser.g:6009:5: (lv_constructorRef_2_0= Constructor )
                    // InternalTypesParser.g:6010:6: lv_constructorRef_2_0= Constructor
                    {
                    lv_constructorRef_2_0=(Token)match(input,Constructor,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_constructorRef_2_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "constructorRef", true, "constructor");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_3=(Token)match(input,LeftCurlyBracket,FOLLOW_94); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            // InternalTypesParser.g:6027:3: ( (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef ) )
            // InternalTypesParser.g:6028:4: (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef )
            {
            // InternalTypesParser.g:6028:4: (lv_typeArg_4_0= ruleTypeArgInTypeTypeRef )
            // InternalTypesParser.g:6029:5: lv_typeArg_4_0= ruleTypeArgInTypeTypeRef
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeTypeRefAccess().getTypeArgTypeArgInTypeTypeRefParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_18);
            lv_typeArg_4_0=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeTypeRefRule());
              					}
              					set(
              						current,
              						"typeArg",
              						lv_typeArg_4_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeArgInTypeTypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeTypeRef"


    // $ANTLR start "entryRuleTypeArgument"
    // InternalTypesParser.g:6054:1: entryRuleTypeArgument returns [EObject current=null] : iv_ruleTypeArgument= ruleTypeArgument EOF ;
    public final EObject entryRuleTypeArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeArgument = null;


        try {
            // InternalTypesParser.g:6054:53: (iv_ruleTypeArgument= ruleTypeArgument EOF )
            // InternalTypesParser.g:6055:2: iv_ruleTypeArgument= ruleTypeArgument EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgument=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeArgument"


    // $ANTLR start "ruleTypeArgument"
    // InternalTypesParser.g:6061:1: ruleTypeArgument returns [EObject current=null] : ( ( ( ( () QuestionMark ) )=>this_Wildcard_0= ruleWildcard ) | this_WildcardNewNotation_1= ruleWildcardNewNotation | this_TypeRef_2= ruleTypeRef ) ;
    public final EObject ruleTypeArgument() throws RecognitionException {
        EObject current = null;

        EObject this_Wildcard_0 = null;

        EObject this_WildcardNewNotation_1 = null;

        EObject this_TypeRef_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6067:2: ( ( ( ( ( () QuestionMark ) )=>this_Wildcard_0= ruleWildcard ) | this_WildcardNewNotation_1= ruleWildcardNewNotation | this_TypeRef_2= ruleTypeRef ) )
            // InternalTypesParser.g:6068:2: ( ( ( ( () QuestionMark ) )=>this_Wildcard_0= ruleWildcard ) | this_WildcardNewNotation_1= ruleWildcardNewNotation | this_TypeRef_2= ruleTypeRef )
            {
            // InternalTypesParser.g:6068:2: ( ( ( ( () QuestionMark ) )=>this_Wildcard_0= ruleWildcard ) | this_WildcardNewNotation_1= ruleWildcardNewNotation | this_TypeRef_2= ruleTypeRef )
            int alt124=3;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==QuestionMark) && (synpred25_InternalTypesParser())) {
                alt124=1;
            }
            else if ( (LA124_0==Out||LA124_0==In) ) {
                alt124=2;
            }
            else if ( ((LA124_0>=Intersection && LA124_0<=Constructor)||LA124_0==Undefined||LA124_0==Indexed||LA124_0==Union||(LA124_0>=Null && LA124_0<=This_1)||(LA124_0>=Type && LA124_0<=Void)||LA124_0==Any||LA124_0==LeftCurlyBracket||LA124_0==Tilde||LA124_0==RULE_IDENTIFIER) ) {
                alt124=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;
            }
            switch (alt124) {
                case 1 :
                    // InternalTypesParser.g:6069:3: ( ( ( () QuestionMark ) )=>this_Wildcard_0= ruleWildcard )
                    {
                    // InternalTypesParser.g:6069:3: ( ( ( () QuestionMark ) )=>this_Wildcard_0= ruleWildcard )
                    // InternalTypesParser.g:6070:4: ( ( () QuestionMark ) )=>this_Wildcard_0= ruleWildcard
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_Wildcard_0=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Wildcard_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6086:3: this_WildcardNewNotation_1= ruleWildcardNewNotation
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getWildcardNewNotationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardNewNotation_1=ruleWildcardNewNotation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WildcardNewNotation_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:6095:3: this_TypeRef_2= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRef_2=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeRef_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeArgument"


    // $ANTLR start "entryRuleWildcard"
    // InternalTypesParser.g:6107:1: entryRuleWildcard returns [EObject current=null] : iv_ruleWildcard= ruleWildcard EOF ;
    public final EObject entryRuleWildcard() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWildcard = null;


        try {
            // InternalTypesParser.g:6107:49: (iv_ruleWildcard= ruleWildcard EOF )
            // InternalTypesParser.g:6108:2: iv_ruleWildcard= ruleWildcard EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcard=ruleWildcard();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcard; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWildcard"


    // $ANTLR start "ruleWildcard"
    // InternalTypesParser.g:6114:1: ruleWildcard returns [EObject current=null] : ( ( ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark ) ) ( (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) ) | (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) ) )? ) ;
    public final EObject ruleWildcard() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_declaredUpperBound_3_0 = null;

        EObject lv_declaredLowerBound_5_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6120:2: ( ( ( ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark ) ) ( (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) ) | (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) ) )? ) )
            // InternalTypesParser.g:6121:2: ( ( ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark ) ) ( (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) ) | (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) ) )? )
            {
            // InternalTypesParser.g:6121:2: ( ( ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark ) ) ( (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) ) | (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) ) )? )
            // InternalTypesParser.g:6122:3: ( ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark ) ) ( (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) ) | (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) ) )?
            {
            // InternalTypesParser.g:6122:3: ( ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark ) )
            // InternalTypesParser.g:6123:4: ( ( () QuestionMark ) )=> ( () otherlv_1= QuestionMark )
            {
            // InternalTypesParser.g:6129:4: ( () otherlv_1= QuestionMark )
            // InternalTypesParser.g:6130:5: () otherlv_1= QuestionMark
            {
            // InternalTypesParser.g:6130:5: ()
            // InternalTypesParser.g:6131:6: 
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getWildcardAccess().getWildcardAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,QuestionMark,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getWildcardAccess().getQuestionMarkKeyword_0_0_1());
              				
            }

            }


            }

            // InternalTypesParser.g:6143:3: ( (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) ) | (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) ) )?
            int alt125=3;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==Extends) ) {
                alt125=1;
            }
            else if ( (LA125_0==Super) ) {
                alt125=2;
            }
            switch (alt125) {
                case 1 :
                    // InternalTypesParser.g:6144:4: (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) )
                    {
                    // InternalTypesParser.g:6144:4: (otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) ) )
                    // InternalTypesParser.g:6145:5: otherlv_2= Extends ( (lv_declaredUpperBound_3_0= ruleTypeRef ) )
                    {
                    otherlv_2=(Token)match(input,Extends,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getWildcardAccess().getExtendsKeyword_1_0_0());
                      				
                    }
                    // InternalTypesParser.g:6149:5: ( (lv_declaredUpperBound_3_0= ruleTypeRef ) )
                    // InternalTypesParser.g:6150:6: (lv_declaredUpperBound_3_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:6150:6: (lv_declaredUpperBound_3_0= ruleTypeRef )
                    // InternalTypesParser.g:6151:7: lv_declaredUpperBound_3_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWildcardAccess().getDeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_3_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardRule());
                      							}
                      							set(
                      								current,
                      								"declaredUpperBound",
                      								lv_declaredUpperBound_3_0,
                      								"org.eclipse.n4js.ts.Types.TypeRef");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6170:4: (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) )
                    {
                    // InternalTypesParser.g:6170:4: (otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) ) )
                    // InternalTypesParser.g:6171:5: otherlv_4= Super ( (lv_declaredLowerBound_5_0= ruleTypeRef ) )
                    {
                    otherlv_4=(Token)match(input,Super,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getWildcardAccess().getSuperKeyword_1_1_0());
                      				
                    }
                    // InternalTypesParser.g:6175:5: ( (lv_declaredLowerBound_5_0= ruleTypeRef ) )
                    // InternalTypesParser.g:6176:6: (lv_declaredLowerBound_5_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:6176:6: (lv_declaredLowerBound_5_0= ruleTypeRef )
                    // InternalTypesParser.g:6177:7: lv_declaredLowerBound_5_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWildcardAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_5_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardRule());
                      							}
                      							set(
                      								current,
                      								"declaredLowerBound",
                      								lv_declaredLowerBound_5_0,
                      								"org.eclipse.n4js.ts.Types.TypeRef");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWildcard"


    // $ANTLR start "entryRuleWildcardNewNotation"
    // InternalTypesParser.g:6200:1: entryRuleWildcardNewNotation returns [EObject current=null] : iv_ruleWildcardNewNotation= ruleWildcardNewNotation EOF ;
    public final EObject entryRuleWildcardNewNotation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWildcardNewNotation = null;


        try {
            // InternalTypesParser.g:6200:60: (iv_ruleWildcardNewNotation= ruleWildcardNewNotation EOF )
            // InternalTypesParser.g:6201:2: iv_ruleWildcardNewNotation= ruleWildcardNewNotation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardNewNotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardNewNotation=ruleWildcardNewNotation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardNewNotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWildcardNewNotation"


    // $ANTLR start "ruleWildcardNewNotation"
    // InternalTypesParser.g:6207:1: ruleWildcardNewNotation returns [EObject current=null] : ( ( ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) ) ) | ( ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) ) ) ) ;
    public final EObject ruleWildcardNewNotation() throws RecognitionException {
        EObject current = null;

        Token lv_usingInOutNotation_0_0=null;
        Token lv_usingInOutNotation_2_0=null;
        EObject lv_declaredUpperBound_1_0 = null;

        EObject lv_declaredLowerBound_3_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6213:2: ( ( ( ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) ) ) | ( ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) ) ) ) )
            // InternalTypesParser.g:6214:2: ( ( ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) ) ) | ( ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) ) ) )
            {
            // InternalTypesParser.g:6214:2: ( ( ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) ) ) | ( ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) ) ) )
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==Out) ) {
                alt126=1;
            }
            else if ( (LA126_0==In) ) {
                alt126=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }
            switch (alt126) {
                case 1 :
                    // InternalTypesParser.g:6215:3: ( ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) ) )
                    {
                    // InternalTypesParser.g:6215:3: ( ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) ) )
                    // InternalTypesParser.g:6216:4: ( (lv_usingInOutNotation_0_0= Out ) ) ( (lv_declaredUpperBound_1_0= ruleTypeRef ) )
                    {
                    // InternalTypesParser.g:6216:4: ( (lv_usingInOutNotation_0_0= Out ) )
                    // InternalTypesParser.g:6217:5: (lv_usingInOutNotation_0_0= Out )
                    {
                    // InternalTypesParser.g:6217:5: (lv_usingInOutNotation_0_0= Out )
                    // InternalTypesParser.g:6218:6: lv_usingInOutNotation_0_0= Out
                    {
                    lv_usingInOutNotation_0_0=(Token)match(input,Out,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_usingInOutNotation_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", true, "out");
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:6230:4: ( (lv_declaredUpperBound_1_0= ruleTypeRef ) )
                    // InternalTypesParser.g:6231:5: (lv_declaredUpperBound_1_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:6231:5: (lv_declaredUpperBound_1_0= ruleTypeRef )
                    // InternalTypesParser.g:6232:6: lv_declaredUpperBound_1_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundTypeRefParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_1_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6251:3: ( ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) ) )
                    {
                    // InternalTypesParser.g:6251:3: ( ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) ) )
                    // InternalTypesParser.g:6252:4: ( (lv_usingInOutNotation_2_0= In ) ) ( (lv_declaredLowerBound_3_0= ruleTypeRef ) )
                    {
                    // InternalTypesParser.g:6252:4: ( (lv_usingInOutNotation_2_0= In ) )
                    // InternalTypesParser.g:6253:5: (lv_usingInOutNotation_2_0= In )
                    {
                    // InternalTypesParser.g:6253:5: (lv_usingInOutNotation_2_0= In )
                    // InternalTypesParser.g:6254:6: lv_usingInOutNotation_2_0= In
                    {
                    lv_usingInOutNotation_2_0=(Token)match(input,In,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_usingInOutNotation_2_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", true, "in");
                      					
                    }

                    }


                    }

                    // InternalTypesParser.g:6266:4: ( (lv_declaredLowerBound_3_0= ruleTypeRef ) )
                    // InternalTypesParser.g:6267:5: (lv_declaredLowerBound_3_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:6267:5: (lv_declaredLowerBound_3_0= ruleTypeRef )
                    // InternalTypesParser.g:6268:6: lv_declaredLowerBound_3_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_3_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredLowerBound",
                      							lv_declaredLowerBound_3_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWildcardNewNotation"


    // $ANTLR start "entryRuleTypeVariable"
    // InternalTypesParser.g:6290:1: entryRuleTypeVariable returns [EObject current=null] : iv_ruleTypeVariable= ruleTypeVariable EOF ;
    public final EObject entryRuleTypeVariable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeVariable = null;


        try {
            // InternalTypesParser.g:6290:53: (iv_ruleTypeVariable= ruleTypeVariable EOF )
            // InternalTypesParser.g:6291:2: iv_ruleTypeVariable= ruleTypeVariable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeVariable=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeVariable"


    // $ANTLR start "ruleTypeVariable"
    // InternalTypesParser.g:6297:1: ruleTypeVariable returns [EObject current=null] : ( ( (lv_name_0_0= RULE_IDENTIFIER ) ) (otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) ) )? ) ;
    public final EObject ruleTypeVariable() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token otherlv_1=null;
        EObject lv_declaredUpperBound_2_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6303:2: ( ( ( (lv_name_0_0= RULE_IDENTIFIER ) ) (otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) ) )? ) )
            // InternalTypesParser.g:6304:2: ( ( (lv_name_0_0= RULE_IDENTIFIER ) ) (otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) ) )? )
            {
            // InternalTypesParser.g:6304:2: ( ( (lv_name_0_0= RULE_IDENTIFIER ) ) (otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) ) )? )
            // InternalTypesParser.g:6305:3: ( (lv_name_0_0= RULE_IDENTIFIER ) ) (otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) ) )?
            {
            // InternalTypesParser.g:6305:3: ( (lv_name_0_0= RULE_IDENTIFIER ) )
            // InternalTypesParser.g:6306:4: (lv_name_0_0= RULE_IDENTIFIER )
            {
            // InternalTypesParser.g:6306:4: (lv_name_0_0= RULE_IDENTIFIER )
            // InternalTypesParser.g:6307:5: lv_name_0_0= RULE_IDENTIFIER
            {
            lv_name_0_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_0_0, grammarAccess.getTypeVariableAccess().getNameIDENTIFIERTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeVariableRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.IDENTIFIER");
              				
            }

            }


            }

            // InternalTypesParser.g:6323:3: (otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) ) )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==Extends) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // InternalTypesParser.g:6324:4: otherlv_1= Extends ( (lv_declaredUpperBound_2_0= ruleTypeRef ) )
                    {
                    otherlv_1=(Token)match(input,Extends,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getTypeVariableAccess().getExtendsKeyword_1_0());
                      			
                    }
                    // InternalTypesParser.g:6328:4: ( (lv_declaredUpperBound_2_0= ruleTypeRef ) )
                    // InternalTypesParser.g:6329:5: (lv_declaredUpperBound_2_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:6329:5: (lv_declaredUpperBound_2_0= ruleTypeRef )
                    // InternalTypesParser.g:6330:6: lv_declaredUpperBound_2_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundTypeRefParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_2_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTypeVariableRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_2_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeVariable"


    // $ANTLR start "entryRuleTypeVariableWithDefSiteVariance"
    // InternalTypesParser.g:6352:1: entryRuleTypeVariableWithDefSiteVariance returns [EObject current=null] : iv_ruleTypeVariableWithDefSiteVariance= ruleTypeVariableWithDefSiteVariance EOF ;
    public final EObject entryRuleTypeVariableWithDefSiteVariance() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeVariableWithDefSiteVariance = null;


        try {
            // InternalTypesParser.g:6352:72: (iv_ruleTypeVariableWithDefSiteVariance= ruleTypeVariableWithDefSiteVariance EOF )
            // InternalTypesParser.g:6353:2: iv_ruleTypeVariableWithDefSiteVariance= ruleTypeVariableWithDefSiteVariance EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeVariableWithDefSiteVarianceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeVariableWithDefSiteVariance=ruleTypeVariableWithDefSiteVariance();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeVariableWithDefSiteVariance; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeVariableWithDefSiteVariance"


    // $ANTLR start "ruleTypeVariableWithDefSiteVariance"
    // InternalTypesParser.g:6359:1: ruleTypeVariableWithDefSiteVariance returns [EObject current=null] : ( ( ( (lv_declaredCovariant_0_0= Out ) ) | ( (lv_declaredContravariant_1_0= In ) ) )? ( (lv_name_2_0= RULE_IDENTIFIER ) ) (otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) ) )? ) ;
    public final EObject ruleTypeVariableWithDefSiteVariance() throws RecognitionException {
        EObject current = null;

        Token lv_declaredCovariant_0_0=null;
        Token lv_declaredContravariant_1_0=null;
        Token lv_name_2_0=null;
        Token otherlv_3=null;
        EObject lv_declaredUpperBound_4_0 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6365:2: ( ( ( ( (lv_declaredCovariant_0_0= Out ) ) | ( (lv_declaredContravariant_1_0= In ) ) )? ( (lv_name_2_0= RULE_IDENTIFIER ) ) (otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) ) )? ) )
            // InternalTypesParser.g:6366:2: ( ( ( (lv_declaredCovariant_0_0= Out ) ) | ( (lv_declaredContravariant_1_0= In ) ) )? ( (lv_name_2_0= RULE_IDENTIFIER ) ) (otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) ) )? )
            {
            // InternalTypesParser.g:6366:2: ( ( ( (lv_declaredCovariant_0_0= Out ) ) | ( (lv_declaredContravariant_1_0= In ) ) )? ( (lv_name_2_0= RULE_IDENTIFIER ) ) (otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) ) )? )
            // InternalTypesParser.g:6367:3: ( ( (lv_declaredCovariant_0_0= Out ) ) | ( (lv_declaredContravariant_1_0= In ) ) )? ( (lv_name_2_0= RULE_IDENTIFIER ) ) (otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) ) )?
            {
            // InternalTypesParser.g:6367:3: ( ( (lv_declaredCovariant_0_0= Out ) ) | ( (lv_declaredContravariant_1_0= In ) ) )?
            int alt128=3;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==Out) ) {
                alt128=1;
            }
            else if ( (LA128_0==In) ) {
                alt128=2;
            }
            switch (alt128) {
                case 1 :
                    // InternalTypesParser.g:6368:4: ( (lv_declaredCovariant_0_0= Out ) )
                    {
                    // InternalTypesParser.g:6368:4: ( (lv_declaredCovariant_0_0= Out ) )
                    // InternalTypesParser.g:6369:5: (lv_declaredCovariant_0_0= Out )
                    {
                    // InternalTypesParser.g:6369:5: (lv_declaredCovariant_0_0= Out )
                    // InternalTypesParser.g:6370:6: lv_declaredCovariant_0_0= Out
                    {
                    lv_declaredCovariant_0_0=(Token)match(input,Out,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_declaredCovariant_0_0, grammarAccess.getTypeVariableWithDefSiteVarianceAccess().getDeclaredCovariantOutKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeVariableWithDefSiteVarianceRule());
                      						}
                      						setWithLastConsumed(current, "declaredCovariant", true, "out");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6383:4: ( (lv_declaredContravariant_1_0= In ) )
                    {
                    // InternalTypesParser.g:6383:4: ( (lv_declaredContravariant_1_0= In ) )
                    // InternalTypesParser.g:6384:5: (lv_declaredContravariant_1_0= In )
                    {
                    // InternalTypesParser.g:6384:5: (lv_declaredContravariant_1_0= In )
                    // InternalTypesParser.g:6385:6: lv_declaredContravariant_1_0= In
                    {
                    lv_declaredContravariant_1_0=(Token)match(input,In,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_declaredContravariant_1_0, grammarAccess.getTypeVariableWithDefSiteVarianceAccess().getDeclaredContravariantInKeyword_0_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeVariableWithDefSiteVarianceRule());
                      						}
                      						setWithLastConsumed(current, "declaredContravariant", true, "in");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalTypesParser.g:6398:3: ( (lv_name_2_0= RULE_IDENTIFIER ) )
            // InternalTypesParser.g:6399:4: (lv_name_2_0= RULE_IDENTIFIER )
            {
            // InternalTypesParser.g:6399:4: (lv_name_2_0= RULE_IDENTIFIER )
            // InternalTypesParser.g:6400:5: lv_name_2_0= RULE_IDENTIFIER
            {
            lv_name_2_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_2_0, grammarAccess.getTypeVariableWithDefSiteVarianceAccess().getNameIDENTIFIERTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeVariableWithDefSiteVarianceRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.eclipse.n4js.ts.TypeExpressions.IDENTIFIER");
              				
            }

            }


            }

            // InternalTypesParser.g:6416:3: (otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) ) )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==Extends) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // InternalTypesParser.g:6417:4: otherlv_3= Extends ( (lv_declaredUpperBound_4_0= ruleTypeRef ) )
                    {
                    otherlv_3=(Token)match(input,Extends,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getTypeVariableWithDefSiteVarianceAccess().getExtendsKeyword_2_0());
                      			
                    }
                    // InternalTypesParser.g:6421:4: ( (lv_declaredUpperBound_4_0= ruleTypeRef ) )
                    // InternalTypesParser.g:6422:5: (lv_declaredUpperBound_4_0= ruleTypeRef )
                    {
                    // InternalTypesParser.g:6422:5: (lv_declaredUpperBound_4_0= ruleTypeRef )
                    // InternalTypesParser.g:6423:6: lv_declaredUpperBound_4_0= ruleTypeRef
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTypeVariableWithDefSiteVarianceAccess().getDeclaredUpperBoundTypeRefParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_4_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTypeVariableWithDefSiteVarianceRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_4_0,
                      							"org.eclipse.n4js.ts.Types.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeVariableWithDefSiteVariance"


    // $ANTLR start "entryRuleBindingIdentifier"
    // InternalTypesParser.g:6445:1: entryRuleBindingIdentifier returns [String current=null] : iv_ruleBindingIdentifier= ruleBindingIdentifier EOF ;
    public final String entryRuleBindingIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBindingIdentifier = null;


        try {
            // InternalTypesParser.g:6445:57: (iv_ruleBindingIdentifier= ruleBindingIdentifier EOF )
            // InternalTypesParser.g:6446:2: iv_ruleBindingIdentifier= ruleBindingIdentifier EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifier=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBindingIdentifier"


    // $ANTLR start "ruleBindingIdentifier"
    // InternalTypesParser.g:6452:1: ruleBindingIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_IDENTIFIER_0= RULE_IDENTIFIER | kw= Yield | this_N4Keyword_2= ruleN4Keyword ) ;
    public final AntlrDatatypeRuleToken ruleBindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        Token kw=null;
        AntlrDatatypeRuleToken this_N4Keyword_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6458:2: ( (this_IDENTIFIER_0= RULE_IDENTIFIER | kw= Yield | this_N4Keyword_2= ruleN4Keyword ) )
            // InternalTypesParser.g:6459:2: (this_IDENTIFIER_0= RULE_IDENTIFIER | kw= Yield | this_N4Keyword_2= ruleN4Keyword )
            {
            // InternalTypesParser.g:6459:2: (this_IDENTIFIER_0= RULE_IDENTIFIER | kw= Yield | this_N4Keyword_2= ruleN4Keyword )
            int alt130=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt130=1;
                }
                break;
            case Yield:
                {
                alt130=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt130=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // InternalTypesParser.g:6460:3: this_IDENTIFIER_0= RULE_IDENTIFIER
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getBindingIdentifierAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6468:3: kw= Yield
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:6474:3: this_N4Keyword_2= ruleN4Keyword
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingIdentifierAccess().getN4KeywordParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_N4Keyword_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBindingIdentifier"


    // $ANTLR start "entryRuleIdentifierName"
    // InternalTypesParser.g:6488:1: entryRuleIdentifierName returns [String current=null] : iv_ruleIdentifierName= ruleIdentifierName EOF ;
    public final String entryRuleIdentifierName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIdentifierName = null;


        try {
            // InternalTypesParser.g:6488:54: (iv_ruleIdentifierName= ruleIdentifierName EOF )
            // InternalTypesParser.g:6489:2: iv_ruleIdentifierName= ruleIdentifierName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierName=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIdentifierName"


    // $ANTLR start "ruleIdentifierName"
    // InternalTypesParser.g:6495:1: ruleIdentifierName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_IDENTIFIER_0= RULE_IDENTIFIER | this_ReservedWord_1= ruleReservedWord | this_N4Keyword_2= ruleN4Keyword ) ;
    public final AntlrDatatypeRuleToken ruleIdentifierName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        AntlrDatatypeRuleToken this_ReservedWord_1 = null;

        AntlrDatatypeRuleToken this_N4Keyword_2 = null;



        	enterRule();

        try {
            // InternalTypesParser.g:6501:2: ( (this_IDENTIFIER_0= RULE_IDENTIFIER | this_ReservedWord_1= ruleReservedWord | this_N4Keyword_2= ruleN4Keyword ) )
            // InternalTypesParser.g:6502:2: (this_IDENTIFIER_0= RULE_IDENTIFIER | this_ReservedWord_1= ruleReservedWord | this_N4Keyword_2= ruleN4Keyword )
            {
            // InternalTypesParser.g:6502:2: (this_IDENTIFIER_0= RULE_IDENTIFIER | this_ReservedWord_1= ruleReservedWord | this_N4Keyword_2= ruleN4Keyword )
            int alt131=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt131=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt131=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt131=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;
            }

            switch (alt131) {
                case 1 :
                    // InternalTypesParser.g:6503:3: this_IDENTIFIER_0= RULE_IDENTIFIER
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierNameAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6511:3: this_ReservedWord_1= ruleReservedWord
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getReservedWordParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ReservedWord_1=ruleReservedWord();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ReservedWord_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:6522:3: this_N4Keyword_2= ruleN4Keyword
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getN4KeywordParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_N4Keyword_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIdentifierName"


    // $ANTLR start "entryRuleReservedWord"
    // InternalTypesParser.g:6536:1: entryRuleReservedWord returns [String current=null] : iv_ruleReservedWord= ruleReservedWord EOF ;
    public final String entryRuleReservedWord() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleReservedWord = null;


        try {
            // InternalTypesParser.g:6536:52: (iv_ruleReservedWord= ruleReservedWord EOF )
            // InternalTypesParser.g:6537:2: iv_ruleReservedWord= ruleReservedWord EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReservedWordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReservedWord=ruleReservedWord();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReservedWord.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReservedWord"


    // $ANTLR start "ruleReservedWord"
    // InternalTypesParser.g:6543:1: ruleReservedWord returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Break | kw= Case | kw= Catch | kw= Class | kw= Const | kw= Continue | kw= Debugger | kw= Default | kw= Delete | kw= Do | kw= Else | kw= Export | kw= Extends | kw= Finally | kw= For | kw= Function | kw= If | kw= Import | kw= In | kw= Instanceof | kw= New | kw= Return | kw= Super | kw= Switch | kw= This_1 | kw= Throw | kw= Try | kw= Typeof | kw= Var | kw= Void | kw= While | kw= With | kw= Yield | kw= Null | kw= True | kw= False | kw= Enum ) ;
    public final AntlrDatatypeRuleToken ruleReservedWord() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalTypesParser.g:6549:2: ( (kw= Break | kw= Case | kw= Catch | kw= Class | kw= Const | kw= Continue | kw= Debugger | kw= Default | kw= Delete | kw= Do | kw= Else | kw= Export | kw= Extends | kw= Finally | kw= For | kw= Function | kw= If | kw= Import | kw= In | kw= Instanceof | kw= New | kw= Return | kw= Super | kw= Switch | kw= This_1 | kw= Throw | kw= Try | kw= Typeof | kw= Var | kw= Void | kw= While | kw= With | kw= Yield | kw= Null | kw= True | kw= False | kw= Enum ) )
            // InternalTypesParser.g:6550:2: (kw= Break | kw= Case | kw= Catch | kw= Class | kw= Const | kw= Continue | kw= Debugger | kw= Default | kw= Delete | kw= Do | kw= Else | kw= Export | kw= Extends | kw= Finally | kw= For | kw= Function | kw= If | kw= Import | kw= In | kw= Instanceof | kw= New | kw= Return | kw= Super | kw= Switch | kw= This_1 | kw= Throw | kw= Try | kw= Typeof | kw= Var | kw= Void | kw= While | kw= With | kw= Yield | kw= Null | kw= True | kw= False | kw= Enum )
            {
            // InternalTypesParser.g:6550:2: (kw= Break | kw= Case | kw= Catch | kw= Class | kw= Const | kw= Continue | kw= Debugger | kw= Default | kw= Delete | kw= Do | kw= Else | kw= Export | kw= Extends | kw= Finally | kw= For | kw= Function | kw= If | kw= Import | kw= In | kw= Instanceof | kw= New | kw= Return | kw= Super | kw= Switch | kw= This_1 | kw= Throw | kw= Try | kw= Typeof | kw= Var | kw= Void | kw= While | kw= With | kw= Yield | kw= Null | kw= True | kw= False | kw= Enum )
            int alt132=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt132=1;
                }
                break;
            case Case:
                {
                alt132=2;
                }
                break;
            case Catch:
                {
                alt132=3;
                }
                break;
            case Class:
                {
                alt132=4;
                }
                break;
            case Const:
                {
                alt132=5;
                }
                break;
            case Continue:
                {
                alt132=6;
                }
                break;
            case Debugger:
                {
                alt132=7;
                }
                break;
            case Default:
                {
                alt132=8;
                }
                break;
            case Delete:
                {
                alt132=9;
                }
                break;
            case Do:
                {
                alt132=10;
                }
                break;
            case Else:
                {
                alt132=11;
                }
                break;
            case Export:
                {
                alt132=12;
                }
                break;
            case Extends:
                {
                alt132=13;
                }
                break;
            case Finally:
                {
                alt132=14;
                }
                break;
            case For:
                {
                alt132=15;
                }
                break;
            case Function:
                {
                alt132=16;
                }
                break;
            case If:
                {
                alt132=17;
                }
                break;
            case Import:
                {
                alt132=18;
                }
                break;
            case In:
                {
                alt132=19;
                }
                break;
            case Instanceof:
                {
                alt132=20;
                }
                break;
            case New:
                {
                alt132=21;
                }
                break;
            case Return:
                {
                alt132=22;
                }
                break;
            case Super:
                {
                alt132=23;
                }
                break;
            case Switch:
                {
                alt132=24;
                }
                break;
            case This_1:
                {
                alt132=25;
                }
                break;
            case Throw:
                {
                alt132=26;
                }
                break;
            case Try:
                {
                alt132=27;
                }
                break;
            case Typeof:
                {
                alt132=28;
                }
                break;
            case Var:
                {
                alt132=29;
                }
                break;
            case Void:
                {
                alt132=30;
                }
                break;
            case While:
                {
                alt132=31;
                }
                break;
            case With:
                {
                alt132=32;
                }
                break;
            case Yield:
                {
                alt132=33;
                }
                break;
            case Null:
                {
                alt132=34;
                }
                break;
            case True:
                {
                alt132=35;
                }
                break;
            case False:
                {
                alt132=36;
                }
                break;
            case Enum:
                {
                alt132=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }

            switch (alt132) {
                case 1 :
                    // InternalTypesParser.g:6551:3: kw= Break
                    {
                    kw=(Token)match(input,Break,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getBreakKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6557:3: kw= Case
                    {
                    kw=(Token)match(input,Case,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCaseKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:6563:3: kw= Catch
                    {
                    kw=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCatchKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:6569:3: kw= Class
                    {
                    kw=(Token)match(input,Class,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getClassKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:6575:3: kw= Const
                    {
                    kw=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getConstKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalTypesParser.g:6581:3: kw= Continue
                    {
                    kw=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getContinueKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalTypesParser.g:6587:3: kw= Debugger
                    {
                    kw=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalTypesParser.g:6593:3: kw= Default
                    {
                    kw=(Token)match(input,Default,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDefaultKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalTypesParser.g:6599:3: kw= Delete
                    {
                    kw=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDeleteKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalTypesParser.g:6605:3: kw= Do
                    {
                    kw=(Token)match(input,Do,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDoKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalTypesParser.g:6611:3: kw= Else
                    {
                    kw=(Token)match(input,Else,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getElseKeyword_10());
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalTypesParser.g:6617:3: kw= Export
                    {
                    kw=(Token)match(input,Export,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExportKeyword_11());
                      		
                    }

                    }
                    break;
                case 13 :
                    // InternalTypesParser.g:6623:3: kw= Extends
                    {
                    kw=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExtendsKeyword_12());
                      		
                    }

                    }
                    break;
                case 14 :
                    // InternalTypesParser.g:6629:3: kw= Finally
                    {
                    kw=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFinallyKeyword_13());
                      		
                    }

                    }
                    break;
                case 15 :
                    // InternalTypesParser.g:6635:3: kw= For
                    {
                    kw=(Token)match(input,For,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getForKeyword_14());
                      		
                    }

                    }
                    break;
                case 16 :
                    // InternalTypesParser.g:6641:3: kw= Function
                    {
                    kw=(Token)match(input,Function,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFunctionKeyword_15());
                      		
                    }

                    }
                    break;
                case 17 :
                    // InternalTypesParser.g:6647:3: kw= If
                    {
                    kw=(Token)match(input,If,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getIfKeyword_16());
                      		
                    }

                    }
                    break;
                case 18 :
                    // InternalTypesParser.g:6653:3: kw= Import
                    {
                    kw=(Token)match(input,Import,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getImportKeyword_17());
                      		
                    }

                    }
                    break;
                case 19 :
                    // InternalTypesParser.g:6659:3: kw= In
                    {
                    kw=(Token)match(input,In,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInKeyword_18());
                      		
                    }

                    }
                    break;
                case 20 :
                    // InternalTypesParser.g:6665:3: kw= Instanceof
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19());
                      		
                    }

                    }
                    break;
                case 21 :
                    // InternalTypesParser.g:6671:3: kw= New
                    {
                    kw=(Token)match(input,New,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNewKeyword_20());
                      		
                    }

                    }
                    break;
                case 22 :
                    // InternalTypesParser.g:6677:3: kw= Return
                    {
                    kw=(Token)match(input,Return,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getReturnKeyword_21());
                      		
                    }

                    }
                    break;
                case 23 :
                    // InternalTypesParser.g:6683:3: kw= Super
                    {
                    kw=(Token)match(input,Super,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSuperKeyword_22());
                      		
                    }

                    }
                    break;
                case 24 :
                    // InternalTypesParser.g:6689:3: kw= Switch
                    {
                    kw=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSwitchKeyword_23());
                      		
                    }

                    }
                    break;
                case 25 :
                    // InternalTypesParser.g:6695:3: kw= This_1
                    {
                    kw=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThisKeyword_24());
                      		
                    }

                    }
                    break;
                case 26 :
                    // InternalTypesParser.g:6701:3: kw= Throw
                    {
                    kw=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThrowKeyword_25());
                      		
                    }

                    }
                    break;
                case 27 :
                    // InternalTypesParser.g:6707:3: kw= Try
                    {
                    kw=(Token)match(input,Try,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTryKeyword_26());
                      		
                    }

                    }
                    break;
                case 28 :
                    // InternalTypesParser.g:6713:3: kw= Typeof
                    {
                    kw=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTypeofKeyword_27());
                      		
                    }

                    }
                    break;
                case 29 :
                    // InternalTypesParser.g:6719:3: kw= Var
                    {
                    kw=(Token)match(input,Var,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVarKeyword_28());
                      		
                    }

                    }
                    break;
                case 30 :
                    // InternalTypesParser.g:6725:3: kw= Void
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVoidKeyword_29());
                      		
                    }

                    }
                    break;
                case 31 :
                    // InternalTypesParser.g:6731:3: kw= While
                    {
                    kw=(Token)match(input,While,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWhileKeyword_30());
                      		
                    }

                    }
                    break;
                case 32 :
                    // InternalTypesParser.g:6737:3: kw= With
                    {
                    kw=(Token)match(input,With,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWithKeyword_31());
                      		
                    }

                    }
                    break;
                case 33 :
                    // InternalTypesParser.g:6743:3: kw= Yield
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getYieldKeyword_32());
                      		
                    }

                    }
                    break;
                case 34 :
                    // InternalTypesParser.g:6749:3: kw= Null
                    {
                    kw=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNullKeyword_33());
                      		
                    }

                    }
                    break;
                case 35 :
                    // InternalTypesParser.g:6755:3: kw= True
                    {
                    kw=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTrueKeyword_34());
                      		
                    }

                    }
                    break;
                case 36 :
                    // InternalTypesParser.g:6761:3: kw= False
                    {
                    kw=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFalseKeyword_35());
                      		
                    }

                    }
                    break;
                case 37 :
                    // InternalTypesParser.g:6767:3: kw= Enum
                    {
                    kw=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getEnumKeyword_36());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReservedWord"


    // $ANTLR start "entryRuleN4Keyword"
    // InternalTypesParser.g:6776:1: entryRuleN4Keyword returns [String current=null] : iv_ruleN4Keyword= ruleN4Keyword EOF ;
    public final String entryRuleN4Keyword() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleN4Keyword = null;


        try {
            // InternalTypesParser.g:6776:49: (iv_ruleN4Keyword= ruleN4Keyword EOF )
            // InternalTypesParser.g:6777:2: iv_ruleN4Keyword= ruleN4Keyword EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4KeywordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4Keyword=ruleN4Keyword();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4Keyword.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleN4Keyword"


    // $ANTLR start "ruleN4Keyword"
    // InternalTypesParser.g:6783:1: ruleN4Keyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Get | kw= Set | kw= Let | kw= Project | kw= External | kw= Abstract | kw= Static | kw= As | kw= From | kw= Constructor | kw= Of | kw= Target | kw= Type | kw= Union | kw= Intersection | kw= This | kw= Promisify | kw= Await | kw= Async | kw= Implements | kw= Interface | kw= Private | kw= Protected | kw= Public | kw= Out ) ;
    public final AntlrDatatypeRuleToken ruleN4Keyword() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalTypesParser.g:6789:2: ( (kw= Get | kw= Set | kw= Let | kw= Project | kw= External | kw= Abstract | kw= Static | kw= As | kw= From | kw= Constructor | kw= Of | kw= Target | kw= Type | kw= Union | kw= Intersection | kw= This | kw= Promisify | kw= Await | kw= Async | kw= Implements | kw= Interface | kw= Private | kw= Protected | kw= Public | kw= Out ) )
            // InternalTypesParser.g:6790:2: (kw= Get | kw= Set | kw= Let | kw= Project | kw= External | kw= Abstract | kw= Static | kw= As | kw= From | kw= Constructor | kw= Of | kw= Target | kw= Type | kw= Union | kw= Intersection | kw= This | kw= Promisify | kw= Await | kw= Async | kw= Implements | kw= Interface | kw= Private | kw= Protected | kw= Public | kw= Out )
            {
            // InternalTypesParser.g:6790:2: (kw= Get | kw= Set | kw= Let | kw= Project | kw= External | kw= Abstract | kw= Static | kw= As | kw= From | kw= Constructor | kw= Of | kw= Target | kw= Type | kw= Union | kw= Intersection | kw= This | kw= Promisify | kw= Await | kw= Async | kw= Implements | kw= Interface | kw= Private | kw= Protected | kw= Public | kw= Out )
            int alt133=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt133=1;
                }
                break;
            case Set:
                {
                alt133=2;
                }
                break;
            case Let:
                {
                alt133=3;
                }
                break;
            case Project:
                {
                alt133=4;
                }
                break;
            case External:
                {
                alt133=5;
                }
                break;
            case Abstract:
                {
                alt133=6;
                }
                break;
            case Static:
                {
                alt133=7;
                }
                break;
            case As:
                {
                alt133=8;
                }
                break;
            case From:
                {
                alt133=9;
                }
                break;
            case Constructor:
                {
                alt133=10;
                }
                break;
            case Of:
                {
                alt133=11;
                }
                break;
            case Target:
                {
                alt133=12;
                }
                break;
            case Type:
                {
                alt133=13;
                }
                break;
            case Union:
                {
                alt133=14;
                }
                break;
            case Intersection:
                {
                alt133=15;
                }
                break;
            case This:
                {
                alt133=16;
                }
                break;
            case Promisify:
                {
                alt133=17;
                }
                break;
            case Await:
                {
                alt133=18;
                }
                break;
            case Async:
                {
                alt133=19;
                }
                break;
            case Implements:
                {
                alt133=20;
                }
                break;
            case Interface:
                {
                alt133=21;
                }
                break;
            case Private:
                {
                alt133=22;
                }
                break;
            case Protected:
                {
                alt133=23;
                }
                break;
            case Public:
                {
                alt133=24;
                }
                break;
            case Out:
                {
                alt133=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;
            }

            switch (alt133) {
                case 1 :
                    // InternalTypesParser.g:6791:3: kw= Get
                    {
                    kw=(Token)match(input,Get,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getGetKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6797:3: kw= Set
                    {
                    kw=(Token)match(input,Set,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getSetKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:6803:3: kw= Let
                    {
                    kw=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getLetKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:6809:3: kw= Project
                    {
                    kw=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProjectKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:6815:3: kw= External
                    {
                    kw=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getExternalKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalTypesParser.g:6821:3: kw= Abstract
                    {
                    kw=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalTypesParser.g:6827:3: kw= Static
                    {
                    kw=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getStaticKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalTypesParser.g:6833:3: kw= As
                    {
                    kw=(Token)match(input,As,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalTypesParser.g:6839:3: kw= From
                    {
                    kw=(Token)match(input,From,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getFromKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalTypesParser.g:6845:3: kw= Constructor
                    {
                    kw=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalTypesParser.g:6851:3: kw= Of
                    {
                    kw=(Token)match(input,Of,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOfKeyword_10());
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalTypesParser.g:6857:3: kw= Target
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTargetKeyword_11());
                      		
                    }

                    }
                    break;
                case 13 :
                    // InternalTypesParser.g:6863:3: kw= Type
                    {
                    kw=(Token)match(input,Type,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTypeKeyword_12());
                      		
                    }

                    }
                    break;
                case 14 :
                    // InternalTypesParser.g:6869:3: kw= Union
                    {
                    kw=(Token)match(input,Union,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getUnionKeyword_13());
                      		
                    }

                    }
                    break;
                case 15 :
                    // InternalTypesParser.g:6875:3: kw= Intersection
                    {
                    kw=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14());
                      		
                    }

                    }
                    break;
                case 16 :
                    // InternalTypesParser.g:6881:3: kw= This
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getThisKeyword_15());
                      		
                    }

                    }
                    break;
                case 17 :
                    // InternalTypesParser.g:6887:3: kw= Promisify
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16());
                      		
                    }

                    }
                    break;
                case 18 :
                    // InternalTypesParser.g:6893:3: kw= Await
                    {
                    kw=(Token)match(input,Await,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17());
                      		
                    }

                    }
                    break;
                case 19 :
                    // InternalTypesParser.g:6899:3: kw= Async
                    {
                    kw=(Token)match(input,Async,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18());
                      		
                    }

                    }
                    break;
                case 20 :
                    // InternalTypesParser.g:6905:3: kw= Implements
                    {
                    kw=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19());
                      		
                    }

                    }
                    break;
                case 21 :
                    // InternalTypesParser.g:6911:3: kw= Interface
                    {
                    kw=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20());
                      		
                    }

                    }
                    break;
                case 22 :
                    // InternalTypesParser.g:6917:3: kw= Private
                    {
                    kw=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21());
                      		
                    }

                    }
                    break;
                case 23 :
                    // InternalTypesParser.g:6923:3: kw= Protected
                    {
                    kw=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22());
                      		
                    }

                    }
                    break;
                case 24 :
                    // InternalTypesParser.g:6929:3: kw= Public
                    {
                    kw=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPublicKeyword_23());
                      		
                    }

                    }
                    break;
                case 25 :
                    // InternalTypesParser.g:6935:3: kw= Out
                    {
                    kw=(Token)match(input,Out,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOutKeyword_24());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleN4Keyword"


    // $ANTLR start "ruleTypeAccessModifier"
    // InternalTypesParser.g:6944:1: ruleTypeAccessModifier returns [Enumerator current=null] : ( (enumLiteral_0= Project ) | (enumLiteral_1= PublicInternal ) | (enumLiteral_2= Public ) ) ;
    public final Enumerator ruleTypeAccessModifier() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;


        	enterRule();

        try {
            // InternalTypesParser.g:6950:2: ( ( (enumLiteral_0= Project ) | (enumLiteral_1= PublicInternal ) | (enumLiteral_2= Public ) ) )
            // InternalTypesParser.g:6951:2: ( (enumLiteral_0= Project ) | (enumLiteral_1= PublicInternal ) | (enumLiteral_2= Public ) )
            {
            // InternalTypesParser.g:6951:2: ( (enumLiteral_0= Project ) | (enumLiteral_1= PublicInternal ) | (enumLiteral_2= Public ) )
            int alt134=3;
            switch ( input.LA(1) ) {
            case Project:
                {
                alt134=1;
                }
                break;
            case PublicInternal:
                {
                alt134=2;
                }
                break;
            case Public:
                {
                alt134=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;
            }

            switch (alt134) {
                case 1 :
                    // InternalTypesParser.g:6952:3: (enumLiteral_0= Project )
                    {
                    // InternalTypesParser.g:6952:3: (enumLiteral_0= Project )
                    // InternalTypesParser.g:6953:4: enumLiteral_0= Project
                    {
                    enumLiteral_0=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTypeAccessModifierAccess().getProjectEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getTypeAccessModifierAccess().getProjectEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6960:3: (enumLiteral_1= PublicInternal )
                    {
                    // InternalTypesParser.g:6960:3: (enumLiteral_1= PublicInternal )
                    // InternalTypesParser.g:6961:4: enumLiteral_1= PublicInternal
                    {
                    enumLiteral_1=(Token)match(input,PublicInternal,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTypeAccessModifierAccess().getPublicInternalEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getTypeAccessModifierAccess().getPublicInternalEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:6968:3: (enumLiteral_2= Public )
                    {
                    // InternalTypesParser.g:6968:3: (enumLiteral_2= Public )
                    // InternalTypesParser.g:6969:4: enumLiteral_2= Public
                    {
                    enumLiteral_2=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTypeAccessModifierAccess().getPublicEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getTypeAccessModifierAccess().getPublicEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeAccessModifier"


    // $ANTLR start "ruleMemberAccessModifier"
    // InternalTypesParser.g:6979:1: ruleMemberAccessModifier returns [Enumerator current=null] : ( (enumLiteral_0= Private ) | (enumLiteral_1= Project ) | (enumLiteral_2= ProtectedInternal ) | (enumLiteral_3= Protected ) | (enumLiteral_4= PublicInternal ) | (enumLiteral_5= Public ) ) ;
    public final Enumerator ruleMemberAccessModifier() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;


        	enterRule();

        try {
            // InternalTypesParser.g:6985:2: ( ( (enumLiteral_0= Private ) | (enumLiteral_1= Project ) | (enumLiteral_2= ProtectedInternal ) | (enumLiteral_3= Protected ) | (enumLiteral_4= PublicInternal ) | (enumLiteral_5= Public ) ) )
            // InternalTypesParser.g:6986:2: ( (enumLiteral_0= Private ) | (enumLiteral_1= Project ) | (enumLiteral_2= ProtectedInternal ) | (enumLiteral_3= Protected ) | (enumLiteral_4= PublicInternal ) | (enumLiteral_5= Public ) )
            {
            // InternalTypesParser.g:6986:2: ( (enumLiteral_0= Private ) | (enumLiteral_1= Project ) | (enumLiteral_2= ProtectedInternal ) | (enumLiteral_3= Protected ) | (enumLiteral_4= PublicInternal ) | (enumLiteral_5= Public ) )
            int alt135=6;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt135=1;
                }
                break;
            case Project:
                {
                alt135=2;
                }
                break;
            case ProtectedInternal:
                {
                alt135=3;
                }
                break;
            case Protected:
                {
                alt135=4;
                }
                break;
            case PublicInternal:
                {
                alt135=5;
                }
                break;
            case Public:
                {
                alt135=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;
            }

            switch (alt135) {
                case 1 :
                    // InternalTypesParser.g:6987:3: (enumLiteral_0= Private )
                    {
                    // InternalTypesParser.g:6987:3: (enumLiteral_0= Private )
                    // InternalTypesParser.g:6988:4: enumLiteral_0= Private
                    {
                    enumLiteral_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMemberAccessModifierAccess().getPrivateEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getMemberAccessModifierAccess().getPrivateEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalTypesParser.g:6995:3: (enumLiteral_1= Project )
                    {
                    // InternalTypesParser.g:6995:3: (enumLiteral_1= Project )
                    // InternalTypesParser.g:6996:4: enumLiteral_1= Project
                    {
                    enumLiteral_1=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMemberAccessModifierAccess().getProjectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getMemberAccessModifierAccess().getProjectEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalTypesParser.g:7003:3: (enumLiteral_2= ProtectedInternal )
                    {
                    // InternalTypesParser.g:7003:3: (enumLiteral_2= ProtectedInternal )
                    // InternalTypesParser.g:7004:4: enumLiteral_2= ProtectedInternal
                    {
                    enumLiteral_2=(Token)match(input,ProtectedInternal,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMemberAccessModifierAccess().getProtectedInternalEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getMemberAccessModifierAccess().getProtectedInternalEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalTypesParser.g:7011:3: (enumLiteral_3= Protected )
                    {
                    // InternalTypesParser.g:7011:3: (enumLiteral_3= Protected )
                    // InternalTypesParser.g:7012:4: enumLiteral_3= Protected
                    {
                    enumLiteral_3=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMemberAccessModifierAccess().getProtectedEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getMemberAccessModifierAccess().getProtectedEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalTypesParser.g:7019:3: (enumLiteral_4= PublicInternal )
                    {
                    // InternalTypesParser.g:7019:3: (enumLiteral_4= PublicInternal )
                    // InternalTypesParser.g:7020:4: enumLiteral_4= PublicInternal
                    {
                    enumLiteral_4=(Token)match(input,PublicInternal,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMemberAccessModifierAccess().getPublicInternalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getMemberAccessModifierAccess().getPublicInternalEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalTypesParser.g:7027:3: (enumLiteral_5= Public )
                    {
                    // InternalTypesParser.g:7027:3: (enumLiteral_5= Public )
                    // InternalTypesParser.g:7028:4: enumLiteral_5= Public
                    {
                    enumLiteral_5=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMemberAccessModifierAccess().getPublicEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getMemberAccessModifierAccess().getPublicEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMemberAccessModifier"

    // $ANTLR start synpred2_InternalTypesParser
    public final void synpred2_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:153:5: ( LeftParenthesis )
        // InternalTypesParser.g:153:6: LeftParenthesis
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_InternalTypesParser

    // $ANTLR start synpred3_InternalTypesParser
    public final void synpred3_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:1385:4: ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )
        // InternalTypesParser.g:1385:5: ( CommercialAt ( ( RULE_IDENTIFIER ) ) )
        {
        // InternalTypesParser.g:1385:5: ( CommercialAt ( ( RULE_IDENTIFIER ) ) )
        // InternalTypesParser.g:1386:5: CommercialAt ( ( RULE_IDENTIFIER ) )
        {
        match(input,CommercialAt,FOLLOW_4); if (state.failed) return ;
        // InternalTypesParser.g:1387:5: ( ( RULE_IDENTIFIER ) )
        // InternalTypesParser.g:1388:6: ( RULE_IDENTIFIER )
        {
        // InternalTypesParser.g:1388:6: ( RULE_IDENTIFIER )
        // InternalTypesParser.g:1389:7: RULE_IDENTIFIER
        {
        match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred3_InternalTypesParser

    // $ANTLR start synpred4_InternalTypesParser
    public final void synpred4_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:1832:4: ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )
        // InternalTypesParser.g:1832:5: ( CommercialAt ( ( RULE_IDENTIFIER ) ) )
        {
        // InternalTypesParser.g:1832:5: ( CommercialAt ( ( RULE_IDENTIFIER ) ) )
        // InternalTypesParser.g:1833:5: CommercialAt ( ( RULE_IDENTIFIER ) )
        {
        match(input,CommercialAt,FOLLOW_4); if (state.failed) return ;
        // InternalTypesParser.g:1834:5: ( ( RULE_IDENTIFIER ) )
        // InternalTypesParser.g:1835:6: ( RULE_IDENTIFIER )
        {
        // InternalTypesParser.g:1835:6: ( RULE_IDENTIFIER )
        // InternalTypesParser.g:1836:7: RULE_IDENTIFIER
        {
        match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred4_InternalTypesParser

    // $ANTLR start synpred5_InternalTypesParser
    public final void synpred5_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:2125:4: ( ( CommercialAt ( ( RULE_IDENTIFIER ) ) ) )
        // InternalTypesParser.g:2125:5: ( CommercialAt ( ( RULE_IDENTIFIER ) ) )
        {
        // InternalTypesParser.g:2125:5: ( CommercialAt ( ( RULE_IDENTIFIER ) ) )
        // InternalTypesParser.g:2126:5: CommercialAt ( ( RULE_IDENTIFIER ) )
        {
        match(input,CommercialAt,FOLLOW_4); if (state.failed) return ;
        // InternalTypesParser.g:2127:5: ( ( RULE_IDENTIFIER ) )
        // InternalTypesParser.g:2128:6: ( RULE_IDENTIFIER )
        {
        // InternalTypesParser.g:2128:6: ( RULE_IDENTIFIER )
        // InternalTypesParser.g:2129:7: RULE_IDENTIFIER
        {
        match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred5_InternalTypesParser

    // $ANTLR start synpred6_InternalTypesParser
    public final void synpred6_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:2310:4: ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )
        // InternalTypesParser.g:2310:5: ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) )
        {
        // InternalTypesParser.g:2310:5: ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) )
        // InternalTypesParser.g:2311:5: () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) )
        {
        // InternalTypesParser.g:2311:5: ()
        // InternalTypesParser.g:2312:5: 
        {
        }

        // InternalTypesParser.g:2313:5: ( ( ruleMemberAccessModifier ) )
        // InternalTypesParser.g:2314:6: ( ruleMemberAccessModifier )
        {
        // InternalTypesParser.g:2314:6: ( ruleMemberAccessModifier )
        // InternalTypesParser.g:2315:7: ruleMemberAccessModifier
        {
        pushFollow(FOLLOW_57);
        ruleMemberAccessModifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalTypesParser.g:2318:5: ( ( ( Abstract ) ) | ( ( Static ) ) )?
        int alt136=3;
        int LA136_0 = input.LA(1);

        if ( (LA136_0==Abstract) ) {
            alt136=1;
        }
        else if ( (LA136_0==Static) ) {
            alt136=2;
        }
        switch (alt136) {
            case 1 :
                // InternalTypesParser.g:2319:6: ( ( Abstract ) )
                {
                // InternalTypesParser.g:2319:6: ( ( Abstract ) )
                // InternalTypesParser.g:2320:7: ( Abstract )
                {
                // InternalTypesParser.g:2320:7: ( Abstract )
                // InternalTypesParser.g:2321:8: Abstract
                {
                match(input,Abstract,FOLLOW_58); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalTypesParser.g:2325:6: ( ( Static ) )
                {
                // InternalTypesParser.g:2325:6: ( ( Static ) )
                // InternalTypesParser.g:2326:7: ( Static )
                {
                // InternalTypesParser.g:2326:7: ( Static )
                // InternalTypesParser.g:2327:8: Static
                {
                match(input,Static,FOLLOW_58); if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,Get,FOLLOW_52); if (state.failed) return ;
        // InternalTypesParser.g:2332:5: ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) )
        int alt137=2;
        int LA137_0 = input.LA(1);

        if ( (LA137_0==AssignmnentCompatible||(LA137_0>=AutoboxedType && LA137_0<=Finally)||(LA137_0>=Private && LA137_0<=False)||(LA137_0>=Super && LA137_0<=With)||(LA137_0>=Any && LA137_0<=Var)||(LA137_0>=As && LA137_0<=Of)||LA137_0==RULE_IDENTIFIER) ) {
            alt137=1;
        }
        else if ( (LA137_0==LeftSquareBracket) ) {
            alt137=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 137, 0, input);

            throw nvae;
        }
        switch (alt137) {
            case 1 :
                // InternalTypesParser.g:2333:6: ( ( ruleTypesIdentifier ) )
                {
                // InternalTypesParser.g:2333:6: ( ( ruleTypesIdentifier ) )
                // InternalTypesParser.g:2334:7: ( ruleTypesIdentifier )
                {
                // InternalTypesParser.g:2334:7: ( ruleTypesIdentifier )
                // InternalTypesParser.g:2335:8: ruleTypesIdentifier
                {
                pushFollow(FOLLOW_2);
                ruleTypesIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalTypesParser.g:2339:6: ( ( ruleTypesComputedPropertyName ) )
                {
                // InternalTypesParser.g:2339:6: ( ( ruleTypesComputedPropertyName ) )
                // InternalTypesParser.g:2340:7: ( ruleTypesComputedPropertyName )
                {
                // InternalTypesParser.g:2340:7: ( ruleTypesComputedPropertyName )
                // InternalTypesParser.g:2341:8: ruleTypesComputedPropertyName
                {
                pushFollow(FOLLOW_2);
                ruleTypesComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred6_InternalTypesParser

    // $ANTLR start synpred7_InternalTypesParser
    public final void synpred7_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:2358:4: ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )
        // InternalTypesParser.g:2358:5: ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) )
        {
        // InternalTypesParser.g:2358:5: ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) )
        // InternalTypesParser.g:2359:5: () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) )
        {
        // InternalTypesParser.g:2359:5: ()
        // InternalTypesParser.g:2360:5: 
        {
        }

        // InternalTypesParser.g:2361:5: ( ( ruleMemberAccessModifier ) )
        // InternalTypesParser.g:2362:6: ( ruleMemberAccessModifier )
        {
        // InternalTypesParser.g:2362:6: ( ruleMemberAccessModifier )
        // InternalTypesParser.g:2363:7: ruleMemberAccessModifier
        {
        pushFollow(FOLLOW_61);
        ruleMemberAccessModifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalTypesParser.g:2366:5: ( ( ( Abstract ) ) | ( ( Static ) ) )?
        int alt138=3;
        int LA138_0 = input.LA(1);

        if ( (LA138_0==Abstract) ) {
            alt138=1;
        }
        else if ( (LA138_0==Static) ) {
            alt138=2;
        }
        switch (alt138) {
            case 1 :
                // InternalTypesParser.g:2367:6: ( ( Abstract ) )
                {
                // InternalTypesParser.g:2367:6: ( ( Abstract ) )
                // InternalTypesParser.g:2368:7: ( Abstract )
                {
                // InternalTypesParser.g:2368:7: ( Abstract )
                // InternalTypesParser.g:2369:8: Abstract
                {
                match(input,Abstract,FOLLOW_62); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalTypesParser.g:2373:6: ( ( Static ) )
                {
                // InternalTypesParser.g:2373:6: ( ( Static ) )
                // InternalTypesParser.g:2374:7: ( Static )
                {
                // InternalTypesParser.g:2374:7: ( Static )
                // InternalTypesParser.g:2375:8: Static
                {
                match(input,Static,FOLLOW_62); if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,Set,FOLLOW_52); if (state.failed) return ;
        // InternalTypesParser.g:2380:5: ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) )
        int alt139=2;
        int LA139_0 = input.LA(1);

        if ( (LA139_0==AssignmnentCompatible||(LA139_0>=AutoboxedType && LA139_0<=Finally)||(LA139_0>=Private && LA139_0<=False)||(LA139_0>=Super && LA139_0<=With)||(LA139_0>=Any && LA139_0<=Var)||(LA139_0>=As && LA139_0<=Of)||LA139_0==RULE_IDENTIFIER) ) {
            alt139=1;
        }
        else if ( (LA139_0==LeftSquareBracket) ) {
            alt139=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 139, 0, input);

            throw nvae;
        }
        switch (alt139) {
            case 1 :
                // InternalTypesParser.g:2381:6: ( ( ruleTypesIdentifier ) )
                {
                // InternalTypesParser.g:2381:6: ( ( ruleTypesIdentifier ) )
                // InternalTypesParser.g:2382:7: ( ruleTypesIdentifier )
                {
                // InternalTypesParser.g:2382:7: ( ruleTypesIdentifier )
                // InternalTypesParser.g:2383:8: ruleTypesIdentifier
                {
                pushFollow(FOLLOW_2);
                ruleTypesIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalTypesParser.g:2387:6: ( ( ruleTypesComputedPropertyName ) )
                {
                // InternalTypesParser.g:2387:6: ( ( ruleTypesComputedPropertyName ) )
                // InternalTypesParser.g:2388:7: ( ruleTypesComputedPropertyName )
                {
                // InternalTypesParser.g:2388:7: ( ruleTypesComputedPropertyName )
                // InternalTypesParser.g:2389:8: ruleTypesComputedPropertyName
                {
                pushFollow(FOLLOW_2);
                ruleTypesComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred7_InternalTypesParser

    // $ANTLR start synpred8_InternalTypesParser
    public final void synpred8_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:2406:4: ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )
        // InternalTypesParser.g:2406:5: ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis )
        {
        // InternalTypesParser.g:2406:5: ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis )
        // InternalTypesParser.g:2407:5: ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis
        {
        // InternalTypesParser.g:2407:5: ( ( ruleMemberAccessModifier ) )
        // InternalTypesParser.g:2408:6: ( ruleMemberAccessModifier )
        {
        // InternalTypesParser.g:2408:6: ( ruleMemberAccessModifier )
        // InternalTypesParser.g:2409:7: ruleMemberAccessModifier
        {
        pushFollow(FOLLOW_52);
        ruleMemberAccessModifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalTypesParser.g:2412:5: ( ( ( Static ) ) | ( ( Abstract ) ) )?
        int alt140=3;
        int LA140_0 = input.LA(1);

        if ( (LA140_0==Static) ) {
            int LA140_1 = input.LA(2);

            if ( (LA140_1==AssignmnentCompatible||(LA140_1>=AutoboxedType && LA140_1<=Finally)||(LA140_1>=Private && LA140_1<=False)||(LA140_1>=Super && LA140_1<=With)||(LA140_1>=Any && LA140_1<=Var)||(LA140_1>=As && LA140_1<=Of)||LA140_1==LessThanSign||LA140_1==LeftSquareBracket||LA140_1==RULE_IDENTIFIER) ) {
                alt140=1;
            }
        }
        else if ( (LA140_0==Abstract) ) {
            int LA140_2 = input.LA(2);

            if ( (LA140_2==AssignmnentCompatible||(LA140_2>=AutoboxedType && LA140_2<=Finally)||(LA140_2>=Private && LA140_2<=False)||(LA140_2>=Super && LA140_2<=With)||(LA140_2>=Any && LA140_2<=Var)||(LA140_2>=As && LA140_2<=Of)||LA140_2==LessThanSign||LA140_2==LeftSquareBracket||LA140_2==RULE_IDENTIFIER) ) {
                alt140=2;
            }
        }
        switch (alt140) {
            case 1 :
                // InternalTypesParser.g:2413:6: ( ( Static ) )
                {
                // InternalTypesParser.g:2413:6: ( ( Static ) )
                // InternalTypesParser.g:2414:7: ( Static )
                {
                // InternalTypesParser.g:2414:7: ( Static )
                // InternalTypesParser.g:2415:8: Static
                {
                match(input,Static,FOLLOW_52); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalTypesParser.g:2419:6: ( ( Abstract ) )
                {
                // InternalTypesParser.g:2419:6: ( ( Abstract ) )
                // InternalTypesParser.g:2420:7: ( Abstract )
                {
                // InternalTypesParser.g:2420:7: ( Abstract )
                // InternalTypesParser.g:2421:8: Abstract
                {
                match(input,Abstract,FOLLOW_52); if (state.failed) return ;

                }


                }


                }
                break;

        }

        // InternalTypesParser.g:2425:5: ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )?
        int alt142=2;
        int LA142_0 = input.LA(1);

        if ( (LA142_0==LessThanSign) ) {
            alt142=1;
        }
        switch (alt142) {
            case 1 :
                // InternalTypesParser.g:2426:6: LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign
                {
                match(input,LessThanSign,FOLLOW_4); if (state.failed) return ;
                // InternalTypesParser.g:2427:6: ( ( ruleTypeVariable ) )
                // InternalTypesParser.g:2428:7: ( ruleTypeVariable )
                {
                // InternalTypesParser.g:2428:7: ( ruleTypeVariable )
                // InternalTypesParser.g:2429:8: ruleTypeVariable
                {
                pushFollow(FOLLOW_28);
                ruleTypeVariable();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalTypesParser.g:2432:6: ( Comma ( ( ruleTypeVariable ) ) )*
                loop141:
                do {
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==Comma) ) {
                        alt141=1;
                    }


                    switch (alt141) {
                	case 1 :
                	    // InternalTypesParser.g:2433:7: Comma ( ( ruleTypeVariable ) )
                	    {
                	    match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalTypesParser.g:2434:7: ( ( ruleTypeVariable ) )
                	    // InternalTypesParser.g:2435:8: ( ruleTypeVariable )
                	    {
                	    // InternalTypesParser.g:2435:8: ( ruleTypeVariable )
                	    // InternalTypesParser.g:2436:9: ruleTypeVariable
                	    {
                	    pushFollow(FOLLOW_28);
                	    ruleTypeVariable();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop141;
                    }
                } while (true);

                match(input,GreaterThanSign,FOLLOW_52); if (state.failed) return ;

                }
                break;

        }

        // InternalTypesParser.g:2442:5: ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) )
        int alt143=2;
        int LA143_0 = input.LA(1);

        if ( (LA143_0==AssignmnentCompatible||(LA143_0>=AutoboxedType && LA143_0<=Finally)||(LA143_0>=Private && LA143_0<=False)||(LA143_0>=Super && LA143_0<=With)||(LA143_0>=Any && LA143_0<=Var)||(LA143_0>=As && LA143_0<=Of)||LA143_0==RULE_IDENTIFIER) ) {
            alt143=1;
        }
        else if ( (LA143_0==LeftSquareBracket) ) {
            alt143=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 143, 0, input);

            throw nvae;
        }
        switch (alt143) {
            case 1 :
                // InternalTypesParser.g:2443:6: ( ( ruleTypesIdentifier ) )
                {
                // InternalTypesParser.g:2443:6: ( ( ruleTypesIdentifier ) )
                // InternalTypesParser.g:2444:7: ( ruleTypesIdentifier )
                {
                // InternalTypesParser.g:2444:7: ( ruleTypesIdentifier )
                // InternalTypesParser.g:2445:8: ruleTypesIdentifier
                {
                pushFollow(FOLLOW_53);
                ruleTypesIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalTypesParser.g:2449:6: ( ( ruleTypesComputedPropertyName ) )
                {
                // InternalTypesParser.g:2449:6: ( ( ruleTypesComputedPropertyName ) )
                // InternalTypesParser.g:2450:7: ( ruleTypesComputedPropertyName )
                {
                // InternalTypesParser.g:2450:7: ( ruleTypesComputedPropertyName )
                // InternalTypesParser.g:2451:8: ruleTypesComputedPropertyName
                {
                pushFollow(FOLLOW_53);
                ruleTypesComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred8_InternalTypesParser

    // $ANTLR start synpred12_InternalTypesParser
    public final void synpred12_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:3807:5: ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )
        // InternalTypesParser.g:3807:6: ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign )
        {
        // InternalTypesParser.g:3807:6: ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign )
        // InternalTypesParser.g:3808:6: () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign
        {
        // InternalTypesParser.g:3808:6: ()
        // InternalTypesParser.g:3809:6: 
        {
        }

        match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return ;
        pushFollow(FOLLOW_60);
        ruleTAnonymousFormalParameterList(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_72); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred12_InternalTypesParser

    // $ANTLR start synpred13_InternalTypesParser
    public final void synpred13_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:3934:4: ( ( QuestionMark ) )
        // InternalTypesParser.g:3934:5: ( QuestionMark )
        {
        // InternalTypesParser.g:3934:5: ( QuestionMark )
        // InternalTypesParser.g:3935:5: QuestionMark
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred13_InternalTypesParser

    // $ANTLR start synpred14_InternalTypesParser
    public final void synpred14_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:3991:5: ( ( PlusSign ) )
        // InternalTypesParser.g:3991:6: ( PlusSign )
        {
        // InternalTypesParser.g:3991:6: ( PlusSign )
        // InternalTypesParser.g:3992:6: PlusSign
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred14_InternalTypesParser

    // $ANTLR start synpred15_InternalTypesParser
    public final void synpred15_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:4146:4: ( ( () QuestionMark ) )
        // InternalTypesParser.g:4146:5: ( () QuestionMark )
        {
        // InternalTypesParser.g:4146:5: ( () QuestionMark )
        // InternalTypesParser.g:4147:5: () QuestionMark
        {
        // InternalTypesParser.g:4147:5: ()
        // InternalTypesParser.g:4148:5: 
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred15_InternalTypesParser

    // $ANTLR start synpred16_InternalTypesParser
    public final void synpred16_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:4619:5: ( ( ruleBindingIdentifier ) )
        // InternalTypesParser.g:4619:6: ( ruleBindingIdentifier )
        {
        // InternalTypesParser.g:4619:6: ( ruleBindingIdentifier )
        // InternalTypesParser.g:4620:6: ruleBindingIdentifier
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred16_InternalTypesParser

    // $ANTLR start synpred17_InternalTypesParser
    public final void synpred17_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:5045:5: ( LessThanSign )
        // InternalTypesParser.g:5045:6: LessThanSign
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_InternalTypesParser

    // $ANTLR start synpred18_InternalTypesParser
    public final void synpred18_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:5212:5: ( LessThanSign )
        // InternalTypesParser.g:5212:6: LessThanSign
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_InternalTypesParser

    // $ANTLR start synpred19_InternalTypesParser
    public final void synpred19_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:5357:4: ( ( () Get ( ( ruleIdentifierName ) ) ) )
        // InternalTypesParser.g:5357:5: ( () Get ( ( ruleIdentifierName ) ) )
        {
        // InternalTypesParser.g:5357:5: ( () Get ( ( ruleIdentifierName ) ) )
        // InternalTypesParser.g:5358:5: () Get ( ( ruleIdentifierName ) )
        {
        // InternalTypesParser.g:5358:5: ()
        // InternalTypesParser.g:5359:5: 
        {
        }

        match(input,Get,FOLLOW_23); if (state.failed) return ;
        // InternalTypesParser.g:5361:5: ( ( ruleIdentifierName ) )
        // InternalTypesParser.g:5362:6: ( ruleIdentifierName )
        {
        // InternalTypesParser.g:5362:6: ( ruleIdentifierName )
        // InternalTypesParser.g:5363:7: ruleIdentifierName
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred19_InternalTypesParser

    // $ANTLR start synpred20_InternalTypesParser
    public final void synpred20_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:5379:4: ( ( () Set ( ( ruleIdentifierName ) ) ) )
        // InternalTypesParser.g:5379:5: ( () Set ( ( ruleIdentifierName ) ) )
        {
        // InternalTypesParser.g:5379:5: ( () Set ( ( ruleIdentifierName ) ) )
        // InternalTypesParser.g:5380:5: () Set ( ( ruleIdentifierName ) )
        {
        // InternalTypesParser.g:5380:5: ()
        // InternalTypesParser.g:5381:5: 
        {
        }

        match(input,Set,FOLLOW_23); if (state.failed) return ;
        // InternalTypesParser.g:5383:5: ( ( ruleIdentifierName ) )
        // InternalTypesParser.g:5384:6: ( ruleIdentifierName )
        {
        // InternalTypesParser.g:5384:6: ( ruleIdentifierName )
        // InternalTypesParser.g:5385:7: ruleIdentifierName
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred20_InternalTypesParser

    // $ANTLR start synpred21_InternalTypesParser
    public final void synpred21_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:5401:4: ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )
        // InternalTypesParser.g:5401:5: ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis )
        {
        // InternalTypesParser.g:5401:5: ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis )
        // InternalTypesParser.g:5402:5: () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis
        {
        // InternalTypesParser.g:5402:5: ()
        // InternalTypesParser.g:5403:5: 
        {
        }

        // InternalTypesParser.g:5404:5: ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )?
        int alt153=2;
        int LA153_0 = input.LA(1);

        if ( (LA153_0==LessThanSign) ) {
            alt153=1;
        }
        switch (alt153) {
            case 1 :
                // InternalTypesParser.g:5405:6: LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign
                {
                match(input,LessThanSign,FOLLOW_4); if (state.failed) return ;
                // InternalTypesParser.g:5406:6: ( ( ruleTypeVariable ) )
                // InternalTypesParser.g:5407:7: ( ruleTypeVariable )
                {
                // InternalTypesParser.g:5407:7: ( ruleTypeVariable )
                // InternalTypesParser.g:5408:8: ruleTypeVariable
                {
                pushFollow(FOLLOW_28);
                ruleTypeVariable();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalTypesParser.g:5411:6: ( Comma ( ( ruleTypeVariable ) ) )*
                loop152:
                do {
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==Comma) ) {
                        alt152=1;
                    }


                    switch (alt152) {
                	case 1 :
                	    // InternalTypesParser.g:5412:7: Comma ( ( ruleTypeVariable ) )
                	    {
                	    match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalTypesParser.g:5413:7: ( ( ruleTypeVariable ) )
                	    // InternalTypesParser.g:5414:8: ( ruleTypeVariable )
                	    {
                	    // InternalTypesParser.g:5414:8: ( ruleTypeVariable )
                	    // InternalTypesParser.g:5415:9: ruleTypeVariable
                	    {
                	    pushFollow(FOLLOW_28);
                	    ruleTypeVariable();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop152;
                    }
                } while (true);

                match(input,GreaterThanSign,FOLLOW_23); if (state.failed) return ;

                }
                break;

        }

        // InternalTypesParser.g:5421:5: ( ( ruleIdentifierName ) )
        // InternalTypesParser.g:5422:6: ( ruleIdentifierName )
        {
        // InternalTypesParser.g:5422:6: ( ruleIdentifierName )
        // InternalTypesParser.g:5423:7: ruleIdentifierName
        {
        pushFollow(FOLLOW_53);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred21_InternalTypesParser

    // $ANTLR start synpred25_InternalTypesParser
    public final void synpred25_InternalTypesParser_fragment() throws RecognitionException {   
        // InternalTypesParser.g:6070:4: ( ( () QuestionMark ) )
        // InternalTypesParser.g:6070:5: ( () QuestionMark )
        {
        // InternalTypesParser.g:6070:5: ( () QuestionMark )
        // InternalTypesParser.g:6071:5: () QuestionMark
        {
        // InternalTypesParser.g:6071:5: ()
        // InternalTypesParser.g:6072:5: 
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred25_InternalTypesParser

    // Delegated rules

    public final boolean synpred4_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_InternalTypesParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_InternalTypesParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA6 dfa6 = new DFA6(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA113 dfa113 = new DFA113(this);
    static final String dfa_1s = "\22\uffff";
    static final String dfa_2s = "\1\7\3\6\7\uffff\1\17\2\uffff\1\41\3\uffff";
    static final String dfa_3s = "\1\153\3\70\7\uffff\1\70\2\uffff\1\54\3\uffff";
    static final String dfa_4s = "\4\uffff\1\5\1\6\1\7\1\10\1\11\1\13\1\14\1\uffff\1\12\1\2\1\uffff\1\3\1\4\1\1";
    static final String dfa_5s = "\22\uffff}>";
    static final String[] dfa_6s = {
            "\1\2\3\uffff\1\12\4\uffff\1\10\1\uffff\1\6\12\uffff\1\1\4\uffff\1\3\27\uffff\1\7\3\uffff\1\5\2\uffff\1\4\51\uffff\1\11",
            "\1\13\10\uffff\1\17\3\uffff\1\15\3\uffff\1\14\11\uffff\1\21\12\uffff\1\15\2\uffff\1\16\10\uffff\1\20",
            "\1\13\10\uffff\1\17\3\uffff\1\15\3\uffff\1\14\11\uffff\1\21\12\uffff\1\15\2\uffff\1\16\10\uffff\1\20",
            "\1\13\10\uffff\1\17\3\uffff\1\15\3\uffff\1\14\11\uffff\1\21\12\uffff\1\15\2\uffff\1\16\10\uffff\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\3\uffff\1\15\3\uffff\1\14\11\uffff\1\21\12\uffff\1\15\2\uffff\1\16\10\uffff\1\20",
            "",
            "",
            "\1\21\12\uffff\1\15",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "335:2: (this_TObjectPrototype_0= ruleTObjectPrototype | this_TClass_1= ruleTClass | this_TInterface_2= ruleTInterface | this_TEnum_3= ruleTEnum | this_AnyType_4= ruleAnyType | this_VoidType_5= ruleVoidType | this_UndefinedType_6= ruleUndefinedType | this_NullType_7= ruleNullType | this_PrimitiveType_8= rulePrimitiveType | this_TFunction_9= ruleTFunction | this_TypeVariable_10= ruleTypeVariable | this_VirtualBaseType_11= ruleVirtualBaseType )";
        }
    }
    static final String dfa_7s = "\u01b8\uffff";
    static final String dfa_8s = "\1\5\12\4\1\uffff\54\121\1\4\25\121\1\4\2\uffff\2\4\105\uffff\3\121\u008e\uffff\106\125\1\137\1\4\1\121\106\137";
    static final String dfa_9s = "\1\42\12\153\1\uffff\54\134\1\153\25\134\1\153\2\uffff\2\153\105\uffff\3\134\u008e\uffff\106\125\1\137\1\153\1\134\106\137";
    static final String dfa_10s = "\13\uffff\1\4\103\uffff\2\3\2\uffff\105\3\3\uffff\107\2\107\1\u008f\uffff";
    static final String dfa_11s = "\1\uffff\1\1\1\6\1\12\1\13\1\22\1\33\1\51\1\35\1\41\1\117\1\uffff\1\71\1\75\1\100\1\103\1\106\1\110\1\112\1\116\1\120\1\121\1\0\1\2\1\4\1\5\1\7\1\10\1\11\1\15\1\17\1\21\1\24\1\26\1\30\1\32\1\36\1\40\1\43\1\46\1\50\1\53\1\55\1\57\1\61\1\63\1\65\1\72\1\76\1\101\1\104\1\107\1\111\1\113\1\114\1\115\1\45\1\14\1\16\1\20\1\27\1\31\1\34\1\37\1\42\1\44\1\47\1\52\1\54\1\56\1\60\1\62\1\64\1\70\1\73\1\77\1\102\1\105\3\uffff\1\74\1\66\105\uffff\1\3\1\23\1\25\u00d6\uffff\1\67\106\uffff}>";
    static final String[] dfa_12s = {
            "\1\3\1\uffff\1\5\11\uffff\1\4\12\uffff\1\1\1\2\4\uffff\1\6",
            "\1\22\3\uffff\1\21\1\103\1\76\1\17\1\110\1\46\1\105\1\111\1\20\1\113\1\15\1\7\1\30\1\31\1\73\1\42\1\32\1\37\1\40\1\uffff\1\112\1\72\1\33\1\36\1\44\1\16\1\114\1\50\1\10\1\52\1\100\1\56\1\107\1\106\1\24\1\26\1\27\1\12\1\66\1\13\1\51\1\54\1\102\1\61\1\63\1\104\1\25\1\35\1\67\1\75\1\64\1\53\1\65\1\101\1\60\1\62\1\uffff\1\14\1\41\1\70\1\71\1\47\1\115\1\11\1\55\1\57\1\uffff\1\74\1\34\1\43\1\45\1\77\11\uffff\1\117\4\uffff\1\116\14\uffff\1\23",
            "\1\22\3\uffff\1\21\1\103\1\76\1\17\1\110\1\46\1\105\1\111\1\20\1\113\1\15\1\7\1\30\1\31\1\73\1\42\1\32\1\37\1\40\1\uffff\1\112\1\72\1\33\1\36\1\44\1\16\1\114\1\50\1\10\1\52\1\100\1\56\1\107\1\106\1\24\1\26\1\27\1\12\1\66\1\13\1\51\1\54\1\102\1\61\1\63\1\104\1\25\1\35\1\67\1\75\1\64\1\53\1\65\1\101\1\60\1\62\1\uffff\1\14\1\41\1\70\1\71\1\47\1\115\1\11\1\55\1\57\1\uffff\1\74\1\34\1\43\1\45\1\77\11\uffff\1\117\4\uffff\1\116\14\uffff\1\23",
            "\1\22\3\uffff\1\21\1\103\1\76\1\17\1\110\1\46\1\105\1\111\1\20\1\113\1\15\1\7\1\30\1\31\1\73\1\42\1\32\1\37\1\40\1\uffff\1\112\1\72\1\33\1\36\1\44\1\16\1\114\1\50\1\10\1\52\1\100\1\56\1\107\1\106\1\24\1\26\1\27\1\12\1\66\1\13\1\51\1\54\1\102\1\61\1\63\1\104\1\25\1\35\1\67\1\75\1\64\1\53\1\65\1\101\1\60\1\62\1\uffff\1\14\1\41\1\70\1\71\1\47\1\115\1\11\1\55\1\57\1\uffff\1\74\1\34\1\43\1\45\1\77\11\uffff\1\117\4\uffff\1\116\14\uffff\1\23",
            "\1\22\3\uffff\1\21\1\103\1\76\1\17\1\110\1\46\1\105\1\111\1\20\1\113\1\15\1\7\1\30\1\31\1\73\1\42\1\32\1\37\1\40\1\uffff\1\112\1\72\1\33\1\36\1\44\1\16\1\114\1\50\1\10\1\52\1\100\1\56\1\107\1\106\1\24\1\26\1\27\1\12\1\66\1\13\1\51\1\54\1\102\1\61\1\63\1\104\1\25\1\35\1\67\1\75\1\64\1\53\1\65\1\101\1\60\1\62\1\uffff\1\14\1\41\1\70\1\71\1\47\1\115\1\11\1\55\1\57\1\uffff\1\74\1\34\1\43\1\45\1\77\11\uffff\1\117\4\uffff\1\116\14\uffff\1\23",
            "\1\22\3\uffff\1\21\1\103\1\76\1\17\1\110\1\46\1\105\1\111\1\20\1\113\1\15\1\7\1\30\1\31\1\73\1\42\1\32\1\37\1\40\1\uffff\1\112\1\72\1\33\1\36\1\44\1\16\1\114\1\50\1\10\1\52\1\100\1\56\1\107\1\106\1\24\1\26\1\27\1\12\1\66\1\13\1\51\1\54\1\102\1\61\1\63\1\104\1\25\1\35\1\67\1\75\1\64\1\53\1\65\1\101\1\60\1\62\1\uffff\1\14\1\41\1\70\1\71\1\47\1\115\1\11\1\55\1\57\1\uffff\1\74\1\34\1\43\1\45\1\77\11\uffff\1\117\4\uffff\1\116\14\uffff\1\23",
            "\1\22\3\uffff\1\21\1\103\1\76\1\17\1\110\1\46\1\105\1\111\1\20\1\113\1\15\1\7\1\30\1\31\1\73\1\42\1\32\1\37\1\40\1\uffff\1\112\1\72\1\33\1\36\1\44\1\16\1\114\1\50\1\10\1\52\1\100\1\56\1\107\1\106\1\24\1\26\1\27\1\12\1\66\1\13\1\51\1\54\1\102\1\61\1\63\1\104\1\25\1\35\1\67\1\75\1\64\1\53\1\65\1\101\1\60\1\62\1\uffff\1\14\1\41\1\70\1\71\1\47\1\115\1\11\1\55\1\57\1\uffff\1\74\1\34\1\43\1\45\1\77\11\uffff\1\117\4\uffff\1\116\14\uffff\1\23",
            "\1\131\3\uffff\1\130\1\u008c\1\u0087\1\126\1\u0091\1\156\1\u008e\1\u0092\1\127\1\u0094\1\124\1\u0083\1\140\1\141\1\u0082\1\152\1\142\1\147\1\150\1\uffff\1\u0093\1\u0081\1\143\1\146\1\154\1\125\1\u0095\1\160\1\u0084\1\162\1\u0089\1\166\1\u0090\1\u008f\1\133\1\135\1\136\1\137\1\176\1\uffff\1\161\1\164\1\u008b\1\171\1\173\1\u008d\1\134\1\145\1\177\1\u0086\1\174\1\163\1\175\1\u008a\1\170\1\172\1\uffff\1\123\1\151\1\121\1\u0080\1\157\1\u0096\1\122\1\165\1\167\1\uffff\1\u0085\1\144\1\153\1\155\1\u0088\1\uffff\1\120\5\uffff\1\13\1\uffff\1\117\2\uffff\1\13\1\uffff\1\u0097\14\uffff\1\132",
            "\1\22\3\uffff\1\21\1\103\1\76\1\17\1\110\1\46\1\105\1\111\1\20\1\113\1\15\1\u0099\1\30\1\31\1\73\1\42\1\32\1\37\1\40\1\uffff\1\112\1\72\1\33\1\36\1\44\1\16\1\114\1\50\1\u009a\1\52\1\100\1\56\1\107\1\106\1\24\1\26\1\27\1\u0098\1\66\1\uffff\1\51\1\54\1\102\1\61\1\63\1\104\1\25\1\35\1\67\1\75\1\64\1\53\1\65\1\101\1\60\1\62\1\uffff\1\14\1\41\1\70\1\71\1\47\1\115\1\11\1\55\1\57\1\uffff\1\74\1\34\1\43\1\45\1\77\1\uffff\1\120\5\uffff\1\13\1\uffff\1\117\2\uffff\1\13\1\uffff\1\116\14\uffff\1\23",
            "\1\u00a1\3\uffff\1\u00a0\1\u00d6\1\u00d1\1\u009e\1\u00db\1\u00b6\1\u00d8\1\u00dc\1\u009f\1\u00de\1\u009c\1\u00cd\1\u00a8\1\u00a9\1\u00cc\1\u00b2\1\u00aa\1\u00af\1\u00b0\1\uffff\1\u00dd\1\u00cb\1\u00ab\1\u00ae\1\u00b4\1\u009d\1\u00df\1\u00b8\1\u00ce\1\u00ba\1\u00d3\1\u00be\1\u00da\1\u00d9\1\u00a3\1\u00a5\1\u00a6\1\u00a7\1\u00c6\1\uffff\1\u00b9\1\u00bc\1\u00d5\1\u00c1\1\u00c3\1\u00d7\1\u00a4\1\u00ad\1\u00c7\1\u00d0\1\u00c4\1\u00bb\1\u00c5\1\u00d4\1\u00c0\1\u00c2\1\uffff\1\u009b\1\u00b1\1\u00c8\1\u00ca\1\u00b7\1\u00e0\1\u00c9\1\u00bd\1\u00bf\1\uffff\1\u00cf\1\u00ac\1\u00b3\1\u00b5\1\u00d2\1\uffff\1\120\5\uffff\1\13\4\uffff\1\13\1\uffff\1\u00e1\14\uffff\1\u00a2",
            "\1\13\3\uffff\23\13\1\uffff\23\13\1\uffff\20\13\1\uffff\11\13\1\uffff\5\13\1\uffff\1\120\5\uffff\1\13\4\uffff\1\13\1\uffff\1\13\14\uffff\1\13",
            "",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\u00e8\3\uffff\1\u00e7\1\u011d\1\u0118\1\u00e5\1\u0122\1\u00fd\1\u011f\1\u0123\1\u00e6\1\u0125\1\u00e3\1\u0114\1\u00ef\1\u00f0\1\u0113\1\u00f9\1\u00f1\1\u00f6\1\u00f7\1\uffff\1\u0124\1\u0112\1\u00f2\1\u00f5\1\u00fb\1\u00e4\1\u0126\1\u00ff\1\u0115\1\u0101\1\u011a\1\u0105\1\u0121\1\u0120\1\u00ea\1\u00ec\1\u00ed\1\u00ee\1\u010d\1\uffff\1\u0100\1\u0103\1\u011c\1\u0108\1\u010a\1\u011e\1\u00eb\1\u00f4\1\u010e\1\u0117\1\u010b\1\u0102\1\u010c\1\u011b\1\u0107\1\u0109\1\uffff\1\u00e2\1\u00f8\1\u010f\1\u0111\1\u00fe\1\u0127\1\u0110\1\u0104\1\u0106\1\uffff\1\u0116\1\u00f3\1\u00fa\1\u00fc\1\u0119\1\uffff\1\120\5\uffff\1\13\4\uffff\1\13\1\uffff\1\u0128\14\uffff\1\u00e9",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\u012f\3\uffff\1\u012e\1\u0164\1\u015f\1\u012c\1\u0169\1\u0144\1\u0166\1\u016a\1\u012d\1\u016c\1\u012a\1\u015b\1\u0136\1\u0137\1\u015a\1\u0140\1\u0138\1\u013d\1\u013e\1\uffff\1\u016b\1\u0159\1\u0139\1\u013c\1\u0142\1\u012b\1\u016d\1\u0146\1\u015c\1\u0148\1\u0161\1\u014c\1\u0168\1\u0167\1\u0131\1\u0133\1\u0134\1\u0135\1\u0154\1\uffff\1\u0147\1\u014a\1\u0163\1\u014f\1\u0151\1\u0165\1\u0132\1\u013b\1\u0155\1\u015e\1\u0152\1\u0149\1\u0153\1\u0162\1\u014e\1\u0150\1\uffff\1\u0129\1\u013f\1\u0156\1\u0158\1\u0145\1\u016e\1\u0157\1\u014b\1\u014d\1\uffff\1\u015d\1\u013a\1\u0141\1\u0143\1\u0160\25\uffff\1\u016f\5\uffff\1\u0130",
            "",
            "",
            "\1\u00e8\3\uffff\1\u00e7\1\u011d\1\u0118\1\u00e5\1\u0122\1\u00fd\1\u011f\1\u0123\1\u00e6\1\u0125\1\u00e3\1\u0114\1\u00ef\1\u00f0\1\u0113\1\u00f9\1\u00f1\1\u00f6\1\u00f7\1\uffff\1\u0124\1\u0112\1\u00f2\1\u00f5\1\u00fb\1\u00e4\1\u0126\1\u00ff\1\u0115\1\u0101\1\u011a\1\u0105\1\u0121\1\u0120\1\u00ea\1\u00ec\1\u00ed\1\u00ee\1\u010d\1\uffff\1\u0100\1\u0103\1\u011c\1\u0108\1\u010a\1\u011e\1\u00eb\1\u00f4\1\u010e\1\u0117\1\u010b\1\u0102\1\u010c\1\u011b\1\u0107\1\u0109\1\uffff\1\u00e2\1\u00f8\1\u010f\1\u0111\1\u00fe\1\u0127\1\u0110\1\u0104\1\u0106\1\uffff\1\u0116\1\u00f3\1\u00fa\1\u00fc\1\u0119\1\uffff\1\120\14\uffff\1\u0128\14\uffff\1\u00e9",
            "\1\u00a1\3\uffff\1\u00a0\1\u00d6\1\u00d1\1\u009e\1\u00db\1\u00b6\1\u00d8\1\u00dc\1\u009f\1\u00de\1\u009c\1\u00cd\1\u00a8\1\u00a9\1\u00cc\1\u00b2\1\u00aa\1\u00af\1\u00b0\1\uffff\1\u00dd\1\u00cb\1\u00ab\1\u00ae\1\u00b4\1\u009d\1\u00df\1\u00b8\1\u00ce\1\u00ba\1\u00d3\1\u00be\1\u00da\1\u00d9\1\u00a3\1\u00a5\1\u00a6\1\u00a7\1\u00c6\1\uffff\1\u00b9\1\u00bc\1\u00d5\1\u00c1\1\u00c3\1\u00d7\1\u00a4\1\u00ad\1\u00c7\1\u00d0\1\u00c4\1\u00bb\1\u00c5\1\u00d4\1\u00c0\1\u00c2\1\uffff\1\u009b\1\u00b1\1\u00c8\1\u00ca\1\u00b7\1\u00e0\1\u00c9\1\u00bd\1\u00bf\1\uffff\1\u00cf\1\u00ac\1\u00b3\1\u00b5\1\u00d2\1\uffff\1\120\14\uffff\1\u00e1\14\uffff\1\u00a2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0170",
            "\1\u0171",
            "\1\u0178\3\uffff\1\u0177\1\u01ad\1\u01a8\1\u0175\1\u01b2\1\u018d\1\u01af\1\u01b3\1\u0176\1\u01b5\1\u0173\1\u01a4\1\u017f\1\u0180\1\u01a3\1\u0189\1\u0181\1\u0186\1\u0187\1\uffff\1\u01b4\1\u01a2\1\u0182\1\u0185\1\u018b\1\u0174\1\u01b6\1\u018f\1\u01a5\1\u0191\1\u01aa\1\u0195\1\u01b1\1\u01b0\1\u017a\1\u017c\1\u017d\1\u017e\1\u019d\1\uffff\1\u0190\1\u0193\1\u01ac\1\u0198\1\u019a\1\u01ae\1\u017b\1\u0184\1\u019e\1\u01a7\1\u019b\1\u0192\1\u019c\1\u01ab\1\u0197\1\u0199\1\uffff\1\u0172\1\u0188\1\u019f\1\u01a1\1\u018e\1\u01b7\1\u01a0\1\u0194\1\u0196\1\uffff\1\u01a6\1\u0183\1\u018a\1\u018c\1\u01a9\33\uffff\1\u0179",
            "\1\120\5\uffff\1\13\4\uffff\1\13",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171",
            "\1\u0171"
    };

    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "2308:2: ( ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Get ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TGetter_0= ruleTGetter ) | ( ( ( () ( ( ruleMemberAccessModifier ) ) ( ( ( Abstract ) ) | ( ( Static ) ) )? Set ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) ) )=>this_TSetter_1= ruleTSetter ) | ( ( ( ( ( ruleMemberAccessModifier ) ) ( ( ( Static ) ) | ( ( Abstract ) ) )? ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ( ruleTypesIdentifier ) ) | ( ( ruleTypesComputedPropertyName ) ) ) LeftParenthesis ) )=>this_TMethod_2= ruleTMethod ) | this_TField_3= ruleTField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_22 = input.LA(1);

                         
                        int index56_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_22==Colon||LA56_22==QuestionMark) ) {s = 11;}

                        else if ( (LA56_22==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA56_1 = input.LA(1);

                         
                        int index56_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_1==Abstract) ) {s = 7;}

                        else if ( (LA56_1==Static) ) {s = 8;}

                        else if ( (LA56_1==Set) ) {s = 9;}

                        else if ( (LA56_1==Const) ) {s = 10;}

                        else if ( (LA56_1==Final) ) {s = 11;}

                        else if ( (LA56_1==Any) ) {s = 12;}

                        else if ( (LA56_1==Undefined) ) {s = 13;}

                        else if ( (LA56_1==Object) ) {s = 14;}

                        else if ( (LA56_1==VirtualBase) ) {s = 15;}

                        else if ( (LA56_1==Primitive) ) {s = 16;}

                        else if ( (LA56_1==AutoboxedType) ) {s = 17;}

                        else if ( (LA56_1==AssignmnentCompatible) ) {s = 18;}

                        else if ( (LA56_1==RULE_IDENTIFIER) ) {s = 19;}

                        else if ( (LA56_1==Break) ) {s = 20;}

                        else if ( (LA56_1==Case) ) {s = 21;}

                        else if ( (LA56_1==Catch) ) {s = 22;}

                        else if ( (LA56_1==Class) ) {s = 23;}

                        else if ( (LA56_1==Continue) ) {s = 24;}

                        else if ( (LA56_1==Debugger) ) {s = 25;}

                        else if ( (LA56_1==Default) ) {s = 26;}

                        else if ( (LA56_1==Delete) ) {s = 27;}

                        else if ( (LA56_1==Do) ) {s = 28;}

                        else if ( (LA56_1==Else) ) {s = 29;}

                        else if ( (LA56_1==Export) ) {s = 30;}

                        else if ( (LA56_1==Extends) ) {s = 31;}

                        else if ( (LA56_1==Finally) ) {s = 32;}

                        else if ( (LA56_1==For) ) {s = 33;}

                        else if ( (LA56_1==Function) ) {s = 34;}

                        else if ( (LA56_1==If) ) {s = 35;}

                        else if ( (LA56_1==Import) ) {s = 36;}

                        else if ( (LA56_1==In) ) {s = 37;}

                        else if ( (LA56_1==Instanceof) ) {s = 38;}

                        else if ( (LA56_1==New) ) {s = 39;}

                        else if ( (LA56_1==Return) ) {s = 40;}

                        else if ( (LA56_1==Super) ) {s = 41;}

                        else if ( (LA56_1==Switch) ) {s = 42;}

                        else if ( (LA56_1==This_1) ) {s = 43;}

                        else if ( (LA56_1==Throw) ) {s = 44;}

                        else if ( (LA56_1==Try) ) {s = 45;}

                        else if ( (LA56_1==Typeof) ) {s = 46;}

                        else if ( (LA56_1==Var) ) {s = 47;}

                        else if ( (LA56_1==Void) ) {s = 48;}

                        else if ( (LA56_1==While) ) {s = 49;}

                        else if ( (LA56_1==With) ) {s = 50;}

                        else if ( (LA56_1==Yield) ) {s = 51;}

                        else if ( (LA56_1==Null) ) {s = 52;}

                        else if ( (LA56_1==True) ) {s = 53;}

                        else if ( (LA56_1==False) ) {s = 54;}

                        else if ( (LA56_1==Enum) ) {s = 55;}

                        else if ( (LA56_1==Get) ) {s = 56;}

                        else if ( (LA56_1==Let) ) {s = 57;}

                        else if ( (LA56_1==Project) ) {s = 58;}

                        else if ( (LA56_1==External) ) {s = 59;}

                        else if ( (LA56_1==As) ) {s = 60;}

                        else if ( (LA56_1==From) ) {s = 61;}

                        else if ( (LA56_1==Constructor) ) {s = 62;}

                        else if ( (LA56_1==Of) ) {s = 63;}

                        else if ( (LA56_1==Target) ) {s = 64;}

                        else if ( (LA56_1==Type) ) {s = 65;}

                        else if ( (LA56_1==Union) ) {s = 66;}

                        else if ( (LA56_1==Intersection) ) {s = 67;}

                        else if ( (LA56_1==This) ) {s = 68;}

                        else if ( (LA56_1==Promisify) ) {s = 69;}

                        else if ( (LA56_1==Await) ) {s = 70;}

                        else if ( (LA56_1==Async) ) {s = 71;}

                        else if ( (LA56_1==Implements) ) {s = 72;}

                        else if ( (LA56_1==Interface) ) {s = 73;}

                        else if ( (LA56_1==Private) ) {s = 74;}

                        else if ( (LA56_1==Protected) ) {s = 75;}

                        else if ( (LA56_1==Public) ) {s = 76;}

                        else if ( (LA56_1==Out) ) {s = 77;}

                        else if ( (LA56_1==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA56_1==LessThanSign) && (synpred8_InternalTypesParser())) {s = 79;}

                         
                        input.seek(index56_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA56_23 = input.LA(1);

                         
                        int index56_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_23==Colon||LA56_23==QuestionMark) ) {s = 11;}

                        else if ( (LA56_23==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_23);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA56_152 = input.LA(1);

                         
                        int index56_152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_152==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_152==Colon||LA56_152==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_152);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA56_24 = input.LA(1);

                         
                        int index56_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_24==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_24==Colon||LA56_24==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_24);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA56_25 = input.LA(1);

                         
                        int index56_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_25==Colon||LA56_25==QuestionMark) ) {s = 11;}

                        else if ( (LA56_25==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_25);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA56_2 = input.LA(1);

                         
                        int index56_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_2==Static) ) {s = 8;}

                        else if ( (LA56_2==Abstract) ) {s = 7;}

                        else if ( (LA56_2==LessThanSign) && (synpred8_InternalTypesParser())) {s = 79;}

                        else if ( (LA56_2==Any) ) {s = 12;}

                        else if ( (LA56_2==Undefined) ) {s = 13;}

                        else if ( (LA56_2==Object) ) {s = 14;}

                        else if ( (LA56_2==VirtualBase) ) {s = 15;}

                        else if ( (LA56_2==Primitive) ) {s = 16;}

                        else if ( (LA56_2==AutoboxedType) ) {s = 17;}

                        else if ( (LA56_2==AssignmnentCompatible) ) {s = 18;}

                        else if ( (LA56_2==RULE_IDENTIFIER) ) {s = 19;}

                        else if ( (LA56_2==Break) ) {s = 20;}

                        else if ( (LA56_2==Case) ) {s = 21;}

                        else if ( (LA56_2==Catch) ) {s = 22;}

                        else if ( (LA56_2==Class) ) {s = 23;}

                        else if ( (LA56_2==Const) ) {s = 10;}

                        else if ( (LA56_2==Continue) ) {s = 24;}

                        else if ( (LA56_2==Debugger) ) {s = 25;}

                        else if ( (LA56_2==Default) ) {s = 26;}

                        else if ( (LA56_2==Delete) ) {s = 27;}

                        else if ( (LA56_2==Do) ) {s = 28;}

                        else if ( (LA56_2==Else) ) {s = 29;}

                        else if ( (LA56_2==Export) ) {s = 30;}

                        else if ( (LA56_2==Extends) ) {s = 31;}

                        else if ( (LA56_2==Finally) ) {s = 32;}

                        else if ( (LA56_2==For) ) {s = 33;}

                        else if ( (LA56_2==Function) ) {s = 34;}

                        else if ( (LA56_2==If) ) {s = 35;}

                        else if ( (LA56_2==Import) ) {s = 36;}

                        else if ( (LA56_2==In) ) {s = 37;}

                        else if ( (LA56_2==Instanceof) ) {s = 38;}

                        else if ( (LA56_2==New) ) {s = 39;}

                        else if ( (LA56_2==Return) ) {s = 40;}

                        else if ( (LA56_2==Super) ) {s = 41;}

                        else if ( (LA56_2==Switch) ) {s = 42;}

                        else if ( (LA56_2==This_1) ) {s = 43;}

                        else if ( (LA56_2==Throw) ) {s = 44;}

                        else if ( (LA56_2==Try) ) {s = 45;}

                        else if ( (LA56_2==Typeof) ) {s = 46;}

                        else if ( (LA56_2==Var) ) {s = 47;}

                        else if ( (LA56_2==Void) ) {s = 48;}

                        else if ( (LA56_2==While) ) {s = 49;}

                        else if ( (LA56_2==With) ) {s = 50;}

                        else if ( (LA56_2==Yield) ) {s = 51;}

                        else if ( (LA56_2==Null) ) {s = 52;}

                        else if ( (LA56_2==True) ) {s = 53;}

                        else if ( (LA56_2==False) ) {s = 54;}

                        else if ( (LA56_2==Enum) ) {s = 55;}

                        else if ( (LA56_2==Get) ) {s = 56;}

                        else if ( (LA56_2==Set) ) {s = 9;}

                        else if ( (LA56_2==Let) ) {s = 57;}

                        else if ( (LA56_2==Project) ) {s = 58;}

                        else if ( (LA56_2==External) ) {s = 59;}

                        else if ( (LA56_2==As) ) {s = 60;}

                        else if ( (LA56_2==From) ) {s = 61;}

                        else if ( (LA56_2==Constructor) ) {s = 62;}

                        else if ( (LA56_2==Of) ) {s = 63;}

                        else if ( (LA56_2==Target) ) {s = 64;}

                        else if ( (LA56_2==Type) ) {s = 65;}

                        else if ( (LA56_2==Union) ) {s = 66;}

                        else if ( (LA56_2==Intersection) ) {s = 67;}

                        else if ( (LA56_2==This) ) {s = 68;}

                        else if ( (LA56_2==Promisify) ) {s = 69;}

                        else if ( (LA56_2==Await) ) {s = 70;}

                        else if ( (LA56_2==Async) ) {s = 71;}

                        else if ( (LA56_2==Implements) ) {s = 72;}

                        else if ( (LA56_2==Interface) ) {s = 73;}

                        else if ( (LA56_2==Private) ) {s = 74;}

                        else if ( (LA56_2==Protected) ) {s = 75;}

                        else if ( (LA56_2==Public) ) {s = 76;}

                        else if ( (LA56_2==Out) ) {s = 77;}

                        else if ( (LA56_2==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA56_2==Final) ) {s = 11;}

                         
                        input.seek(index56_2);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA56_26 = input.LA(1);

                         
                        int index56_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_26==Colon||LA56_26==QuestionMark) ) {s = 11;}

                        else if ( (LA56_26==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_26);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA56_27 = input.LA(1);

                         
                        int index56_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_27==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_27==Colon||LA56_27==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_27);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA56_28 = input.LA(1);

                         
                        int index56_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_28==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_28==Colon||LA56_28==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_28);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA56_3 = input.LA(1);

                         
                        int index56_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_3==Static) ) {s = 8;}

                        else if ( (LA56_3==Abstract) ) {s = 7;}

                        else if ( (LA56_3==LessThanSign) && (synpred8_InternalTypesParser())) {s = 79;}

                        else if ( (LA56_3==Any) ) {s = 12;}

                        else if ( (LA56_3==Undefined) ) {s = 13;}

                        else if ( (LA56_3==Object) ) {s = 14;}

                        else if ( (LA56_3==VirtualBase) ) {s = 15;}

                        else if ( (LA56_3==Primitive) ) {s = 16;}

                        else if ( (LA56_3==AutoboxedType) ) {s = 17;}

                        else if ( (LA56_3==AssignmnentCompatible) ) {s = 18;}

                        else if ( (LA56_3==RULE_IDENTIFIER) ) {s = 19;}

                        else if ( (LA56_3==Break) ) {s = 20;}

                        else if ( (LA56_3==Case) ) {s = 21;}

                        else if ( (LA56_3==Catch) ) {s = 22;}

                        else if ( (LA56_3==Class) ) {s = 23;}

                        else if ( (LA56_3==Const) ) {s = 10;}

                        else if ( (LA56_3==Continue) ) {s = 24;}

                        else if ( (LA56_3==Debugger) ) {s = 25;}

                        else if ( (LA56_3==Default) ) {s = 26;}

                        else if ( (LA56_3==Delete) ) {s = 27;}

                        else if ( (LA56_3==Do) ) {s = 28;}

                        else if ( (LA56_3==Else) ) {s = 29;}

                        else if ( (LA56_3==Export) ) {s = 30;}

                        else if ( (LA56_3==Extends) ) {s = 31;}

                        else if ( (LA56_3==Finally) ) {s = 32;}

                        else if ( (LA56_3==For) ) {s = 33;}

                        else if ( (LA56_3==Function) ) {s = 34;}

                        else if ( (LA56_3==If) ) {s = 35;}

                        else if ( (LA56_3==Import) ) {s = 36;}

                        else if ( (LA56_3==In) ) {s = 37;}

                        else if ( (LA56_3==Instanceof) ) {s = 38;}

                        else if ( (LA56_3==New) ) {s = 39;}

                        else if ( (LA56_3==Return) ) {s = 40;}

                        else if ( (LA56_3==Super) ) {s = 41;}

                        else if ( (LA56_3==Switch) ) {s = 42;}

                        else if ( (LA56_3==This_1) ) {s = 43;}

                        else if ( (LA56_3==Throw) ) {s = 44;}

                        else if ( (LA56_3==Try) ) {s = 45;}

                        else if ( (LA56_3==Typeof) ) {s = 46;}

                        else if ( (LA56_3==Var) ) {s = 47;}

                        else if ( (LA56_3==Void) ) {s = 48;}

                        else if ( (LA56_3==While) ) {s = 49;}

                        else if ( (LA56_3==With) ) {s = 50;}

                        else if ( (LA56_3==Yield) ) {s = 51;}

                        else if ( (LA56_3==Null) ) {s = 52;}

                        else if ( (LA56_3==True) ) {s = 53;}

                        else if ( (LA56_3==False) ) {s = 54;}

                        else if ( (LA56_3==Enum) ) {s = 55;}

                        else if ( (LA56_3==Get) ) {s = 56;}

                        else if ( (LA56_3==Set) ) {s = 9;}

                        else if ( (LA56_3==Let) ) {s = 57;}

                        else if ( (LA56_3==Project) ) {s = 58;}

                        else if ( (LA56_3==External) ) {s = 59;}

                        else if ( (LA56_3==As) ) {s = 60;}

                        else if ( (LA56_3==From) ) {s = 61;}

                        else if ( (LA56_3==Constructor) ) {s = 62;}

                        else if ( (LA56_3==Of) ) {s = 63;}

                        else if ( (LA56_3==Target) ) {s = 64;}

                        else if ( (LA56_3==Type) ) {s = 65;}

                        else if ( (LA56_3==Union) ) {s = 66;}

                        else if ( (LA56_3==Intersection) ) {s = 67;}

                        else if ( (LA56_3==This) ) {s = 68;}

                        else if ( (LA56_3==Promisify) ) {s = 69;}

                        else if ( (LA56_3==Await) ) {s = 70;}

                        else if ( (LA56_3==Async) ) {s = 71;}

                        else if ( (LA56_3==Implements) ) {s = 72;}

                        else if ( (LA56_3==Interface) ) {s = 73;}

                        else if ( (LA56_3==Private) ) {s = 74;}

                        else if ( (LA56_3==Protected) ) {s = 75;}

                        else if ( (LA56_3==Public) ) {s = 76;}

                        else if ( (LA56_3==Out) ) {s = 77;}

                        else if ( (LA56_3==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA56_3==Final) ) {s = 11;}

                         
                        input.seek(index56_3);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA56_4 = input.LA(1);

                         
                        int index56_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_4==Static) ) {s = 8;}

                        else if ( (LA56_4==Abstract) ) {s = 7;}

                        else if ( (LA56_4==LessThanSign) && (synpred8_InternalTypesParser())) {s = 79;}

                        else if ( (LA56_4==Any) ) {s = 12;}

                        else if ( (LA56_4==Undefined) ) {s = 13;}

                        else if ( (LA56_4==Object) ) {s = 14;}

                        else if ( (LA56_4==VirtualBase) ) {s = 15;}

                        else if ( (LA56_4==Primitive) ) {s = 16;}

                        else if ( (LA56_4==AutoboxedType) ) {s = 17;}

                        else if ( (LA56_4==AssignmnentCompatible) ) {s = 18;}

                        else if ( (LA56_4==RULE_IDENTIFIER) ) {s = 19;}

                        else if ( (LA56_4==Break) ) {s = 20;}

                        else if ( (LA56_4==Case) ) {s = 21;}

                        else if ( (LA56_4==Catch) ) {s = 22;}

                        else if ( (LA56_4==Class) ) {s = 23;}

                        else if ( (LA56_4==Const) ) {s = 10;}

                        else if ( (LA56_4==Continue) ) {s = 24;}

                        else if ( (LA56_4==Debugger) ) {s = 25;}

                        else if ( (LA56_4==Default) ) {s = 26;}

                        else if ( (LA56_4==Delete) ) {s = 27;}

                        else if ( (LA56_4==Do) ) {s = 28;}

                        else if ( (LA56_4==Else) ) {s = 29;}

                        else if ( (LA56_4==Export) ) {s = 30;}

                        else if ( (LA56_4==Extends) ) {s = 31;}

                        else if ( (LA56_4==Finally) ) {s = 32;}

                        else if ( (LA56_4==For) ) {s = 33;}

                        else if ( (LA56_4==Function) ) {s = 34;}

                        else if ( (LA56_4==If) ) {s = 35;}

                        else if ( (LA56_4==Import) ) {s = 36;}

                        else if ( (LA56_4==In) ) {s = 37;}

                        else if ( (LA56_4==Instanceof) ) {s = 38;}

                        else if ( (LA56_4==New) ) {s = 39;}

                        else if ( (LA56_4==Return) ) {s = 40;}

                        else if ( (LA56_4==Super) ) {s = 41;}

                        else if ( (LA56_4==Switch) ) {s = 42;}

                        else if ( (LA56_4==This_1) ) {s = 43;}

                        else if ( (LA56_4==Throw) ) {s = 44;}

                        else if ( (LA56_4==Try) ) {s = 45;}

                        else if ( (LA56_4==Typeof) ) {s = 46;}

                        else if ( (LA56_4==Var) ) {s = 47;}

                        else if ( (LA56_4==Void) ) {s = 48;}

                        else if ( (LA56_4==While) ) {s = 49;}

                        else if ( (LA56_4==With) ) {s = 50;}

                        else if ( (LA56_4==Yield) ) {s = 51;}

                        else if ( (LA56_4==Null) ) {s = 52;}

                        else if ( (LA56_4==True) ) {s = 53;}

                        else if ( (LA56_4==False) ) {s = 54;}

                        else if ( (LA56_4==Enum) ) {s = 55;}

                        else if ( (LA56_4==Get) ) {s = 56;}

                        else if ( (LA56_4==Set) ) {s = 9;}

                        else if ( (LA56_4==Let) ) {s = 57;}

                        else if ( (LA56_4==Project) ) {s = 58;}

                        else if ( (LA56_4==External) ) {s = 59;}

                        else if ( (LA56_4==As) ) {s = 60;}

                        else if ( (LA56_4==From) ) {s = 61;}

                        else if ( (LA56_4==Constructor) ) {s = 62;}

                        else if ( (LA56_4==Of) ) {s = 63;}

                        else if ( (LA56_4==Target) ) {s = 64;}

                        else if ( (LA56_4==Type) ) {s = 65;}

                        else if ( (LA56_4==Union) ) {s = 66;}

                        else if ( (LA56_4==Intersection) ) {s = 67;}

                        else if ( (LA56_4==This) ) {s = 68;}

                        else if ( (LA56_4==Promisify) ) {s = 69;}

                        else if ( (LA56_4==Await) ) {s = 70;}

                        else if ( (LA56_4==Async) ) {s = 71;}

                        else if ( (LA56_4==Implements) ) {s = 72;}

                        else if ( (LA56_4==Interface) ) {s = 73;}

                        else if ( (LA56_4==Private) ) {s = 74;}

                        else if ( (LA56_4==Protected) ) {s = 75;}

                        else if ( (LA56_4==Public) ) {s = 76;}

                        else if ( (LA56_4==Out) ) {s = 77;}

                        else if ( (LA56_4==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA56_4==Final) ) {s = 11;}

                         
                        input.seek(index56_4);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA56_57 = input.LA(1);

                         
                        int index56_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_57==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_57==Colon||LA56_57==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_57);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA56_29 = input.LA(1);

                         
                        int index56_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_29==Colon||LA56_29==QuestionMark) ) {s = 11;}

                        else if ( (LA56_29==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_29);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA56_58 = input.LA(1);

                         
                        int index56_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_58==Colon||LA56_58==QuestionMark) ) {s = 11;}

                        else if ( (LA56_58==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_58);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA56_30 = input.LA(1);

                         
                        int index56_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_30==Colon||LA56_30==QuestionMark) ) {s = 11;}

                        else if ( (LA56_30==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_30);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA56_59 = input.LA(1);

                         
                        int index56_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_59==Colon||LA56_59==QuestionMark) ) {s = 11;}

                        else if ( (LA56_59==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_59);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA56_31 = input.LA(1);

                         
                        int index56_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_31==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_31==Colon||LA56_31==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_31);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA56_5 = input.LA(1);

                         
                        int index56_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_5==Abstract) ) {s = 7;}

                        else if ( (LA56_5==Static) ) {s = 8;}

                        else if ( (LA56_5==Get) ) {s = 56;}

                        else if ( (LA56_5==Set) ) {s = 9;}

                        else if ( (LA56_5==Const) ) {s = 10;}

                        else if ( (LA56_5==Final) ) {s = 11;}

                        else if ( (LA56_5==Any) ) {s = 12;}

                        else if ( (LA56_5==Undefined) ) {s = 13;}

                        else if ( (LA56_5==Object) ) {s = 14;}

                        else if ( (LA56_5==VirtualBase) ) {s = 15;}

                        else if ( (LA56_5==Primitive) ) {s = 16;}

                        else if ( (LA56_5==AutoboxedType) ) {s = 17;}

                        else if ( (LA56_5==AssignmnentCompatible) ) {s = 18;}

                        else if ( (LA56_5==RULE_IDENTIFIER) ) {s = 19;}

                        else if ( (LA56_5==Break) ) {s = 20;}

                        else if ( (LA56_5==Case) ) {s = 21;}

                        else if ( (LA56_5==Catch) ) {s = 22;}

                        else if ( (LA56_5==Class) ) {s = 23;}

                        else if ( (LA56_5==Continue) ) {s = 24;}

                        else if ( (LA56_5==Debugger) ) {s = 25;}

                        else if ( (LA56_5==Default) ) {s = 26;}

                        else if ( (LA56_5==Delete) ) {s = 27;}

                        else if ( (LA56_5==Do) ) {s = 28;}

                        else if ( (LA56_5==Else) ) {s = 29;}

                        else if ( (LA56_5==Export) ) {s = 30;}

                        else if ( (LA56_5==Extends) ) {s = 31;}

                        else if ( (LA56_5==Finally) ) {s = 32;}

                        else if ( (LA56_5==For) ) {s = 33;}

                        else if ( (LA56_5==Function) ) {s = 34;}

                        else if ( (LA56_5==If) ) {s = 35;}

                        else if ( (LA56_5==Import) ) {s = 36;}

                        else if ( (LA56_5==In) ) {s = 37;}

                        else if ( (LA56_5==Instanceof) ) {s = 38;}

                        else if ( (LA56_5==New) ) {s = 39;}

                        else if ( (LA56_5==Return) ) {s = 40;}

                        else if ( (LA56_5==Super) ) {s = 41;}

                        else if ( (LA56_5==Switch) ) {s = 42;}

                        else if ( (LA56_5==This_1) ) {s = 43;}

                        else if ( (LA56_5==Throw) ) {s = 44;}

                        else if ( (LA56_5==Try) ) {s = 45;}

                        else if ( (LA56_5==Typeof) ) {s = 46;}

                        else if ( (LA56_5==Var) ) {s = 47;}

                        else if ( (LA56_5==Void) ) {s = 48;}

                        else if ( (LA56_5==While) ) {s = 49;}

                        else if ( (LA56_5==With) ) {s = 50;}

                        else if ( (LA56_5==Yield) ) {s = 51;}

                        else if ( (LA56_5==Null) ) {s = 52;}

                        else if ( (LA56_5==True) ) {s = 53;}

                        else if ( (LA56_5==False) ) {s = 54;}

                        else if ( (LA56_5==Enum) ) {s = 55;}

                        else if ( (LA56_5==Let) ) {s = 57;}

                        else if ( (LA56_5==Project) ) {s = 58;}

                        else if ( (LA56_5==External) ) {s = 59;}

                        else if ( (LA56_5==As) ) {s = 60;}

                        else if ( (LA56_5==From) ) {s = 61;}

                        else if ( (LA56_5==Constructor) ) {s = 62;}

                        else if ( (LA56_5==Of) ) {s = 63;}

                        else if ( (LA56_5==Target) ) {s = 64;}

                        else if ( (LA56_5==Type) ) {s = 65;}

                        else if ( (LA56_5==Union) ) {s = 66;}

                        else if ( (LA56_5==Intersection) ) {s = 67;}

                        else if ( (LA56_5==This) ) {s = 68;}

                        else if ( (LA56_5==Promisify) ) {s = 69;}

                        else if ( (LA56_5==Await) ) {s = 70;}

                        else if ( (LA56_5==Async) ) {s = 71;}

                        else if ( (LA56_5==Implements) ) {s = 72;}

                        else if ( (LA56_5==Interface) ) {s = 73;}

                        else if ( (LA56_5==Private) ) {s = 74;}

                        else if ( (LA56_5==Protected) ) {s = 75;}

                        else if ( (LA56_5==Public) ) {s = 76;}

                        else if ( (LA56_5==Out) ) {s = 77;}

                        else if ( (LA56_5==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA56_5==LessThanSign) && (synpred8_InternalTypesParser())) {s = 79;}

                         
                        input.seek(index56_5);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA56_153 = input.LA(1);

                         
                        int index56_153 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_153==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_153==Colon||LA56_153==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_153);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA56_32 = input.LA(1);

                         
                        int index56_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_32==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_32==Colon||LA56_32==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_32);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA56_154 = input.LA(1);

                         
                        int index56_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_154==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_154==Colon||LA56_154==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_154);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA56_33 = input.LA(1);

                         
                        int index56_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_33==Colon||LA56_33==QuestionMark) ) {s = 11;}

                        else if ( (LA56_33==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_33);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA56_60 = input.LA(1);

                         
                        int index56_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_60==Colon||LA56_60==QuestionMark) ) {s = 11;}

                        else if ( (LA56_60==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_60);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA56_34 = input.LA(1);

                         
                        int index56_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_34==Colon||LA56_34==QuestionMark) ) {s = 11;}

                        else if ( (LA56_34==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_34);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA56_61 = input.LA(1);

                         
                        int index56_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_61==Colon||LA56_61==QuestionMark) ) {s = 11;}

                        else if ( (LA56_61==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_61);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA56_35 = input.LA(1);

                         
                        int index56_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_35==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_35==Colon||LA56_35==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_35);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA56_6 = input.LA(1);

                         
                        int index56_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_6==Static) ) {s = 8;}

                        else if ( (LA56_6==Abstract) ) {s = 7;}

                        else if ( (LA56_6==LessThanSign) && (synpred8_InternalTypesParser())) {s = 79;}

                        else if ( (LA56_6==Any) ) {s = 12;}

                        else if ( (LA56_6==Undefined) ) {s = 13;}

                        else if ( (LA56_6==Object) ) {s = 14;}

                        else if ( (LA56_6==VirtualBase) ) {s = 15;}

                        else if ( (LA56_6==Primitive) ) {s = 16;}

                        else if ( (LA56_6==AutoboxedType) ) {s = 17;}

                        else if ( (LA56_6==AssignmnentCompatible) ) {s = 18;}

                        else if ( (LA56_6==RULE_IDENTIFIER) ) {s = 19;}

                        else if ( (LA56_6==Break) ) {s = 20;}

                        else if ( (LA56_6==Case) ) {s = 21;}

                        else if ( (LA56_6==Catch) ) {s = 22;}

                        else if ( (LA56_6==Class) ) {s = 23;}

                        else if ( (LA56_6==Const) ) {s = 10;}

                        else if ( (LA56_6==Continue) ) {s = 24;}

                        else if ( (LA56_6==Debugger) ) {s = 25;}

                        else if ( (LA56_6==Default) ) {s = 26;}

                        else if ( (LA56_6==Delete) ) {s = 27;}

                        else if ( (LA56_6==Do) ) {s = 28;}

                        else if ( (LA56_6==Else) ) {s = 29;}

                        else if ( (LA56_6==Export) ) {s = 30;}

                        else if ( (LA56_6==Extends) ) {s = 31;}

                        else if ( (LA56_6==Finally) ) {s = 32;}

                        else if ( (LA56_6==For) ) {s = 33;}

                        else if ( (LA56_6==Function) ) {s = 34;}

                        else if ( (LA56_6==If) ) {s = 35;}

                        else if ( (LA56_6==Import) ) {s = 36;}

                        else if ( (LA56_6==In) ) {s = 37;}

                        else if ( (LA56_6==Instanceof) ) {s = 38;}

                        else if ( (LA56_6==New) ) {s = 39;}

                        else if ( (LA56_6==Return) ) {s = 40;}

                        else if ( (LA56_6==Super) ) {s = 41;}

                        else if ( (LA56_6==Switch) ) {s = 42;}

                        else if ( (LA56_6==This_1) ) {s = 43;}

                        else if ( (LA56_6==Throw) ) {s = 44;}

                        else if ( (LA56_6==Try) ) {s = 45;}

                        else if ( (LA56_6==Typeof) ) {s = 46;}

                        else if ( (LA56_6==Var) ) {s = 47;}

                        else if ( (LA56_6==Void) ) {s = 48;}

                        else if ( (LA56_6==While) ) {s = 49;}

                        else if ( (LA56_6==With) ) {s = 50;}

                        else if ( (LA56_6==Yield) ) {s = 51;}

                        else if ( (LA56_6==Null) ) {s = 52;}

                        else if ( (LA56_6==True) ) {s = 53;}

                        else if ( (LA56_6==False) ) {s = 54;}

                        else if ( (LA56_6==Enum) ) {s = 55;}

                        else if ( (LA56_6==Get) ) {s = 56;}

                        else if ( (LA56_6==Set) ) {s = 9;}

                        else if ( (LA56_6==Let) ) {s = 57;}

                        else if ( (LA56_6==Project) ) {s = 58;}

                        else if ( (LA56_6==External) ) {s = 59;}

                        else if ( (LA56_6==As) ) {s = 60;}

                        else if ( (LA56_6==From) ) {s = 61;}

                        else if ( (LA56_6==Constructor) ) {s = 62;}

                        else if ( (LA56_6==Of) ) {s = 63;}

                        else if ( (LA56_6==Target) ) {s = 64;}

                        else if ( (LA56_6==Type) ) {s = 65;}

                        else if ( (LA56_6==Union) ) {s = 66;}

                        else if ( (LA56_6==Intersection) ) {s = 67;}

                        else if ( (LA56_6==This) ) {s = 68;}

                        else if ( (LA56_6==Promisify) ) {s = 69;}

                        else if ( (LA56_6==Await) ) {s = 70;}

                        else if ( (LA56_6==Async) ) {s = 71;}

                        else if ( (LA56_6==Implements) ) {s = 72;}

                        else if ( (LA56_6==Interface) ) {s = 73;}

                        else if ( (LA56_6==Private) ) {s = 74;}

                        else if ( (LA56_6==Protected) ) {s = 75;}

                        else if ( (LA56_6==Public) ) {s = 76;}

                        else if ( (LA56_6==Out) ) {s = 77;}

                        else if ( (LA56_6==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA56_6==Final) ) {s = 11;}

                         
                        input.seek(index56_6);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA56_62 = input.LA(1);

                         
                        int index56_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_62==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_62==Colon||LA56_62==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_62);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA56_8 = input.LA(1);

                         
                        int index56_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_8==Get) ) {s = 56;}

                        else if ( (LA56_8==Set) ) {s = 9;}

                        else if ( (LA56_8==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_8==LessThanSign) && (synpred8_InternalTypesParser())) {s = 79;}

                        else if ( (LA56_8==Any) ) {s = 12;}

                        else if ( (LA56_8==Undefined) ) {s = 13;}

                        else if ( (LA56_8==Object) ) {s = 14;}

                        else if ( (LA56_8==VirtualBase) ) {s = 15;}

                        else if ( (LA56_8==Primitive) ) {s = 16;}

                        else if ( (LA56_8==AutoboxedType) ) {s = 17;}

                        else if ( (LA56_8==AssignmnentCompatible) ) {s = 18;}

                        else if ( (LA56_8==RULE_IDENTIFIER) ) {s = 19;}

                        else if ( (LA56_8==Break) ) {s = 20;}

                        else if ( (LA56_8==Case) ) {s = 21;}

                        else if ( (LA56_8==Catch) ) {s = 22;}

                        else if ( (LA56_8==Class) ) {s = 23;}

                        else if ( (LA56_8==Const) ) {s = 152;}

                        else if ( (LA56_8==Continue) ) {s = 24;}

                        else if ( (LA56_8==Debugger) ) {s = 25;}

                        else if ( (LA56_8==Default) ) {s = 26;}

                        else if ( (LA56_8==Delete) ) {s = 27;}

                        else if ( (LA56_8==Do) ) {s = 28;}

                        else if ( (LA56_8==Else) ) {s = 29;}

                        else if ( (LA56_8==Export) ) {s = 30;}

                        else if ( (LA56_8==Extends) ) {s = 31;}

                        else if ( (LA56_8==Finally) ) {s = 32;}

                        else if ( (LA56_8==For) ) {s = 33;}

                        else if ( (LA56_8==Function) ) {s = 34;}

                        else if ( (LA56_8==If) ) {s = 35;}

                        else if ( (LA56_8==Import) ) {s = 36;}

                        else if ( (LA56_8==In) ) {s = 37;}

                        else if ( (LA56_8==Instanceof) ) {s = 38;}

                        else if ( (LA56_8==New) ) {s = 39;}

                        else if ( (LA56_8==Return) ) {s = 40;}

                        else if ( (LA56_8==Super) ) {s = 41;}

                        else if ( (LA56_8==Switch) ) {s = 42;}

                        else if ( (LA56_8==This_1) ) {s = 43;}

                        else if ( (LA56_8==Throw) ) {s = 44;}

                        else if ( (LA56_8==Try) ) {s = 45;}

                        else if ( (LA56_8==Typeof) ) {s = 46;}

                        else if ( (LA56_8==Var) ) {s = 47;}

                        else if ( (LA56_8==Void) ) {s = 48;}

                        else if ( (LA56_8==While) ) {s = 49;}

                        else if ( (LA56_8==With) ) {s = 50;}

                        else if ( (LA56_8==Yield) ) {s = 51;}

                        else if ( (LA56_8==Null) ) {s = 52;}

                        else if ( (LA56_8==True) ) {s = 53;}

                        else if ( (LA56_8==False) ) {s = 54;}

                        else if ( (LA56_8==Enum) ) {s = 55;}

                        else if ( (LA56_8==Let) ) {s = 57;}

                        else if ( (LA56_8==Project) ) {s = 58;}

                        else if ( (LA56_8==External) ) {s = 59;}

                        else if ( (LA56_8==Abstract) ) {s = 153;}

                        else if ( (LA56_8==Static) ) {s = 154;}

                        else if ( (LA56_8==As) ) {s = 60;}

                        else if ( (LA56_8==From) ) {s = 61;}

                        else if ( (LA56_8==Constructor) ) {s = 62;}

                        else if ( (LA56_8==Of) ) {s = 63;}

                        else if ( (LA56_8==Target) ) {s = 64;}

                        else if ( (LA56_8==Type) ) {s = 65;}

                        else if ( (LA56_8==Union) ) {s = 66;}

                        else if ( (LA56_8==Intersection) ) {s = 67;}

                        else if ( (LA56_8==This) ) {s = 68;}

                        else if ( (LA56_8==Promisify) ) {s = 69;}

                        else if ( (LA56_8==Await) ) {s = 70;}

                        else if ( (LA56_8==Async) ) {s = 71;}

                        else if ( (LA56_8==Implements) ) {s = 72;}

                        else if ( (LA56_8==Interface) ) {s = 73;}

                        else if ( (LA56_8==Private) ) {s = 74;}

                        else if ( (LA56_8==Protected) ) {s = 75;}

                        else if ( (LA56_8==Public) ) {s = 76;}

                        else if ( (LA56_8==Out) ) {s = 77;}

                        else if ( (LA56_8==LeftSquareBracket) ) {s = 78;}

                        else if ( (LA56_8==Colon||LA56_8==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_8);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA56_36 = input.LA(1);

                         
                        int index56_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_36==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_36==Colon||LA56_36==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_36);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA56_63 = input.LA(1);

                         
                        int index56_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_63==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_63==Colon||LA56_63==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_63);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA56_37 = input.LA(1);

                         
                        int index56_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_37==Colon||LA56_37==QuestionMark) ) {s = 11;}

                        else if ( (LA56_37==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_37);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA56_9 = input.LA(1);

                         
                        int index56_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_9==Any) && (synpred7_InternalTypesParser())) {s = 155;}

                        else if ( (LA56_9==Undefined) && (synpred7_InternalTypesParser())) {s = 156;}

                        else if ( (LA56_9==Object) && (synpred7_InternalTypesParser())) {s = 157;}

                        else if ( (LA56_9==VirtualBase) && (synpred7_InternalTypesParser())) {s = 158;}

                        else if ( (LA56_9==Primitive) && (synpred7_InternalTypesParser())) {s = 159;}

                        else if ( (LA56_9==AutoboxedType) && (synpred7_InternalTypesParser())) {s = 160;}

                        else if ( (LA56_9==AssignmnentCompatible) && (synpred7_InternalTypesParser())) {s = 161;}

                        else if ( (LA56_9==RULE_IDENTIFIER) && (synpred7_InternalTypesParser())) {s = 162;}

                        else if ( (LA56_9==Break) && (synpred7_InternalTypesParser())) {s = 163;}

                        else if ( (LA56_9==Case) && (synpred7_InternalTypesParser())) {s = 164;}

                        else if ( (LA56_9==Catch) && (synpred7_InternalTypesParser())) {s = 165;}

                        else if ( (LA56_9==Class) && (synpred7_InternalTypesParser())) {s = 166;}

                        else if ( (LA56_9==Const) && (synpred7_InternalTypesParser())) {s = 167;}

                        else if ( (LA56_9==Continue) && (synpred7_InternalTypesParser())) {s = 168;}

                        else if ( (LA56_9==Debugger) && (synpred7_InternalTypesParser())) {s = 169;}

                        else if ( (LA56_9==Default) && (synpred7_InternalTypesParser())) {s = 170;}

                        else if ( (LA56_9==Delete) && (synpred7_InternalTypesParser())) {s = 171;}

                        else if ( (LA56_9==Do) && (synpred7_InternalTypesParser())) {s = 172;}

                        else if ( (LA56_9==Else) && (synpred7_InternalTypesParser())) {s = 173;}

                        else if ( (LA56_9==Export) && (synpred7_InternalTypesParser())) {s = 174;}

                        else if ( (LA56_9==Extends) && (synpred7_InternalTypesParser())) {s = 175;}

                        else if ( (LA56_9==Finally) && (synpred7_InternalTypesParser())) {s = 176;}

                        else if ( (LA56_9==For) && (synpred7_InternalTypesParser())) {s = 177;}

                        else if ( (LA56_9==Function) && (synpred7_InternalTypesParser())) {s = 178;}

                        else if ( (LA56_9==If) && (synpred7_InternalTypesParser())) {s = 179;}

                        else if ( (LA56_9==Import) && (synpred7_InternalTypesParser())) {s = 180;}

                        else if ( (LA56_9==In) && (synpred7_InternalTypesParser())) {s = 181;}

                        else if ( (LA56_9==Instanceof) && (synpred7_InternalTypesParser())) {s = 182;}

                        else if ( (LA56_9==New) && (synpred7_InternalTypesParser())) {s = 183;}

                        else if ( (LA56_9==Return) && (synpred7_InternalTypesParser())) {s = 184;}

                        else if ( (LA56_9==Super) && (synpred7_InternalTypesParser())) {s = 185;}

                        else if ( (LA56_9==Switch) && (synpred7_InternalTypesParser())) {s = 186;}

                        else if ( (LA56_9==This_1) && (synpred7_InternalTypesParser())) {s = 187;}

                        else if ( (LA56_9==Throw) && (synpred7_InternalTypesParser())) {s = 188;}

                        else if ( (LA56_9==Try) && (synpred7_InternalTypesParser())) {s = 189;}

                        else if ( (LA56_9==Typeof) && (synpred7_InternalTypesParser())) {s = 190;}

                        else if ( (LA56_9==Var) && (synpred7_InternalTypesParser())) {s = 191;}

                        else if ( (LA56_9==Void) && (synpred7_InternalTypesParser())) {s = 192;}

                        else if ( (LA56_9==While) && (synpred7_InternalTypesParser())) {s = 193;}

                        else if ( (LA56_9==With) && (synpred7_InternalTypesParser())) {s = 194;}

                        else if ( (LA56_9==Yield) && (synpred7_InternalTypesParser())) {s = 195;}

                        else if ( (LA56_9==Null) && (synpred7_InternalTypesParser())) {s = 196;}

                        else if ( (LA56_9==True) && (synpred7_InternalTypesParser())) {s = 197;}

                        else if ( (LA56_9==False) && (synpred7_InternalTypesParser())) {s = 198;}

                        else if ( (LA56_9==Enum) && (synpred7_InternalTypesParser())) {s = 199;}

                        else if ( (LA56_9==Get) && (synpred7_InternalTypesParser())) {s = 200;}

                        else if ( (LA56_9==Set) && (synpred7_InternalTypesParser())) {s = 201;}

                        else if ( (LA56_9==Let) && (synpred7_InternalTypesParser())) {s = 202;}

                        else if ( (LA56_9==Project) && (synpred7_InternalTypesParser())) {s = 203;}

                        else if ( (LA56_9==External) && (synpred7_InternalTypesParser())) {s = 204;}

                        else if ( (LA56_9==Abstract) && (synpred7_InternalTypesParser())) {s = 205;}

                        else if ( (LA56_9==Static) && (synpred7_InternalTypesParser())) {s = 206;}

                        else if ( (LA56_9==As) && (synpred7_InternalTypesParser())) {s = 207;}

                        else if ( (LA56_9==From) && (synpred7_InternalTypesParser())) {s = 208;}

                        else if ( (LA56_9==Constructor) && (synpred7_InternalTypesParser())) {s = 209;}

                        else if ( (LA56_9==Of) && (synpred7_InternalTypesParser())) {s = 210;}

                        else if ( (LA56_9==Target) && (synpred7_InternalTypesParser())) {s = 211;}

                        else if ( (LA56_9==Type) && (synpred7_InternalTypesParser())) {s = 212;}

                        else if ( (LA56_9==Union) && (synpred7_InternalTypesParser())) {s = 213;}

                        else if ( (LA56_9==Intersection) && (synpred7_InternalTypesParser())) {s = 214;}

                        else if ( (LA56_9==This) && (synpred7_InternalTypesParser())) {s = 215;}

                        else if ( (LA56_9==Promisify) && (synpred7_InternalTypesParser())) {s = 216;}

                        else if ( (LA56_9==Await) && (synpred7_InternalTypesParser())) {s = 217;}

                        else if ( (LA56_9==Async) && (synpred7_InternalTypesParser())) {s = 218;}

                        else if ( (LA56_9==Implements) && (synpred7_InternalTypesParser())) {s = 219;}

                        else if ( (LA56_9==Interface) && (synpred7_InternalTypesParser())) {s = 220;}

                        else if ( (LA56_9==Private) && (synpred7_InternalTypesParser())) {s = 221;}

                        else if ( (LA56_9==Protected) && (synpred7_InternalTypesParser())) {s = 222;}

                        else if ( (LA56_9==Public) && (synpred7_InternalTypesParser())) {s = 223;}

                        else if ( (LA56_9==Out) && (synpred7_InternalTypesParser())) {s = 224;}

                        else if ( (LA56_9==LeftSquareBracket) && (synpred7_InternalTypesParser())) {s = 225;}

                        else if ( (LA56_9==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_9==Colon||LA56_9==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_9);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA56_64 = input.LA(1);

                         
                        int index56_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_64==Colon||LA56_64==QuestionMark) ) {s = 11;}

                        else if ( (LA56_64==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_64);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA56_38 = input.LA(1);

                         
                        int index56_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_38==Colon||LA56_38==QuestionMark) ) {s = 11;}

                        else if ( (LA56_38==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA56_65 = input.LA(1);

                         
                        int index56_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_65==Colon||LA56_65==QuestionMark) ) {s = 11;}

                        else if ( (LA56_65==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_65);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA56_56 = input.LA(1);

                         
                        int index56_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_56==Colon||LA56_56==QuestionMark) ) {s = 11;}

                        else if ( (LA56_56==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_56==Any) && (synpred6_InternalTypesParser())) {s = 226;}

                        else if ( (LA56_56==Undefined) && (synpred6_InternalTypesParser())) {s = 227;}

                        else if ( (LA56_56==Object) && (synpred6_InternalTypesParser())) {s = 228;}

                        else if ( (LA56_56==VirtualBase) && (synpred6_InternalTypesParser())) {s = 229;}

                        else if ( (LA56_56==Primitive) && (synpred6_InternalTypesParser())) {s = 230;}

                        else if ( (LA56_56==AutoboxedType) && (synpred6_InternalTypesParser())) {s = 231;}

                        else if ( (LA56_56==AssignmnentCompatible) && (synpred6_InternalTypesParser())) {s = 232;}

                        else if ( (LA56_56==RULE_IDENTIFIER) && (synpred6_InternalTypesParser())) {s = 233;}

                        else if ( (LA56_56==Break) && (synpred6_InternalTypesParser())) {s = 234;}

                        else if ( (LA56_56==Case) && (synpred6_InternalTypesParser())) {s = 235;}

                        else if ( (LA56_56==Catch) && (synpred6_InternalTypesParser())) {s = 236;}

                        else if ( (LA56_56==Class) && (synpred6_InternalTypesParser())) {s = 237;}

                        else if ( (LA56_56==Const) && (synpred6_InternalTypesParser())) {s = 238;}

                        else if ( (LA56_56==Continue) && (synpred6_InternalTypesParser())) {s = 239;}

                        else if ( (LA56_56==Debugger) && (synpred6_InternalTypesParser())) {s = 240;}

                        else if ( (LA56_56==Default) && (synpred6_InternalTypesParser())) {s = 241;}

                        else if ( (LA56_56==Delete) && (synpred6_InternalTypesParser())) {s = 242;}

                        else if ( (LA56_56==Do) && (synpred6_InternalTypesParser())) {s = 243;}

                        else if ( (LA56_56==Else) && (synpred6_InternalTypesParser())) {s = 244;}

                        else if ( (LA56_56==Export) && (synpred6_InternalTypesParser())) {s = 245;}

                        else if ( (LA56_56==Extends) && (synpred6_InternalTypesParser())) {s = 246;}

                        else if ( (LA56_56==Finally) && (synpred6_InternalTypesParser())) {s = 247;}

                        else if ( (LA56_56==For) && (synpred6_InternalTypesParser())) {s = 248;}

                        else if ( (LA56_56==Function) && (synpred6_InternalTypesParser())) {s = 249;}

                        else if ( (LA56_56==If) && (synpred6_InternalTypesParser())) {s = 250;}

                        else if ( (LA56_56==Import) && (synpred6_InternalTypesParser())) {s = 251;}

                        else if ( (LA56_56==In) && (synpred6_InternalTypesParser())) {s = 252;}

                        else if ( (LA56_56==Instanceof) && (synpred6_InternalTypesParser())) {s = 253;}

                        else if ( (LA56_56==New) && (synpred6_InternalTypesParser())) {s = 254;}

                        else if ( (LA56_56==Return) && (synpred6_InternalTypesParser())) {s = 255;}

                        else if ( (LA56_56==Super) && (synpred6_InternalTypesParser())) {s = 256;}

                        else if ( (LA56_56==Switch) && (synpred6_InternalTypesParser())) {s = 257;}

                        else if ( (LA56_56==This_1) && (synpred6_InternalTypesParser())) {s = 258;}

                        else if ( (LA56_56==Throw) && (synpred6_InternalTypesParser())) {s = 259;}

                        else if ( (LA56_56==Try) && (synpred6_InternalTypesParser())) {s = 260;}

                        else if ( (LA56_56==Typeof) && (synpred6_InternalTypesParser())) {s = 261;}

                        else if ( (LA56_56==Var) && (synpred6_InternalTypesParser())) {s = 262;}

                        else if ( (LA56_56==Void) && (synpred6_InternalTypesParser())) {s = 263;}

                        else if ( (LA56_56==While) && (synpred6_InternalTypesParser())) {s = 264;}

                        else if ( (LA56_56==With) && (synpred6_InternalTypesParser())) {s = 265;}

                        else if ( (LA56_56==Yield) && (synpred6_InternalTypesParser())) {s = 266;}

                        else if ( (LA56_56==Null) && (synpred6_InternalTypesParser())) {s = 267;}

                        else if ( (LA56_56==True) && (synpred6_InternalTypesParser())) {s = 268;}

                        else if ( (LA56_56==False) && (synpred6_InternalTypesParser())) {s = 269;}

                        else if ( (LA56_56==Enum) && (synpred6_InternalTypesParser())) {s = 270;}

                        else if ( (LA56_56==Get) && (synpred6_InternalTypesParser())) {s = 271;}

                        else if ( (LA56_56==Set) && (synpred6_InternalTypesParser())) {s = 272;}

                        else if ( (LA56_56==Let) && (synpred6_InternalTypesParser())) {s = 273;}

                        else if ( (LA56_56==Project) && (synpred6_InternalTypesParser())) {s = 274;}

                        else if ( (LA56_56==External) && (synpred6_InternalTypesParser())) {s = 275;}

                        else if ( (LA56_56==Abstract) && (synpred6_InternalTypesParser())) {s = 276;}

                        else if ( (LA56_56==Static) && (synpred6_InternalTypesParser())) {s = 277;}

                        else if ( (LA56_56==As) && (synpred6_InternalTypesParser())) {s = 278;}

                        else if ( (LA56_56==From) && (synpred6_InternalTypesParser())) {s = 279;}

                        else if ( (LA56_56==Constructor) && (synpred6_InternalTypesParser())) {s = 280;}

                        else if ( (LA56_56==Of) && (synpred6_InternalTypesParser())) {s = 281;}

                        else if ( (LA56_56==Target) && (synpred6_InternalTypesParser())) {s = 282;}

                        else if ( (LA56_56==Type) && (synpred6_InternalTypesParser())) {s = 283;}

                        else if ( (LA56_56==Union) && (synpred6_InternalTypesParser())) {s = 284;}

                        else if ( (LA56_56==Intersection) && (synpred6_InternalTypesParser())) {s = 285;}

                        else if ( (LA56_56==This) && (synpred6_InternalTypesParser())) {s = 286;}

                        else if ( (LA56_56==Promisify) && (synpred6_InternalTypesParser())) {s = 287;}

                        else if ( (LA56_56==Await) && (synpred6_InternalTypesParser())) {s = 288;}

                        else if ( (LA56_56==Async) && (synpred6_InternalTypesParser())) {s = 289;}

                        else if ( (LA56_56==Implements) && (synpred6_InternalTypesParser())) {s = 290;}

                        else if ( (LA56_56==Interface) && (synpred6_InternalTypesParser())) {s = 291;}

                        else if ( (LA56_56==Private) && (synpred6_InternalTypesParser())) {s = 292;}

                        else if ( (LA56_56==Protected) && (synpred6_InternalTypesParser())) {s = 293;}

                        else if ( (LA56_56==Public) && (synpred6_InternalTypesParser())) {s = 294;}

                        else if ( (LA56_56==Out) && (synpred6_InternalTypesParser())) {s = 295;}

                        else if ( (LA56_56==LeftSquareBracket) && (synpred6_InternalTypesParser())) {s = 296;}

                         
                        input.seek(index56_56);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA56_39 = input.LA(1);

                         
                        int index56_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_39==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_39==Colon||LA56_39==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA56_66 = input.LA(1);

                         
                        int index56_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_66==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_66==Colon||LA56_66==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_66);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA56_40 = input.LA(1);

                         
                        int index56_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_40==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_40==Colon||LA56_40==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA56_7 = input.LA(1);

                         
                        int index56_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_7==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_7==Get) ) {s = 81;}

                        else if ( (LA56_7==Colon||LA56_7==QuestionMark) ) {s = 11;}

                        else if ( (LA56_7==Set) ) {s = 82;}

                        else if ( (LA56_7==LessThanSign) && (synpred8_InternalTypesParser())) {s = 79;}

                        else if ( (LA56_7==Any) && (synpred8_InternalTypesParser())) {s = 83;}

                        else if ( (LA56_7==Undefined) && (synpred8_InternalTypesParser())) {s = 84;}

                        else if ( (LA56_7==Object) && (synpred8_InternalTypesParser())) {s = 85;}

                        else if ( (LA56_7==VirtualBase) && (synpred8_InternalTypesParser())) {s = 86;}

                        else if ( (LA56_7==Primitive) && (synpred8_InternalTypesParser())) {s = 87;}

                        else if ( (LA56_7==AutoboxedType) && (synpred8_InternalTypesParser())) {s = 88;}

                        else if ( (LA56_7==AssignmnentCompatible) && (synpred8_InternalTypesParser())) {s = 89;}

                        else if ( (LA56_7==RULE_IDENTIFIER) && (synpred8_InternalTypesParser())) {s = 90;}

                        else if ( (LA56_7==Break) && (synpred8_InternalTypesParser())) {s = 91;}

                        else if ( (LA56_7==Case) && (synpred8_InternalTypesParser())) {s = 92;}

                        else if ( (LA56_7==Catch) && (synpred8_InternalTypesParser())) {s = 93;}

                        else if ( (LA56_7==Class) && (synpred8_InternalTypesParser())) {s = 94;}

                        else if ( (LA56_7==Const) && (synpred8_InternalTypesParser())) {s = 95;}

                        else if ( (LA56_7==Continue) && (synpred8_InternalTypesParser())) {s = 96;}

                        else if ( (LA56_7==Debugger) && (synpred8_InternalTypesParser())) {s = 97;}

                        else if ( (LA56_7==Default) && (synpred8_InternalTypesParser())) {s = 98;}

                        else if ( (LA56_7==Delete) && (synpred8_InternalTypesParser())) {s = 99;}

                        else if ( (LA56_7==Do) && (synpred8_InternalTypesParser())) {s = 100;}

                        else if ( (LA56_7==Else) && (synpred8_InternalTypesParser())) {s = 101;}

                        else if ( (LA56_7==Export) && (synpred8_InternalTypesParser())) {s = 102;}

                        else if ( (LA56_7==Extends) && (synpred8_InternalTypesParser())) {s = 103;}

                        else if ( (LA56_7==Finally) && (synpred8_InternalTypesParser())) {s = 104;}

                        else if ( (LA56_7==For) && (synpred8_InternalTypesParser())) {s = 105;}

                        else if ( (LA56_7==Function) && (synpred8_InternalTypesParser())) {s = 106;}

                        else if ( (LA56_7==If) && (synpred8_InternalTypesParser())) {s = 107;}

                        else if ( (LA56_7==Import) && (synpred8_InternalTypesParser())) {s = 108;}

                        else if ( (LA56_7==In) && (synpred8_InternalTypesParser())) {s = 109;}

                        else if ( (LA56_7==Instanceof) && (synpred8_InternalTypesParser())) {s = 110;}

                        else if ( (LA56_7==New) && (synpred8_InternalTypesParser())) {s = 111;}

                        else if ( (LA56_7==Return) && (synpred8_InternalTypesParser())) {s = 112;}

                        else if ( (LA56_7==Super) && (synpred8_InternalTypesParser())) {s = 113;}

                        else if ( (LA56_7==Switch) && (synpred8_InternalTypesParser())) {s = 114;}

                        else if ( (LA56_7==This_1) && (synpred8_InternalTypesParser())) {s = 115;}

                        else if ( (LA56_7==Throw) && (synpred8_InternalTypesParser())) {s = 116;}

                        else if ( (LA56_7==Try) && (synpred8_InternalTypesParser())) {s = 117;}

                        else if ( (LA56_7==Typeof) && (synpred8_InternalTypesParser())) {s = 118;}

                        else if ( (LA56_7==Var) && (synpred8_InternalTypesParser())) {s = 119;}

                        else if ( (LA56_7==Void) && (synpred8_InternalTypesParser())) {s = 120;}

                        else if ( (LA56_7==While) && (synpred8_InternalTypesParser())) {s = 121;}

                        else if ( (LA56_7==With) && (synpred8_InternalTypesParser())) {s = 122;}

                        else if ( (LA56_7==Yield) && (synpred8_InternalTypesParser())) {s = 123;}

                        else if ( (LA56_7==Null) && (synpred8_InternalTypesParser())) {s = 124;}

                        else if ( (LA56_7==True) && (synpred8_InternalTypesParser())) {s = 125;}

                        else if ( (LA56_7==False) && (synpred8_InternalTypesParser())) {s = 126;}

                        else if ( (LA56_7==Enum) && (synpred8_InternalTypesParser())) {s = 127;}

                        else if ( (LA56_7==Let) && (synpred8_InternalTypesParser())) {s = 128;}

                        else if ( (LA56_7==Project) && (synpred8_InternalTypesParser())) {s = 129;}

                        else if ( (LA56_7==External) && (synpred8_InternalTypesParser())) {s = 130;}

                        else if ( (LA56_7==Abstract) && (synpred8_InternalTypesParser())) {s = 131;}

                        else if ( (LA56_7==Static) && (synpred8_InternalTypesParser())) {s = 132;}

                        else if ( (LA56_7==As) && (synpred8_InternalTypesParser())) {s = 133;}

                        else if ( (LA56_7==From) && (synpred8_InternalTypesParser())) {s = 134;}

                        else if ( (LA56_7==Constructor) && (synpred8_InternalTypesParser())) {s = 135;}

                        else if ( (LA56_7==Of) && (synpred8_InternalTypesParser())) {s = 136;}

                        else if ( (LA56_7==Target) && (synpred8_InternalTypesParser())) {s = 137;}

                        else if ( (LA56_7==Type) && (synpred8_InternalTypesParser())) {s = 138;}

                        else if ( (LA56_7==Union) && (synpred8_InternalTypesParser())) {s = 139;}

                        else if ( (LA56_7==Intersection) && (synpred8_InternalTypesParser())) {s = 140;}

                        else if ( (LA56_7==This) && (synpred8_InternalTypesParser())) {s = 141;}

                        else if ( (LA56_7==Promisify) && (synpred8_InternalTypesParser())) {s = 142;}

                        else if ( (LA56_7==Await) && (synpred8_InternalTypesParser())) {s = 143;}

                        else if ( (LA56_7==Async) && (synpred8_InternalTypesParser())) {s = 144;}

                        else if ( (LA56_7==Implements) && (synpred8_InternalTypesParser())) {s = 145;}

                        else if ( (LA56_7==Interface) && (synpred8_InternalTypesParser())) {s = 146;}

                        else if ( (LA56_7==Private) && (synpred8_InternalTypesParser())) {s = 147;}

                        else if ( (LA56_7==Protected) && (synpred8_InternalTypesParser())) {s = 148;}

                        else if ( (LA56_7==Public) && (synpred8_InternalTypesParser())) {s = 149;}

                        else if ( (LA56_7==Out) && (synpred8_InternalTypesParser())) {s = 150;}

                        else if ( (LA56_7==LeftSquareBracket) && (synpred8_InternalTypesParser())) {s = 151;}

                         
                        input.seek(index56_7);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA56_67 = input.LA(1);

                         
                        int index56_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_67==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_67==Colon||LA56_67==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_67);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA56_41 = input.LA(1);

                         
                        int index56_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_41==Colon||LA56_41==QuestionMark) ) {s = 11;}

                        else if ( (LA56_41==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_41);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA56_68 = input.LA(1);

                         
                        int index56_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_68==Colon||LA56_68==QuestionMark) ) {s = 11;}

                        else if ( (LA56_68==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_68);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA56_42 = input.LA(1);

                         
                        int index56_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_42==Colon||LA56_42==QuestionMark) ) {s = 11;}

                        else if ( (LA56_42==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_42);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA56_69 = input.LA(1);

                         
                        int index56_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_69==Colon||LA56_69==QuestionMark) ) {s = 11;}

                        else if ( (LA56_69==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_69);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA56_43 = input.LA(1);

                         
                        int index56_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_43==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_43==Colon||LA56_43==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_43);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA56_70 = input.LA(1);

                         
                        int index56_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_70==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_70==Colon||LA56_70==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_70);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA56_44 = input.LA(1);

                         
                        int index56_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_44==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_44==Colon||LA56_44==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_44);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA56_71 = input.LA(1);

                         
                        int index56_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_71==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_71==Colon||LA56_71==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_71);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA56_45 = input.LA(1);

                         
                        int index56_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_45==Colon||LA56_45==QuestionMark) ) {s = 11;}

                        else if ( (LA56_45==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_45);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA56_72 = input.LA(1);

                         
                        int index56_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_72==Colon||LA56_72==QuestionMark) ) {s = 11;}

                        else if ( (LA56_72==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_72);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA56_46 = input.LA(1);

                         
                        int index56_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_46==Colon||LA56_46==QuestionMark) ) {s = 11;}

                        else if ( (LA56_46==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_46);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA56_82 = input.LA(1);

                         
                        int index56_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_82==Any) && (synpred7_InternalTypesParser())) {s = 155;}

                        else if ( (LA56_82==Undefined) && (synpred7_InternalTypesParser())) {s = 156;}

                        else if ( (LA56_82==Object) && (synpred7_InternalTypesParser())) {s = 157;}

                        else if ( (LA56_82==VirtualBase) && (synpred7_InternalTypesParser())) {s = 158;}

                        else if ( (LA56_82==Primitive) && (synpred7_InternalTypesParser())) {s = 159;}

                        else if ( (LA56_82==AutoboxedType) && (synpred7_InternalTypesParser())) {s = 160;}

                        else if ( (LA56_82==AssignmnentCompatible) && (synpred7_InternalTypesParser())) {s = 161;}

                        else if ( (LA56_82==RULE_IDENTIFIER) && (synpred7_InternalTypesParser())) {s = 162;}

                        else if ( (LA56_82==Break) && (synpred7_InternalTypesParser())) {s = 163;}

                        else if ( (LA56_82==Case) && (synpred7_InternalTypesParser())) {s = 164;}

                        else if ( (LA56_82==Catch) && (synpred7_InternalTypesParser())) {s = 165;}

                        else if ( (LA56_82==Class) && (synpred7_InternalTypesParser())) {s = 166;}

                        else if ( (LA56_82==Const) && (synpred7_InternalTypesParser())) {s = 167;}

                        else if ( (LA56_82==Continue) && (synpred7_InternalTypesParser())) {s = 168;}

                        else if ( (LA56_82==Debugger) && (synpred7_InternalTypesParser())) {s = 169;}

                        else if ( (LA56_82==Default) && (synpred7_InternalTypesParser())) {s = 170;}

                        else if ( (LA56_82==Delete) && (synpred7_InternalTypesParser())) {s = 171;}

                        else if ( (LA56_82==Do) && (synpred7_InternalTypesParser())) {s = 172;}

                        else if ( (LA56_82==Else) && (synpred7_InternalTypesParser())) {s = 173;}

                        else if ( (LA56_82==Export) && (synpred7_InternalTypesParser())) {s = 174;}

                        else if ( (LA56_82==Extends) && (synpred7_InternalTypesParser())) {s = 175;}

                        else if ( (LA56_82==Finally) && (synpred7_InternalTypesParser())) {s = 176;}

                        else if ( (LA56_82==For) && (synpred7_InternalTypesParser())) {s = 177;}

                        else if ( (LA56_82==Function) && (synpred7_InternalTypesParser())) {s = 178;}

                        else if ( (LA56_82==If) && (synpred7_InternalTypesParser())) {s = 179;}

                        else if ( (LA56_82==Import) && (synpred7_InternalTypesParser())) {s = 180;}

                        else if ( (LA56_82==In) && (synpred7_InternalTypesParser())) {s = 181;}

                        else if ( (LA56_82==Instanceof) && (synpred7_InternalTypesParser())) {s = 182;}

                        else if ( (LA56_82==New) && (synpred7_InternalTypesParser())) {s = 183;}

                        else if ( (LA56_82==Return) && (synpred7_InternalTypesParser())) {s = 184;}

                        else if ( (LA56_82==Super) && (synpred7_InternalTypesParser())) {s = 185;}

                        else if ( (LA56_82==Switch) && (synpred7_InternalTypesParser())) {s = 186;}

                        else if ( (LA56_82==This_1) && (synpred7_InternalTypesParser())) {s = 187;}

                        else if ( (LA56_82==Throw) && (synpred7_InternalTypesParser())) {s = 188;}

                        else if ( (LA56_82==Try) && (synpred7_InternalTypesParser())) {s = 189;}

                        else if ( (LA56_82==Typeof) && (synpred7_InternalTypesParser())) {s = 190;}

                        else if ( (LA56_82==Var) && (synpred7_InternalTypesParser())) {s = 191;}

                        else if ( (LA56_82==Void) && (synpred7_InternalTypesParser())) {s = 192;}

                        else if ( (LA56_82==While) && (synpred7_InternalTypesParser())) {s = 193;}

                        else if ( (LA56_82==With) && (synpred7_InternalTypesParser())) {s = 194;}

                        else if ( (LA56_82==Yield) && (synpred7_InternalTypesParser())) {s = 195;}

                        else if ( (LA56_82==Null) && (synpred7_InternalTypesParser())) {s = 196;}

                        else if ( (LA56_82==True) && (synpred7_InternalTypesParser())) {s = 197;}

                        else if ( (LA56_82==False) && (synpred7_InternalTypesParser())) {s = 198;}

                        else if ( (LA56_82==Enum) && (synpred7_InternalTypesParser())) {s = 199;}

                        else if ( (LA56_82==Get) && (synpred7_InternalTypesParser())) {s = 200;}

                        else if ( (LA56_82==Set) && (synpred7_InternalTypesParser())) {s = 201;}

                        else if ( (LA56_82==Let) && (synpred7_InternalTypesParser())) {s = 202;}

                        else if ( (LA56_82==Project) && (synpred7_InternalTypesParser())) {s = 203;}

                        else if ( (LA56_82==External) && (synpred7_InternalTypesParser())) {s = 204;}

                        else if ( (LA56_82==Abstract) && (synpred7_InternalTypesParser())) {s = 205;}

                        else if ( (LA56_82==Static) && (synpred7_InternalTypesParser())) {s = 206;}

                        else if ( (LA56_82==As) && (synpred7_InternalTypesParser())) {s = 207;}

                        else if ( (LA56_82==From) && (synpred7_InternalTypesParser())) {s = 208;}

                        else if ( (LA56_82==Constructor) && (synpred7_InternalTypesParser())) {s = 209;}

                        else if ( (LA56_82==Of) && (synpred7_InternalTypesParser())) {s = 210;}

                        else if ( (LA56_82==Target) && (synpred7_InternalTypesParser())) {s = 211;}

                        else if ( (LA56_82==Type) && (synpred7_InternalTypesParser())) {s = 212;}

                        else if ( (LA56_82==Union) && (synpred7_InternalTypesParser())) {s = 213;}

                        else if ( (LA56_82==Intersection) && (synpred7_InternalTypesParser())) {s = 214;}

                        else if ( (LA56_82==This) && (synpred7_InternalTypesParser())) {s = 215;}

                        else if ( (LA56_82==Promisify) && (synpred7_InternalTypesParser())) {s = 216;}

                        else if ( (LA56_82==Await) && (synpred7_InternalTypesParser())) {s = 217;}

                        else if ( (LA56_82==Async) && (synpred7_InternalTypesParser())) {s = 218;}

                        else if ( (LA56_82==Implements) && (synpred7_InternalTypesParser())) {s = 219;}

                        else if ( (LA56_82==Interface) && (synpred7_InternalTypesParser())) {s = 220;}

                        else if ( (LA56_82==Private) && (synpred7_InternalTypesParser())) {s = 221;}

                        else if ( (LA56_82==Protected) && (synpred7_InternalTypesParser())) {s = 222;}

                        else if ( (LA56_82==Public) && (synpred7_InternalTypesParser())) {s = 223;}

                        else if ( (LA56_82==Out) && (synpred7_InternalTypesParser())) {s = 224;}

                        else if ( (LA56_82==LeftSquareBracket) && (synpred7_InternalTypesParser())) {s = 225;}

                        else if ( (LA56_82==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_82);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA56_369 = input.LA(1);

                         
                        int index56_369 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_369==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_369==Colon||LA56_369==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_369);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA56_73 = input.LA(1);

                         
                        int index56_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_73==Colon||LA56_73==QuestionMark) ) {s = 11;}

                        else if ( (LA56_73==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_73);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA56_12 = input.LA(1);

                         
                        int index56_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_12==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_12==Colon||LA56_12==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_12);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA56_47 = input.LA(1);

                         
                        int index56_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_47==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_47==Colon||LA56_47==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_47);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA56_74 = input.LA(1);

                         
                        int index56_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_74==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_74==Colon||LA56_74==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_74);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA56_81 = input.LA(1);

                         
                        int index56_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_81==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_81==Any) && (synpred6_InternalTypesParser())) {s = 226;}

                        else if ( (LA56_81==Undefined) && (synpred6_InternalTypesParser())) {s = 227;}

                        else if ( (LA56_81==Object) && (synpred6_InternalTypesParser())) {s = 228;}

                        else if ( (LA56_81==VirtualBase) && (synpred6_InternalTypesParser())) {s = 229;}

                        else if ( (LA56_81==Primitive) && (synpred6_InternalTypesParser())) {s = 230;}

                        else if ( (LA56_81==AutoboxedType) && (synpred6_InternalTypesParser())) {s = 231;}

                        else if ( (LA56_81==AssignmnentCompatible) && (synpred6_InternalTypesParser())) {s = 232;}

                        else if ( (LA56_81==RULE_IDENTIFIER) && (synpred6_InternalTypesParser())) {s = 233;}

                        else if ( (LA56_81==Break) && (synpred6_InternalTypesParser())) {s = 234;}

                        else if ( (LA56_81==Case) && (synpred6_InternalTypesParser())) {s = 235;}

                        else if ( (LA56_81==Catch) && (synpred6_InternalTypesParser())) {s = 236;}

                        else if ( (LA56_81==Class) && (synpred6_InternalTypesParser())) {s = 237;}

                        else if ( (LA56_81==Const) && (synpred6_InternalTypesParser())) {s = 238;}

                        else if ( (LA56_81==Continue) && (synpred6_InternalTypesParser())) {s = 239;}

                        else if ( (LA56_81==Debugger) && (synpred6_InternalTypesParser())) {s = 240;}

                        else if ( (LA56_81==Default) && (synpred6_InternalTypesParser())) {s = 241;}

                        else if ( (LA56_81==Delete) && (synpred6_InternalTypesParser())) {s = 242;}

                        else if ( (LA56_81==Do) && (synpred6_InternalTypesParser())) {s = 243;}

                        else if ( (LA56_81==Else) && (synpred6_InternalTypesParser())) {s = 244;}

                        else if ( (LA56_81==Export) && (synpred6_InternalTypesParser())) {s = 245;}

                        else if ( (LA56_81==Extends) && (synpred6_InternalTypesParser())) {s = 246;}

                        else if ( (LA56_81==Finally) && (synpred6_InternalTypesParser())) {s = 247;}

                        else if ( (LA56_81==For) && (synpred6_InternalTypesParser())) {s = 248;}

                        else if ( (LA56_81==Function) && (synpred6_InternalTypesParser())) {s = 249;}

                        else if ( (LA56_81==If) && (synpred6_InternalTypesParser())) {s = 250;}

                        else if ( (LA56_81==Import) && (synpred6_InternalTypesParser())) {s = 251;}

                        else if ( (LA56_81==In) && (synpred6_InternalTypesParser())) {s = 252;}

                        else if ( (LA56_81==Instanceof) && (synpred6_InternalTypesParser())) {s = 253;}

                        else if ( (LA56_81==New) && (synpred6_InternalTypesParser())) {s = 254;}

                        else if ( (LA56_81==Return) && (synpred6_InternalTypesParser())) {s = 255;}

                        else if ( (LA56_81==Super) && (synpred6_InternalTypesParser())) {s = 256;}

                        else if ( (LA56_81==Switch) && (synpred6_InternalTypesParser())) {s = 257;}

                        else if ( (LA56_81==This_1) && (synpred6_InternalTypesParser())) {s = 258;}

                        else if ( (LA56_81==Throw) && (synpred6_InternalTypesParser())) {s = 259;}

                        else if ( (LA56_81==Try) && (synpred6_InternalTypesParser())) {s = 260;}

                        else if ( (LA56_81==Typeof) && (synpred6_InternalTypesParser())) {s = 261;}

                        else if ( (LA56_81==Var) && (synpred6_InternalTypesParser())) {s = 262;}

                        else if ( (LA56_81==Void) && (synpred6_InternalTypesParser())) {s = 263;}

                        else if ( (LA56_81==While) && (synpred6_InternalTypesParser())) {s = 264;}

                        else if ( (LA56_81==With) && (synpred6_InternalTypesParser())) {s = 265;}

                        else if ( (LA56_81==Yield) && (synpred6_InternalTypesParser())) {s = 266;}

                        else if ( (LA56_81==Null) && (synpred6_InternalTypesParser())) {s = 267;}

                        else if ( (LA56_81==True) && (synpred6_InternalTypesParser())) {s = 268;}

                        else if ( (LA56_81==False) && (synpred6_InternalTypesParser())) {s = 269;}

                        else if ( (LA56_81==Enum) && (synpred6_InternalTypesParser())) {s = 270;}

                        else if ( (LA56_81==Get) && (synpred6_InternalTypesParser())) {s = 271;}

                        else if ( (LA56_81==Set) && (synpred6_InternalTypesParser())) {s = 272;}

                        else if ( (LA56_81==Let) && (synpred6_InternalTypesParser())) {s = 273;}

                        else if ( (LA56_81==Project) && (synpred6_InternalTypesParser())) {s = 274;}

                        else if ( (LA56_81==External) && (synpred6_InternalTypesParser())) {s = 275;}

                        else if ( (LA56_81==Abstract) && (synpred6_InternalTypesParser())) {s = 276;}

                        else if ( (LA56_81==Static) && (synpred6_InternalTypesParser())) {s = 277;}

                        else if ( (LA56_81==As) && (synpred6_InternalTypesParser())) {s = 278;}

                        else if ( (LA56_81==From) && (synpred6_InternalTypesParser())) {s = 279;}

                        else if ( (LA56_81==Constructor) && (synpred6_InternalTypesParser())) {s = 280;}

                        else if ( (LA56_81==Of) && (synpred6_InternalTypesParser())) {s = 281;}

                        else if ( (LA56_81==Target) && (synpred6_InternalTypesParser())) {s = 282;}

                        else if ( (LA56_81==Type) && (synpred6_InternalTypesParser())) {s = 283;}

                        else if ( (LA56_81==Union) && (synpred6_InternalTypesParser())) {s = 284;}

                        else if ( (LA56_81==Intersection) && (synpred6_InternalTypesParser())) {s = 285;}

                        else if ( (LA56_81==This) && (synpred6_InternalTypesParser())) {s = 286;}

                        else if ( (LA56_81==Promisify) && (synpred6_InternalTypesParser())) {s = 287;}

                        else if ( (LA56_81==Await) && (synpred6_InternalTypesParser())) {s = 288;}

                        else if ( (LA56_81==Async) && (synpred6_InternalTypesParser())) {s = 289;}

                        else if ( (LA56_81==Implements) && (synpred6_InternalTypesParser())) {s = 290;}

                        else if ( (LA56_81==Interface) && (synpred6_InternalTypesParser())) {s = 291;}

                        else if ( (LA56_81==Private) && (synpred6_InternalTypesParser())) {s = 292;}

                        else if ( (LA56_81==Protected) && (synpred6_InternalTypesParser())) {s = 293;}

                        else if ( (LA56_81==Public) && (synpred6_InternalTypesParser())) {s = 294;}

                        else if ( (LA56_81==Out) && (synpred6_InternalTypesParser())) {s = 295;}

                        else if ( (LA56_81==LeftSquareBracket) && (synpred6_InternalTypesParser())) {s = 296;}

                         
                        input.seek(index56_81);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA56_13 = input.LA(1);

                         
                        int index56_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_13==Colon||LA56_13==QuestionMark) ) {s = 11;}

                        else if ( (LA56_13==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_13);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA56_48 = input.LA(1);

                         
                        int index56_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_48==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_48==Colon||LA56_48==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_48);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA56_75 = input.LA(1);

                         
                        int index56_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_75==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_75==Colon||LA56_75==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_75);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA56_14 = input.LA(1);

                         
                        int index56_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_14==Colon||LA56_14==QuestionMark) ) {s = 11;}

                        else if ( (LA56_14==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_14);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA56_49 = input.LA(1);

                         
                        int index56_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_49==Colon||LA56_49==QuestionMark) ) {s = 11;}

                        else if ( (LA56_49==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_49);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA56_76 = input.LA(1);

                         
                        int index56_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_76==Colon||LA56_76==QuestionMark) ) {s = 11;}

                        else if ( (LA56_76==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_76);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA56_15 = input.LA(1);

                         
                        int index56_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_15==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_15==Colon||LA56_15==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_15);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA56_50 = input.LA(1);

                         
                        int index56_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_50==Colon||LA56_50==QuestionMark) ) {s = 11;}

                        else if ( (LA56_50==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_50);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA56_77 = input.LA(1);

                         
                        int index56_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_77==Colon||LA56_77==QuestionMark) ) {s = 11;}

                        else if ( (LA56_77==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_77);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA56_16 = input.LA(1);

                         
                        int index56_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_16==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_16==Colon||LA56_16==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_16);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA56_51 = input.LA(1);

                         
                        int index56_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_51==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_51==Colon||LA56_51==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_51);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA56_17 = input.LA(1);

                         
                        int index56_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_17==Colon||LA56_17==QuestionMark) ) {s = 11;}

                        else if ( (LA56_17==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_17);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA56_52 = input.LA(1);

                         
                        int index56_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_52==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_52==Colon||LA56_52==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_52);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA56_18 = input.LA(1);

                         
                        int index56_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_18==Colon||LA56_18==QuestionMark) ) {s = 11;}

                        else if ( (LA56_18==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_18);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA56_53 = input.LA(1);

                         
                        int index56_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_53==Colon||LA56_53==QuestionMark) ) {s = 11;}

                        else if ( (LA56_53==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_53);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA56_54 = input.LA(1);

                         
                        int index56_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_54==Colon||LA56_54==QuestionMark) ) {s = 11;}

                        else if ( (LA56_54==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                         
                        input.seek(index56_54);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA56_55 = input.LA(1);

                         
                        int index56_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_55==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_55==Colon||LA56_55==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_55);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA56_19 = input.LA(1);

                         
                        int index56_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_19==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_19==Colon||LA56_19==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_19);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA56_10 = input.LA(1);

                         
                        int index56_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_10==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_10==AssignmnentCompatible||(LA56_10>=AutoboxedType && LA56_10<=Finally)||(LA56_10>=Private && LA56_10<=False)||(LA56_10>=Super && LA56_10<=With)||(LA56_10>=Any && LA56_10<=Var)||(LA56_10>=As && LA56_10<=Of)||LA56_10==Colon||LA56_10==QuestionMark||LA56_10==LeftSquareBracket||LA56_10==RULE_IDENTIFIER) ) {s = 11;}

                         
                        input.seek(index56_10);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA56_20 = input.LA(1);

                         
                        int index56_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_20==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_20==Colon||LA56_20==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_20);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA56_21 = input.LA(1);

                         
                        int index56_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_21==LeftParenthesis) && (synpred8_InternalTypesParser())) {s = 80;}

                        else if ( (LA56_21==Colon||LA56_21==QuestionMark) ) {s = 11;}

                         
                        input.seek(index56_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_13s = "\1\11\1\0\20\uffff";
    static final String dfa_14s = "\1\153\1\0\20\uffff";
    static final String dfa_15s = "\2\uffff\1\2\1\3\14\uffff\1\1\1\4";
    static final String dfa_16s = "\1\uffff\1\0\20\uffff}>";
    static final String[] dfa_17s = {
            "\2\3\7\uffff\1\3\10\uffff\1\3\26\uffff\1\3\7\uffff\2\3\1\uffff\2\3\2\uffff\1\3\17\uffff\1\1\14\uffff\1\2\1\uffff\1\3\2\uffff\1\3\7\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_13 = DFA.unpackEncodedStringToUnsignedChars(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final short[] dfa_15 = DFA.unpackEncodedString(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[][] dfa_17 = unpackEncodedStringArray(dfa_17s);

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_13;
            this.max = dfa_14;
            this.accept = dfa_15;
            this.special = dfa_16;
            this.transition = dfa_17;
        }
        public String getDescription() {
            return "3804:2: ( ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=> ( () otherlv_1= LeftParenthesis this_TAnonymousFormalParameterList_2= ruleTAnonymousFormalParameterList[$current] otherlv_3= RightParenthesis otherlv_4= EqualsSignGreaterThanSign ) ) ( (lv_returnTypeRef_5_0= rulePrimaryTypeExpression ) ) ) | this_ArrayTypeRef_6= ruleArrayTypeRef | this_TypeRefWithModifiers_7= ruleTypeRefWithModifiers | (otherlv_8= LeftParenthesis this_TypeRef_9= ruleTypeRef otherlv_10= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA83_1 = input.LA(1);

                         
                        int index83_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_InternalTypesParser()) ) {s = 16;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index83_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 83, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_18s = "\36\uffff";
    static final String dfa_19s = "\1\uffff\1\34\34\uffff";
    static final String dfa_20s = "\1\11\1\122\12\uffff\1\127\2\uffff\3\127\14\uffff";
    static final String dfa_21s = "\1\153\1\134\12\uffff\1\140\2\uffff\3\140\14\uffff";
    static final String dfa_22s = "\2\uffff\12\1\1\uffff\2\1\3\uffff\12\1\1\2\1\1";
    static final String dfa_23s = "\1\1\1\0\12\uffff\1\4\2\uffff\1\2\1\5\1\3\14\uffff}>";
    static final String[] dfa_24s = {
            "\1\21\1\14\1\uffff\1\26\1\uffff\1\23\1\27\1\uffff\1\31\1\34\1\10\2\uffff\1\7\4\uffff\1\34\1\30\1\6\4\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\10\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\2\34\1\uffff\1\17\1\34\2\uffff\1\34\1\uffff\1\3\1\5\1\uffff\1\33\1\4\3\uffff\1\12\3\uffff\1\15\20\uffff\1\34\2\uffff\1\34\7\uffff\1\1",
            "\3\34\1\uffff\1\34\1\35\1\uffff\2\34\1\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\10\uffff\1\34",
            "",
            "",
            "\1\35\10\uffff\1\34",
            "\1\35\10\uffff\1\34",
            "\1\35\10\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[][] dfa_24 = unpackEncodedStringArray(dfa_24s);

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = dfa_18;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "4617:3: ( ( ( ( ruleBindingIdentifier ) )=> (lv_name_1_0= ruleBindingIdentifier ) ) otherlv_2= Colon )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA99_1 = input.LA(1);

                         
                        int index99_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_1==EOF||(LA99_1>=RightParenthesis && LA99_1<=Comma)||LA99_1==Solidus||(LA99_1>=LessThanSign && LA99_1<=EqualsSign)||LA99_1==QuestionMark) ) {s = 28;}

                        else if ( (LA99_1==Colon) && (synpred16_InternalTypesParser())) {s = 29;}

                         
                        input.seek(index99_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA99_0 = input.LA(1);

                         
                        int index99_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_0==RULE_IDENTIFIER) ) {s = 1;}

                        else if ( (LA99_0==Yield) && (synpred16_InternalTypesParser())) {s = 2;}

                        else if ( (LA99_0==Get) && (synpred16_InternalTypesParser())) {s = 3;}

                        else if ( (LA99_0==Set) && (synpred16_InternalTypesParser())) {s = 4;}

                        else if ( (LA99_0==Let) && (synpred16_InternalTypesParser())) {s = 5;}

                        else if ( (LA99_0==Project) && (synpred16_InternalTypesParser())) {s = 6;}

                        else if ( (LA99_0==External) && (synpred16_InternalTypesParser())) {s = 7;}

                        else if ( (LA99_0==Abstract) && (synpred16_InternalTypesParser())) {s = 8;}

                        else if ( (LA99_0==Static) && (synpred16_InternalTypesParser())) {s = 9;}

                        else if ( (LA99_0==As) && (synpred16_InternalTypesParser())) {s = 10;}

                        else if ( (LA99_0==From) && (synpred16_InternalTypesParser())) {s = 11;}

                        else if ( (LA99_0==Constructor) ) {s = 12;}

                        else if ( (LA99_0==Of) && (synpred16_InternalTypesParser())) {s = 13;}

                        else if ( (LA99_0==Target) && (synpred16_InternalTypesParser())) {s = 14;}

                        else if ( (LA99_0==Type) ) {s = 15;}

                        else if ( (LA99_0==Union) ) {s = 16;}

                        else if ( (LA99_0==Intersection) ) {s = 17;}

                        else if ( (LA99_0==This) && (synpred16_InternalTypesParser())) {s = 18;}

                        else if ( (LA99_0==Promisify) && (synpred16_InternalTypesParser())) {s = 19;}

                        else if ( (LA99_0==Await) && (synpred16_InternalTypesParser())) {s = 20;}

                        else if ( (LA99_0==Async) && (synpred16_InternalTypesParser())) {s = 21;}

                        else if ( (LA99_0==Implements) && (synpred16_InternalTypesParser())) {s = 22;}

                        else if ( (LA99_0==Interface) && (synpred16_InternalTypesParser())) {s = 23;}

                        else if ( (LA99_0==Private) && (synpred16_InternalTypesParser())) {s = 24;}

                        else if ( (LA99_0==Protected) && (synpred16_InternalTypesParser())) {s = 25;}

                        else if ( (LA99_0==Public) && (synpred16_InternalTypesParser())) {s = 26;}

                        else if ( (LA99_0==Out) && (synpred16_InternalTypesParser())) {s = 27;}

                        else if ( (LA99_0==Undefined||LA99_0==Indexed||(LA99_0>=Null && LA99_0<=This_1)||LA99_0==Void||LA99_0==Any||LA99_0==LeftCurlyBracket||LA99_0==Tilde) ) {s = 28;}

                         
                        input.seek(index99_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA99_15 = input.LA(1);

                         
                        int index99_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_15==Colon) && (synpred16_InternalTypesParser())) {s = 29;}

                        else if ( (LA99_15==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index99_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA99_17 = input.LA(1);

                         
                        int index99_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_17==Colon) && (synpred16_InternalTypesParser())) {s = 29;}

                        else if ( (LA99_17==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index99_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA99_12 = input.LA(1);

                         
                        int index99_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_12==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA99_12==Colon) && (synpred16_InternalTypesParser())) {s = 29;}

                         
                        input.seek(index99_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA99_16 = input.LA(1);

                         
                        int index99_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA99_16==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA99_16==Colon) && (synpred16_InternalTypesParser())) {s = 29;}

                         
                        input.seek(index99_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_25s = "\55\uffff";
    static final String dfa_26s = "\1\2\54\uffff";
    static final String dfa_27s = "\1\5\1\11\11\uffff\1\31\13\uffff\1\11\1\0\10\uffff\1\31\13\uffff";
    static final String dfa_28s = "\2\153\11\uffff\1\134\13\uffff\1\153\1\0\10\uffff\1\134\13\uffff";
    static final String dfa_29s = "\2\uffff\1\2\10\1\1\uffff\13\1\2\uffff\10\1\1\uffff\13\1";
    static final String dfa_30s = "\1\uffff\1\1\11\uffff\1\2\13\uffff\1\4\1\0\10\uffff\1\3\13\uffff}>";
    static final String[] dfa_31s = {
            "\1\2\1\uffff\1\2\1\uffff\30\2\1\uffff\15\2\1\uffff\20\2\1\uffff\11\2\1\uffff\12\2\3\uffff\1\2\1\1\4\2\1\uffff\2\2\1\uffff\1\2\10\uffff\1\2",
            "\1\22\1\17\7\uffff\1\10\10\uffff\1\12\26\uffff\1\21\7\uffff\1\11\1\15\1\uffff\1\16\1\6\2\uffff\1\7\4\uffff\1\4\7\uffff\1\5\15\uffff\1\3\3\uffff\1\20\2\uffff\1\14\7\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\71\uffff\1\25\1\27\1\uffff\1\23\2\uffff\1\24\1\uffff\1\30\1\26",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\50\1\45\7\uffff\1\36\10\uffff\1\40\26\uffff\1\47\7\uffff\1\37\1\43\1\uffff\1\44\1\34\2\uffff\1\35\4\uffff\1\32\7\uffff\1\33\15\uffff\1\31\3\uffff\1\46\2\uffff\1\42\7\uffff\1\41",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\71\uffff\1\53\1\27\1\uffff\1\51\2\uffff\1\52\1\uffff\1\30\1\54",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[][] dfa_31 = unpackEncodedStringArray(dfa_31s);

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = dfa_25;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "5043:3: ( ( ( LessThanSign )=>otherlv_1= LessThanSign ) ( (lv_typeArgs_2_0= ruleTypeArgument ) ) (otherlv_3= Comma ( (lv_typeArgs_4_0= ruleTypeArgument ) ) )* otherlv_5= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA107_24 = input.LA(1);

                         
                        int index107_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_InternalTypesParser()) ) {s = 40;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_24);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA107_1 = input.LA(1);

                         
                        int index107_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA107_1==QuestionMark) && (synpred17_InternalTypesParser())) {s = 3;}

                        else if ( (LA107_1==Out) && (synpred17_InternalTypesParser())) {s = 4;}

                        else if ( (LA107_1==In) && (synpred17_InternalTypesParser())) {s = 5;}

                        else if ( (LA107_1==Void) && (synpred17_InternalTypesParser())) {s = 6;}

                        else if ( (LA107_1==Any) && (synpred17_InternalTypesParser())) {s = 7;}

                        else if ( (LA107_1==Undefined) && (synpred17_InternalTypesParser())) {s = 8;}

                        else if ( (LA107_1==Null) && (synpred17_InternalTypesParser())) {s = 9;}

                        else if ( (LA107_1==Indexed) && (synpred17_InternalTypesParser())) {s = 10;}

                        else if ( (LA107_1==RULE_IDENTIFIER) ) {s = 11;}

                        else if ( (LA107_1==Tilde) && (synpred17_InternalTypesParser())) {s = 12;}

                        else if ( (LA107_1==This_1) && (synpred17_InternalTypesParser())) {s = 13;}

                        else if ( (LA107_1==Type) && (synpred17_InternalTypesParser())) {s = 14;}

                        else if ( (LA107_1==Constructor) && (synpred17_InternalTypesParser())) {s = 15;}

                        else if ( (LA107_1==LeftCurlyBracket) && (synpred17_InternalTypesParser())) {s = 16;}

                        else if ( (LA107_1==Union) && (synpred17_InternalTypesParser())) {s = 17;}

                        else if ( (LA107_1==Intersection) && (synpred17_InternalTypesParser())) {s = 18;}

                         
                        input.seek(index107_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA107_11 = input.LA(1);

                         
                        int index107_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA107_11==Solidus) && (synpred17_InternalTypesParser())) {s = 19;}

                        else if ( (LA107_11==LessThanSign) && (synpred17_InternalTypesParser())) {s = 20;}

                        else if ( (LA107_11==PlusSign) && (synpred17_InternalTypesParser())) {s = 21;}

                        else if ( (LA107_11==QuestionMark) && (synpred17_InternalTypesParser())) {s = 22;}

                        else if ( (LA107_11==Comma) ) {s = 23;}

                        else if ( (LA107_11==GreaterThanSign) ) {s = 24;}

                        else if ( (LA107_11==Extends) ) {s = 2;}

                         
                        input.seek(index107_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA107_33 = input.LA(1);

                         
                        int index107_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA107_33==Extends) ) {s = 2;}

                        else if ( (LA107_33==GreaterThanSign) ) {s = 24;}

                        else if ( (LA107_33==Comma) ) {s = 23;}

                        else if ( (LA107_33==Solidus) && (synpred17_InternalTypesParser())) {s = 41;}

                        else if ( (LA107_33==LessThanSign) && (synpred17_InternalTypesParser())) {s = 42;}

                        else if ( (LA107_33==PlusSign) && (synpred17_InternalTypesParser())) {s = 43;}

                        else if ( (LA107_33==QuestionMark) && (synpred17_InternalTypesParser())) {s = 44;}

                         
                        input.seek(index107_33);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA107_23 = input.LA(1);

                         
                        int index107_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA107_23==QuestionMark) && (synpred17_InternalTypesParser())) {s = 25;}

                        else if ( (LA107_23==Out) && (synpred17_InternalTypesParser())) {s = 26;}

                        else if ( (LA107_23==In) && (synpred17_InternalTypesParser())) {s = 27;}

                        else if ( (LA107_23==Void) && (synpred17_InternalTypesParser())) {s = 28;}

                        else if ( (LA107_23==Any) && (synpred17_InternalTypesParser())) {s = 29;}

                        else if ( (LA107_23==Undefined) && (synpred17_InternalTypesParser())) {s = 30;}

                        else if ( (LA107_23==Null) && (synpred17_InternalTypesParser())) {s = 31;}

                        else if ( (LA107_23==Indexed) && (synpred17_InternalTypesParser())) {s = 32;}

                        else if ( (LA107_23==RULE_IDENTIFIER) ) {s = 33;}

                        else if ( (LA107_23==Tilde) && (synpred17_InternalTypesParser())) {s = 34;}

                        else if ( (LA107_23==This_1) && (synpred17_InternalTypesParser())) {s = 35;}

                        else if ( (LA107_23==Type) && (synpred17_InternalTypesParser())) {s = 36;}

                        else if ( (LA107_23==Constructor) && (synpred17_InternalTypesParser())) {s = 37;}

                        else if ( (LA107_23==LeftCurlyBracket) && (synpred17_InternalTypesParser())) {s = 38;}

                        else if ( (LA107_23==Union) && (synpred17_InternalTypesParser())) {s = 39;}

                        else if ( (LA107_23==Intersection) && (synpred17_InternalTypesParser())) {s = 40;}

                         
                        input.seek(index107_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_32s = "\1\5\1\11\1\uffff\1\31\17\uffff\1\11\1\0\14\uffff\1\31\13\uffff";
    static final String dfa_33s = "\2\153\1\uffff\1\134\17\uffff\1\153\1\0\14\uffff\1\134\13\uffff";
    static final String dfa_34s = "\2\uffff\1\2\1\uffff\17\1\2\uffff\14\1\1\uffff\13\1";
    static final String dfa_35s = "\1\uffff\1\4\1\uffff\1\2\17\uffff\1\3\1\1\14\uffff\1\0\13\uffff}>";
    static final String[] dfa_36s = {
            "\1\2\1\uffff\1\2\1\uffff\22\2\1\uffff\5\2\1\uffff\15\2\1\uffff\20\2\1\uffff\11\2\1\uffff\12\2\3\uffff\1\2\1\1\3\2\2\uffff\1\2\2\uffff\1\2\10\uffff\1\2",
            "\1\22\1\17\7\uffff\1\11\10\uffff\1\13\26\uffff\1\21\7\uffff\1\12\1\15\1\uffff\1\16\1\7\2\uffff\1\10\4\uffff\1\5\7\uffff\1\6\15\uffff\1\4\3\uffff\1\20\2\uffff\1\14\7\uffff\1\3",
            "",
            "\1\2\71\uffff\1\27\1\23\1\uffff\1\25\2\uffff\1\26\1\uffff\1\24\1\30",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\50\1\45\7\uffff\1\36\10\uffff\1\40\26\uffff\1\47\7\uffff\1\37\1\43\1\uffff\1\44\1\34\2\uffff\1\35\4\uffff\1\32\7\uffff\1\33\15\uffff\1\31\3\uffff\1\46\2\uffff\1\42\7\uffff\1\41",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\71\uffff\1\53\1\23\1\uffff\1\51\2\uffff\1\52\1\uffff\1\24\1\54",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_32 = DFA.unpackEncodedStringToUnsignedChars(dfa_32s);
    static final char[] dfa_33 = DFA.unpackEncodedStringToUnsignedChars(dfa_33s);
    static final short[] dfa_34 = DFA.unpackEncodedString(dfa_34s);
    static final short[] dfa_35 = DFA.unpackEncodedString(dfa_35s);
    static final short[][] dfa_36 = unpackEncodedStringArray(dfa_36s);

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = dfa_25;
            this.eof = dfa_26;
            this.min = dfa_32;
            this.max = dfa_33;
            this.accept = dfa_34;
            this.special = dfa_35;
            this.transition = dfa_36;
        }
        public String getDescription() {
            return "5210:3: ( ( ( LessThanSign )=>otherlv_2= LessThanSign ) ( (lv_typeArgs_3_0= ruleTypeArgument ) ) (otherlv_4= Comma ( (lv_typeArgs_5_0= ruleTypeArgument ) ) )* otherlv_6= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA109_33 = input.LA(1);

                         
                        int index109_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA109_33==Extends) ) {s = 2;}

                        else if ( (LA109_33==GreaterThanSign) ) {s = 20;}

                        else if ( (LA109_33==Comma) ) {s = 19;}

                        else if ( (LA109_33==Solidus) && (synpred18_InternalTypesParser())) {s = 41;}

                        else if ( (LA109_33==LessThanSign) && (synpred18_InternalTypesParser())) {s = 42;}

                        else if ( (LA109_33==PlusSign) && (synpred18_InternalTypesParser())) {s = 43;}

                        else if ( (LA109_33==QuestionMark) && (synpred18_InternalTypesParser())) {s = 44;}

                         
                        input.seek(index109_33);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA109_20 = input.LA(1);

                         
                        int index109_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalTypesParser()) ) {s = 40;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index109_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA109_3 = input.LA(1);

                         
                        int index109_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA109_3==Extends) ) {s = 2;}

                        else if ( (LA109_3==Comma) ) {s = 19;}

                        else if ( (LA109_3==GreaterThanSign) ) {s = 20;}

                        else if ( (LA109_3==Solidus) && (synpred18_InternalTypesParser())) {s = 21;}

                        else if ( (LA109_3==LessThanSign) && (synpred18_InternalTypesParser())) {s = 22;}

                        else if ( (LA109_3==PlusSign) && (synpred18_InternalTypesParser())) {s = 23;}

                        else if ( (LA109_3==QuestionMark) && (synpred18_InternalTypesParser())) {s = 24;}

                         
                        input.seek(index109_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA109_19 = input.LA(1);

                         
                        int index109_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA109_19==QuestionMark) && (synpred18_InternalTypesParser())) {s = 25;}

                        else if ( (LA109_19==Out) && (synpred18_InternalTypesParser())) {s = 26;}

                        else if ( (LA109_19==In) && (synpred18_InternalTypesParser())) {s = 27;}

                        else if ( (LA109_19==Void) && (synpred18_InternalTypesParser())) {s = 28;}

                        else if ( (LA109_19==Any) && (synpred18_InternalTypesParser())) {s = 29;}

                        else if ( (LA109_19==Undefined) && (synpred18_InternalTypesParser())) {s = 30;}

                        else if ( (LA109_19==Null) && (synpred18_InternalTypesParser())) {s = 31;}

                        else if ( (LA109_19==Indexed) && (synpred18_InternalTypesParser())) {s = 32;}

                        else if ( (LA109_19==RULE_IDENTIFIER) ) {s = 33;}

                        else if ( (LA109_19==Tilde) && (synpred18_InternalTypesParser())) {s = 34;}

                        else if ( (LA109_19==This_1) && (synpred18_InternalTypesParser())) {s = 35;}

                        else if ( (LA109_19==Type) && (synpred18_InternalTypesParser())) {s = 36;}

                        else if ( (LA109_19==Constructor) && (synpred18_InternalTypesParser())) {s = 37;}

                        else if ( (LA109_19==LeftCurlyBracket) && (synpred18_InternalTypesParser())) {s = 38;}

                        else if ( (LA109_19==Union) && (synpred18_InternalTypesParser())) {s = 39;}

                        else if ( (LA109_19==Intersection) && (synpred18_InternalTypesParser())) {s = 40;}

                         
                        input.seek(index109_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA109_1 = input.LA(1);

                         
                        int index109_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA109_1==RULE_IDENTIFIER) ) {s = 3;}

                        else if ( (LA109_1==QuestionMark) && (synpred18_InternalTypesParser())) {s = 4;}

                        else if ( (LA109_1==Out) && (synpred18_InternalTypesParser())) {s = 5;}

                        else if ( (LA109_1==In) && (synpred18_InternalTypesParser())) {s = 6;}

                        else if ( (LA109_1==Void) && (synpred18_InternalTypesParser())) {s = 7;}

                        else if ( (LA109_1==Any) && (synpred18_InternalTypesParser())) {s = 8;}

                        else if ( (LA109_1==Undefined) && (synpred18_InternalTypesParser())) {s = 9;}

                        else if ( (LA109_1==Null) && (synpred18_InternalTypesParser())) {s = 10;}

                        else if ( (LA109_1==Indexed) && (synpred18_InternalTypesParser())) {s = 11;}

                        else if ( (LA109_1==Tilde) && (synpred18_InternalTypesParser())) {s = 12;}

                        else if ( (LA109_1==This_1) && (synpred18_InternalTypesParser())) {s = 13;}

                        else if ( (LA109_1==Type) && (synpred18_InternalTypesParser())) {s = 14;}

                        else if ( (LA109_1==Constructor) && (synpred18_InternalTypesParser())) {s = 15;}

                        else if ( (LA109_1==LeftCurlyBracket) && (synpred18_InternalTypesParser())) {s = 16;}

                        else if ( (LA109_1==Union) && (synpred18_InternalTypesParser())) {s = 17;}

                        else if ( (LA109_1==Intersection) && (synpred18_InternalTypesParser())) {s = 18;}

                         
                        input.seek(index109_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 109, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_37s = "\104\uffff";
    static final String dfa_38s = "\1\11\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_39s = "\1\153\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_40s = "\3\uffff\1\3\75\uffff\1\1\1\4\1\2";
    static final String dfa_41s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\uffff}>";
    static final String[] dfa_42s = {
            "\1\66\1\61\1\uffff\1\73\1\30\1\70\1\74\1\uffff\1\76\1\uffff\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\uffff\1\75\1\53\1\15\1\20\1\26\1\uffff\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\uffff\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\2\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\1\uffff\1\57\1\16\1\25\1\27\1\62\11\uffff\1\3\21\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final char[] dfa_38 = DFA.unpackEncodedStringToUnsignedChars(dfa_38s);
    static final char[] dfa_39 = DFA.unpackEncodedStringToUnsignedChars(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final short[] dfa_41 = DFA.unpackEncodedString(dfa_41s);
    static final short[][] dfa_42 = unpackEncodedStringArray(dfa_42s);

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = dfa_37;
            this.eof = dfa_37;
            this.min = dfa_38;
            this.max = dfa_39;
            this.accept = dfa_40;
            this.special = dfa_41;
            this.transition = dfa_42;
        }
        public String getDescription() {
            return "5355:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA113_0 = input.LA(1);

                         
                        int index113_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA113_0==Get) ) {s = 1;}

                        else if ( (LA113_0==Set) ) {s = 2;}

                        else if ( (LA113_0==LessThanSign) && (synpred21_InternalTypesParser())) {s = 3;}

                        else if ( (LA113_0==RULE_IDENTIFIER) ) {s = 4;}

                        else if ( (LA113_0==Break) ) {s = 5;}

                        else if ( (LA113_0==Case) ) {s = 6;}

                        else if ( (LA113_0==Catch) ) {s = 7;}

                        else if ( (LA113_0==Class) ) {s = 8;}

                        else if ( (LA113_0==Const) ) {s = 9;}

                        else if ( (LA113_0==Continue) ) {s = 10;}

                        else if ( (LA113_0==Debugger) ) {s = 11;}

                        else if ( (LA113_0==Default) ) {s = 12;}

                        else if ( (LA113_0==Delete) ) {s = 13;}

                        else if ( (LA113_0==Do) ) {s = 14;}

                        else if ( (LA113_0==Else) ) {s = 15;}

                        else if ( (LA113_0==Export) ) {s = 16;}

                        else if ( (LA113_0==Extends) ) {s = 17;}

                        else if ( (LA113_0==Finally) ) {s = 18;}

                        else if ( (LA113_0==For) ) {s = 19;}

                        else if ( (LA113_0==Function) ) {s = 20;}

                        else if ( (LA113_0==If) ) {s = 21;}

                        else if ( (LA113_0==Import) ) {s = 22;}

                        else if ( (LA113_0==In) ) {s = 23;}

                        else if ( (LA113_0==Instanceof) ) {s = 24;}

                        else if ( (LA113_0==New) ) {s = 25;}

                        else if ( (LA113_0==Return) ) {s = 26;}

                        else if ( (LA113_0==Super) ) {s = 27;}

                        else if ( (LA113_0==Switch) ) {s = 28;}

                        else if ( (LA113_0==This_1) ) {s = 29;}

                        else if ( (LA113_0==Throw) ) {s = 30;}

                        else if ( (LA113_0==Try) ) {s = 31;}

                        else if ( (LA113_0==Typeof) ) {s = 32;}

                        else if ( (LA113_0==Var) ) {s = 33;}

                        else if ( (LA113_0==Void) ) {s = 34;}

                        else if ( (LA113_0==While) ) {s = 35;}

                        else if ( (LA113_0==With) ) {s = 36;}

                        else if ( (LA113_0==Yield) ) {s = 37;}

                        else if ( (LA113_0==Null) ) {s = 38;}

                        else if ( (LA113_0==True) ) {s = 39;}

                        else if ( (LA113_0==False) ) {s = 40;}

                        else if ( (LA113_0==Enum) ) {s = 41;}

                        else if ( (LA113_0==Let) ) {s = 42;}

                        else if ( (LA113_0==Project) ) {s = 43;}

                        else if ( (LA113_0==External) ) {s = 44;}

                        else if ( (LA113_0==Abstract) ) {s = 45;}

                        else if ( (LA113_0==Static) ) {s = 46;}

                        else if ( (LA113_0==As) ) {s = 47;}

                        else if ( (LA113_0==From) ) {s = 48;}

                        else if ( (LA113_0==Constructor) ) {s = 49;}

                        else if ( (LA113_0==Of) ) {s = 50;}

                        else if ( (LA113_0==Target) ) {s = 51;}

                        else if ( (LA113_0==Type) ) {s = 52;}

                        else if ( (LA113_0==Union) ) {s = 53;}

                        else if ( (LA113_0==Intersection) ) {s = 54;}

                        else if ( (LA113_0==This) ) {s = 55;}

                        else if ( (LA113_0==Promisify) ) {s = 56;}

                        else if ( (LA113_0==Await) ) {s = 57;}

                        else if ( (LA113_0==Async) ) {s = 58;}

                        else if ( (LA113_0==Implements) ) {s = 59;}

                        else if ( (LA113_0==Interface) ) {s = 60;}

                        else if ( (LA113_0==Private) ) {s = 61;}

                        else if ( (LA113_0==Protected) ) {s = 62;}

                        else if ( (LA113_0==Public) ) {s = 63;}

                        else if ( (LA113_0==Out) ) {s = 64;}

                         
                        input.seek(index113_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA113_1 = input.LA(1);

                         
                        int index113_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalTypesParser()) ) {s = 65;}

                        else if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA113_2 = input.LA(1);

                         
                        int index113_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_InternalTypesParser()) ) {s = 67;}

                        else if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA113_4 = input.LA(1);

                         
                        int index113_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA113_5 = input.LA(1);

                         
                        int index113_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA113_6 = input.LA(1);

                         
                        int index113_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA113_7 = input.LA(1);

                         
                        int index113_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA113_8 = input.LA(1);

                         
                        int index113_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA113_9 = input.LA(1);

                         
                        int index113_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA113_10 = input.LA(1);

                         
                        int index113_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA113_11 = input.LA(1);

                         
                        int index113_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA113_12 = input.LA(1);

                         
                        int index113_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA113_13 = input.LA(1);

                         
                        int index113_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA113_14 = input.LA(1);

                         
                        int index113_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA113_15 = input.LA(1);

                         
                        int index113_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA113_16 = input.LA(1);

                         
                        int index113_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA113_17 = input.LA(1);

                         
                        int index113_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA113_18 = input.LA(1);

                         
                        int index113_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA113_19 = input.LA(1);

                         
                        int index113_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA113_20 = input.LA(1);

                         
                        int index113_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA113_21 = input.LA(1);

                         
                        int index113_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA113_22 = input.LA(1);

                         
                        int index113_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA113_23 = input.LA(1);

                         
                        int index113_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA113_24 = input.LA(1);

                         
                        int index113_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA113_25 = input.LA(1);

                         
                        int index113_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA113_26 = input.LA(1);

                         
                        int index113_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA113_27 = input.LA(1);

                         
                        int index113_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA113_28 = input.LA(1);

                         
                        int index113_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA113_29 = input.LA(1);

                         
                        int index113_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA113_30 = input.LA(1);

                         
                        int index113_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA113_31 = input.LA(1);

                         
                        int index113_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA113_32 = input.LA(1);

                         
                        int index113_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA113_33 = input.LA(1);

                         
                        int index113_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA113_34 = input.LA(1);

                         
                        int index113_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA113_35 = input.LA(1);

                         
                        int index113_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA113_36 = input.LA(1);

                         
                        int index113_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA113_37 = input.LA(1);

                         
                        int index113_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA113_38 = input.LA(1);

                         
                        int index113_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA113_39 = input.LA(1);

                         
                        int index113_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA113_40 = input.LA(1);

                         
                        int index113_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA113_41 = input.LA(1);

                         
                        int index113_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA113_42 = input.LA(1);

                         
                        int index113_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA113_43 = input.LA(1);

                         
                        int index113_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA113_44 = input.LA(1);

                         
                        int index113_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA113_45 = input.LA(1);

                         
                        int index113_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA113_46 = input.LA(1);

                         
                        int index113_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA113_47 = input.LA(1);

                         
                        int index113_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA113_48 = input.LA(1);

                         
                        int index113_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA113_49 = input.LA(1);

                         
                        int index113_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA113_50 = input.LA(1);

                         
                        int index113_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA113_51 = input.LA(1);

                         
                        int index113_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA113_52 = input.LA(1);

                         
                        int index113_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA113_53 = input.LA(1);

                         
                        int index113_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA113_54 = input.LA(1);

                         
                        int index113_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA113_55 = input.LA(1);

                         
                        int index113_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA113_56 = input.LA(1);

                         
                        int index113_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA113_57 = input.LA(1);

                         
                        int index113_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA113_58 = input.LA(1);

                         
                        int index113_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA113_59 = input.LA(1);

                         
                        int index113_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA113_60 = input.LA(1);

                         
                        int index113_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA113_61 = input.LA(1);

                         
                        int index113_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA113_62 = input.LA(1);

                         
                        int index113_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA113_63 = input.LA(1);

                         
                        int index113_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA113_64 = input.LA(1);

                         
                        int index113_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalTypesParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index113_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x4400000420050882L,0x0000080000000002L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x6C04000008040600L,0x0000082900040002L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000000000000L,0x0000000000140000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x6C04000008040600L,0x0000082900000002L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x62340356304FDF10L,0x00000800000088DAL});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000008000000L,0x0000000102000000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000008000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x4400000008040000L,0x0000080000000002L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000110L,0x0000000400000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000010L,0x0000000400000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0xFFFF7FFFF7FFFF10L,0x000008200000FBFEL});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0xFFFF7FFFF7FFFF10L,0x000008000000FBFEL});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000800200000040L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000800200000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x000000000A000000L,0x0000000122000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000000000L,0x0000000008100000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x000000000A000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000008000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x00000004300200A0L,0x0000000400020000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x00000004300200A0L,0x0000000400000000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000900000080040L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000900000080000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000900000000000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x62340356304FDF10L,0x00000808000088DAL});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000002001000L,0x0000000122000000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0000080000004040L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000002001000L,0x0000000120000000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000001000L,0x0000000120000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000000L,0x0000000120100000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000008040L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000002000000L,0x0000000122000000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000002000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x62340356304FDF10L,0x00000800000488DBL});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x62340356304FDF10L,0x00000800000088DBL});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000002L,0x0000000001800000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0xFFFF7FFFF7FFFF10L,0x000008004200FBFEL});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0xFFFFFFFFF7FFFF10L,0x000008004200FBFEL});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000000000L,0x0000000010800000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000001000080000L,0x0000000000000008L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000000L,0x0000000010020000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000001000080000L,0x0000000000000080L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000800040L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x62340356304FDF10L,0x00000800020088DAL});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0100000000000040L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000000L,0x0000000400100000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x6C04000008040600L,0x0000082940020002L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x6E340356384FDF10L,0x00000829000488DBL});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000800000L,0x0000000020000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x6C04000008040600L,0x0000082940000002L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0000000002020000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000000400800000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x6E340356384FDF10L,0x00000829000088DBL});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x6E340356384FDF10L,0x00000829000088DAL});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x4400000008040002L,0x0000080000000002L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x6C04000008040600L,0x0000082910004042L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x8000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0xFFFF7FFFF7FFFF10L,0x000008040200FBFEL});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0xFFFF7FFFF7FFFF10L,0x000008040310FBFEL});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000000002L,0x0000000010800000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000002L,0x0000010800000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x4C00000008040000L,0x0000080010000002L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0001000002000002L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000002000002L});

}
