/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
module org.eclipse.n4js.common.unicode.GenerateUnicode

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".." // in the build this variable is configured externally, see 'plugins/pom.xml'
var runtimeProjectName = "org.eclipse.n4js.common.unicode"

/**
 * A minimal workflow that only generates the components which are referenced
 * by the components of child grammars.
 *
 * The unicode terminal grammar is used by other grammars. Their code will
 * try to find the parse tree constructor of the super grammar thus we need
 * both the grammar access and the parse tree constructor for the unicode grammar.
 */
Workflow {
	component = XtextGenerator {
		configuration = DefaultGeneratorModule {
			project = StandardProjectConfig {
				baseName = runtimeProjectName
				rootPath = rootPath
			}
			code = {
				encoding = "UTF-8"
				// same as org.eclipse.n4js.releng.utils.license.LicenseTemplate.COPYRIGHT_HEADER
				// should re-use in the long run
				fileHeader = "/**\n * Copyright (c) 2017 NumberFour AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   NumberFour AG - Initial API and implementation\n */"
				lineDelimiter = '\n'
				preferXtendStubs = true
			}
		}

		language = XtextGeneratorLanguage {
			name = "org.eclipse.n4js.common.unicode.Unicode"
			grammarUri = "platform:/resource/${runtimeProjectName}/grammar-gen/org/eclipse/n4js/common/unicode/Unicode.xtext"
			generateXtendStubs = false

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 {}

			fragment = serializer.SerializerFragment2{
				generateStub = false
			}
		}
	}
}
