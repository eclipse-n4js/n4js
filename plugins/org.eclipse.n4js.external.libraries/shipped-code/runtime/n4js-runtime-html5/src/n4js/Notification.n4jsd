/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@@Global @@ProvidedByRuntime

export external public class Notification implements EventTarget {
    public constructor(title: string, options: NotificationOptions=);

    @Override
    public <EventT extends Event> addEventListener(type: string, listener: {function(EventT): void}, useCapture: boolean=): void;
    @Override
    public <EventT extends Event> removeEventListener(type: string, listener: {function(EventT): void}, useCapture: boolean=): void;

    public static get permission(): NotificationPermission;
    public static requestPermission(): Promise<NotificationPermission, any>;

    public static get maxActions(): int;

    public onclick: {function(Event): void};
    public onerror: {function(Event): void};

    @Final
    public title: string;

    @Final
    public dir: NotificationDirection;

    @Final
    public lang: string;

    @Final
    public body: string;

    @Final
    public tag: string;

    @Final
    public image: string;

    @Final
    public icon: string;

    @Final
    public badge: string;

    @Final
    public sound: string;

    @Final
    public vibrate: Array<int>;

    @Final
    public timestamp: int;

    @Final
    public renotify: boolean;

    @Final
    public silent: boolean;

    @Final
    public requireInteraction: boolean;

    @Final
    public data: any;

    @Final
    public actions: Array<NotificationAction>;

    public close(): void;
}

export external public interface ~NotificationOptions {
    public dir?: NotificationDirection;
    public lang?: string;
    public body?: string;
    public tag?: string;
    public image?: string;
    public icon?: string;
    public badge?: string;
    public sound?: string;
    public vibrate?: Array<int>;
    public timestamp?: int;
    public renotify?: boolean;
    public silent?: boolean;
    public requireInteraction?: boolean;
    public data?: any;
    public actions?: Array<NotificationAction>;
}

export @StringBased external public enum NotificationPermission {
    Default: "default",
    denied,
    granted
}

export @StringBased external public enum NotificationDirection {
    auto,
    ltr,
    rtl
}

export external public interface ~NotificationAction {
    public action: string;
    public title: string;
    public icon?: string;
}
 