/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@@Global @@ProvidedByRuntime

/**
 * MutationObserver provides developers a way to react to changes in a DOM. 
 * It is designed as a replacement for Mutation Events defined in the DOM3 Events specification.
 * 
 * see https://dom.spec.whatwg.org/#mutation-observers
 */
export external public class MutationObserver {
    public constructor(callback: {function(Array<MutationRecord>, instance:MutationObserver /*this*/)});
    public observe(target:Node, options: MutationObserverInit=): void;
    public disconnect(): void;
    public takeRecords(): Array<MutationRecord>
}

/**
 * see https://dom.spec.whatwg.org/#dictdef-mutationobserverinit
 */
export external public interface ~MutationObserverInit {
  public childList?: boolean;
  public attributes?: boolean;
  public characterData?: boolean;
  public subtree?: boolean;
  public attributeOldValue?: boolean;
  public characterDataOldValue?: boolean;
  public attributeFilter?: Array<string>;
}

/**
 * see https://dom.spec.whatwg.org/#mutationrecord
 */
export external public interface ~MutationRecord {
  public get type(): string;
  public get target(): Node;
  public get addedNodes(): NodeList<Node>;
  public get removedNodes(): NodeList<Node>;
  public previousSibling?: Node;
  public nextSibling?: Node;
  public attributeName?: string;
  public attributeNamespace?: string;
  public oldValue?: string;
};
