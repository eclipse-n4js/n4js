{
  "browser" : {
    "when" : "./dist/browser/when.js",
    "vertx" : false
  },
  "bugs" : {
    "url" : "https://github.com/cujojs/when/issues"
  },
  "contributors" : [ {
    "name" : "Brian Cavalier",
    "url" : "http://hovercraftstudios.com"
  }, {
    "name" : "John Hann",
    "url" : "http://unscriptable.com"
  }, {
    "name" : "Scott Andrews"
  } ],
  "dependencies" : { },
  "description" : "A lightweight Promises/A+ and when() implementation, plus other async goodies.",
  "devDependencies" : {
    "benchmark" : "~1",
    "browserify" : "~2",
    "buster" : "~0.7",
    "exorcist" : "~0.4",
    "jshint" : "~2",
    "json5" : "~0.2",
    "microtime" : "~0",
    "optimist" : "~0.6",
    "poly" : "^0.6.1",
    "promises-aplus-tests" : "~2",
    "rest" : "1.1.x",
    "sauce-connect-launcher" : "~0.4",
    "uglify-js" : "~2",
    "wd" : "~0.2"
  },
  "directories" : {
    "test" : "test"
  },
  "ender" : {
    "files" : [ "*.js", "lib/*.js", "node/*.js", "unfold/*.js", "monitor/*.js", "lib/decorators/*.js" ]
  },
  "homepage" : "http://cujojs.com",
  "keywords" : [ "cujo", "Promises/A+", "promises-aplus", "promise", "promises", "deferred", "deferreds", "when", "async", "asynchronous", "ender" ],
  "license" : "MIT",
  "main" : "when.js",
  "maintainers" : [ {
    "name" : "Brian Cavalier",
    "url" : "http://hovercraftstudios.com"
  }, {
    "name" : "John Hann",
    "url" : "http://unscriptable.com"
  } ],
  "name" : "when",
  "optionalDependencies" : { },
  "readme" : "<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://travis-ci.org/cujojs/when.svg?branch=master)](https://travis-ci.org/cujojs/when)\n[![Inline docs](http://inch-ci.org/github/cujojs/when.svg?branch=master)](http://inch-ci.org/github/cujojs/when)\n\nwhen.js\n=======\n\nWhen.js is a rock solid, battle-tested [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation, including a complete [ES6 Promise shim](docs/es6-promise-shim.md).  It's a powerful combination of small size, high performance, debuggability, and rich features:\n\n* Resolve arrays and hashes of promises, as well as infinite promise sequences\n* Execute tasks in parallel or sequentially\n* Transform Node-style and other callback-based APIs into promise-based APIs\n\nWhen.js is one of the many stand-alone components of [cujoJS](http://cujojs.com), the JavaScript Architectural Toolkit. \n\nCheck it out:\n\n- [What's new](CHANGES.md)\n- [API docs](docs/api.md#api)\n- Read more about how [promises simplify async programming](http://know.cujojs.com/tutorials/async/simplifying-async-with-promises)\n\nInstallation\n------------\n\n#### AMD\n\nAvailable as `when` through [bower](http://bower.io), or just clone the repo and load `when.js` from the root.\n\n```\nbower install --save when\n```\n\n#### CommonJS/Node\n\n```\nnpm install --save when\n```\n\n[More help & other environments &raquo;](docs/installation.md)\n\nUsage\n-----\n\nPromises can be used to help manage complex and/or nested callback flows in a simple manner. To get a better handle on how promise flows look and how they can be helpful, there are a couple examples below (using commonjs).\n\nThis first example will print `\"hello world!!!!\"` if all went well, or `\"drat!\"` if there was a problem. It also uses [rest](https://github.com/cujojs/rest) to make an ajax request to a (fictional) external service.\n\n```js\nvar rest = require('rest');\n\nfetchRemoteGreeting()\n    .then(addExclamation)\n    .catch(handleError)\n    .done(function(greeting) {\n        console.log(greeting);\n    });\n\nfunction fetchRemoteGreeting() {\n    // returns a when.js promise for 'hello world'\n    return rest('http://example.com/greeting');\n}\n\nfunction addExclamation(greeting) {\n    return greeting + '!!!!'\n}\n\nfunction handleError(e) {\n    return 'drat!';\n}\n```\n\nThe second example shows off the power that comes with when's promise logic. Here, we get an array of numbers from a remote source and reduce them. The example will print `150` if all went well, and if there was a problem will print a full stack trace.\n\n```js\nvar when = require('when');\nvar rest = require('rest');\n\nwhen.reduce(when.map(getRemoteNumberList(), times10), sum)\n    .done(function(result) {\n        console.log(result);\n    });\n\nfunction getRemoteNumberList() {\n    // Get a remote array [1, 2, 3, 4, 5]\n    return rest('http://example.com/numbers').then(JSON.parse);\n}\n\nfunction sum(x, y) { return x + y; }\nfunction times10(x) {return x * 10; }\n```\n\nLicense\n-------\n\nLicensed under MIT. [Full license here &raquo;](LICENSE.txt)\n\nContributing\n------------\n\nPlease see the [contributing guide](CONTRIBUTING.md) for more information on running tests, opening issues, and contributing code to the project.\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n",
  "readmeFilename" : "README.md",
  "repository" : {
    "type" : "git",
    "url" : "git+https://github.com/cujojs/when.git"
  },
  "scripts" : {
    "benchmark" : "node benchmark/promise && node benchmark/map",
    "browser-test" : "npm run build-browser-test && buster-static -e browser -p 8080",
    "browserify" : "npm run browserify-es6 && npm run browserify-when && npm run browserify-debug",
    "browserify-debug" : "mkdir -p dist/browser && browserify -s when build/when.browserify-debug.js --no-detect-globals --debug | exorcist -b . -r https://raw.githubusercontent.com/cujojs/when/`git rev-parse HEAD` dist/browser/when.debug.js.map >dist/browser/when.debug.js",
    "browserify-es6" : "browserify -s Promise es6-shim/Promise.browserify-es6.js --no-detect-globals --debug | exorcist -b . -r https://raw.githubusercontent.com/cujojs/when/`git rev-parse HEAD` es6-shim/Promise.js.map >es6-shim/Promise.js",
    "browserify-when" : "mkdir -p dist/browser && browserify -s when build/when.browserify.js --no-detect-globals --debug | exorcist -b . -r https://raw.githubusercontent.com/cujojs/when/`git rev-parse HEAD` dist/browser/when.js.map >dist/browser/when.js",
    "build-browser-test" : "browserify ./node_modules/poly/es5.js -o test/browser/es5.js && browserify ./test/*-test.js ./test/**/*-test.js -o test/browser/tests.js -x buster ",
    "ci" : "npm test && node test/sauce.js",
    "prepublish" : "npm run browserify && npm run uglify",
    "preversion" : "npm run browserify && npm run uglify",
    "start" : "buster-static -e browser",
    "test" : "jshint . && buster-test -e node && promises-aplus-tests test/promises-aplus-adapter.js",
    "tunnel" : "node test/sauce.js -m",
    "uglify" : "npm run uglify-es6 && npm run uglify-when",
    "uglify-es6" : "cd es6-shim; uglifyjs Promise.js --compress --mangle  --in-source-map Promise.js.map --source-map Promise.min.js.map -o Promise.min.js; cd ../..",
    "uglify-when" : "cd dist/browser; uglifyjs when.js --compress --mangle  --in-source-map when.js.map --source-map when.min.js.map -o when.min.js; cd ../.."
  },
  "version" : "3.7.7"
}
