/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/**
 * Options used do define collator format.
 * 
 * @see https://www.ecma-international.org/ecma-402/4.0/index.html#sec-initializecollator
 */ 
export public interface ~CollatorOptions {
	/**
	 * IETF BCP 47 language tag
	 */
	public locale?: string;
	/**
	 * 'lookup', 'best fit'; default 'best fit'
	 */
	public localeMatcher?: string
	/**
	 * 'sort', 'sort'; default: 'sort'
	 */
	public usage?: string;
	/**
	 * 'base', 'accent', 'case', 'variant', default: undefined 
	 */
	public sensitivity?: string;
	/**
	 * default false
	 */
	public ignorePunctuation?: boolean;
	/**
	 * 
	 */
	public numeric?: boolean;
	/**
	 * 'upper', 'lower', 'false'
	 */
	public caseFirst?: string;
	/**
	 * 'default'
	 */
	public collation?: string;
}

@CovariantConstructor
export public interface ~Collator {
	/** 
	 * Creates a collator for given locale(s) and with given options.
	 *
	 * @param locales: IETF BCP 47 language tag(s)
	 * @param options: object literal with formatting options 
	 */
	public constructor(locales: string | [string]=, options: ~r~CollatorOptions=)

//	/**
//	 * Returns list of supported locales. Locales not included in that list are
//	 * supported by default behavior.
//	 *
//	 * @param locales: IETF BCP 47 language tag(s)
//	 * @param options: locale matcher algorithm: 'lookup', 'best fit' (default)
//	 */
//	public static supportedLocalesOf(locales: string | [string]=, options: ~Object with {localeMatcher: string}=)

	/**
	 * Returns a function comparing two string based on collator options 
	 * defined at construction.
	 *
	 * The returned value is less 0 if s1<s2, 0 if s1==0 and greater 0 if s1>s2.    
	 */
	public get compare(): (s1: string, s2: string)=>number

	/** 
	 * Returns a fully initialized object literal with the options of this collator. 
	 */
	public resolvedOptions(): CollatorOptions
}

/**
 * Options used do define number format.
 * 
 * @see https://www.ecma-international.org/ecma-402/4.0/index.html#sec-initializenumberformat
 */
export public interface ~NumberFormatOptions {
	/**
	 * IETF BCP 47 language tag
	 */
	public locale?: string;
	/**
	 * 'lookup', 'best fit'; default 'best fit'
	 */
	public localeMatcher?: string
	/**
	 * One of 
	 * 'arab', 'arabext', 'bali', 'beng', 'deva', 'fullwide', 'gujr', 'guru', 'hanidec', 'khmr', 
	 * 'knda', 'laoo', 'latn', 'limb', 'mlym', 'mong', 'mymr', 'orya', 'tamldec', 'telu', 'thai', 
	 * 'tibt'
	 */
	public numberingSystem?: string;
	/**
	 * 'decimal', 'percent', 'currency'; default 'decimal'
	 */
	public style?: string;
	public useGrouping?: boolean;
	/**
	 * 1..21
	 */
	public minimumIntegerDigits?: int;
	/**
	 * 0..20
	 */
	public minimumFractionDigits?: int;
	/**
	 * minimumFractionDigits..20
	 */
	public maximumFractionDigits?: int ;
	/**
	 * 1..21
	 */
	public minimumSignificantDigits?: int;
	/**
	 * minimumSignificantDigits..21
	 */
	public maximumSignificantDigits?: int;
	/**
	 * ISO 4217 3-letter currency code. Required if style is set to 'currency'.
	 */
	public currency?: string
	/**
	 * 'symbol', 'code', 'name'; default: 'symbol'
	 */
	public currencyDisplay?: string
}

@CovariantConstructor
export public interface ~NumberFormat {
	/**
	 * Creates a number format for given locale(s) and with given options.
	 *
	 * @param locales: IETF BCP 47 language tag
	 * @param options: object literal with formatting options
	 */
	public constructor(locales: string | [string]=, options: ~r~NumberFormatOptions=)
//	public static supportedLocalesOf(locales: string | [string]=, options: ~r~NumberFormatOptions=)
	/**
	 * Returns a function formatting a number to a string with the formatting options specified at construction.
	 */
	public get format(): (number=)=>string
	/** 
	 * Returns a fully initialized object literal with the options of this formatter. 
	 */
	public resolvedOptions(): ~NumberFormatOptions
}

/**
 * Options used do define date time format.
 * 
 * @see https://www.ecma-international.org/ecma-402/4.0/index.html#sec-initializedatetimeformat
 */
export public interface ~DateTimeFormatOptions {
	/**
	 * IETF BCP 47 language tag
	 */
	public locale?: string;
	/**
	 * 'lookup', 'best fit'; default 'best fit'
	 */
	public localeMatcher?: string
	/**
	 * 'latn'
	 */
	public numberingSystem?: string;
	/**
	 * Calendar name described in Unicode Technical Standard 35, or other depending on implementation.
	 * 
	 * 'buddhist', 'chinese', 'coptic', 'dangi', 'ethioaa', 'ethiopic', 'gregory', 'hebrew', 'indian', 
	 * 'islamic', 'islamic-umalqura', 'islamic-tbla', 'islamic-civil', 'islamic-rgsa', 'iso8601', 
	 * 'japanese', 'persian', 'roc', 'islamicc'
	 * 
	 * @see http://www.unicode.org/repos/cldr/tags/latest/common/bcp47/calendar.xml
	 */
	public calendar?: string;
	/**
	 * IANA Time Zone
	 */
	public timeZone?: string;
	/**
	 * 'basic', 'best fit', default: 'best fit' 
	 */
	public formatMatcher?: string;

	/**
	 * 'narrow', 'short', 'long'; default: undefined
	 */
	public weekday?: string;
	/**
	 * 'narrow', 'short', 'long'; default: undefined
	 */
	public era?: string;
	/**
	 * 'numeric', '2-digit'; default: 'numeric'
	 */
	public year?: string;
	/**
	 * 'numeric', '2-digit', 'narrow', 'short', 'long'; default: 'numeric'
	 */
	public month?: string;
	/**
	 * 'numeric', '2-digit'; default: 'numeric'
	 */
	public day?: string;
	/**
	 * 'numeric', '2-digit'; default: undefined
	 */
	public hour?: string;
	/**
	 * 'numeric', '2-digit'; default: undefined
	 */
	public minute?: string;
	/**
	 * 'numeric', '2-digit'; default: undefined
	 */
	public second?: string;

	/**
	 * 'short', 'long'; default: undefined
	 */
	public timeZoneName?: string;

	/**
	 * default: undefined (i.e. default is locale dependent)
	 */
	public hour12?: boolean;
}

/**
 * Formats date and time objects. Defined in ECMA-402 (Internationalization API).
 *
 * @see https://www.ecma-international.org/ecma-402/4.0/index.html#datetimeformat-objects
 */
@CovariantConstructor
export public interface ~DateTimeFormat {
	/**
	 * Creates a date time format for given locale(s) and with given options.
	 *
	 * @param locales: IETF BCP 47 language tag
	 * @param options: object literal with formatting options
	 */
	public constructor(locales: string | [string]=, options: ~r~DateTimeFormatOptions=)
//	/**
//	 * @param locales: IETF BCP 47 language tag
//	 * @param options: object literal with formatting options
//	 */
//	public static supportedLocalesOf(locales: string | [string]=, options: ~r~DateTimeFormatOptions=)
	/**
	 * Formats given date (or today if omitted) according to formatting options.
	 */
	public get format(): (Date=)=>string
	/**
	 * Returns formatted parts of given date or today if omitted) according to formatting options.
	 */
	public formatToParts(date: Date=): [string]
	/** 
	 * Returns a fully initialized object literal with the options of this formatter. 
	 */
	public resolvedOptions(): DateTimeFormatOptions
}
