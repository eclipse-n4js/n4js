/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
export @StringBased public enum TestStatus {
    passed: "PASSED"
    , skipped: "SKIPPED"
    , failed: "FAILED"
    , error: "ERROR"
    , skipped_precondition: "SKIPPED_PRECONDITION"
    , skipped_not_implemented: "SKIPPED_NOT_IMPLEMENTED"
    , skipped_ignore: "SKIPPED_IGNORE"
    , skipped_fixme: "SKIPPED_FIXME"      
}
let testStatusIntMap = new Map<TestStatus, int>([
    [TestStatus.passed, 0]
  , [TestStatus.skipped_precondition, 1]
  , [TestStatus.skipped_ignore, 2]
  , [TestStatus.skipped, 3]
  , [TestStatus.skipped_not_implemented, 4]
  , [TestStatus.skipped_fixme, 5]
  , [TestStatus.failed, 6]
  , [TestStatus.error, 7]

] as Iterable<Iterable2<TestStatus,int>>);

export function aggregateTestStatuses(testStatus1: TestStatus, testStatus2: TestStatus): TestStatus {
    return testStatusIntMap.get(testStatus1) > testStatusIntMap.get(testStatus2) ? testStatus1 : testStatus2;
}