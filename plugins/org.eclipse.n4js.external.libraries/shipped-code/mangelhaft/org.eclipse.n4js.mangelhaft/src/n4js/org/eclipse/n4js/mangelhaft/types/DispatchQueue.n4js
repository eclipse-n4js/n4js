/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/**
 * A queue of listeners, ordered by priority and, in case of equal priority, time of
 * insertion into the queue. The queue is implemented as a max heap using an array.
 */
export public class DispatchQueue<TListener extends Function> {
   
    protected listeners: Array<ListenerDS<TListener>>;
    protected lastIndex: int = 0;
    protected lastInsertionOrder: int = 0;
    private shouldHalt: boolean = false;
    private isDispatching: boolean = false;
    
    public constructor() {
        this.listeners = [null];
    }
    
    /**
     * Tells if given listener / context is contained in this queue.
     */
    public has(listener: TListener, context: any): boolean {
        for (var i = 1; i <= this.lastIndex;  i++) {
            if ((this.listeners[i].listener == listener) && (this.listeners[i].context == context)) {
                return true;
            }
        }
        return false;
    }
    
    public isEmpty(): boolean {
        return (this.lastIndex < 1);
    }

    /**
     * Add given listener to this queue. When the listener will be invoked, the given context will be used as "this" argument.
     * Listeners are invoked in order of the priority given (highest priority first), in case of equal priority in the
     * order they were added to the queue.
     */
    public add(listener: TListener, listenerContext: Object=, priority: number=0) {
        this.addListener(listener, listenerContext, priority, false);
    }

    /**
     * Add given listener to this queue and mark it for removal from this queue after its first invocation.
     * Hence, the given listener will be invoked only once.
     */
    public addOnce(listener: TListener, listenerContext: Object=, priority: number=) {
        this.addListener(listener, listenerContext, priority, true);
    }
    
    /**
     * Remove given listener from this queue.
     */
    public remove(listener: TListener, context: Object=) {
        // Search the listener in the array
        var listenerIdx = this.listeners.findIndex((elem, index, array) => 
                { return ((elem !== null) && (elem.listener === listener) && (elem.context === context)); }
        );
        if (listenerIdx >= 0) {
            this.removeListenerAt(listenerIdx);
         }
    }
    
    /**
     * Remove all listeners
     */
    public removeAll(): this {
        while (this.listeners.length > 1) {
            this.listeners.pop();
        }
        this.lastIndex = 0;
        this.lastInsertionOrder = 0;
        return this;
    }

    public getNumListeners() {
        return this.lastIndex;
    }

    /**
     * May be invoked during listener invocation (i.e. from within the listeners) to abort
     * invocation of any following listeners. Has an effect only for the current invocation
     * of method dispatch.
     */
    public halt(): this {
        this.shouldHalt = true;
        return this;
    }

    /**
     * Dispatch an event to all listeners contained in this queue in order of priority (highest
     * priority first), in case of equal priority in the order they were added to the queue.
     * The given parameters will be passed to the listeners.
     */
    public async dispatch(params: Array<?>) {
        this.isDispatching = true;
        var listeners = this.getListOfListeners();
        for (var i = 0; i < listeners.length;  i++) {
            var current = listeners[i];
            if (!this.shouldHalt) {
                await Promise.resolve(current.listener.apply(current.listenerContext, params));
                // If the listener should be applied only once, remove it
                if (current.applyOnlyOnce) {
                    this.remove(current.listener, current.listenerContext);
                }
            }
        }
        this.isDispatching = false;
        this.shouldHalt = false;
    }
    
    public getListOfListeners(): Array<~Object with {listener: TListener, listenerContext: Object, priority: int, insertionOrder: int, applyOnlyOnce: boolean}> {
        var oldListeners = this.listeners.slice();
        var oldLastIndex = this.lastIndex;
        var oldLastInsertionOrder = this.lastInsertionOrder;
        
        var result = new Array<~Object with {listener: TListener, listenerContext: Object, priority: int, insertionOrder: int, applyOnlyOnce: boolean}>();
        for (var i = 1; i <= oldLastIndex;  i++) {
            var current = this.removeListenerWithHighestPriority();
            result.push({listener: current.listener, listenerContext: current.context, 
                priority: current.priority, insertionOrder: current.insertionOrder, applyOnlyOnce: current.applyOnlyOnce
            });
        }
        
        //Restore original list
        this.lastIndex = oldLastIndex;
        this.lastInsertionOrder = oldLastInsertionOrder;
        while (this.listeners.length > 1) {
            this.listeners.pop();
        }
        for (i = 1; i <= this.lastIndex ; i++) {
            this.listeners.push(oldListeners[i]);
        }
        return result;
    }

    public dispose() {
        while (this.listeners.length) {
            this.listeners.pop();
        }             
        this.listeners = undefined;
        this.lastIndex = 0;
        this.lastInsertionOrder = 0;
    }

    @Override public toString(): string {
        return this.getListOfListeners().toString();
    }
    
    private addListener(listener: TListener, listenerContext: Object, priority: number, applyOnlyOnce: boolean) {
        if (this.isDispatching) {
            throw "Adding a listener while dispatching is forbidden."
        }
        this.lastInsertionOrder++;
        this.lastIndex++;
        // At new element to the rightmost position
        this.listeners.push(new ListenerDS<TListener>(
            {
                listener: listener, 
                context: listenerContext, 
                priority: priority, 
                applyOnlyOnce: applyOnlyOnce, 
                insertionOrder: 
                this.lastInsertionOrder
            }));
        // Maintain heap's order property by shifting up this new element up the tree if needed.
        this.shiftUp(this.lastIndex);
    }
    
    private removeListenerAt(index: int): ListenerDS<TListener>  {
        var listenerToBeRemoved = this.listeners[index];
        // Replace the current node with the farmost node
        this.listeners[index] = this.listeners[this.lastIndex];
        
        // Restore heap order if needed
        var parentIndex = Math.floor(index / 2);
        if ((parentIndex >= 1) && (this.listeners[index].compare(this.listeners[parentIndex]) > 0)) {
            // Current node has higher priority than its parent, shift it up the tree
            this.shiftUp(index);
        } else {
            this.shiftDown(index);
        }
        
        this.listeners.pop();
        this.lastIndex--;
  
        return listenerToBeRemoved;
    }
    
    private removeListenerWithHighestPriority(): ListenerDS<TListener>{
        if (this.isEmpty()) {
            return null;
        }
        return this.removeListenerAt(1);
    }
    
    private shiftDown(index: int) {
        if (index >= this.lastIndex) {
            // We are already at the bottom
            return;
        }
        
        //Swap this node with its largest child
        var nextIndex = index;        
        var leftChildIndex = 2*index;
        var rightChildIndex = 2*index + 1;
        
        if ((leftChildIndex < this.lastIndex) && (this.listeners[index].compare(this.listeners[leftChildIndex]) < 0)) {
            // Current index has lower priority than the left child
            index = leftChildIndex;
        }
        
        if ((rightChildIndex < this.lastIndex) && (this.listeners[index].compare(this.listeners[rightChildIndex]) < 0)) {
            // Current index has lower priority than the right child
            index = rightChildIndex;
        }
        
        if (nextIndex != index) {
            this.swap(index, nextIndex);
            this.shiftDown(nextIndex);
        }
    }
    
    private swap(index1: int, index2: int) {
        var tmp = this.listeners[index1];
        this.listeners[index1] = this.listeners[index2];
        this.listeners[index2] = tmp;
    }
    
    private shiftUp(index: int) {
        if (index <= 1) {
            // we already reach the root
            return;
        }
        
        var parentIndex = Math.floor(index / 2);
        if (this.listeners[index].compare(this.listeners[parentIndex]) > 0) {
            // Current node has higher priority than its parent, swap it with the parent
            this.swap(index, parentIndex);
            // Keep going up
            this.shiftUp(parentIndex);
        }
    }
}

class ListenerDS<TListener extends Function> {
    public listener: TListener;
    public context: Object;
    public priority: int;
    public applyOnlyOnce: boolean;
    public insertionOrder: int;
    
    public constructor(@Spec spec: ~i~this) {}
    
    public compare(otherListener: ListenerDS<TListener>): int {
        if (this.priority == otherListener.priority) {
            if (this.insertionOrder < otherListener.insertionOrder) {
                return 1;
            } else {
                return -1;
            }
        } else if (this.priority > otherListener.priority) {
            return 1;
        } else {
            return -1;
        }
    }
}
