/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import {InstrumentedTest} from "org/eclipse/n4js/mangelhaft/InstrumentedTest"
import {TestExecutor} from "org/eclipse/n4js/mangelhaft/TestExecutor"
import { IInstrumentedTest } from "org/eclipse/n4js/mangelhaft/types/IInstrumentedTest"
import {ITestReporter} from "org/eclipse/n4js/mangelhaft/types/ITestReporter"
import {ResultGroup} from "org/eclipse/n4js/mangelhaft/types/ResultGroup"
import {ResultGroups} from "org/eclipse/n4js/mangelhaft/types/ResultGroups"
import {TestFunctionType} from "org/eclipse/n4js/mangelhaft/types/TestFunctionType"
import {TestInfo} from "org/eclipse/n4js/mangelhaft/types/TestInfo"
import {TestInfos} from "org/eclipse/n4js/mangelhaft/types/TestInfos"
import {TestMethodDescriptor} from "org/eclipse/n4js/mangelhaft/types/TestMethodDescriptor"
import {TestResult} from "org/eclipse/n4js/mangelhaft/types/TestResult"
import {TestSpy} from "org/eclipse/n4js/mangelhaft/types/TestSpy"
import {PreconditionNotMet} from "org/eclipse/n4js/mangelhaft/precondition/PreconditionNotMet"
import {N4Injector} from "n4js/lang/N4Injector"


export public class TestController {
    static MAX_GROUPS_PER_TEST_BATCH = 10;
    @Inject
    private spy: TestSpy;
    @Inject
    private executor: TestExecutor;
    @Inject
    private injector: N4Injector;
    private reportersVal: Array<? extends ITestReporter> = [];
    public set reporters(reporters: Array<? extends ITestReporter>) {
        reporters.forEach(function(reporter) {
            let dummy: Promise<any, ?> = reporter.register(); dummy;
        })
        this.reportersVal = reporters;
    }
    /**
     * Entrypoint to running tests. Called from a test runner with the test meta information. Any configured reporters
     * will get updated with progress of tests.
     */
    public async runGroups(testInfoObject: TestInfos, numTests: number=, scope: string=): ResultGroups {
        if (!testInfoObject) {
            throw new Error("TestController::runGroups called with a null testInfoObject");
        }
        let executor: TestExecutor = this.executor
          , reses: Array<ResultGroups> = []
          , res: ResultGroups
          , testInfos: Array<TestInfo> = testInfoObject.testDescriptors
          , batchedTestInfos: Array<Array<TestInfo>> = []
          , ii: number = 0
          , testInfosBatch: Array<TestInfo>
          , instrumentedTestsBatch2d: Array<Array<InstrumentedTest>>
          , instrumentedTestsBatch: Array<InstrumentedTest>
        ;
        if (numTests === undefined) {
            numTests = testInfoObject.testDescriptors.reduce(function(acc, info: TestInfo) {
                return acc + info.testMethods.length;
            }, 0)
        }
        testInfoObject.testDescriptors = testInfoObject.testDescriptors.sort((x: TestInfo,y: TestInfo) => {
            let xVal = x.fqn ? x.fqn: x.module
            , yVal = y.fqn ? y.fqn: y.module
            return xVal.localeCompare(yVal);
        })
        try {
            await this.spy.testingStarted.dispatch([testInfos.length, testInfoObject.sessionId, numTests]);
        } catch(ex) {
            console.log("testingStarted.dispatch is bad", ex);
        }
        
        //runs test groups in batches
        for (ii = 0; ii < testInfos.length; ii += TestController.MAX_GROUPS_PER_TEST_BATCH) {
            batchedTestInfos.push(
                testInfos.slice(ii, ii + TestController.MAX_GROUPS_PER_TEST_BATCH)
            );
        }
        
        for (ii = 0, instrumentedTestsBatch = []; ii < batchedTestInfos.length; ++ii, instrumentedTestsBatch = []) {
            testInfosBatch = batchedTestInfos[ii]
            try {
                instrumentedTestsBatch2d = (await Promise.resolve(await Promise.all(testInfosBatch.map(this.instrument.bind(this)).filter(function(test) {
                    return test !== null;
                })))) as Array<Array<InstrumentedTest>>;
                
                //flatten array
                instrumentedTestsBatch =  (Array.prototype.concat.apply([], instrumentedTestsBatch2d) as Array<InstrumentedTest>)
                res = await executor.runTestsAsync(instrumentedTestsBatch, scope);
                reses.push(res);
            } catch (er) {
                console.error(er);
                throw er;
            }
        };
        res = ResultGroups.concatArray(reses);
        await this.spy.testingFinished.dispatch([res]);
        return res;
    }
    /**
     * creates special group to show errors that occur prior to group being run
     */
    private async errorGroup(info: TestInfo, loadPath: string, testObject: InstrumentedTest=, originalError: any=) {
        let error = originalError ? originalError: new Error("could not load test " + loadPath)
          , that = this
          , testResult: TestResult
          , testResults: Array<TestResult> = []
          , unknownTest: TestMethodDescriptor = new TestMethodDescriptor({
                                                string name: ""
                                                , type:TestFunctionType.TEST
                                                , value:function(){}
                                             });
            ;
        if (!testObject) {
            testObject = new InstrumentedTest();
            info.module = info.module || "";
            info.fqn = info.fqn || info.module.replace(/\//g, ".") + ".*";
            testObject.load(N4Object, info).setTestObject(new N4Object());
            testObject.tests = info.testMethods? info.testMethods.map(
                function(methName: string):TestMethodDescriptor {
                    return new TestMethodDescriptor({
                                                  string name: methName
                                                , type: TestFunctionType.TEST
                                                , value: function(){}
                                             });
            }):[unknownTest]

        }
        await this.spy.groupStarted.dispatch([testObject]);

        for (let test of testObject.tests) {
            await that.spy.testStarted.dispatch([testObject, test]);
            testResult = TestExecutor.generateFailureTestResult(error, "could not load test " + loadPath);
            testResults.push(testResult);
            await that.spy.testFinished.dispatch([testObject, test, testResult]);
        }
        await this.spy.groupFinished.dispatch([testObject, new ResultGroup(testResults, `${info.fqn} ${testObject.parameterizedName}`)]);
        return true;
    }

    private async instrument(info: TestInfo): Array<InstrumentedTest> {
        let parts: Array<string>
          , ctorName: string
          , groupModule: any+
          , testClasses: Array<constructor{N4Object}>
          , testClass: constructor{N4Object}
          , instrumentedTestObjects: Array<IInstrumentedTest> = []
          , moduleName: string
        ;

        parts = info.fqn.split("/");
        ctorName = parts.pop();
        moduleName = parts.join("/");
        try {
            groupModule = System.throwPendingError(await System.import(info.origin +  "/" + moduleName));
        } catch (ex) {
            await this.errorGroup(info, info.origin +  "/" + moduleName,null, ex);
            return null;
        }
        testClasses = [groupModule[ctorName] as constructor{N4Object}];
        if (testClasses) {
            instrumentedTestObjects = [];
            for (testClass of testClasses) {
                if (!testClass) {
                    await this.errorGroup(info, info.origin +  "/" + moduleName,null, new Error("Empty object loaded (is the test class exported?)"));
                    continue;
                } else {

                    try {
                        let diClass = testClass;
                        let testInjector: N4Injector;
                        let testType = testClass.n4type;

                        for (; testType; testType = testType.n4superType, diClass = Object.getPrototypeOf(diClass) as constructor{N4Object}) {
                            if (testType.allAnnotations("GenerateInjector").length) {
                                if (testType.allAnnotations("WithParentInjector").length) {
                                    if (!this.injector.canBeParentOf(diClass)) {
                                        throw new PreconditionNotMet("Test called with incompatible parent injector");
                                    }
                                    testInjector = N4Injector.of.call(N4Injector, diClass, this.injector) as N4Injector;
                                }else{
                                    testInjector = N4Injector.of.call(N4Injector, diClass) as N4Injector;
                                }
                                break;
                            }
                        }
                        if (!testType) {
                            testInjector = this.injector;
                        }
                        let classITO = InstrumentedTest.getInstrumentedTest(testClass, info, testInjector);
                        instrumentedTestObjects.push(classITO);
                    } catch(ex2) {
                        instrumentedTestObjects.push(
                            new InstrumentedTest(testClass, info)
                                .setTestObject(new N4Object())
                                .setError(ex2)
                        );
                    }
                }
            }
        } else {
            await this.errorGroup(info, info.origin +  "/" + parts.join("/"));
            return null;
        }
        let arr = (await Promise.all(instrumentedTestObjects)).filter((item) => item !== null);
        return arr as Array<InstrumentedTest>;
    }
}
/*
-*- mode: typescript;-*-
*/

