// Generated by N4JS transpiler; for copyright see original N4JS source file.

(function(System) {
	'use strict';
	System.register([
		'org.eclipse.n4js.mangelhaft/src-gen/org/eclipse/n4js/mangelhaft/types/DispatchQueue'
	], function($n4Export) {
		var DispatchQueue, TestSpy;
		TestSpy = function TestSpy() {
			this.testingStarted = new DispatchQueue();
			this.parameterizedGroupsStarted = new DispatchQueue();
			this.parameterizedGroupsFinished = new DispatchQueue();
			this.groupStarted = new DispatchQueue();
			this.testStarted = new DispatchQueue();
			this.testFinished = new DispatchQueue();
			this.groupFinished = new DispatchQueue();
			this.testingFinished = new DispatchQueue();
		};
		$n4Export('TestSpy', TestSpy);
		return {
			setters: [
				function($exports) {
					// org.eclipse.n4js.mangelhaft/src-gen/org/eclipse/n4js/mangelhaft/types/DispatchQueue
					DispatchQueue = $exports.DispatchQueue;
				}
			],
			execute: function() {
				$makeClass(TestSpy, N4Object, [], {
					reset: {
						value: function reset___n4() {
							let field, sig, that = this;
							;
							for(field in this) {
								if (this.hasOwnProperty(field)) {
									sig = that[field];
									sig.removeAll();
								}
							}
							return this;
						}
					},
					testingStarted: {
						value: undefined,
						writable: true
					},
					parameterizedGroupsStarted: {
						value: undefined,
						writable: true
					},
					parameterizedGroupsFinished: {
						value: undefined,
						writable: true
					},
					groupStarted: {
						value: undefined,
						writable: true
					},
					testStarted: {
						value: undefined,
						writable: true
					},
					testFinished: {
						value: undefined,
						writable: true
					},
					groupFinished: {
						value: undefined,
						writable: true
					},
					testingFinished: {
						value: undefined,
						writable: true
					}
				}, {}, function(instanceProto, staticProto) {
					var metaClass = new N4Class({
						name: 'TestSpy',
						origin: 'org.eclipse.n4js.mangelhaft',
						fqn: 'org.eclipse.n4js.mangelhaft.types.TestSpy.TestSpy',
						n4superType: N4Object.n4type,
						allImplementedInterfaces: [],
						ownedMembers: [
							new N4DataField({
								name: 'testingStarted',
								isStatic: false,
								annotations: []
							}),
							new N4DataField({
								name: 'parameterizedGroupsStarted',
								isStatic: false,
								annotations: []
							}),
							new N4DataField({
								name: 'parameterizedGroupsFinished',
								isStatic: false,
								annotations: []
							}),
							new N4DataField({
								name: 'groupStarted',
								isStatic: false,
								annotations: []
							}),
							new N4DataField({
								name: 'testStarted',
								isStatic: false,
								annotations: []
							}),
							new N4DataField({
								name: 'testFinished',
								isStatic: false,
								annotations: []
							}),
							new N4DataField({
								name: 'groupFinished',
								isStatic: false,
								annotations: []
							}),
							new N4DataField({
								name: 'testingFinished',
								isStatic: false,
								annotations: []
							}),
							new N4Method({
								name: 'reset',
								isStatic: false,
								jsFunction: instanceProto['reset'],
								annotations: []
							})
						],
						consumedMembers: [],
						annotations: [
							new N4Annotation({
								name: 'Singleton',
								details: []
							})
						]
					});
					return metaClass;
				});
				Object.defineProperty(TestSpy, '$di', {
					value: {
						scope: 'Singleton',
						fieldsInjectedTypes: []
					}
				});
			}
		};
	});
})(typeof module !== 'undefined' && module.exports ? require('n4js-node').System(require, module) : System);
//# sourceMappingURL=TestSpy.map
