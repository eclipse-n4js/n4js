module org.eclipse.n4js.json.GenerateJSON

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var runtimeProjectName = "org.eclipse.n4js.json"
var runtimeProjectPath = "${rootPath}/${runtimeProjectName}"

/**
 * Workflow to generate the language infrastructure of the JSON language.
 */
Workflow {
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = runtimeProjectName
				rootPath = rootPath
				genericIde = {
					enabled = true
					name = "${runtimeProjectName}.ui"
					root = "${runtimeProjectPath}.ui"
				}
				eclipsePlugin = {
					enabled = true
				}
				createEclipseMetaData = false
			}
			code = {
				encoding = "UTF-8"
				// same as org.eclipse.n4js.releng.utils.license.LicenseTemplate.COPYRIGHT_HEADER
				// should re-use in the long run
				fileHeader = "/**\n * Copyright (c) 2017 NumberFour AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   NumberFour AG - Initial API and implementation\n */"
				lineDelimiter = '\n'
				preferXtendStubs = false
			}
		}
		language = StandardLanguage {
			name = "org.eclipse.n4js.json.JSON"
			fileExtensions = "json"
			
			referencedResource = "platform:/resource/org.eclipse.n4js.json.model/model/JSON.xcore"

			// make sure nothing is inherited from the Unicode Language (but the grammar)
			contentAssist = {
				inheritImplementation = false
			}
		
			scopeProvider = {
				inheritImplementation = false
				generateStub = false
			}
			
			fragment = validation.ValidatorFragment2 {
				inheritImplementation = false
			}

			serializer = {
				generateStub = false
			}
			
			validator = {}
			
			// formatter API
			fragment = formatting.Formatter2Fragment2 {
				generateXtendStub = true
			}
		}
	}
}
