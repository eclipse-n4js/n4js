/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
 
grammar org.eclipse.n4js.json.JSON 
	with org.eclipse.n4js.common.unicode.Unicode
	hidden (WS, EOL, ML_COMMENT, SL_COMMENT)  

import "http://www.eclipse.org/n4js/JSON"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

JSONDocument: {JSONDocument}
	(content=JSONValue)?
;

JSONObject:
	'{' nameValuePairs+=NameValuePair (',' nameValuePairs+=NameValuePair)* '}'
	| {JSONObject} '{' '}'
;

NameValuePair:
	name=STRING 
	':'
	value=JSONValue
;

JSONArray:
	'[' elements+=JSONValue (',' elements+=JSONValue)* ']'
	| {JSONArray} '[' ']'
;

JSONValue:
	  JSONObject
	| JSONArray
	| JSONStringLiteral
	| JSONNumericLiteral
	| JSONNullLiteral
	| JSONBooleanLiteral
;

JSONStringLiteral:
	value=STRING
;

JSONNumericLiteral:
	value=NUMBER
;

JSONBooleanLiteral:
	{JSONBooleanLiteral} (booleanValue?='true' | 'false')
;

JSONNullLiteral:
	{JSONNullLiteral} 'null'
;

terminal NUMBER returns ecore::EBigDecimal:
	DOUBLE | INT
;

terminal STRING:
	'"' DOUBLE_STRING_CHAR* '"'
;

terminal fragment DOUBLE_STRING_CHAR:
	  !(LINE_TERMINATOR_FRAGMENT | '"' | '\\' | '\u0000'..'\u001F')
	| '\\' (LINE_TERMINATOR_SEQUENCE_FRAGMENT | !LINE_TERMINATOR_FRAGMENT)?
;

// does not include '\u2028' | '\u2029' as a subtle difference between JSON and ECMAScript (cf. overridden rule)  
@Override 
terminal fragment LINE_TERMINATOR_FRAGMENT:
	'\u000A' | '\u000D'
;

// does not include '\u2028' | '\u2029' as a subtle difference to ECMAScript (cf. overridden rule)
@Override 
terminal fragment LINE_TERMINATOR_SEQUENCE_FRAGMENT:
	'\u000A' | '\u000D' '\u000A'?
;
terminal DOUBLE returns ecore::EBigDecimal:
	'-'? DECIMAL_INTEGER_LITERAL_FRAGMENT '.' DECIMAL_DIGIT_FRAGMENT DECIMAL_DIGIT_FRAGMENT* EXPONENT_PART?
;

terminal INT returns ecore::EBigDecimal:
	'-'? DECIMAL_INTEGER_LITERAL_FRAGMENT EXPONENT_PART?;

terminal fragment EXPONENT_PART:
	('e' | 'E') SIGNED_INT
;

terminal fragment SIGNED_INT:
	('+' | '-')? DECIMAL_DIGIT_FRAGMENT+
;

// multi-line comments
terminal ML_COMMENT:
	ML_COMMENT_FRAGMENT;

// single-line comments
terminal SL_COMMENT:
	'//' (!LINE_TERMINATOR_FRAGMENT)*;

terminal WS:
	WHITESPACE_FRAGMENT+;

terminal EOL:
	LINE_TERMINATOR_SEQUENCE_FRAGMENT;