/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@Ecore(nsURI="http://www.eclipse.org/n4js/n4mf/N4MF")
@GenModel(fileExtensions="n4mf",
// As with IDE-1456 removing the modelPluginID to avoid IOE with 'The path' ... 'is unmapped.' in
// the maven plugin: "xtext-maven-plugin:2.8.2:generate"
//	modelPluginID="org.eclipse.n4js.n4mf.model",
	modelDirectory="/org.eclipse.n4js.n4mf.model/emf-gen",
	forceOverwrite="true",
	updateClasspath="false",
	complianceLevel="8.0",
	copyrightFields="false",
	// both copyrightText and documentation are required to align the output of the MWE2 and incremental builder (see GH-841)
	copyrightText="Copyright (c) 2016 NumberFour AG.\nAll rights reserved. This program and the accompanying materials\nare made available under the terms of the Eclipse Public License v1.0\nwhich accompanies this distribution, and is available at\nhttp://www.eclipse.org/legal/epl-v10.html\n\nContributors:\n  NumberFour AG - Initial API and implementation",
	documentation="*\nCopyright (c) 2016 NumberFour AG.\nAll rights reserved. This program and the accompanying materials\nare made available under the terms of the Eclipse Public License v1.0\nwhich accompanies this distribution, and is available at\nhttp://www.eclipse.org/legal/epl-v10.html\n * Contributors:\n  NumberFour AG - Initial API and implementation",
	language="")
package org.eclipse.n4js.n4mf

import org.eclipse.emf.common.util.BasicEList
import org.eclipse.n4js.utils.io.FileUtils

class ProjectDescription {
	String projectId
	String vendorId
	String vendorName
	contains DeclaredVersion projectVersion
	ProjectType projectType
	String mainModule
	contains ProjectReference extendedRuntimeEnvironment
	contains ProjectReference[] providedRuntimeLibraries
	contains ProjectReference[] requiredRuntimeLibraries
	contains ProjectDependency[] projectDependencies
	String implementationId
	contains ProjectReference[] implementedProjects
	contains BootstrapModule[] initModules
	contains BootstrapModule execModule
	String outputPathRaw
	String[] libraryPathsRaw
	String[] resourcePathsRaw
	contains SourceContainerDescription[] sourceContainers
	contains ModuleFilter[] moduleFilters
	contains ProjectDependency[] testedProjects
	ModuleLoader moduleLoader
	/* 
	 * Tells if the project represented by this project description has a nested
	 * "node_modules" folder, i.e. a folder named "node_modules" located right next
	 * to the package.json file.
	 */
	boolean hasNestedNodeModulesFolder

	/**
	 * Indicates whether the underlying project description explicitly configured
	 * the project to be an N4JS project (e.g. includes n4js section). 
	 */
	boolean hasN4JSNature

	op String getOutputPath() {
		return FileUtils.normalizeDotWhenEmpty(outputPathRaw);
	}

	op void setOutputPath(String newOutputPath) {
		this.outputPathRaw = newOutputPath;
	}

	op String[] getLibraryPaths() {
		val paths = new BasicEList(libraryPathsRaw.length());
		for (String pathRaw : libraryPathsRaw) {
			val normalizedPath = FileUtils.normalizeDotWhenEmpty(pathRaw);
			paths.add(normalizedPath);
		}
		return paths;
	}

	op String[] getResourcePaths() {
		val paths = new BasicEList(resourcePathsRaw.length());
		for (String pathRaw : resourcePathsRaw) {
			val normalizedPath = FileUtils.normalizeDotWhenEmpty(pathRaw);
			paths.add(normalizedPath);
		}
		return paths;
	}
}

/**
 * All elements of the declared version not set manually will be set automatically to 0.
 *
 * To be later validated: The length of the major, minor and micro numbers is
 * additionally limited to four digits.
 */
class DeclaredVersion {
	int major
	int minor
	int micro
	String qualifier
	String buildMetaData
}

/**
 * The type of a project characterizes the later usage of the project. This information
 * is used later to decide how to bundle a project.
 * <description>
 * <dt>application			</dt><dd>10.2.1. Apps</dd>
 * <dt>processor 			</dt><dd>10.2.2. Processors</dd>
 * <dt>library				</dt><dd>10.2.3. Libraries</dd>
 * <dt>runtimeEnvironment	</dt><dd>10.2.5. Runtime Environment</dd>
 * <dt>runtimeLibrary		</dt><dd>10.2.5. Runtime Library</dd>
 * </description>
 */
enum ProjectType {
	VALIDATION = 0,
	APPLICATION = 1,
	PROCESSOR = 2,
	LIBRARY = 3,
	API = 4,
	RUNTIME_ENVIRONMENT = 5,
	RUNTIME_LIBRARY = 6,
	TEST = 7
}

/**
 * List the in the project contained generation aware source folders categorized by their later usage.
 */
class SourceContainerDescription {
	SourceContainerType sourceContainerType
	String[] pathsRaw

	/**
	 * Compares the current source fragment instance with the {@code other} one based on the
	 * natural ordering of the wrapped {@link SourceFragmentType fragment type}. The semantic of the
	 * return value of this compare method is identical to the specification of the {@link Comparable}
	 * interface.
	 */
	op int compareByFragmentType(SourceContainerDescription other) {
		if (null === other) {
			return -1;
		}
		if (null === sourceContainerType) {
			return if (null === other.sourceContainerType) 0 else 1;
		}
		return sourceContainerType.compareTo(other.sourceContainerType);
	}

	op String[] getPaths() {
		val paths = new BasicEList(pathsRaw.length());
		for (String pathRaw : pathsRaw) {
			val normalizedPath = FileUtils.normalizeDotWhenEmpty(pathRaw);
			paths.add(normalizedPath);
		}
		return paths;
	}

}

/**
 * Categorizes a source fragment to either contain sources files (SOURCE),
 * tests (TEST) or external classes (EXTERNAL).
 */
enum SourceContainerType {
	SOURCE = 0,
	TEST = 1,
	EXTERNAL = 2
}

/**
 * Lists the filters that add special treatment to some of the files regarding
 * validation, compilation and mapping of implementation
 */
class ModuleFilter {
	ModuleFilterType moduleFilterType
	contains ModuleFilterSpecifier[] moduleSpecifiers
}

class BootstrapModule {
	String moduleSpecifierWithWildcard
	String sourcePath
}

/**
 * Categorizes a filter to mark paths/files to be treated in a special way:
 * all files included in NO_VALIDATE won't be validated, for all files
 * included in NO_MODULE_WRAPPING the modules won't be wrapped and
 * IMPL_PROV_BY_RUNTIME specifies the path pattern to look up the
 * implementation provided by the runtime.
 */
enum ModuleFilterType {
	NO_VALIDATE = 0,
	NO_MODULE_WRAPPING = 1
}

class ProjectReference {

	/**
	 * the project ID
	 */
	String projectId

	// TODO is following property and operation really required?
	/**
	 * the vendor ID
	 */
	String declaredVendorId
	op String getVendorId() {
		return if (declaredVendorId !== null) declaredVendorId else (eContainer as ProjectDescription)?.vendorId;
	}

	/**
	 * COMPILE by default
	 */
	op ProjectDependencyScope getScope() {
		return ProjectDependencyScope.COMPILE
	}
}

class ModuleFilterSpecifier {
	String moduleSpecifierWithWildcard
	String sourcePath
}

/**
 * Defines a unique project dependency by identifying a project by
 * projectId. The allowed version can be defined either in a range by
 * stating lower and upper version bound or by stating only one version.
 * So lowerVersionBound and upperVersionBound should be null if exactVersion
 * is and vice versa. The project dependency scope defines whether the
 * dependency affects runtime or is only required for testing.
 */
class ProjectDependency extends ProjectReference {
	contains VersionConstraint versionConstraint

	ProjectDependencyScope declaredScope

	op ProjectDependencyScope getScope() {
		declaredScope ?: ProjectDependencyScope.COMPILE
	}
}

/**
 * A version bound describes a side of an version range.
 * A version bound can be inclusive or exclusive,
 * so e.g. in (1.0.0, 2.0.0] 1.0.0 is excluded,
 * but 2.0.0 is included, so all versions x with
 * 1.0.0 < x <= 2.0.0 are allowed. If only a lowerVersion
 * is assigned this means [version, infinity).
 */
class VersionConstraint {
	boolean exclLowerBound
	contains DeclaredVersion lowerVersion
	boolean exclUpperBound
	contains DeclaredVersion upperVersion
}

/**
 * To define if a dependency is only required while executing testing or
 * if it is a dependency at runtime (COMPILE).
 */
enum ProjectDependencyScope {
	COMPILE = 0,
	TEST = 1
}

/*
 * One of the Javascript module loading techniques.
 */
enum ModuleLoader {
	N4JS = 0,
	COMMONJS = 1,
	NODE_BUILTIN = 2
}
